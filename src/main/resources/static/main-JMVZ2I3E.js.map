{"version":3,"sources":["node_modules/@angular/core/fesm2022/not_found.mjs","node_modules/@angular/core/fesm2022/signal.mjs","node_modules/rxjs/dist/esm/internal/util/isFunction.js","node_modules/rxjs/dist/esm/internal/util/createErrorClass.js","node_modules/rxjs/dist/esm/internal/util/UnsubscriptionError.js","node_modules/rxjs/dist/esm/internal/util/arrRemove.js","node_modules/rxjs/dist/esm/internal/Subscription.js","node_modules/rxjs/dist/esm/internal/config.js","node_modules/rxjs/dist/esm/internal/scheduler/timeoutProvider.js","node_modules/rxjs/dist/esm/internal/util/reportUnhandledError.js","node_modules/rxjs/dist/esm/internal/util/noop.js","node_modules/rxjs/dist/esm/internal/NotificationFactories.js","node_modules/rxjs/dist/esm/internal/util/errorContext.js","node_modules/rxjs/dist/esm/internal/Subscriber.js","node_modules/rxjs/dist/esm/internal/symbol/observable.js","node_modules/rxjs/dist/esm/internal/util/identity.js","node_modules/rxjs/dist/esm/internal/util/pipe.js","node_modules/rxjs/dist/esm/internal/Observable.js","node_modules/rxjs/dist/esm/internal/util/lift.js","node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","node_modules/rxjs/dist/esm/internal/operators/refCount.js","node_modules/rxjs/dist/esm/internal/observable/ConnectableObservable.js","node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js","node_modules/rxjs/dist/esm/internal/Subject.js","node_modules/rxjs/dist/esm/internal/BehaviorSubject.js","node_modules/rxjs/dist/esm/internal/observable/empty.js","node_modules/rxjs/dist/esm/internal/util/isScheduler.js","node_modules/rxjs/dist/esm/internal/util/args.js","node_modules/tslib/tslib.es6.mjs","node_modules/rxjs/dist/esm/internal/util/isArrayLike.js","node_modules/rxjs/dist/esm/internal/util/isPromise.js","node_modules/rxjs/dist/esm/internal/util/isInteropObservable.js","node_modules/rxjs/dist/esm/internal/util/isAsyncIterable.js","node_modules/rxjs/dist/esm/internal/util/throwUnobservableError.js","node_modules/rxjs/dist/esm/internal/symbol/iterator.js","node_modules/rxjs/dist/esm/internal/util/isIterable.js","node_modules/rxjs/dist/esm/internal/util/isReadableStreamLike.js","node_modules/rxjs/dist/esm/internal/observable/innerFrom.js","node_modules/rxjs/dist/esm/internal/util/executeSchedule.js","node_modules/rxjs/dist/esm/internal/operators/observeOn.js","node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js","node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js","node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js","node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js","node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js","node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js","node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js","node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js","node_modules/rxjs/dist/esm/internal/observable/from.js","node_modules/rxjs/dist/esm/internal/observable/of.js","node_modules/rxjs/dist/esm/internal/observable/throwError.js","node_modules/rxjs/dist/esm/internal/util/isObservable.js","node_modules/rxjs/dist/esm/internal/util/EmptyError.js","node_modules/rxjs/dist/esm/internal/operators/map.js","node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js","node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js","node_modules/rxjs/dist/esm/internal/util/createObject.js","node_modules/rxjs/dist/esm/internal/observable/combineLatest.js","node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js","node_modules/rxjs/dist/esm/internal/operators/mergeMap.js","node_modules/rxjs/dist/esm/internal/operators/mergeAll.js","node_modules/rxjs/dist/esm/internal/operators/concatAll.js","node_modules/rxjs/dist/esm/internal/observable/concat.js","node_modules/rxjs/dist/esm/internal/observable/defer.js","node_modules/rxjs/dist/esm/internal/observable/forkJoin.js","node_modules/rxjs/dist/esm/internal/operators/filter.js","node_modules/rxjs/dist/esm/internal/operators/catchError.js","node_modules/rxjs/dist/esm/internal/operators/scanInternals.js","node_modules/rxjs/dist/esm/internal/operators/concatMap.js","node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js","node_modules/rxjs/dist/esm/internal/operators/take.js","node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js","node_modules/rxjs/dist/esm/internal/operators/finalize.js","node_modules/rxjs/dist/esm/internal/operators/first.js","node_modules/rxjs/dist/esm/internal/operators/takeLast.js","node_modules/rxjs/dist/esm/internal/operators/last.js","node_modules/rxjs/dist/esm/internal/operators/scan.js","node_modules/rxjs/dist/esm/internal/operators/startWith.js","node_modules/rxjs/dist/esm/internal/operators/switchMap.js","node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","node_modules/rxjs/dist/esm/internal/operators/tap.js","node_modules/@angular/core/fesm2022/untracked.mjs","node_modules/@angular/core/fesm2022/root_effect_scheduler.mjs","node_modules/@angular/core/fesm2022/attribute.mjs","node_modules/@angular/core/fesm2022/debug_node.mjs","node_modules/@angular/core/fesm2022/resource.mjs","node_modules/@angular/core/fesm2022/primitives/event-dispatch.mjs","node_modules/@angular/core/fesm2022/core.mjs","node_modules/@angular/common/fesm2022/location.mjs","node_modules/@angular/common/fesm2022/common_module.mjs","node_modules/@angular/common/fesm2022/xhr.mjs","node_modules/@angular/common/fesm2022/common.mjs","node_modules/@angular/platform-browser/fesm2022/dom_renderer.mjs","node_modules/@angular/platform-browser/fesm2022/browser.mjs","node_modules/@angular/common/fesm2022/module.mjs","node_modules/@angular/common/fesm2022/http.mjs","node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs","node_modules/@angular/router/fesm2022/router2.mjs","node_modules/@angular/router/fesm2022/router_module.mjs","src/app/api/services/api-service.ts","node_modules/@angular/forms/fesm2022/forms.mjs","src/app/api/features/commit/commit-component/commit-component.ts","src/app/api/features/commit/commit-component/commit-component.html","src/app/api/features/home/homepage-component/homepage-component.ts","src/app/api/features/home/homepage-component/homepage-component.html","src/app/api/shared/results-success-component/results-success-component.ts","src/app/api/shared/results-success-component/results-success-component.html","src/app/api/shared/results-error-component/results-error-component.ts","src/app/api/shared/results-error-component/results-error-component.html","src/app/api/features/restore/restore-component/restore-component.ts","src/app/api/features/restore/restore-component/restore-component.html","src/app/app.routes.ts","src/app/app.config.ts","src/app/app.ts","src/app/app.html","src/main.ts"],"sourcesContent":["/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector = undefined;\nfunction getCurrentInjector() {\n  return _currentInjector;\n}\nfunction setCurrentInjector(injector) {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\nfunction inject(token, options) {\n  const currentInjector = getCurrentInjector();\n  if (!currentInjector) {\n    throw new Error('Current injector is not set.');\n  }\n  if (!token.ɵprov) {\n    throw new Error('Token is not an injectable');\n  }\n  return currentInjector.retrieve(token, options);\n}\n\n/**\n * Value returned if the key-value pair couldn't be found in the context\n * hierarchy.\n */\nconst NOT_FOUND = /*#__PURE__*/Symbol('NotFound');\n/**\n * Error thrown when the key-value pair couldn't be found in the context\n * hierarchy. Context can be attached below.\n */\nclass NotFoundError extends Error {\n  name = 'ɵNotFound';\n  constructor(message) {\n    super(message);\n  }\n}\n/**\n * Type guard for checking if an unknown value is a NotFound.\n */\nfunction isNotFound(e) {\n  return e === NOT_FOUND || e?.name === 'ɵNotFound';\n}\nexport { NOT_FOUND, NotFoundError, getCurrentInjector, inject, isNotFound, setCurrentInjector };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * The default equality function used for `signal` and `computed`, which uses referential equality.\n */\nfunction defaultEquals(a, b) {\n  return Object.is(a, b);\n}\n\n/**\n * The currently active consumer `ReactiveNode`, if running code in a reactive context.\n *\n * Change this via `setActiveConsumer`.\n */\nlet activeConsumer = null;\nlet inNotificationPhase = false;\n/**\n * Global epoch counter. Incremented whenever a source signal is set.\n */\nlet epoch = 1;\n/**\n * If set, called after a producer `ReactiveNode` is created.\n */\nlet postProducerCreatedFn = null;\n/**\n * Symbol used to tell `Signal`s apart from other functions.\n *\n * This can be used to auto-unwrap signals in various cases, or to auto-wrap non-signal values.\n */\nconst SIGNAL = /* @__PURE__ */Symbol('SIGNAL');\nfunction setActiveConsumer(consumer) {\n  const prev = activeConsumer;\n  activeConsumer = consumer;\n  return prev;\n}\nfunction getActiveConsumer() {\n  return activeConsumer;\n}\nfunction isInNotificationPhase() {\n  return inNotificationPhase;\n}\nfunction isReactive(value) {\n  return value[SIGNAL] !== undefined;\n}\nconst REACTIVE_NODE = {\n  version: 0,\n  lastCleanEpoch: 0,\n  dirty: false,\n  producers: undefined,\n  producersTail: undefined,\n  consumers: undefined,\n  consumersTail: undefined,\n  recomputing: false,\n  consumerAllowSignalWrites: false,\n  consumerIsAlwaysLive: false,\n  kind: 'unknown',\n  producerMustRecompute: () => false,\n  producerRecomputeValue: () => {},\n  consumerMarkedDirty: () => {},\n  consumerOnSignalRead: () => {}\n};\n/**\n * Called by implementations when a producer's signal is read.\n */\nfunction producerAccessed(node) {\n  if (inNotificationPhase) {\n    throw new Error(typeof ngDevMode !== 'undefined' && ngDevMode ? `Assertion error: signal read during notification phase` : '');\n  }\n  if (activeConsumer === null) {\n    // Accessed outside of a reactive context, so nothing to record.\n    return;\n  }\n  activeConsumer.consumerOnSignalRead(node);\n  const prevProducerLink = activeConsumer.producersTail;\n  // If the last producer we accessed is the same as the current one, we can skip adding a new\n  // link\n  if (prevProducerLink !== undefined && prevProducerLink.producer === node) {\n    return;\n  }\n  let nextProducerLink = undefined;\n  const isRecomputing = activeConsumer.recomputing;\n  if (isRecomputing) {\n    // If we're incrementally rebuilding the producers list, we want to check if the next producer\n    // in the list is the same as the one we're trying to add.\n    // If the previous producer is defined, then the next producer is just the one that follows it.\n    // Otherwise, we should check the head of the producers list (the first node that we accessed the last time this consumer was run).\n    nextProducerLink = prevProducerLink !== undefined ? prevProducerLink.nextProducer : activeConsumer.producers;\n    if (nextProducerLink !== undefined && nextProducerLink.producer === node) {\n      // If the next producer is the same as the one we're trying to add, we can just update the\n      // last read version, update the tail of the producers list of this rerun, and return.\n      activeConsumer.producersTail = nextProducerLink;\n      nextProducerLink.lastReadVersion = node.version;\n      return;\n    }\n  }\n  const prevConsumerLink = node.consumersTail;\n  // If the producer we're accessing already has a link to this consumer, we can skip adding a new\n  // link. This can short circuit the creation of a new link in the case where the consumer reads alternating ReeactiveNodes\n  if (prevConsumerLink !== undefined && prevConsumerLink.consumer === activeConsumer && (\n  // However, we have to make sure that the link we've discovered isn't from a node that is incrementally rebuilding its producer list\n  !isRecomputing || isValidLink(prevConsumerLink, activeConsumer))) {\n    // If we found an existing link to the consumer we can just return.\n    return;\n  }\n  // If we got here, it means that we need to create a new link between the producer and the consumer.\n  const isLive = consumerIsLive(activeConsumer);\n  const newLink = {\n    producer: node,\n    consumer: activeConsumer,\n    // instead of eagerly destroying the previous link, we delay until we've finished recomputing\n    // the producers list, so that we can destroy all of the old links at once.\n    nextProducer: nextProducerLink,\n    prevConsumer: prevConsumerLink,\n    lastReadVersion: node.version,\n    nextConsumer: undefined\n  };\n  activeConsumer.producersTail = newLink;\n  if (prevProducerLink !== undefined) {\n    prevProducerLink.nextProducer = newLink;\n  } else {\n    activeConsumer.producers = newLink;\n  }\n  if (isLive) {\n    producerAddLiveConsumer(node, newLink);\n  }\n}\n/**\n * Increment the global epoch counter.\n *\n * Called by source producers (that is, not computeds) whenever their values change.\n */\nfunction producerIncrementEpoch() {\n  epoch++;\n}\n/**\n * Ensure this producer's `version` is up-to-date.\n */\nfunction producerUpdateValueVersion(node) {\n  if (consumerIsLive(node) && !node.dirty) {\n    // A live consumer will be marked dirty by producers, so a clean state means that its version\n    // is guaranteed to be up-to-date.\n    return;\n  }\n  if (!node.dirty && node.lastCleanEpoch === epoch) {\n    // Even non-live consumers can skip polling if they previously found themselves to be clean at\n    // the current epoch, since their dependencies could not possibly have changed (such a change\n    // would've increased the epoch).\n    return;\n  }\n  if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {\n    // None of our producers report a change since the last time they were read, so no\n    // recomputation of our value is necessary, and we can consider ourselves clean.\n    producerMarkClean(node);\n    return;\n  }\n  node.producerRecomputeValue(node);\n  // After recomputing the value, we're no longer dirty.\n  producerMarkClean(node);\n}\n/**\n * Propagate a dirty notification to live consumers of this producer.\n */\nfunction producerNotifyConsumers(node) {\n  if (node.consumers === undefined) {\n    return;\n  }\n  // Prevent signal reads when we're updating the graph\n  const prev = inNotificationPhase;\n  inNotificationPhase = true;\n  try {\n    for (let link = node.consumers; link !== undefined; link = link.nextConsumer) {\n      const consumer = link.consumer;\n      if (!consumer.dirty) {\n        consumerMarkDirty(consumer);\n      }\n    }\n  } finally {\n    inNotificationPhase = prev;\n  }\n}\n/**\n * Whether this `ReactiveNode` in its producer capacity is currently allowed to initiate updates,\n * based on the current consumer context.\n */\nfunction producerUpdatesAllowed() {\n  return activeConsumer?.consumerAllowSignalWrites !== false;\n}\nfunction consumerMarkDirty(node) {\n  node.dirty = true;\n  producerNotifyConsumers(node);\n  node.consumerMarkedDirty?.(node);\n}\nfunction producerMarkClean(node) {\n  node.dirty = false;\n  node.lastCleanEpoch = epoch;\n}\n/**\n * Prepare this consumer to run a computation in its reactive context.\n *\n * Must be called by subclasses which represent reactive computations, before those computations\n * begin.\n */\nfunction consumerBeforeComputation(node) {\n  if (node) {\n    node.producersTail = undefined;\n    node.recomputing = true;\n  }\n  return setActiveConsumer(node);\n}\n/**\n * Finalize this consumer's state after a reactive computation has run.\n *\n * Must be called by subclasses which represent reactive computations, after those computations\n * have finished.\n */\nfunction consumerAfterComputation(node, prevConsumer) {\n  setActiveConsumer(prevConsumer);\n  if (!node) {\n    return;\n  }\n  node.recomputing = false;\n  // We've finished incrementally rebuilding the producers list, now if there are any producers\n  // that are after producersTail, they are stale and should be removed.\n  const producersTail = node.producersTail;\n  let toRemove = producersTail !== undefined ? producersTail.nextProducer : node.producers;\n  if (toRemove !== undefined) {\n    if (consumerIsLive(node)) {\n      // For each stale link, we first unlink it from the producers list of consumers\n      do {\n        toRemove = producerRemoveLiveConsumerLink(toRemove);\n      } while (toRemove !== undefined);\n    }\n    // Now, we can truncate the producers list to remove all stale links.\n    if (producersTail !== undefined) {\n      producersTail.nextProducer = undefined;\n    } else {\n      node.producers = undefined;\n    }\n  }\n}\n/**\n * Determine whether this consumer has any dependencies which have changed since the last time\n * they were read.\n */\nfunction consumerPollProducersForChange(node) {\n  // Poll producers for change.\n  for (let link = node.producers; link !== undefined; link = link.nextProducer) {\n    const producer = link.producer;\n    const seenVersion = link.lastReadVersion;\n    // First check the versions. A mismatch means that the producer's value is known to have\n    // changed since the last time we read it.\n    if (seenVersion !== producer.version) {\n      return true;\n    }\n    // The producer's version is the same as the last time we read it, but it might itself be\n    // stale. Force the producer to recompute its version (calculating a new value if necessary).\n    producerUpdateValueVersion(producer);\n    // Now when we do this check, `producer.version` is guaranteed to be up to date, so if the\n    // versions still match then it has not changed since the last time we read it.\n    if (seenVersion !== producer.version) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Disconnect this consumer from the graph.\n */\nfunction consumerDestroy(node) {\n  if (consumerIsLive(node)) {\n    // Drop all connections from the graph to this node.\n    let link = node.producers;\n    while (link !== undefined) {\n      link = producerRemoveLiveConsumerLink(link);\n    }\n  }\n  // Truncate all the linked lists to drop all connection from this node to the graph.\n  node.producers = undefined;\n  node.producersTail = undefined;\n  node.consumers = undefined;\n  node.consumersTail = undefined;\n}\n/**\n * Add `consumer` as a live consumer of this node.\n *\n * Note that this operation is potentially transitive. If this node becomes live, then it becomes\n * a live consumer of all of its current producers.\n */\nfunction producerAddLiveConsumer(node, link) {\n  const consumersTail = node.consumersTail;\n  const wasLive = consumerIsLive(node);\n  if (consumersTail !== undefined) {\n    link.nextConsumer = consumersTail.nextConsumer;\n    consumersTail.nextConsumer = link;\n  } else {\n    link.nextConsumer = undefined;\n    node.consumers = link;\n  }\n  link.prevConsumer = consumersTail;\n  node.consumersTail = link;\n  if (!wasLive) {\n    for (let link = node.producers; link !== undefined; link = link.nextProducer) {\n      producerAddLiveConsumer(link.producer, link);\n    }\n  }\n}\nfunction producerRemoveLiveConsumerLink(link) {\n  const producer = link.producer;\n  const nextProducer = link.nextProducer;\n  const nextConsumer = link.nextConsumer;\n  const prevConsumer = link.prevConsumer;\n  link.nextConsumer = undefined;\n  link.prevConsumer = undefined;\n  if (nextConsumer !== undefined) {\n    nextConsumer.prevConsumer = prevConsumer;\n  } else {\n    producer.consumersTail = prevConsumer;\n  }\n  if (prevConsumer !== undefined) {\n    prevConsumer.nextConsumer = nextConsumer;\n  } else {\n    producer.consumers = nextConsumer;\n    if (!consumerIsLive(producer)) {\n      let producerLink = producer.producers;\n      while (producerLink !== undefined) {\n        producerLink = producerRemoveLiveConsumerLink(producerLink);\n      }\n    }\n  }\n  return nextProducer;\n}\nfunction consumerIsLive(node) {\n  return node.consumerIsAlwaysLive || node.consumers !== undefined;\n}\nfunction runPostProducerCreatedFn(node) {\n  postProducerCreatedFn?.(node);\n}\nfunction setPostProducerCreatedFn(fn) {\n  const prev = postProducerCreatedFn;\n  postProducerCreatedFn = fn;\n  return prev;\n}\n// While a ReactiveNode is recomputing, it may not have destroyed previous links\n// This allows us to check if a given link will be destroyed by a reactivenode if it were to finish running immediately without accesing any more producers\nfunction isValidLink(checkLink, consumer) {\n  const producersTail = consumer.producersTail;\n  if (producersTail !== undefined) {\n    let link = consumer.producers;\n    do {\n      if (link === checkLink) {\n        return true;\n      }\n      if (link === producersTail) {\n        break;\n      }\n      link = link.nextProducer;\n    } while (link !== undefined);\n  }\n  return false;\n}\n\n/**\n * Create a computed signal which derives a reactive value from an expression.\n */\nfunction createComputed(computation, equal) {\n  const node = Object.create(COMPUTED_NODE);\n  node.computation = computation;\n  if (equal !== undefined) {\n    node.equal = equal;\n  }\n  const computed = () => {\n    // Check if the value needs updating before returning it.\n    producerUpdateValueVersion(node);\n    // Record that someone looked at this signal.\n    producerAccessed(node);\n    if (node.value === ERRORED) {\n      throw node.error;\n    }\n    return node.value;\n  };\n  computed[SIGNAL] = node;\n  if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    const debugName = node.debugName ? ' (' + node.debugName + ')' : '';\n    computed.toString = () => `[Computed${debugName}: ${node.value}]`;\n  }\n  runPostProducerCreatedFn(node);\n  return computed;\n}\n/**\n * A dedicated symbol used before a computed value has been calculated for the first time.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst UNSET = /* @__PURE__ */Symbol('UNSET');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * is in progress. Used to detect cycles in computation chains.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst COMPUTING = /* @__PURE__ */Symbol('COMPUTING');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * failed. The thrown error is cached until the computation gets dirty again.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst ERRORED = /* @__PURE__ */Symbol('ERRORED');\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst COMPUTED_NODE = /* @__PURE__ */(() => {\n  return {\n    ...REACTIVE_NODE,\n    value: UNSET,\n    dirty: true,\n    error: null,\n    equal: defaultEquals,\n    kind: 'computed',\n    producerMustRecompute(node) {\n      // Force a recomputation if there's no current value, or if the current value is in the\n      // process of being calculated (which should throw an error).\n      return node.value === UNSET || node.value === COMPUTING;\n    },\n    producerRecomputeValue(node) {\n      if (node.value === COMPUTING) {\n        // Our computation somehow led to a cyclic read of itself.\n        throw new Error(typeof ngDevMode !== 'undefined' && ngDevMode ? 'Detected cycle in computations.' : '');\n      }\n      const oldValue = node.value;\n      node.value = COMPUTING;\n      const prevConsumer = consumerBeforeComputation(node);\n      let newValue;\n      let wasEqual = false;\n      try {\n        newValue = node.computation();\n        // We want to mark this node as errored if calling `equal` throws; however, we don't want\n        // to track any reactive reads inside `equal`.\n        setActiveConsumer(null);\n        wasEqual = oldValue !== UNSET && oldValue !== ERRORED && newValue !== ERRORED && node.equal(oldValue, newValue);\n      } catch (err) {\n        newValue = ERRORED;\n        node.error = err;\n      } finally {\n        consumerAfterComputation(node, prevConsumer);\n      }\n      if (wasEqual) {\n        // No change to `valueVersion` - old and new values are\n        // semantically equivalent.\n        node.value = oldValue;\n        return;\n      }\n      node.value = newValue;\n      node.version++;\n    }\n  };\n})();\nfunction defaultThrowError() {\n  throw new Error();\n}\nlet throwInvalidWriteToSignalErrorFn = defaultThrowError;\nfunction throwInvalidWriteToSignalError(node) {\n  throwInvalidWriteToSignalErrorFn(node);\n}\nfunction setThrowInvalidWriteToSignalError(fn) {\n  throwInvalidWriteToSignalErrorFn = fn;\n}\n\n/**\n * If set, called after `WritableSignal`s are updated.\n *\n * This hook can be used to achieve various effects, such as running effects synchronously as part\n * of setting a signal.\n */\nlet postSignalSetFn = null;\n/**\n * Creates a `Signal` getter, setter, and updater function.\n */\nfunction createSignal(initialValue, equal) {\n  const node = Object.create(SIGNAL_NODE);\n  node.value = initialValue;\n  if (equal !== undefined) {\n    node.equal = equal;\n  }\n  const getter = () => signalGetFn(node);\n  getter[SIGNAL] = node;\n  if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    const debugName = node.debugName ? ' (' + node.debugName + ')' : '';\n    getter.toString = () => `[Signal${debugName}: ${node.value}]`;\n  }\n  runPostProducerCreatedFn(node);\n  const set = newValue => signalSetFn(node, newValue);\n  const update = updateFn => signalUpdateFn(node, updateFn);\n  return [getter, set, update];\n}\nfunction setPostSignalSetFn(fn) {\n  const prev = postSignalSetFn;\n  postSignalSetFn = fn;\n  return prev;\n}\nfunction signalGetFn(node) {\n  producerAccessed(node);\n  return node.value;\n}\nfunction signalSetFn(node, newValue) {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError(node);\n  }\n  if (!node.equal(node.value, newValue)) {\n    node.value = newValue;\n    signalValueChanged(node);\n  }\n}\nfunction signalUpdateFn(node, updater) {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError(node);\n  }\n  signalSetFn(node, updater(node.value));\n}\nfunction runPostSignalSetFn(node) {\n  postSignalSetFn?.(node);\n}\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst SIGNAL_NODE = /* @__PURE__ */(() => {\n  return {\n    ...REACTIVE_NODE,\n    equal: defaultEquals,\n    value: undefined,\n    kind: 'signal'\n  };\n})();\nfunction signalValueChanged(node) {\n  node.version++;\n  producerIncrementEpoch();\n  producerNotifyConsumers(node);\n  postSignalSetFn?.(node);\n}\nexport { COMPUTING, ERRORED, REACTIVE_NODE, SIGNAL, SIGNAL_NODE, UNSET, consumerAfterComputation, consumerBeforeComputation, consumerDestroy, consumerMarkDirty, consumerPollProducersForChange, createComputed, createSignal, defaultEquals, getActiveConsumer, isInNotificationPhase, isReactive, producerAccessed, producerIncrementEpoch, producerMarkClean, producerNotifyConsumers, producerUpdateValueVersion, producerUpdatesAllowed, runPostProducerCreatedFn, runPostSignalSetFn, setActiveConsumer, setPostProducerCreatedFn, setPostSignalSetFn, setThrowInvalidWriteToSignalError, signalGetFn, signalSetFn, signalUpdateFn };\n","export function isFunction(value) {\n  return typeof value === 'function';\n}\n","export function createErrorClass(createImpl) {\n  const _super = instance => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n","import { createErrorClass } from './createErrorClass';\nexport const UnsubscriptionError = createErrorClass(_super => function UnsubscriptionErrorImpl(errors) {\n  _super(this);\n  this.message = errors ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n  this.name = 'UnsubscriptionError';\n  this.errors = errors;\n});\n","export function arrRemove(arr, item) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\nexport class Subscription {\n  constructor(initialTeardown) {\n    this.initialTeardown = initialTeardown;\n    this.closed = false;\n    this._parentage = null;\n    this._finalizers = null;\n  }\n  unsubscribe() {\n    let errors;\n    if (!this.closed) {\n      this.closed = true;\n      const {\n        _parentage\n      } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n      const {\n        initialTeardown: initialFinalizer\n      } = this;\n      if (isFunction(initialFinalizer)) {\n        try {\n          initialFinalizer();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n      const {\n        _finalizers\n      } = this;\n      if (_finalizers) {\n        this._finalizers = null;\n        for (const finalizer of _finalizers) {\n          try {\n            execFinalizer(finalizer);\n          } catch (err) {\n            errors = errors !== null && errors !== void 0 ? errors : [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n  add(teardown) {\n    var _a;\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        execFinalizer(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);\n      }\n    }\n  }\n  _hasParent(parent) {\n    const {\n      _parentage\n    } = this;\n    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);\n  }\n  _addParent(parent) {\n    const {\n      _parentage\n    } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n  _removeParent(parent) {\n    const {\n      _parentage\n    } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n  remove(teardown) {\n    const {\n      _finalizers\n    } = this;\n    _finalizers && arrRemove(_finalizers, teardown);\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\nSubscription.EMPTY = (() => {\n  const empty = new Subscription();\n  empty.closed = true;\n  return empty;\n})();\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n  return value instanceof Subscription || value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);\n}\nfunction execFinalizer(finalizer) {\n  if (isFunction(finalizer)) {\n    finalizer();\n  } else {\n    finalizer.unsubscribe();\n  }\n}\n","export const config = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false\n};\n","export const timeoutProvider = {\n  setTimeout(handler, timeout, ...args) {\n    const {\n      delegate\n    } = timeoutProvider;\n    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {\n      return delegate.setTimeout(handler, timeout, ...args);\n    }\n    return setTimeout(handler, timeout, ...args);\n  },\n  clearTimeout(handle) {\n    const {\n      delegate\n    } = timeoutProvider;\n    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\n  },\n  delegate: undefined\n};\n","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\nexport function reportUnhandledError(err) {\n  timeoutProvider.setTimeout(() => {\n    const {\n      onUnhandledError\n    } = config;\n    if (onUnhandledError) {\n      onUnhandledError(err);\n    } else {\n      throw err;\n    }\n  });\n}\n","export function noop() {}\n","export const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined))();\nexport function errorNotification(error) {\n  return createNotification('E', undefined, error);\n}\nexport function nextNotification(value) {\n  return createNotification('N', value, undefined);\n}\nexport function createNotification(kind, value, error) {\n  return {\n    kind,\n    value,\n    error\n  };\n}\n","import { config } from '../config';\nlet context = null;\nexport function errorContext(cb) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = {\n        errorThrown: false,\n        error: null\n      };\n    }\n    cb();\n    if (isRoot) {\n      const {\n        errorThrown,\n        error\n      } = context;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    cb();\n  }\n}\nexport function captureError(err) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\nexport class Subscriber extends Subscription {\n  constructor(destination) {\n    super();\n    this.isStopped = false;\n    if (destination) {\n      this.destination = destination;\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n  static create(next, error, complete) {\n    return new SafeSubscriber(next, error, complete);\n  }\n  next(value) {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value);\n    }\n  }\n  error(err) {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n  complete() {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n  unsubscribe() {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null;\n    }\n  }\n  _next(value) {\n    this.destination.next(value);\n  }\n  _error(err) {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n  _complete() {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\nconst _bind = Function.prototype.bind;\nfunction bind(fn, thisArg) {\n  return _bind.call(fn, thisArg);\n}\nclass ConsumerObserver {\n  constructor(partialObserver) {\n    this.partialObserver = partialObserver;\n  }\n  next(value) {\n    const {\n      partialObserver\n    } = this;\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n  error(err) {\n    const {\n      partialObserver\n    } = this;\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  }\n  complete() {\n    const {\n      partialObserver\n    } = this;\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n}\nexport class SafeSubscriber extends Subscriber {\n  constructor(observerOrNext, error, complete) {\n    super();\n    let partialObserver;\n    if (isFunction(observerOrNext) || !observerOrNext) {\n      partialObserver = {\n        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,\n        error: error !== null && error !== void 0 ? error : undefined,\n        complete: complete !== null && complete !== void 0 ? complete : undefined\n      };\n    } else {\n      let context;\n      if (this && config.useDeprecatedNextContext) {\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context),\n          error: observerOrNext.error && bind(observerOrNext.error, context),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context)\n        };\n      } else {\n        partialObserver = observerOrNext;\n      }\n    }\n    this.destination = new ConsumerObserver(partialObserver);\n  }\n}\nfunction handleUnhandledError(error) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    captureError(error);\n  } else {\n    reportUnhandledError(error);\n  }\n}\nfunction defaultErrorHandler(err) {\n  throw err;\n}\nfunction handleStoppedNotification(notification, subscriber) {\n  const {\n    onStoppedNotification\n  } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\nexport const EMPTY_OBSERVER = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop\n};\n","export const observable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n","export function identity(x) {\n  return x;\n}\n","import { identity } from './identity';\nexport function pipe(...fns) {\n  return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n  if (fns.length === 0) {\n    return identity;\n  }\n  if (fns.length === 1) {\n    return fns[0];\n  }\n  return function piped(input) {\n    return fns.reduce((prev, fn) => fn(prev), input);\n  };\n}\n","import { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription } from './Subscription';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\nexport let Observable = /*#__PURE__*/(() => {\n  class Observable {\n    constructor(subscribe) {\n      if (subscribe) {\n        this._subscribe = subscribe;\n      }\n    }\n    lift(operator) {\n      const observable = new Observable();\n      observable.source = this;\n      observable.operator = operator;\n      return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n      const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n      errorContext(() => {\n        const {\n          operator,\n          source\n        } = this;\n        subscriber.add(operator ? operator.call(subscriber, source) : source ? this._subscribe(subscriber) : this._trySubscribe(subscriber));\n      });\n      return subscriber;\n    }\n    _trySubscribe(sink) {\n      try {\n        return this._subscribe(sink);\n      } catch (err) {\n        sink.error(err);\n      }\n    }\n    forEach(next, promiseCtor) {\n      promiseCtor = getPromiseCtor(promiseCtor);\n      return new promiseCtor((resolve, reject) => {\n        const subscriber = new SafeSubscriber({\n          next: value => {\n            try {\n              next(value);\n            } catch (err) {\n              reject(err);\n              subscriber.unsubscribe();\n            }\n          },\n          error: reject,\n          complete: resolve\n        });\n        this.subscribe(subscriber);\n      });\n    }\n    _subscribe(subscriber) {\n      var _a;\n      return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n      return this;\n    }\n    pipe(...operations) {\n      return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n      promiseCtor = getPromiseCtor(promiseCtor);\n      return new promiseCtor((resolve, reject) => {\n        let value;\n        this.subscribe(x => value = x, err => reject(err), () => resolve(value));\n      });\n    }\n  }\n  Observable.create = subscribe => {\n    return new Observable(subscribe);\n  };\n  return Observable;\n})();\nfunction getPromiseCtor(promiseCtor) {\n  var _a;\n  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction isObserver(value) {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\nfunction isSubscriber(value) {\n  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n  return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n  return source => {\n    if (hasLift(source)) {\n      return source.lift(function (liftedSource) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n  constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n    super(destination);\n    this.onFinalize = onFinalize;\n    this.shouldUnsubscribe = shouldUnsubscribe;\n    this._next = onNext ? function (value) {\n      try {\n        onNext(value);\n      } catch (err) {\n        destination.error(err);\n      }\n    } : super._next;\n    this._error = onError ? function (err) {\n      try {\n        onError(err);\n      } catch (err) {\n        destination.error(err);\n      } finally {\n        this.unsubscribe();\n      }\n    } : super._error;\n    this._complete = onComplete ? function () {\n      try {\n        onComplete();\n      } catch (err) {\n        destination.error(err);\n      } finally {\n        this.unsubscribe();\n      }\n    } : super._complete;\n  }\n  unsubscribe() {\n    var _a;\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      const {\n        closed\n      } = this;\n      super.unsubscribe();\n      !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n    }\n  }\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function refCount() {\n  return operate((source, subscriber) => {\n    let connection = null;\n    source._refCount++;\n    const refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, () => {\n      if (!source || source._refCount <= 0 || 0 < --source._refCount) {\n        connection = null;\n        return;\n      }\n      const sharedConnection = source._connection;\n      const conn = connection;\n      connection = null;\n      if (sharedConnection && (!conn || sharedConnection === conn)) {\n        sharedConnection.unsubscribe();\n      }\n      subscriber.unsubscribe();\n    });\n    source.subscribe(refCounter);\n    if (!refCounter.closed) {\n      connection = source.connect();\n    }\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\nexport class ConnectableObservable extends Observable {\n  constructor(source, subjectFactory) {\n    super();\n    this.source = source;\n    this.subjectFactory = subjectFactory;\n    this._subject = null;\n    this._refCount = 0;\n    this._connection = null;\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n  _subscribe(subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  }\n  getSubject() {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n  _teardown() {\n    this._refCount = 0;\n    const {\n      _connection\n    } = this;\n    this._subject = this._connection = null;\n    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n  }\n  connect() {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(this.source.subscribe(createOperatorSubscriber(subject, undefined, () => {\n        this._teardown();\n        subject.complete();\n      }, err => {\n        this._teardown();\n        subject.error(err);\n      }, () => this._teardown())));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n  refCount() {\n    return higherOrderRefCount()(this);\n  }\n}\n","import { createErrorClass } from './createErrorClass';\nexport const ObjectUnsubscribedError = createErrorClass(_super => function ObjectUnsubscribedErrorImpl() {\n  _super(this);\n  this.name = 'ObjectUnsubscribedError';\n  this.message = 'object unsubscribed';\n});\n","import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport let Subject = /*#__PURE__*/(() => {\n  class Subject extends Observable {\n    constructor() {\n      super();\n      this.closed = false;\n      this.currentObservers = null;\n      this.observers = [];\n      this.isStopped = false;\n      this.hasError = false;\n      this.thrownError = null;\n    }\n    lift(operator) {\n      const subject = new AnonymousSubject(this, this);\n      subject.operator = operator;\n      return subject;\n    }\n    _throwIfClosed() {\n      if (this.closed) {\n        throw new ObjectUnsubscribedError();\n      }\n    }\n    next(value) {\n      errorContext(() => {\n        this._throwIfClosed();\n        if (!this.isStopped) {\n          if (!this.currentObservers) {\n            this.currentObservers = Array.from(this.observers);\n          }\n          for (const observer of this.currentObservers) {\n            observer.next(value);\n          }\n        }\n      });\n    }\n    error(err) {\n      errorContext(() => {\n        this._throwIfClosed();\n        if (!this.isStopped) {\n          this.hasError = this.isStopped = true;\n          this.thrownError = err;\n          const {\n            observers\n          } = this;\n          while (observers.length) {\n            observers.shift().error(err);\n          }\n        }\n      });\n    }\n    complete() {\n      errorContext(() => {\n        this._throwIfClosed();\n        if (!this.isStopped) {\n          this.isStopped = true;\n          const {\n            observers\n          } = this;\n          while (observers.length) {\n            observers.shift().complete();\n          }\n        }\n      });\n    }\n    unsubscribe() {\n      this.isStopped = this.closed = true;\n      this.observers = this.currentObservers = null;\n    }\n    get observed() {\n      var _a;\n      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    _trySubscribe(subscriber) {\n      this._throwIfClosed();\n      return super._trySubscribe(subscriber);\n    }\n    _subscribe(subscriber) {\n      this._throwIfClosed();\n      this._checkFinalizedStatuses(subscriber);\n      return this._innerSubscribe(subscriber);\n    }\n    _innerSubscribe(subscriber) {\n      const {\n        hasError,\n        isStopped,\n        observers\n      } = this;\n      if (hasError || isStopped) {\n        return EMPTY_SUBSCRIPTION;\n      }\n      this.currentObservers = null;\n      observers.push(subscriber);\n      return new Subscription(() => {\n        this.currentObservers = null;\n        arrRemove(observers, subscriber);\n      });\n    }\n    _checkFinalizedStatuses(subscriber) {\n      const {\n        hasError,\n        thrownError,\n        isStopped\n      } = this;\n      if (hasError) {\n        subscriber.error(thrownError);\n      } else if (isStopped) {\n        subscriber.complete();\n      }\n    }\n    asObservable() {\n      const observable = new Observable();\n      observable.source = this;\n      return observable;\n    }\n  }\n  Subject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n  };\n  return Subject;\n})();\nexport class AnonymousSubject extends Subject {\n  constructor(destination, source) {\n    super();\n    this.destination = destination;\n    this.source = source;\n  }\n  next(value) {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n  }\n  error(err) {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n  }\n  complete() {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  _subscribe(subscriber) {\n    var _a, _b;\n    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n  }\n}\n","import { Subject } from './Subject';\nexport class BehaviorSubject extends Subject {\n  constructor(_value) {\n    super();\n    this._value = _value;\n  }\n  get value() {\n    return this.getValue();\n  }\n  _subscribe(subscriber) {\n    const subscription = super._subscribe(subscriber);\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  }\n  getValue() {\n    const {\n      hasError,\n      thrownError,\n      _value\n    } = this;\n    if (hasError) {\n      throw thrownError;\n    }\n    this._throwIfClosed();\n    return _value;\n  }\n  next(value) {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nexport const EMPTY = new Observable(subscriber => subscriber.complete());\nexport function empty(scheduler) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n  return new Observable(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { isFunction } from './isFunction';\nexport function isScheduler(value) {\n  return value && isFunction(value.schedule);\n}\n","import { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\nfunction last(arr) {\n  return arr[arr.length - 1];\n}\nexport function popResultSelector(args) {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\nexport function popScheduler(args) {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\nexport function popNumber(args, defaultValue) {\n  return typeof last(args) === 'number' ? args.pop() : defaultValue;\n}\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nexport var __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nexport function __param(paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n}\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n}\n;\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n}\n;\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n}\n;\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", {\n    configurable: true,\n    value: prefix ? \"\".concat(prefix, \" \", name) : name\n  });\n}\n;\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nexport function __generator(thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nexport var __createBinding = Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n};\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n}\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n    i,\n    q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n  function awaitReturn(f) {\n    return function (v) {\n      return Promise.resolve(v).then(f, reject);\n    };\n  }\n  function verb(n, f) {\n    if (g[n]) {\n      i[n] = function (v) {\n        return new Promise(function (a, b) {\n          q.push([n, v, a, b]) > 1 || resume(n, v);\n        });\n      };\n      if (f) i[n] = f(i[n]);\n    }\n  }\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n    throw e;\n  }), verb(\"return\"), i[Symbol.iterator] = function () {\n    return this;\n  }, i;\n  function verb(n, f) {\n    i[n] = o[n] ? function (v) {\n      return (p = !p) ? {\n        value: __await(o[n](v)),\n        done: false\n      } : f ? f(v) : v;\n    } : f;\n  }\n}\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n  return cooked;\n}\n;\nvar __setModuleDefault = Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n};\nvar ownKeys = function (o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\nexport function __importDefault(mod) {\n  return mod && mod.__esModule ? mod : {\n    default: mod\n  };\n}\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function () {\n      try {\n        inner.call(this);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n    env.stack.push({\n      value: value,\n      dispose: dispose,\n      async: async\n    });\n  } else if (async) {\n    env.stack.push({\n      async: true\n    });\n  }\n  return value;\n}\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r,\n    s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function (e) {\n            fail(e);\n            return next();\n          });\n        } else s |= 1;\n      } catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n    return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n      return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : d + ext + \".\" + cm.toLowerCase() + \"js\";\n    });\n  }\n  return path;\n}\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension\n};","export const isArrayLike = x => x && typeof x.length === 'number' && typeof x !== 'function';\n","import { isFunction } from \"./isFunction\";\nexport function isPromise(value) {\n  return isFunction(value === null || value === void 0 ? void 0 : value.then);\n}\n","import { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\nexport function isInteropObservable(input) {\n  return isFunction(input[Symbol_observable]);\n}\n","import { isFunction } from './isFunction';\nexport function isAsyncIterable(obj) {\n  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);\n}\n","export function createInvalidObservableTypeError(input) {\n  return new TypeError(`You provided ${input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`} where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`);\n}\n","export function getSymbolIterator() {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator';\n  }\n  return Symbol.iterator;\n}\nexport const iterator = getSymbolIterator();\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\nexport function isIterable(input) {\n  return isFunction(input === null || input === void 0 ? void 0 : input[Symbol_iterator]);\n}\n","import { __asyncGenerator, __await } from \"tslib\";\nimport { isFunction } from './isFunction';\nexport function readableStreamLikeToAsyncGenerator(readableStream) {\n  return __asyncGenerator(this, arguments, function* readableStreamLikeToAsyncGenerator_1() {\n    const reader = readableStream.getReader();\n    try {\n      while (true) {\n        const {\n          value,\n          done\n        } = yield __await(reader.read());\n        if (done) {\n          return yield __await(void 0);\n        }\n        yield yield __await(value);\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  });\n}\nexport function isReadableStreamLike(obj) {\n  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);\n}\n","import { __asyncValues, __awaiter } from \"tslib\";\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function innerFrom(input) {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\nexport function fromInteropObservable(obj) {\n  return new Observable(subscriber => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\nexport function fromArrayLike(array) {\n  return new Observable(subscriber => {\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\nexport function fromPromise(promise) {\n  return new Observable(subscriber => {\n    promise.then(value => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    }, err => subscriber.error(err)).then(null, reportUnhandledError);\n  });\n}\nexport function fromIterable(iterable) {\n  return new Observable(subscriber => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\nexport function fromAsyncIterable(asyncIterable) {\n  return new Observable(subscriber => {\n    process(asyncIterable, subscriber).catch(err => subscriber.error(err));\n  });\n}\nexport function fromReadableStreamLike(readableStream) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\nfunction process(asyncIterable, subscriber) {\n  var asyncIterable_1, asyncIterable_1_1;\n  var e_1, _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      for (asyncIterable_1 = __asyncValues(asyncIterable); asyncIterable_1_1 = yield asyncIterable_1.next(), !asyncIterable_1_1.done;) {\n        const value = asyncIterable_1_1.value;\n        subscriber.next(value);\n        if (subscriber.closed) {\n          return;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)) yield _a.call(asyncIterable_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    subscriber.complete();\n  });\n}\n","export function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {\n  const scheduleSubscription = scheduler.schedule(function () {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n  parentSubscription.add(scheduleSubscription);\n  if (!repeat) {\n    return scheduleSubscription;\n  }\n}\n","import { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay = 0) {\n  return operate((source, subscriber) => {\n    source.subscribe(createOperatorSubscriber(subscriber, value => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), err => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));\n  });\n}\n","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay = 0) {\n  return operate((source, subscriber) => {\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n  });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function scheduleObservable(input, scheduler) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function schedulePromise(input, scheduler) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n  return new Observable(subscriber => {\n    let i = 0;\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        subscriber.complete();\n      } else {\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n","import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n  return new Observable(subscriber => {\n    let iterator;\n    executeSchedule(subscriber, scheduler, () => {\n      iterator = input[Symbol_iterator]();\n      executeSchedule(subscriber, scheduler, () => {\n        let value;\n        let done;\n        try {\n          ({\n            value,\n            done\n          } = iterator.next());\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n        }\n      }, 0, true);\n    });\n    return () => isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n  });\n}\n","import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable(subscriber => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(subscriber, scheduler, () => {\n        iterator.next().then(result => {\n          if (result.done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(result.value);\n          }\n        });\n      }, 0, true);\n    });\n  });\n}\n","import { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nexport function scheduleReadableStreamLike(input, scheduler) {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n","import { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\nexport function from(input, scheduler) {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function of(...args) {\n  const scheduler = popScheduler(args);\n  return from(args, scheduler);\n}\n","import { Observable } from '../Observable';\nimport { isFunction } from '../util/isFunction';\nexport function throwError(errorOrErrorFactory, scheduler) {\n  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n  const init = subscriber => subscriber.error(errorFactory());\n  return new Observable(scheduler ? subscriber => scheduler.schedule(init, 0, subscriber) : init);\n}\n","import { Observable } from '../Observable';\nimport { isFunction } from './isFunction';\nexport function isObservable(obj) {\n  return !!obj && (obj instanceof Observable || isFunction(obj.lift) && isFunction(obj.subscribe));\n}\n","import { createErrorClass } from './createErrorClass';\nexport const EmptyError = createErrorClass(_super => function EmptyErrorImpl() {\n  _super(this);\n  this.name = 'EmptyError';\n  this.message = 'no elements in sequence';\n});\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n  return operate((source, subscriber) => {\n    let index = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, value => {\n      subscriber.next(project.call(thisArg, value, index++));\n    }));\n  });\n}\n","import { map } from \"../operators/map\";\nconst {\n  isArray\n} = Array;\nfunction callOrApply(fn, args) {\n  return isArray(args) ? fn(...args) : fn(args);\n}\nexport function mapOneOrManyArgs(fn) {\n  return map(args => callOrApply(fn, args));\n}\n","const {\n  isArray\n} = Array;\nconst {\n  getPrototypeOf,\n  prototype: objectProto,\n  keys: getKeys\n} = Object;\nexport function argsArgArrayOrObject(args) {\n  if (args.length === 1) {\n    const first = args[0];\n    if (isArray(first)) {\n      return {\n        args: first,\n        keys: null\n      };\n    }\n    if (isPOJO(first)) {\n      const keys = getKeys(first);\n      return {\n        args: keys.map(key => first[key]),\n        keys\n      };\n    }\n  }\n  return {\n    args: args,\n    keys: null\n  };\n}\nfunction isPOJO(obj) {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n","export function createObject(keys, values) {\n  return keys.reduce((result, key, i) => (result[key] = values[i], result), {});\n}\n","import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { from } from './from';\nimport { identity } from '../util/identity';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { popResultSelector, popScheduler } from '../util/args';\nimport { createObject } from '../util/createObject';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function combineLatest(...args) {\n  const scheduler = popScheduler(args);\n  const resultSelector = popResultSelector(args);\n  const {\n    args: observables,\n    keys\n  } = argsArgArrayOrObject(args);\n  if (observables.length === 0) {\n    return from([], scheduler);\n  }\n  const result = new Observable(combineLatestInit(observables, scheduler, keys ? values => createObject(keys, values) : identity));\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\nexport function combineLatestInit(observables, scheduler, valueTransform = identity) {\n  return subscriber => {\n    maybeSchedule(scheduler, () => {\n      const {\n        length\n      } = observables;\n      const values = new Array(length);\n      let active = length;\n      let remainingFirstValues = length;\n      for (let i = 0; i < length; i++) {\n        maybeSchedule(scheduler, () => {\n          const source = from(observables[i], scheduler);\n          let hasFirstValue = false;\n          source.subscribe(createOperatorSubscriber(subscriber, value => {\n            values[i] = value;\n            if (!hasFirstValue) {\n              hasFirstValue = true;\n              remainingFirstValues--;\n            }\n            if (!remainingFirstValues) {\n              subscriber.next(valueTransform(values.slice()));\n            }\n          }, () => {\n            if (! --active) {\n              subscriber.complete();\n            }\n          }));\n        }, subscriber);\n      }\n    }, subscriber);\n  };\n}\nfunction maybeSchedule(scheduler, execute, subscription) {\n  if (scheduler) {\n    executeSchedule(subscription, scheduler, execute);\n  } else {\n    execute();\n  }\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n  const buffer = [];\n  let active = 0;\n  let index = 0;\n  let isComplete = false;\n  const checkComplete = () => {\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n  const outerNext = value => active < concurrent ? doInnerSub(value) : buffer.push(value);\n  const doInnerSub = value => {\n    expand && subscriber.next(value);\n    active++;\n    let innerComplete = false;\n    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, innerValue => {\n      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n      if (expand) {\n        outerNext(innerValue);\n      } else {\n        subscriber.next(innerValue);\n      }\n    }, () => {\n      innerComplete = true;\n    }, undefined, () => {\n      if (innerComplete) {\n        try {\n          active--;\n          while (buffer.length && active < concurrent) {\n            const bufferedValue = buffer.shift();\n            if (innerSubScheduler) {\n              executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n            } else {\n              doInnerSub(bufferedValue);\n            }\n          }\n          checkComplete();\n        } catch (err) {\n          subscriber.error(err);\n        }\n      }\n    }));\n  };\n  source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {\n    isComplete = true;\n    checkComplete();\n  }));\n  return () => {\n    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n  };\n}\n","import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent = Infinity) {\n  if (isFunction(resultSelector)) {\n    return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Infinity) {\n  return mergeMap(identity, concurrent);\n}\n","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n  return mergeAll(1);\n}\n","import { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function concat(...args) {\n  return concatAll()(from(args, popScheduler(args)));\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nexport function defer(observableFactory) {\n  return new Observable(subscriber => {\n    innerFrom(observableFactory()).subscribe(subscriber);\n  });\n}\n","import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n  const resultSelector = popResultSelector(args);\n  const {\n    args: sources,\n    keys\n  } = argsArgArrayOrObject(args);\n  const result = new Observable(subscriber => {\n    const {\n      length\n    } = sources;\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n    const values = new Array(length);\n    let remainingCompletions = length;\n    let remainingEmissions = length;\n    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      let hasValue = false;\n      innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, value => {\n        if (!hasValue) {\n          hasValue = true;\n          remainingEmissions--;\n        }\n        values[sourceIndex] = value;\n      }, () => remainingCompletions--, undefined, () => {\n        if (!remainingCompletions || !hasValue) {\n          if (!remainingEmissions) {\n            subscriber.next(keys ? createObject(keys, values) : values);\n          }\n          subscriber.complete();\n        }\n      }));\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function filter(predicate, thisArg) {\n  return operate((source, subscriber) => {\n    let index = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, value => predicate.call(thisArg, value, index++) && subscriber.next(value)));\n  });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\nexport function catchError(selector) {\n  return operate((source, subscriber) => {\n    let innerSub = null;\n    let syncUnsub = false;\n    let handledResult;\n    innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, err => {\n      handledResult = innerFrom(selector(err, catchError(selector)(source)));\n      if (innerSub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        handledResult.subscribe(subscriber);\n      } else {\n        syncUnsub = true;\n      }\n    }));\n    if (syncUnsub) {\n      innerSub.unsubscribe();\n      innerSub = null;\n      handledResult.subscribe(subscriber);\n    }\n  });\n}\n","import { createOperatorSubscriber } from './OperatorSubscriber';\nexport function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {\n  return (source, subscriber) => {\n    let hasState = hasSeed;\n    let state = seed;\n    let index = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, value => {\n      const i = index++;\n      state = hasState ? accumulator(state, value, i) : (hasState = true, value);\n      emitOnNext && subscriber.next(state);\n    }, emitBeforeComplete && (() => {\n      hasState && subscriber.next(state);\n      subscriber.complete();\n    })));\n  };\n}\n","import { mergeMap } from './mergeMap';\nimport { isFunction } from '../util/isFunction';\nexport function concatMap(project, resultSelector) {\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function defaultIfEmpty(defaultValue) {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(createOperatorSubscriber(subscriber, value => {\n      hasValue = true;\n      subscriber.next(value);\n    }, () => {\n      if (!hasValue) {\n        subscriber.next(defaultValue);\n      }\n      subscriber.complete();\n    }));\n  });\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {\n    let seen = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, value => {\n      if (++seen <= count) {\n        subscriber.next(value);\n        if (count <= seen) {\n          subscriber.complete();\n        }\n      }\n    }));\n  });\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function throwIfEmpty(errorFactory = defaultErrorFactory) {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(createOperatorSubscriber(subscriber, value => {\n      hasValue = true;\n      subscriber.next(value);\n    }, () => hasValue ? subscriber.complete() : subscriber.error(errorFactory())));\n  });\n}\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n","import { operate } from '../util/lift';\nexport function finalize(callback) {\n  return operate((source, subscriber) => {\n    try {\n      source.subscribe(subscriber);\n    } finally {\n      subscriber.add(callback);\n    }\n  });\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\nexport function first(predicate, defaultValue) {\n  const hasDefaultValue = arguments.length >= 2;\n  return source => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function takeLast(count) {\n  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {\n    let buffer = [];\n    source.subscribe(createOperatorSubscriber(subscriber, value => {\n      buffer.push(value);\n      count < buffer.length && buffer.shift();\n    }, () => {\n      for (const value of buffer) {\n        subscriber.next(value);\n      }\n      subscriber.complete();\n    }, undefined, () => {\n      buffer = null;\n    }));\n  });\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { takeLast } from './takeLast';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { identity } from '../util/identity';\nexport function last(predicate, defaultValue) {\n  const hasDefaultValue = arguments.length >= 2;\n  return source => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n","import { operate } from '../util/lift';\nimport { scanInternals } from './scanInternals';\nexport function scan(accumulator, seed) {\n  return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));\n}\n","import { concat } from '../observable/concat';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\nexport function startWith(...values) {\n  const scheduler = popScheduler(values);\n  return operate((source, subscriber) => {\n    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n  });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n  return operate((source, subscriber) => {\n    let innerSubscriber = null;\n    let index = 0;\n    let isComplete = false;\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n    source.subscribe(createOperatorSubscriber(subscriber, value => {\n      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n      let innerIndex = 0;\n      const outerIndex = index++;\n      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, innerValue => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {\n        innerSubscriber = null;\n        checkComplete();\n      }));\n    }, () => {\n      isComplete = true;\n      checkComplete();\n    }));\n  });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n  return operate((source, subscriber) => {\n    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n    !subscriber.closed && source.subscribe(subscriber);\n  });\n}\n","import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n  const tapObserver = isFunction(observerOrNext) || error || complete ? {\n    next: observerOrNext,\n    error,\n    complete\n  } : observerOrNext;\n  return tapObserver ? operate((source, subscriber) => {\n    var _a;\n    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n    let isUnsub = true;\n    source.subscribe(createOperatorSubscriber(subscriber, value => {\n      var _a;\n      (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n      subscriber.next(value);\n    }, () => {\n      var _a;\n      isUnsub = false;\n      (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n      subscriber.complete();\n    }, err => {\n      var _a;\n      isUnsub = false;\n      (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n      subscriber.error(err);\n    }, () => {\n      var _a, _b;\n      if (isUnsub) {\n        (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n      }\n      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n    }));\n  }) : identity;\n}\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { SIGNAL, runPostProducerCreatedFn, producerUpdateValueVersion, signalSetFn, producerMarkClean, signalUpdateFn, REACTIVE_NODE, UNSET, defaultEquals, COMPUTING, consumerBeforeComputation, ERRORED, consumerAfterComputation, producerAccessed, setActiveConsumer } from './signal.mjs';\nfunction createLinkedSignal(sourceFn, computationFn, equalityFn) {\n  const node = Object.create(LINKED_SIGNAL_NODE);\n  node.source = sourceFn;\n  node.computation = computationFn;\n  if (equalityFn != undefined) {\n    node.equal = equalityFn;\n  }\n  const linkedSignalGetter = () => {\n    // Check if the value needs updating before returning it.\n    producerUpdateValueVersion(node);\n    // Record that someone looked at this signal.\n    producerAccessed(node);\n    if (node.value === ERRORED) {\n      throw node.error;\n    }\n    return node.value;\n  };\n  const getter = linkedSignalGetter;\n  getter[SIGNAL] = node;\n  if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    const debugName = node.debugName ? ' (' + node.debugName + ')' : '';\n    getter.toString = () => `[LinkedSignal${debugName}: ${node.value}]`;\n  }\n  runPostProducerCreatedFn(node);\n  return getter;\n}\nfunction linkedSignalSetFn(node, newValue) {\n  producerUpdateValueVersion(node);\n  signalSetFn(node, newValue);\n  producerMarkClean(node);\n}\nfunction linkedSignalUpdateFn(node, updater) {\n  producerUpdateValueVersion(node);\n  signalUpdateFn(node, updater);\n  producerMarkClean(node);\n}\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `LINKED_SIGNAL_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst LINKED_SIGNAL_NODE = /* @__PURE__ */(() => {\n  return {\n    ...REACTIVE_NODE,\n    value: UNSET,\n    dirty: true,\n    error: null,\n    equal: defaultEquals,\n    kind: 'linkedSignal',\n    producerMustRecompute(node) {\n      // Force a recomputation if there's no current value, or if the current value is in the\n      // process of being calculated (which should throw an error).\n      return node.value === UNSET || node.value === COMPUTING;\n    },\n    producerRecomputeValue(node) {\n      if (node.value === COMPUTING) {\n        // Our computation somehow led to a cyclic read of itself.\n        throw new Error(typeof ngDevMode !== 'undefined' && ngDevMode ? 'Detected cycle in computations.' : '');\n      }\n      const oldValue = node.value;\n      node.value = COMPUTING;\n      const prevConsumer = consumerBeforeComputation(node);\n      let newValue;\n      try {\n        const newSourceValue = node.source();\n        const prev = oldValue === UNSET || oldValue === ERRORED ? undefined : {\n          source: node.sourceValue,\n          value: oldValue\n        };\n        newValue = node.computation(newSourceValue, prev);\n        node.sourceValue = newSourceValue;\n      } catch (err) {\n        newValue = ERRORED;\n        node.error = err;\n      } finally {\n        consumerAfterComputation(node, prevConsumer);\n      }\n      if (oldValue !== UNSET && newValue !== ERRORED && node.equal(oldValue, newValue)) {\n        // No change to `valueVersion` - old and new values are\n        // semantically equivalent.\n        node.value = oldValue;\n        return;\n      }\n      node.value = newValue;\n      node.version++;\n    }\n  };\n})();\n\n/**\n * Execute an arbitrary function in a non-reactive (non-tracking) context. The executed function\n * can, optionally, return a value.\n */\nfunction untracked(nonReactiveReadsFn) {\n  const prevConsumer = setActiveConsumer(null);\n  // We are not trying to catch any particular errors here, just making sure that the consumers\n  // stack is restored in case of errors.\n  try {\n    return nonReactiveReadsFn();\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\nexport { createLinkedSignal, linkedSignalSetFn, linkedSignalUpdateFn, untracked };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { isNotFound, getCurrentInjector, setCurrentInjector } from './not_found.mjs';\nimport { getActiveConsumer, SIGNAL, createSignal } from './signal.mjs';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { setActiveConsumer } from '@angular/core/primitives/signals';\nimport { isNotFound as isNotFound$1 } from '@angular/core/primitives/di';\n\n/**\n * Base URL for the error details page.\n *\n * Keep this constant in sync across:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.dev/errors';\n/**\n * URL for the XSS security documentation.\n */\nconst XSS_SECURITY_URL = 'https://angular.dev/best-practices/security#preventing-cross-site-scripting-xss';\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```ts\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime\n * logic.\n */\nclass RuntimeError extends Error {\n  code;\n  constructor(code, message) {\n    super(formatRuntimeError(code, message));\n    this.code = code;\n  }\n}\nfunction formatRuntimeErrorCode(code) {\n  // Error code might be a negative number, which is a special marker that instructs the logic to\n  // generate a link to the error details page on angular.io.\n  // We also prepend `0` to non-compile-time errors.\n  return `NG0${Math.abs(code)}`;\n}\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\nfunction formatRuntimeError(code, message) {\n  const fullCode = formatRuntimeErrorCode(code);\n  let errorMessage = `${fullCode}${message ? ': ' + message : ''}`;\n  if (ngDevMode && code < 0) {\n    const addPeriodSeparator = !errorMessage.match(/[.,;!?\\n]$/);\n    const separator = addPeriodSeparator ? '.' : '';\n    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n  }\n  return errorMessage;\n}\nconst _global = globalThis;\nfunction ngDevModeResetPerfCounters() {\n  const locationString = typeof location !== 'undefined' ? location.toString() : '';\n  const newCounters = {\n    hydratedNodes: 0,\n    hydratedComponents: 0,\n    dehydratedViewsRemoved: 0,\n    dehydratedViewsCleanupRuns: 0,\n    componentsSkippedHydration: 0,\n    deferBlocksWithIncrementalHydration: 0\n  };\n  // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n  const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n  if (!allowNgDevModeTrue) {\n    _global['ngDevMode'] = false;\n  } else {\n    if (typeof _global['ngDevMode'] !== 'object') {\n      _global['ngDevMode'] = {};\n    }\n    Object.assign(_global['ngDevMode'], newCounters);\n  }\n  return newCounters;\n}\n/**\n * This function checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n * is defined for the entire instruction set.\n *\n * When checking `ngDevMode` on toplevel, always init it before referencing it\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n *\n * Details on possible values for `ngDevMode` can be found on its docstring.\n */\nfunction initNgDevMode() {\n  // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n  // reset the counters.\n  // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n  // yet.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (typeof ngDevMode !== 'object' || Object.keys(ngDevMode).length === 0) {\n      ngDevModeResetPerfCounters();\n    }\n    return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n  }\n  return false;\n}\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n      return key;\n    }\n  }\n  // Cannot change it to `RuntimeError` because the `util` target cannot\n  // circularly depend on the `core` target.\n  throw Error(typeof ngDevMode !== 'undefined' && ngDevMode ? 'Could not find renamed property on target object.' : '');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\nfunction stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n  if (Array.isArray(token)) {\n    return `[${token.map(stringify).join(', ')}]`;\n  }\n  if (token == null) {\n    return '' + token;\n  }\n  const name = token.overriddenName || token.name;\n  if (name) {\n    return `${name}`;\n  }\n  const result = token.toString();\n  if (result == null) {\n    return '' + result;\n  }\n  const newLineIndex = result.indexOf('\\n');\n  return newLineIndex >= 0 ? result.slice(0, newLineIndex) : result;\n}\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nfunction concatStringsWithSpace(before, after) {\n  if (!before) return after || '';\n  if (!after) return before;\n  return `${before} ${after}`;\n}\n/**\n * Ellipses the string in the middle when longer than the max length\n *\n * @param string\n * @param maxLength of the output string\n * @returns ellipsed string with ... in the middle\n */\nfunction truncateMiddle(str, maxLength = 100) {\n  if (!str || maxLength < 1 || str.length <= maxLength) return str;\n  if (maxLength == 1) return str.substring(0, 1) + '...';\n  const halfLimit = Math.round(maxLength / 2);\n  return str.substring(0, halfLimit) + '...' + str.substring(str.length - halfLimit);\n}\nconst __forward_ref__ = /*#__PURE__*/getClosureSafeProperty({\n  __forward_ref__: getClosureSafeProperty\n});\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * `forwardRef` is also used to break circularities in standalone components imports.\n *\n * @usageNotes\n * ### Circular dependency example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n *\n * ### Circular standalone reference import example\n * ```angular-ts\n * @Component({\n *   imports: [ChildComponent],\n *   selector: 'app-parent',\n *   template: `<app-child [hideParent]=\"hideParent()\"></app-child>`,\n * })\n * export class ParentComponent {\n *    hideParent = input.required<boolean>();\n * }\n *\n *\n * @Component({\n *   imports: [forwardRef(() => ParentComponent)],\n *   selector: 'app-child',\n *   template: `\n *    @if(!hideParent() {\n *       <app-parent/>\n *    }\n *  `,\n * })\n * export class ChildComponent {\n *    hideParent = input.required<boolean>();\n * }\n * ```\n *\n * @publicApi\n */\nfunction forwardRef(forwardRefFn) {\n  forwardRefFn.__forward_ref__ = forwardRef;\n  forwardRefFn.toString = function () {\n    return stringify(this());\n  };\n  return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see {@link forwardRef}\n * @publicApi\n */\nfunction resolveForwardRef(type) {\n  return isForwardRef(type) ? type() : type;\n}\n/** Checks whether a function is wrapped by a `forwardRef`. */\nfunction isForwardRef(fn) {\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;\n}\n\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\nfunction assertNumber(actual, msg) {\n  if (!(typeof actual === 'number')) {\n    throwError(msg, typeof actual, 'number', '===');\n  }\n}\nfunction assertNumberInRange(actual, minInclusive, maxInclusive) {\n  assertNumber(actual, 'Expected a number');\n  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\nfunction assertString(actual, msg) {\n  if (!(typeof actual === 'string')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n  }\n}\nfunction assertFunction(actual, msg) {\n  if (!(typeof actual === 'function')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n  }\n}\nfunction assertEqual(actual, expected, msg) {\n  if (!(actual == expected)) {\n    throwError(msg, actual, expected, '==');\n  }\n}\nfunction assertNotEqual(actual, expected, msg) {\n  if (!(actual != expected)) {\n    throwError(msg, actual, expected, '!=');\n  }\n}\nfunction assertSame(actual, expected, msg) {\n  if (!(actual === expected)) {\n    throwError(msg, actual, expected, '===');\n  }\n}\nfunction assertNotSame(actual, expected, msg) {\n  if (!(actual !== expected)) {\n    throwError(msg, actual, expected, '!==');\n  }\n}\nfunction assertLessThan(actual, expected, msg) {\n  if (!(actual < expected)) {\n    throwError(msg, actual, expected, '<');\n  }\n}\nfunction assertLessThanOrEqual(actual, expected, msg) {\n  if (!(actual <= expected)) {\n    throwError(msg, actual, expected, '<=');\n  }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n  if (!(actual > expected)) {\n    throwError(msg, actual, expected, '>');\n  }\n}\nfunction assertGreaterThanOrEqual(actual, expected, msg) {\n  if (!(actual >= expected)) {\n    throwError(msg, actual, expected, '>=');\n  }\n}\nfunction assertNotDefined(actual, msg) {\n  if (actual != null) {\n    throwError(msg, actual, null, '==');\n  }\n}\nfunction assertDefined(actual, msg) {\n  if (actual == null) {\n    throwError(msg, actual, null, '!=');\n  }\n}\nfunction throwError(msg, actual, expected, comparison) {\n  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\nfunction assertDomNode(node) {\n  if (!(node instanceof Node)) {\n    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n  }\n}\nfunction assertElement(node) {\n  if (!(node instanceof Element)) {\n    throwError(`The provided value must be an element but got ${stringify(node)}`);\n  }\n}\nfunction assertIndexInRange(arr, index) {\n  assertDefined(arr, 'Array must be defined.');\n  const maxLen = arr.length;\n  if (index < 0 || index >= maxLen) {\n    throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n  }\n}\nfunction assertOneOf(value, ...validValues) {\n  if (validValues.indexOf(value) !== -1) return true;\n  throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);\n}\nfunction assertNotReactive(fn) {\n  if (getActiveConsumer() !== null) {\n    throwError(`${fn}() should never be called in a reactive context.`);\n  }\n}\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call [`inject`](api/core/inject) to access the `Injector` and request injection\n * of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nfunction ɵɵdefineInjectable(opts) {\n  return {\n    token: opts.token,\n    providedIn: opts.providedIn || null,\n    factory: opts.factory,\n    value: undefined\n  };\n}\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nconst defineInjectable = ɵɵdefineInjectable;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nfunction ɵɵdefineInjector(options) {\n  return {\n    providers: options.providers || [],\n    imports: options.imports || []\n  };\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nfunction getInjectableDef(type) {\n  return getOwnDefinition(type, NG_PROV_DEF);\n}\nfunction isInjectable(type) {\n  return getInjectableDef(type) !== null;\n}\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition(type, field) {\n  // if the ɵprov prop exist but is undefined we still want to return null\n  return type.hasOwnProperty(field) && type[field] || null;\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nfunction getInheritedInjectableDef(type) {\n  // if the ɵprov prop exist but is undefined we still want to return null\n  const def = type?.[NG_PROV_DEF] ?? null;\n  if (def) {\n    ngDevMode && console.warn(`DEPRECATED: DI is instantiating a token \"${type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` + `This will become an error in a future version of Angular. Please add @Injectable() to the \"${type.name}\" class.`);\n    return def;\n  } else {\n    return null;\n  }\n}\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nfunction getInjectorDef(type) {\n  return type && type.hasOwnProperty(NG_INJ_DEF) ? type[NG_INJ_DEF] : null;\n}\nconst NG_PROV_DEF = /*#__PURE__*/getClosureSafeProperty({\n  ɵprov: getClosureSafeProperty\n});\nconst NG_INJ_DEF = /*#__PURE__*/getClosureSafeProperty({\n  ɵinj: getClosureSafeProperty\n});\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n * **Important Note**: Ensure that you use the same instance of the `InjectionToken` in both the\n * provider and the injection call. Creating a new instance of `InjectionToken` in different places,\n * even with the same description, will be treated as different tokens by Angular's DI system,\n * leading to a `NullInjectorError`.\n *\n * </div>\n *\n * {@example injection-token/src/main.ts region='InjectionToken'}\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the [`inject`](api/core/inject) function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule` (note:\n * this option is now deprecated). As mentioned above, `'root'` is the default value for\n * `providedIn`.\n *\n * The `providedIn: NgModule` and `providedIn: 'any'` options are deprecated.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @publicApi\n */\nclass InjectionToken {\n  _desc;\n  /** @internal */\n  ngMetadataName = 'InjectionToken';\n  ɵprov;\n  /**\n   * @param _desc   Description for the token,\n   *                used only for debugging purposes,\n   *                it should but does not need to be unique\n   * @param options Options for the token's usage, as described above\n   */\n  constructor(_desc, options) {\n    this._desc = _desc;\n    this.ɵprov = undefined;\n    if (typeof options == 'number') {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && assertLessThan(options, 0, 'Only negative numbers are supported here');\n      // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // See `InjectorMarkers`\n      this.__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory\n      });\n    }\n  }\n  /**\n   * @internal\n   */\n  get multi() {\n    return this;\n  }\n  toString() {\n    return `InjectionToken ${this._desc}`;\n  }\n}\nlet _injectorProfilerContext;\nfunction getInjectorProfilerContext() {\n  !ngDevMode && throwError('getInjectorProfilerContext should never be called in production mode');\n  return _injectorProfilerContext;\n}\nfunction setInjectorProfilerContext(context) {\n  !ngDevMode && throwError('setInjectorProfilerContext should never be called in production mode');\n  const previous = _injectorProfilerContext;\n  _injectorProfilerContext = context;\n  return previous;\n}\nconst injectorProfilerCallbacks = [];\nconst NOOP_PROFILER_REMOVAL = () => {};\nfunction removeProfiler(profiler) {\n  const profilerIdx = injectorProfilerCallbacks.indexOf(profiler);\n  if (profilerIdx !== -1) {\n    injectorProfilerCallbacks.splice(profilerIdx, 1);\n  }\n}\n/**\n * Adds a callback function which will be invoked during certain DI events within the\n * runtime (for example: injecting services, creating injectable instances, configuring providers).\n * Multiple profiler callbacks can be set: in this case profiling events are\n * reported to every registered callback.\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n * @returns a cleanup function that, when invoked, removes a given profiler callback.\n */\nfunction setInjectorProfiler(injectorProfiler) {\n  !ngDevMode && throwError('setInjectorProfiler should never be called in production mode');\n  if (injectorProfiler !== null) {\n    if (!injectorProfilerCallbacks.includes(injectorProfiler)) {\n      injectorProfilerCallbacks.push(injectorProfiler);\n    }\n    return () => removeProfiler(injectorProfiler);\n  } else {\n    injectorProfilerCallbacks.length = 0;\n    return NOOP_PROFILER_REMOVAL;\n  }\n}\n/**\n * Injector profiler function which emits on DI events executed by the runtime.\n *\n * @param event InjectorProfilerEvent corresponding to the DI event being emitted\n */\nfunction injectorProfiler(event) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  for (let i = 0; i < injectorProfilerCallbacks.length; i++) {\n    const injectorProfilerCallback = injectorProfilerCallbacks[i];\n    injectorProfilerCallback(event);\n  }\n}\n/**\n * Emits an InjectorProfilerEventType.ProviderConfigured to the injector profiler. The data in the\n * emitted event includes the raw provider, as well as the token that provider is providing.\n *\n * @param eventProvider A provider object\n */\nfunction emitProviderConfiguredEvent(eventProvider, isViewProvider = false) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  let token;\n  // if the provider is a TypeProvider (typeof provider is function) then the token is the\n  // provider itself\n  if (typeof eventProvider === 'function') {\n    token = eventProvider;\n  }\n  // if the provider is an injection token, then the token is the injection token.\n  else if (eventProvider instanceof InjectionToken) {\n    token = eventProvider;\n  }\n  // in all other cases we can access the token via the `provide` property of the provider\n  else {\n    token = resolveForwardRef(eventProvider.provide);\n  }\n  let provider = eventProvider;\n  // Injection tokens may define their own default provider which gets attached to the token itself\n  // as `ɵprov`. In this case, we want to emit the provider that is attached to the token, not the\n  // token itself.\n  if (eventProvider instanceof InjectionToken) {\n    provider = eventProvider.ɵprov || eventProvider;\n  }\n  injectorProfiler({\n    type: 2 /* InjectorProfilerEventType.ProviderConfigured */,\n    context: getInjectorProfilerContext(),\n    providerRecord: {\n      token,\n      provider,\n      isViewProvider\n    }\n  });\n}\n/**\n * Emits an event to the injector profiler when an instance corresponding to a given token is about to be created be an injector. Note that\n * the injector associated with this emission can be accessed by using getDebugInjectContext()\n *\n * @param instance an object created by an injector\n */\nfunction emitInjectorToCreateInstanceEvent(token) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  injectorProfiler({\n    type: 4 /* InjectorProfilerEventType.InjectorToCreateInstanceEvent */,\n    context: getInjectorProfilerContext(),\n    token: token\n  });\n}\n/**\n * Emits an event to the injector profiler with the instance that was created. Note that\n * the injector associated with this emission can be accessed by using getDebugInjectContext()\n *\n * @param instance an object created by an injector\n */\nfunction emitInstanceCreatedByInjectorEvent(instance) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  injectorProfiler({\n    type: 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */,\n    context: getInjectorProfilerContext(),\n    instance: {\n      value: instance\n    }\n  });\n}\n/**\n * @param token DI token associated with injected service\n * @param value the instance of the injected service (i.e the result of `inject(token)`)\n * @param flags the flags that the token was injected with\n */\nfunction emitInjectEvent(token, value, flags) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  injectorProfiler({\n    type: 0 /* InjectorProfilerEventType.Inject */,\n    context: getInjectorProfilerContext(),\n    service: {\n      token,\n      value,\n      flags\n    }\n  });\n}\nfunction emitEffectCreatedEvent(effect) {\n  !ngDevMode && throwError('Injector profiler should never be called in production mode');\n  injectorProfiler({\n    type: 3 /* InjectorProfilerEventType.EffectCreated */,\n    context: getInjectorProfilerContext(),\n    effect\n  });\n}\nfunction runInInjectorProfilerContext(injector, token, callback) {\n  !ngDevMode && throwError('runInInjectorProfilerContext should never be called in production mode');\n  const prevInjectContext = setInjectorProfilerContext({\n    injector,\n    token\n  });\n  try {\n    callback();\n  } finally {\n    setInjectorProfilerContext(prevInjectContext);\n  }\n}\nfunction isEnvironmentProviders(value) {\n  return value && !!value.ɵproviders;\n}\nconst NG_COMP_DEF = /*#__PURE__*/getClosureSafeProperty({\n  ɵcmp: getClosureSafeProperty\n});\nconst NG_DIR_DEF = /*#__PURE__*/getClosureSafeProperty({\n  ɵdir: getClosureSafeProperty\n});\nconst NG_PIPE_DEF = /*#__PURE__*/getClosureSafeProperty({\n  ɵpipe: getClosureSafeProperty\n});\nconst NG_MOD_DEF = /*#__PURE__*/getClosureSafeProperty({\n  ɵmod: getClosureSafeProperty\n});\nconst NG_FACTORY_DEF = /*#__PURE__*/getClosureSafeProperty({\n  ɵfac: getClosureSafeProperty\n});\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nconst NG_ELEMENT_ID = /*#__PURE__*/getClosureSafeProperty({\n  __NG_ELEMENT_ID__: getClosureSafeProperty\n});\n/**\n * The `NG_ENV_ID` field on a DI token indicates special processing in the `EnvironmentInjector`:\n * getting such tokens from the `EnvironmentInjector` will bypass the standard DI resolution\n * strategy and instead will return implementation produced by the `NG_ENV_ID` factory function.\n *\n * This particular retrieval of DI tokens is mostly done to eliminate circular dependencies and\n * improve tree-shaking.\n */\nconst NG_ENV_ID = /*#__PURE__*/getClosureSafeProperty({\n  __NG_ENV_ID__: getClosureSafeProperty\n});\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nfunction renderStringify(value) {\n  if (typeof value === 'string') return value;\n  if (value == null) return '';\n  // Use `String` so that it invokes the `toString` method of the value. Note that this\n  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n  return String(value);\n}\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n *\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nfunction stringifyForError(value) {\n  if (typeof value === 'function') return value.name || value.toString();\n  if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n    return value.type.name || value.type.toString();\n  }\n  return renderStringify(value);\n}\n/**\n * Used to stringify a `Type` and including the file path and line number in which it is defined, if\n * possible, for better debugging experience.\n *\n * Important! This function contains a megamorphic read and should only be used for error messages.\n */\nfunction debugStringifyTypeForError(type) {\n  // TODO(pmvald): Do some refactoring so that we can use getComponentDef here without creating\n  // circular deps.\n  let componentDef = type[NG_COMP_DEF] || null;\n  if (componentDef !== null && componentDef.debugInfo) {\n    return stringifyTypeFromDebugInfo(componentDef.debugInfo);\n  }\n  return stringifyForError(type);\n}\n// TODO(pmvald): Do some refactoring so that we can use the type ClassDebugInfo for the param\n// debugInfo here without creating circular deps.\nfunction stringifyTypeFromDebugInfo(debugInfo) {\n  if (!debugInfo.filePath || !debugInfo.lineNumber) {\n    return debugInfo.className;\n  } else {\n    return `${debugInfo.className} (at ${debugInfo.filePath}:${debugInfo.lineNumber})`;\n  }\n}\nconst NG_RUNTIME_ERROR_CODE = /*#__PURE__*/getClosureSafeProperty({\n  'ngErrorCode': getClosureSafeProperty\n});\nconst NG_RUNTIME_ERROR_MESSAGE = /*#__PURE__*/getClosureSafeProperty({\n  'ngErrorMessage': getClosureSafeProperty\n});\nconst NG_TOKEN_PATH = /*#__PURE__*/getClosureSafeProperty({\n  'ngTokenPath': getClosureSafeProperty\n});\n/** Creates a circular dependency runtime error. */\nfunction cyclicDependencyError(token, path) {\n  const message = ngDevMode ? `Circular dependency detected for \\`${token}\\`.` : '';\n  return createRuntimeError(message, -200 /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */, path);\n}\n/** Creates a circular dependency runtime error including a dependency path in the error message. */\nfunction cyclicDependencyErrorWithDetails(token, path) {\n  return augmentRuntimeError(cyclicDependencyError(token, path), null);\n}\nfunction throwMixedMultiProviderError() {\n  throw new Error(`Cannot mix multi providers and regular providers`);\n}\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\n  if (ngModuleType && providers) {\n    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`);\n  } else if (isEnvironmentProviders(provider)) {\n    if (provider.ɵfromNgModule) {\n      throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\n    } else {\n      throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);\n    }\n  } else {\n    throw new Error('Invalid provider');\n  }\n}\n/** Throws an error when a token is not found in DI. */\nfunction throwProviderNotFoundError(token, injectorName) {\n  const errorMessage = ngDevMode && `No provider for ${stringifyForError(token)} found${injectorName ? ` in ${injectorName}` : ''}`;\n  throw new RuntimeError(-201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */, errorMessage);\n}\n/**\n * Given an Error instance and the current token - update the monkey-patched\n * dependency path info to include that token.\n *\n * @param error Current instance of the Error class.\n * @param token Extra token that should be appended.\n */\nfunction prependTokenToDependencyPath(error, token) {\n  error[NG_TOKEN_PATH] ??= [];\n  // Append current token to the current token path. Since the error\n  // is bubbling up, add the token in front of other tokens.\n  const currentPath = error[NG_TOKEN_PATH];\n  // Do not append the same token multiple times.\n  let pathStr;\n  if (typeof token === 'object' && 'multi' in token && token?.multi === true) {\n    assertDefined(token.provide, 'Token with multi: true should have a provide property');\n    pathStr = stringifyForError(token.provide);\n  } else {\n    pathStr = stringifyForError(token);\n  }\n  if (currentPath[0] !== pathStr) {\n    error[NG_TOKEN_PATH].unshift(pathStr);\n  }\n}\n/**\n * Modifies an Error instance with an updated error message\n * based on the accumulated dependency path.\n *\n * @param error Current instance of the Error class.\n * @param source Extra info about the injector which started\n *    the resolution process, which eventually failed.\n */\nfunction augmentRuntimeError(error, source) {\n  const tokenPath = error[NG_TOKEN_PATH];\n  const errorCode = error[NG_RUNTIME_ERROR_CODE];\n  const message = error[NG_RUNTIME_ERROR_MESSAGE] || error.message;\n  error.message = formatErrorMessage(message, errorCode, tokenPath, source);\n  return error;\n}\n/**\n * Creates an initial RuntimeError instance when a problem is detected.\n * Monkey-patches extra info in the RuntimeError instance, so that it can\n * be reused later, before throwing the final error.\n */\nfunction createRuntimeError(message, code, path) {\n  // Cast to `any`, so that extra info can be monkey-patched onto this instance.\n  const error = new RuntimeError(code, message);\n  // Monkey-patch a runtime error code and a path onto an Error instance.\n  error[NG_RUNTIME_ERROR_CODE] = code;\n  error[NG_RUNTIME_ERROR_MESSAGE] = message;\n  if (path) {\n    error[NG_TOKEN_PATH] = path;\n  }\n  return error;\n}\n/**\n * Reads monkey-patched error code from the given Error instance.\n */\nfunction getRuntimeErrorCode(error) {\n  return error[NG_RUNTIME_ERROR_CODE];\n}\nfunction formatErrorMessage(text, code, path = [], source = null) {\n  let pathDetails = '';\n  // If the path is empty or contains only one element (self) -\n  // do not append additional info the error message.\n  if (path && path.length > 1) {\n    pathDetails = ` Path: ${path.join(' -> ')}.`;\n  }\n  const sourceDetails = source ? ` Source: ${source}.` : '';\n  return formatRuntimeError(code, `${text}${sourceDetails}${pathDetails}`);\n}\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation;\nfunction getInjectImplementation() {\n  return _injectImplementation;\n}\n/**\n * Sets the current inject implementation.\n */\nfunction setInjectImplementation(impl) {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n  const injectableDef = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;\n  }\n  if (flags & 8 /* InternalInjectFlags.Optional */) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throwProviderNotFoundError(token, 'Injector');\n}\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nfunction assertInjectImplementationNotEqual(fn) {\n  ngDevMode && assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\nconst _THROW_IF_NOT_FOUND = {};\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\n/**\n * A wrapper around an `Injector` that implements the `PrimitivesInjector` interface.\n *\n * This is used to allow the `inject` function to be used with the new primitives-based DI system.\n */\nclass RetrievingInjector {\n  injector;\n  constructor(injector) {\n    this.injector = injector;\n  }\n  retrieve(token, options) {\n    const flags = convertToBitFlags(options) || 0 /* InternalInjectFlags.Default */;\n    try {\n      return this.injector.get(token,\n      // When a dependency is requested with an optional flag, DI returns null as the default value.\n      flags & 8 /* InternalInjectFlags.Optional */ ? null : THROW_IF_NOT_FOUND, flags);\n    } catch (e) {\n      if (isNotFound(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n}\nfunction injectInjectorOnly(token, flags = 0 /* InternalInjectFlags.Default */) {\n  const currentInjector = getCurrentInjector();\n  if (currentInjector === undefined) {\n    throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode && `The \\`${stringify(token)}\\` token injection failed. \\`inject()\\` function must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`runInInjectionContext\\`.`);\n  } else if (currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    const options = convertToInjectOptions(flags);\n    // TODO: improve the typings here.\n    // `token` can be a multi: true provider definition, which is considered as a Token but not represented in the typings\n    const value = currentInjector.retrieve(token, options);\n    ngDevMode && emitInjectEvent(token, value, flags);\n    if (isNotFound(value)) {\n      if (options.optional) {\n        return null;\n      }\n      throw value;\n    }\n    return value;\n  }\n}\nfunction ɵɵinject(token, flags = 0 /* InternalInjectFlags.Default */) {\n  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactoryDep(index) {\n  throw new RuntimeError(202 /* RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY */, ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\n}\n/**\n * Injects a token from the currently active injector.\n * `inject` is only supported in an [injection context](guide/di/dependency-injection-context). It\n * can be used during:\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\n * as an `@Injectable` or `@Component`.\n * - In the initializer for fields of such classes.\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\n * - In the `factory` function specified for an `InjectionToken`.\n * - In a stackframe of a function call in a DI context\n *\n * @param token A token that represents a dependency that should be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @usageNotes\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\n * field initializer:\n *\n * ```ts\n * @Injectable({providedIn: 'root'})\n * export class Car {\n *   radio: Radio|undefined;\n *   // OK: field initializer\n *   spareTyre = inject(Tyre);\n *\n *   constructor() {\n *     // OK: constructor body\n *     this.radio = inject(Radio);\n *   }\n * }\n * ```\n *\n * It is also legal to call `inject` from a provider's factory:\n *\n * ```ts\n * providers: [\n *   {provide: Car, useFactory: () => {\n *     // OK: a class factory\n *     const engine = inject(Engine);\n *     return new Car(engine);\n *   }}\n * ]\n * ```\n *\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\n * (including lifecycle hooks):\n *\n * ```ts\n * @Component({ ... })\n * export class CarComponent {\n *   ngOnInit() {\n *     // ERROR: too late, the component instance was already created\n *     const engine = inject(Engine);\n *     engine.start();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nfunction inject(token, options) {\n  // The `as any` here _shouldn't_ be necessary, but without it JSCompiler\n  // throws a disambiguation  error due to the multiple signatures.\n  return ɵɵinject(token, convertToBitFlags(options));\n}\n// Converts object-based DI flags (`InjectOptions`) to bit flags (`InjectFlags`).\nfunction convertToBitFlags(flags) {\n  if (typeof flags === 'undefined' || typeof flags === 'number') {\n    return flags;\n  }\n  // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n  // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n  // `InjectOptions` to `InjectFlags`.\n  return 0 /* InternalInjectFlags.Default */ | (\n  // comment to force a line break in the formatter\n  flags.optional && 8 /* InternalInjectFlags.Optional */) | (flags.host && 1 /* InternalInjectFlags.Host */) | (flags.self && 2 /* InternalInjectFlags.Self */) | (flags.skipSelf && 4 /* InternalInjectFlags.SkipSelf */);\n}\n// Converts bitflags to inject options\nfunction convertToInjectOptions(flags) {\n  return {\n    optional: !!(flags & 8 /* InternalInjectFlags.Optional */),\n    host: !!(flags & 1 /* InternalInjectFlags.Host */),\n    self: !!(flags & 2 /* InternalInjectFlags.Self */),\n    skipSelf: !!(flags & 4 /* InternalInjectFlags.SkipSelf */)\n  };\n}\nfunction injectArgs(types) {\n  const args = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = resolveForwardRef(types[i]);\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && 'Arguments array must have arguments.');\n      }\n      let type = undefined;\n      let flags = 0 /* InternalInjectFlags.Default */;\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        const flag = getInjectFlag(meta);\n        if (typeof flag === 'number') {\n          // Special case when we handle @Inject decorator.\n          if (flag === -1 /* DecoratorFlags.Inject */) {\n            type = meta.token;\n          } else {\n            flags |= flag;\n          }\n        } else {\n          type = meta;\n        }\n      }\n      args.push(ɵɵinject(type, flags));\n    } else {\n      args.push(ɵɵinject(arg));\n    }\n  }\n  return args;\n}\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nfunction attachInjectFlag(decorator, flag) {\n  decorator[DI_DECORATOR_FLAG] = flag;\n  decorator.prototype[DI_DECORATOR_FLAG] = flag;\n  return decorator;\n}\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nfunction getInjectFlag(token) {\n  return token[DI_DECORATOR_FLAG];\n}\nfunction getFactoryDef(type, throwNotFound) {\n  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n  }\n  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nfunction arrayEquals(a, b, identityAccessor) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    let valueA = a[i];\n    let valueB = b[i];\n    if (identityAccessor) {\n      valueA = identityAccessor(valueA);\n      valueB = identityAccessor(valueB);\n    }\n    if (valueB !== valueA) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Flattens an array.\n */\nfunction flatten(list) {\n  return list.flat(Number.POSITIVE_INFINITY);\n}\nfunction deepForEach(input, fn) {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\nfunction addToArray(arr, index, value) {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\nfunction removeFromArray(arr, index) {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    return arr.pop();\n  } else {\n    return arr.splice(index, 1)[0];\n  }\n}\nfunction newArray(size, value) {\n  const list = [];\n  for (let i = 0; i < size; i++) {\n    list.push(value);\n  }\n  return list;\n}\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nfunction arraySplice(array, index, count) {\n  const length = array.length - count;\n  while (index < length) {\n    array[index] = array[index + count];\n    index++;\n  }\n  while (count--) {\n    array.pop(); // shrink the array\n  }\n}\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nfunction arrayInsert2(array, index, value1, value2) {\n  ngDevMode && assertLessThanOrEqual(index, array.length, \"Can't insert past array end.\");\n  let end = array.length;\n  if (end == index) {\n    // inserting at the end.\n    array.push(value1, value2);\n  } else if (end === 1) {\n    // corner case when we have less items in array than we have items to insert.\n    array.push(value2, array[0]);\n    array[0] = value1;\n  } else {\n    end--;\n    array.push(array[end - 1], array[end]);\n    while (end > index) {\n      const previousEnd = end - 2;\n      array[end] = array[previousEnd];\n      end--;\n    }\n    array[index] = value1;\n    array[index + 1] = value2;\n  }\n}\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nfunction keyValueArraySet(keyValueArray, key, value) {\n  let index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it set it.\n    keyValueArray[index | 1] = value;\n  } else {\n    index = ~index;\n    arrayInsert2(keyValueArray, index, key, value);\n  }\n  return index;\n}\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nfunction keyValueArrayGet(keyValueArray, key) {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it retrieve it.\n    return keyValueArray[index | 1];\n  }\n  return undefined;\n}\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nfunction keyValueArrayIndexOf(keyValueArray, key) {\n  return _arrayIndexOfSorted(keyValueArray, key, 1);\n}\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array, value, shift) {\n  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n  let start = 0;\n  let end = array.length >> shift;\n  while (end !== start) {\n    const middle = start + (end - start >> 1); // find the middle.\n    const current = array[middle << shift];\n    if (value === current) {\n      return middle << shift;\n    } else if (current > value) {\n      end = middle;\n    } else {\n      start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\n    }\n  }\n  return ~(end << shift);\n}\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\nconst EMPTY_OBJ = {};\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && /*#__PURE__*/initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  /*#__PURE__*/Object.freeze(EMPTY_OBJ);\n  // tslint:disable-next-line:no-toplevel-property-access\n  /*#__PURE__*/Object.freeze(EMPTY_ARRAY);\n}\n\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @deprecated from v19.0.0, use provideEnvironmentInitializer instead\n *\n * @see {@link provideEnvironmentInitializer}\n *\n * Note: As opposed to the `APP_INITIALIZER` token, the `ENVIRONMENT_INITIALIZER` functions are not awaited,\n * hence they should not be `async`.\n *\n * @publicApi\n */\nconst ENVIRONMENT_INITIALIZER = /*#__PURE__*/new InjectionToken(ngDevMode ? 'ENVIRONMENT_INITIALIZER' : '');\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nconst INJECTOR$1 = /*#__PURE__*/new InjectionToken(ngDevMode ? 'INJECTOR' : '',\n// Disable tslint because this is const enum which gets inlined not top level prop access.\n// tslint:disable-next-line: no-toplevel-property-access\n-1 /* InjectorMarkers.Injector */);\nconst INJECTOR_DEF_TYPES = /*#__PURE__*/new InjectionToken(ngDevMode ? 'INJECTOR_DEF_TYPES' : '');\nclass NullInjector {\n  get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const message = ngDevMode ? `No provider found for \\`${stringify(token)}\\`.` : '';\n      const error = createRuntimeError(message, -201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */);\n      // Note: This is the name used by the primitives to identify a not found error.\n      error.name = 'ɵNotFound';\n      throw error;\n    }\n    return notFoundValue;\n  }\n}\nfunction getNgModuleDef(type) {\n  return type[NG_MOD_DEF] || null;\n}\nfunction getNgModuleDefOrThrow(type) {\n  const ngModuleDef = getNgModuleDef(type);\n  if (!ngModuleDef) {\n    throw new RuntimeError(915 /* RuntimeErrorCode.MISSING_NG_MODULE_DEFINITION */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Type ${stringify(type)} does not have 'ɵmod' property.`);\n  }\n  return ngModuleDef;\n}\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nfunction getComponentDef(type) {\n  return type[NG_COMP_DEF] || null;\n}\nfunction getDirectiveDefOrThrow(type) {\n  const def = getDirectiveDef(type);\n  if (!def) {\n    throw new RuntimeError(916 /* RuntimeErrorCode.MISSING_DIRECTIVE_DEFINITION */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Type ${stringify(type)} does not have 'ɵdir' property.`);\n  }\n  return def;\n}\nfunction getDirectiveDef(type) {\n  return type[NG_DIR_DEF] || null;\n}\nfunction getPipeDef(type) {\n  return type[NG_PIPE_DEF] || null;\n}\n/**\n * Checks whether a given Component, Directive or Pipe is marked as standalone.\n * This will return false if passed anything other than a Component, Directive, or Pipe class\n * See [this guide](guide/components/importing) for additional information:\n *\n * @param type A reference to a Component, Directive or Pipe.\n * @publicApi\n */\nfunction isStandalone(type) {\n  const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n  return def !== null && def.standalone;\n}\n\n/**\n * Wrap an array of `Provider`s into `EnvironmentProviders`, preventing them from being accidentally\n * referenced in `@Component` in a component injector.\n *\n * @publicApi\n */\nfunction makeEnvironmentProviders(providers) {\n  return {\n    ɵproviders: providers\n  };\n}\n/**\n * @description\n * This function is used to provide initialization functions that will be executed upon construction\n * of an environment injector.\n *\n * Note that the provided initializer is run in the injection context.\n *\n * Previously, this was achieved using the `ENVIRONMENT_INITIALIZER` token which is now deprecated.\n *\n * @see {@link ENVIRONMENT_INITIALIZER}\n *\n * @usageNotes\n * The following example illustrates how to configure an initialization function using\n * `provideEnvironmentInitializer()`\n * ```ts\n * createEnvironmentInjector(\n *   [\n *     provideEnvironmentInitializer(() => {\n *       console.log('environment initialized');\n *     }),\n *   ],\n *   parentInjector\n * );\n * ```\n *\n * @publicApi\n */\nfunction provideEnvironmentInitializer(initializerFn) {\n  return makeEnvironmentProviders([{\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useValue: initializerFn\n  }]);\n}\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/components/importing).\n *\n * @usageNotes\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\n *\n * ```ts\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * ```\n *\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\n * standalone component is used:\n *\n * ```ts\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * ```\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n */\nfunction importProvidersFrom(...sources) {\n  return {\n    ɵproviders: internalImportProvidersFrom(true, sources),\n    ɵfromNgModule: true\n  };\n}\nfunction internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {\n  const providersOut = [];\n  const dedup = new Set(); // already seen types\n  let injectorTypesWithProviders;\n  const collectProviders = provider => {\n    providersOut.push(provider);\n  };\n  deepForEach(sources, source => {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n      const cmpDef = getComponentDef(source);\n      if (cmpDef?.standalone) {\n        throw new RuntimeError(800 /* RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE */, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(source)}\"`);\n      }\n    }\n    // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n    const internalSource = source;\n    if (walkProviderTree(internalSource, collectProviders, [], dedup)) {\n      injectorTypesWithProviders ||= [];\n      injectorTypesWithProviders.push(internalSource);\n    }\n  });\n  // Collect all providers from `ModuleWithProviders` types.\n  if (injectorTypesWithProviders !== undefined) {\n    processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);\n  }\n  return providersOut;\n}\n/**\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\n * array.\n */\nfunction processInjectorTypesWithProviders(typesWithProviders, visitor) {\n  for (let i = 0; i < typesWithProviders.length; i++) {\n    const {\n      ngModule,\n      providers\n    } = typesWithProviders[i];\n    deepForEachProvider(providers, provider => {\n      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n      visitor(provider, ngModule);\n    });\n  }\n}\n/**\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\n * `ComponentType`, and all of its transitive providers and collects providers.\n *\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n * the function will return \"true\" to indicate that the providers of the type definition need\n * to be processed. This allows us to process providers of injector types after all imports of\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\n */\nfunction walkProviderTree(container, visitor, parents, dedup) {\n  container = resolveForwardRef(container);\n  if (!container) return false;\n  // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n  // from `InjectorTypeWithProviders`.\n  let defType = null;\n  let injDef = getInjectorDef(container);\n  const cmpDef = !injDef && getComponentDef(container);\n  if (!injDef && !cmpDef) {\n    // `container` is not an injector type or a component type. It might be:\n    //  * An `InjectorTypeWithProviders` that wraps an injector type.\n    //  * A standalone directive or pipe that got pulled in from a standalone component's\n    //    dependencies.\n    // Try to unwrap it as an `InjectorTypeWithProviders` first.\n    const ngModule = container.ngModule;\n    injDef = getInjectorDef(ngModule);\n    if (injDef) {\n      defType = ngModule;\n    } else {\n      // Not a component or injector type, so ignore it.\n      return false;\n    }\n  } else if (cmpDef && !cmpDef.standalone) {\n    return false;\n  } else {\n    defType = container;\n  }\n  // Check for circular dependencies.\n  if (ngDevMode && parents.indexOf(defType) !== -1) {\n    const defName = stringify(defType);\n    const path = parents.map(stringify).concat(defName);\n    throw cyclicDependencyErrorWithDetails(defName, path);\n  }\n  // Check for multiple imports of the same module\n  const isDuplicate = dedup.has(defType);\n  if (cmpDef) {\n    if (isDuplicate) {\n      // This component definition has already been processed.\n      return false;\n    }\n    dedup.add(defType);\n    if (cmpDef.dependencies) {\n      const deps = typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n      for (const dep of deps) {\n        walkProviderTree(dep, visitor, parents, dedup);\n      }\n    }\n  } else if (injDef) {\n    // First, include providers from any imports.\n    if (injDef.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedup.add(defType);\n      let importTypesWithProviders;\n      try {\n        deepForEach(injDef.imports, imported => {\n          if (walkProviderTree(imported, visitor, parents, dedup)) {\n            importTypesWithProviders ||= [];\n            // If the processed import is an injector type with providers, we store it in the\n            // list of import types with providers, so that we can process those afterwards.\n            importTypesWithProviders.push(imported);\n          }\n        });\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n      // Imports which are declared with providers (TypeWithProviders) need to be processed\n      // after all imported modules are processed. This is similar to how View Engine\n      // processes/merges module imports in the metadata resolver. See: FW-1349.\n      if (importTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(importTypesWithProviders, visitor);\n      }\n    }\n    if (!isDuplicate) {\n      // Track the InjectorType and add a provider for it.\n      // It's important that this is done after the def's imports.\n      const factory = getFactoryDef(defType) || (() => new defType());\n      // Append extra providers to make more info available for consumers (to retrieve an injector\n      // type), as well as internally (to calculate an injection scope correctly and eagerly\n      // instantiate a `defType` when an injector is created).\n      // Provider to create `defType` using its factory.\n      visitor({\n        provide: defType,\n        useFactory: factory,\n        deps: EMPTY_ARRAY\n      }, defType);\n      // Make this `defType` available to an internal logic that calculates injector scope.\n      visitor({\n        provide: INJECTOR_DEF_TYPES,\n        useValue: defType,\n        multi: true\n      }, defType);\n      // Provider to eagerly instantiate `defType` via `INJECTOR_INITIALIZER`.\n      visitor({\n        provide: ENVIRONMENT_INITIALIZER,\n        useValue: () => ɵɵinject(defType),\n        multi: true\n      }, defType);\n    }\n    // Next, include providers listed on the definition itself.\n    const defProviders = injDef.providers;\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = container;\n      deepForEachProvider(defProviders, provider => {\n        ngDevMode && validateProvider(provider, defProviders, injectorType);\n        visitor(provider, injectorType);\n      });\n    }\n  } else {\n    // Should not happen, but just in case.\n    return false;\n  }\n  return defType !== container && container.providers !== undefined;\n}\nfunction validateProvider(provider, providers, containerType) {\n  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {\n    return;\n  }\n  // Here we expect the provider to be a `useClass` provider (by elimination).\n  const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n  if (!classRef) {\n    throwInvalidProviderError(containerType, providers, provider);\n  }\n}\nfunction deepForEachProvider(providers, fn) {\n  for (let provider of providers) {\n    if (isEnvironmentProviders(provider)) {\n      provider = provider.ɵproviders;\n    }\n    if (Array.isArray(provider)) {\n      deepForEachProvider(provider, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\nconst USE_VALUE = /*#__PURE__*/getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\nfunction isValueProvider(value) {\n  return value !== null && typeof value == 'object' && USE_VALUE in value;\n}\nfunction isExistingProvider(value) {\n  return !!(value && value.useExisting);\n}\nfunction isFactoryProvider(value) {\n  return !!(value && value.useFactory);\n}\nfunction isTypeProvider(value) {\n  return typeof value === 'function';\n}\nfunction isClassProvider(value) {\n  return !!value.useClass;\n}\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nconst INJECTOR_SCOPE = /*#__PURE__*/new InjectionToken(ngDevMode ? 'Set Injector scope.' : '');\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR = undefined;\nfunction getNullInjector() {\n  if (NULL_INJECTOR === undefined) {\n    NULL_INJECTOR = new NullInjector();\n  }\n  return NULL_INJECTOR;\n}\n/**\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n *\n * @publicApi\n */\nclass EnvironmentInjector {}\nclass R3Injector extends EnvironmentInjector {\n  parent;\n  source;\n  scopes;\n  /**\n   * Map of tokens to records which contain the instances of those tokens.\n   * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n   * to prevent further searches.\n   */\n  records = /*#__PURE__*/new Map();\n  /**\n   * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n   */\n  _ngOnDestroyHooks = /*#__PURE__*/new Set();\n  _onDestroyHooks = [];\n  /**\n   * Flag indicating that this injector was previously destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n  _destroyed = false;\n  injectorDefTypes;\n  constructor(providers, parent, source, scopes) {\n    super();\n    this.parent = parent;\n    this.source = source;\n    this.scopes = scopes;\n    // Start off by creating Records for every provider.\n    forEachSingleProvider(providers, provider => this.processProvider(provider));\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR$1, makeRecord(undefined, this));\n    // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n    if (scopes.has('environment')) {\n      this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n    }\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    const record = this.records.get(INJECTOR_SCOPE);\n    if (record != null && typeof record.value === 'string') {\n      this.scopes.add(record.value);\n    }\n    this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, {\n      self: true\n    }));\n  }\n  retrieve(token, options) {\n    const flags = convertToBitFlags(options) || 0 /* InternalInjectFlags.Default */;\n    try {\n      return this.get(token,\n      // When a dependency is requested with an optional flag, DI returns null as the default value.\n      THROW_IF_NOT_FOUND, flags);\n    } catch (e) {\n      if (isNotFound$1(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   */\n  destroy() {\n    assertNotDestroyed(this);\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this._destroyed = true;\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      // Call all the lifecycle hooks.\n      for (const service of this._ngOnDestroyHooks) {\n        service.ngOnDestroy();\n      }\n      const onDestroyHooks = this._onDestroyHooks;\n      // Reset the _onDestroyHooks array before iterating over it to prevent hooks that unregister\n      // themselves from mutating the array during iteration.\n      this._onDestroyHooks = [];\n      for (const hook of onDestroyHooks) {\n        hook();\n      }\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this._ngOnDestroyHooks.clear();\n      this.injectorDefTypes.clear();\n      setActiveConsumer(prevConsumer);\n    }\n  }\n  onDestroy(callback) {\n    assertNotDestroyed(this);\n    this._onDestroyHooks.push(callback);\n    return () => this.removeOnDestroy(callback);\n  }\n  runInContext(fn) {\n    assertNotDestroyed(this);\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    let prevInjectContext;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({\n        injector: this,\n        token: null\n      });\n    }\n    try {\n      return fn();\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n    }\n  }\n  get(token, notFoundValue = THROW_IF_NOT_FOUND, options) {\n    assertNotDestroyed(this);\n    if (token.hasOwnProperty(NG_ENV_ID)) {\n      return token[NG_ENV_ID](this);\n    }\n    const flags = convertToBitFlags(options);\n    // Set the injection context.\n    let prevInjectContext;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({\n        injector: this,\n        token: token\n      });\n    }\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & 4 /* InternalInjectFlags.SkipSelf */)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an injectable\n          // def with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            if (ngDevMode) {\n              runInInjectorProfilerContext(this, token, () => {\n                emitProviderConfiguredEvent(token);\n              });\n            }\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n          } else {\n            record = null;\n          }\n          this.records.set(token, record);\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record != null /* NOT null || undefined */) {\n          return this.hydrate(token, record, flags);\n        }\n      }\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      const nextInjector = !(flags & 2 /* InternalInjectFlags.Self */) ? this.parent : getNullInjector();\n      // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n      // is undefined, the value is null, otherwise it's the notFoundValue.\n      notFoundValue = flags & 8 /* InternalInjectFlags.Optional */ && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;\n      return nextInjector.get(token, notFoundValue);\n    } catch (error) {\n      // If there was a cyclic dependency error or a token was not found,\n      // an error is thrown at the level where the problem was detected.\n      // The error propagates up the call stack and the code below appends\n      // the current token into the path. As a result, the full path is assembled\n      // at the very top of the call stack, so the final error message can be\n      // formatted to include that path.\n      const errorCode = getRuntimeErrorCode(error);\n      if (errorCode === -200 /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */ || errorCode === -201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */) {\n        if (!ngDevMode) {\n          throw new RuntimeError(errorCode, null);\n        }\n        prependTokenToDependencyPath(error, token);\n        if (previousInjector) {\n          // We still have a parent injector, keep throwing\n          throw error;\n        } else {\n          // Format & throw the final error message when we don't have any previous injector\n          throw augmentRuntimeError(error, this.source);\n        }\n      } else {\n        throw error;\n      }\n    } finally {\n      // Lastly, restore the previous injection context.\n      setInjectImplementation(previousInjectImplementation);\n      setCurrentInjector(previousInjector);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n    }\n  }\n  /** @internal */\n  resolveInjectorInitializers() {\n    const prevConsumer = setActiveConsumer(null);\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    let prevInjectContext;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({\n        injector: this,\n        token: null\n      });\n    }\n    try {\n      const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, {\n        self: true\n      });\n      if (ngDevMode && !Array.isArray(initializers)) {\n        throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' + `(expected an array, but got ${typeof initializers}). ` + 'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' + '`multi: true` provider.');\n      }\n      for (const initializer of initializers) {\n        initializer();\n      }\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n      setActiveConsumer(prevConsumer);\n    }\n  }\n  toString() {\n    const tokens = [];\n    const records = this.records;\n    for (const token of records.keys()) {\n      tokens.push(stringify(token));\n    }\n    return `R3Injector[${tokens.join(', ')}]`;\n  }\n  /**\n   * Process a `SingleProvider` and add it.\n   */\n  processProvider(provider) {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n    // Construct a `Record` for the provider.\n    const record = providerToRecord(provider);\n    if (ngDevMode) {\n      runInInjectorProfilerContext(this, token, () => {\n        // Emit InjectorProfilerEventType.Create if provider is a value provider because\n        // these are the only providers that do not go through the value hydration logic\n        // where this event would normally be emitted from.\n        if (isValueProvider(provider)) {\n          emitInjectorToCreateInstanceEvent(token);\n          emitInstanceCreatedByInjectorEvent(provider.useValue);\n        }\n        emitProviderConfiguredEvent(provider);\n      });\n    }\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (ngDevMode && multiRecord.multi === undefined) {\n          throwMixedMultiProviderError();\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs(multiRecord.multi);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      multiRecord.multi.push(provider);\n    } else {\n      if (ngDevMode) {\n        const existing = this.records.get(token);\n        if (existing && existing.multi !== undefined) {\n          throwMixedMultiProviderError();\n        }\n      }\n    }\n    this.records.set(token, record);\n  }\n  hydrate(token, record, flags) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      if (record.value === CIRCULAR) {\n        throw cyclicDependencyError(stringify(token));\n      } else if (record.value === NOT_YET) {\n        record.value = CIRCULAR;\n        if (ngDevMode) {\n          runInInjectorProfilerContext(this, token, () => {\n            emitInjectorToCreateInstanceEvent(token);\n            record.value = record.factory(undefined, flags);\n            emitInstanceCreatedByInjectorEvent(record.value);\n          });\n        } else {\n          record.value = record.factory(undefined, flags);\n        }\n      }\n      if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n        this._ngOnDestroyHooks.add(record.value);\n      }\n      return record.value;\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n  injectableDefInScope(def) {\n    if (!def.providedIn) {\n      return false;\n    }\n    const providedIn = resolveForwardRef(def.providedIn);\n    if (typeof providedIn === 'string') {\n      return providedIn === 'any' || this.scopes.has(providedIn);\n    } else {\n      return this.injectorDefTypes.has(providedIn);\n    }\n  }\n  removeOnDestroy(callback) {\n    const destroyCBIdx = this._onDestroyHooks.indexOf(callback);\n    if (destroyCBIdx !== -1) {\n      this._onDestroyHooks.splice(destroyCBIdx, 1);\n    }\n  }\n}\nfunction injectableDefOrInjectorDefFactory(token) {\n  // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n  const injectableDef = getInjectableDef(token);\n  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n  if (factory !== null) {\n    return factory;\n  }\n  // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n  // If it's missing that, it's an error.\n  if (token instanceof InjectionToken) {\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\n  }\n  // Undecorated types can sometimes be created if they have no constructor arguments.\n  if (token instanceof Function) {\n    return getUndecoratedInjectableFactory(token);\n  }\n  // There was no way to resolve a factory for this token.\n  throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && 'unreachable');\n}\nfunction getUndecoratedInjectableFactory(token) {\n  // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n  const paramLength = token.length;\n  if (paramLength > 0) {\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${newArray(paramLength, '?').join(', ')}).`);\n  }\n  // The constructor function appears to have no parameters.\n  // This might be because it inherits from a super-class. In which case, use an injectable\n  // def from an ancestor if there is one.\n  // Otherwise this really is a simple class with no dependencies, so return a factory that\n  // just instantiates the zero-arg constructor.\n  const inheritedInjectableDef = getInheritedInjectableDef(token);\n  if (inheritedInjectableDef !== null) {\n    return () => inheritedInjectableDef.factory(token);\n  } else {\n    return () => new token();\n  }\n}\nfunction providerToRecord(provider) {\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    const factory = providerToFactory(provider);\n    return makeRecord(factory, NOT_YET);\n  }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n  let factory = undefined;\n  if (ngDevMode && isEnvironmentProviders(provider)) {\n    throwInvalidProviderError(undefined, providers, provider);\n  }\n  if (isTypeProvider(provider)) {\n    const unwrappedProvider = resolveForwardRef(provider);\n    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else if (isExistingProvider(provider)) {\n      factory = (_, flags) => ɵɵinject(resolveForwardRef(provider.useExisting), flags !== undefined && flags & 8 /* InternalInjectFlags.Optional */ ? 8 /* InternalInjectFlags.Optional */ : undefined);\n    } else {\n      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n      if (ngDevMode && !classRef) {\n        throwInvalidProviderError(ngModuleType, providers, provider);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new classRef(...injectArgs(provider.deps));\n      } else {\n        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\nfunction assertNotDestroyed(injector) {\n  if (injector.destroyed) {\n    throw new RuntimeError(205 /* RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED */, ngDevMode && 'Injector has already been destroyed.');\n  }\n}\nfunction makeRecord(factory, value, multi = false) {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined\n  };\n}\nfunction hasDeps(value) {\n  return !!value.deps;\n}\nfunction hasOnDestroy(value) {\n  return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';\n}\nfunction couldBeInjectableType(value) {\n  return typeof value === 'function' || typeof value === 'object' && value.ngMetadataName === 'InjectionToken';\n}\nfunction forEachSingleProvider(providers, fn) {\n  for (const provider of providers) {\n    if (Array.isArray(provider)) {\n      forEachSingleProvider(provider, fn);\n    } else if (provider && isEnvironmentProviders(provider)) {\n      forEachSingleProvider(provider.ɵproviders, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\n\n/**\n * Runs the given function in the [context](guide/di/dependency-injection-context) of the given\n * `Injector`.\n *\n * Within the function's stack frame, [`inject`](api/core/inject) can be used to inject dependencies\n * from the given `Injector`. Note that `inject` is only usable synchronously, and cannot be used in\n * any asynchronous callbacks or after any `await` points.\n *\n * @param injector the injector which will satisfy calls to [`inject`](api/core/inject) while `fn`\n *     is executing\n * @param fn the closure to be run in the context of `injector`\n * @returns the return value of the function, if any\n * @publicApi\n */\nfunction runInInjectionContext(injector, fn) {\n  let internalInjector;\n  if (injector instanceof R3Injector) {\n    assertNotDestroyed(injector);\n    internalInjector = injector;\n  } else {\n    internalInjector = new RetrievingInjector(injector);\n  }\n  let prevInjectorProfilerContext;\n  if (ngDevMode) {\n    prevInjectorProfilerContext = setInjectorProfilerContext({\n      injector,\n      token: null\n    });\n  }\n  const prevInjector = setCurrentInjector(internalInjector);\n  const previousInjectImplementation = setInjectImplementation(undefined);\n  try {\n    return fn();\n  } finally {\n    setCurrentInjector(prevInjector);\n    ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext);\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n/**\n * Whether the current stack frame is inside an injection context.\n */\nfunction isInInjectionContext() {\n  return getInjectImplementation() !== undefined || getCurrentInjector() != null;\n}\n/**\n * Asserts that the current stack frame is within an [injection\n * context](guide/di/dependency-injection-context) and has access to `inject`.\n *\n * @param debugFn a reference to the function making the assertion (used for the error message).\n *\n * @publicApi\n */\nfunction assertInInjectionContext(debugFn) {\n  // Taking a `Function` instead of a string name here prevents the unminified name of the function\n  // from being retained in the bundle regardless of minification.\n  if (!isInInjectionContext()) {\n    throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode && debugFn.name + '() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`');\n  }\n}\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nconst HOST = 0;\nconst TVIEW = 1;\n// Shared with LContainer\nconst FLAGS = 2;\nconst PARENT = 3;\nconst NEXT = 4;\nconst T_HOST = 5;\n// End shared with LContainer\nconst HYDRATION = 6;\nconst CLEANUP = 7;\nconst CONTEXT = 8;\nconst INJECTOR = 9;\nconst ENVIRONMENT = 10;\nconst RENDERER = 11;\nconst CHILD_HEAD = 12;\nconst CHILD_TAIL = 13;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nconst DECLARATION_VIEW = 14;\nconst DECLARATION_COMPONENT_VIEW = 15;\nconst DECLARATION_LCONTAINER = 16;\nconst PREORDER_HOOK_FLAGS = 17;\nconst QUERIES = 18;\nconst ID = 19;\nconst EMBEDDED_VIEW_INJECTOR = 20;\nconst ON_DESTROY_HOOKS = 21;\nconst EFFECTS_TO_SCHEDULE = 22;\nconst EFFECTS = 23;\nconst REACTIVE_TEMPLATE_CONSUMER = 24;\nconst AFTER_RENDER_SEQUENCES_TO_ADD = 25;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nconst HEADER_OFFSET = 26;\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nconst TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n// FLAGS, PARENT, NEXT, and T_HOST are indices 2, 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\nconst DEHYDRATED_VIEWS = 6;\nconst NATIVE = 7;\nconst VIEW_REFS = 8;\nconst MOVED_VIEWS = 9;\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nconst CONTAINER_HEADER_OFFSET = 10;\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLView(value) {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLContainer(value) {\n  return Array.isArray(value) && value[TYPE] === true;\n}\nfunction isContentQueryHost(tNode) {\n  return (tNode.flags & 4 /* TNodeFlags.hasContentQuery */) !== 0;\n}\nfunction isComponentHost(tNode) {\n  return tNode.componentOffset > -1;\n}\nfunction isDirectiveHost(tNode) {\n  return (tNode.flags & 1 /* TNodeFlags.isDirectiveHost */) === 1 /* TNodeFlags.isDirectiveHost */;\n}\nfunction isComponentDef(def) {\n  return !!def.template;\n}\nfunction isRootView(target) {\n  // Determines whether a given LView is marked as a root view.\n  return (target[FLAGS] & 512 /* LViewFlags.IsRoot */) !== 0;\n}\nfunction isProjectionTNode(tNode) {\n  return (tNode.type & 16 /* TNodeType.Projection */) === 16 /* TNodeType.Projection */;\n}\nfunction hasI18n(lView) {\n  return (lView[FLAGS] & 32 /* LViewFlags.HasI18n */) === 32 /* LViewFlags.HasI18n */;\n}\nfunction isDestroyed(lView) {\n  // Determines whether a given LView is marked as destroyed.\n  return (lView[FLAGS] & 256 /* LViewFlags.Destroyed */) === 256 /* LViewFlags.Destroyed */;\n}\n\n// [Assert functions do not constraint type when they are guarded by a truthy\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\nfunction assertTNodeForLView(tNode, lView) {\n  assertTNodeForTView(tNode, lView[TVIEW]);\n}\nfunction assertTNodeCreationIndex(lView, index) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  assertIndexInRange(lView, adjustedIndex);\n  assertLessThan(adjustedIndex, lView[TVIEW].bindingStartIndex, 'TNodes should be created before any bindings');\n}\nfunction assertTNodeForTView(tNode, tView) {\n  assertTNode(tNode);\n  const tData = tView.data;\n  for (let i = HEADER_OFFSET; i < tData.length; i++) {\n    if (tData[i] === tNode) {\n      return;\n    }\n  }\n  throwError('This TNode does not belong to this TView.');\n}\nfunction assertTNode(tNode) {\n  assertDefined(tNode, 'TNode must be defined');\n  if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\n    throwError('Not of type TNode, got: ' + tNode);\n  }\n}\nfunction assertTIcu(tIcu) {\n  assertDefined(tIcu, 'Expected TIcu to be defined');\n  if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\n    throwError('Object is not of TIcu type.');\n  }\n}\nfunction assertComponentType(actual, msg = \"Type passed in is not ComponentType, it does not have 'ɵcmp' property.\") {\n  if (!getComponentDef(actual)) {\n    throwError(msg);\n  }\n}\nfunction assertNgModuleType(actual, msg = \"Type passed in is not NgModuleType, it does not have 'ɵmod' property.\") {\n  if (!getNgModuleDef(actual)) {\n    throwError(msg);\n  }\n}\nfunction assertHasParent(tNode) {\n  assertDefined(tNode, 'currentTNode should exist!');\n  assertDefined(tNode.parent, 'currentTNode should have a parent');\n}\nfunction assertLContainer(value) {\n  assertDefined(value, 'LContainer must be defined');\n  assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\nfunction assertLViewOrUndefined(value) {\n  value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\nfunction assertLView(value) {\n  assertDefined(value, 'LView must be defined');\n  assertEqual(isLView(value), true, 'Expecting LView');\n}\nfunction assertFirstCreatePass(tView, errMessage) {\n  assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n}\nfunction assertFirstUpdatePass(tView, errMessage) {\n  assertEqual(tView.firstUpdatePass, true, 'Should only be called in first update pass.');\n}\n/**\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\n * an interface, so we can't do a direct instanceof check.\n */\nfunction assertDirectiveDef(obj) {\n  if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n    throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\n  }\n}\nfunction assertIndexInDeclRange(tView, index) {\n  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\n}\nfunction assertIndexInExpandoRange(lView, index) {\n  const tView = lView[1];\n  assertBetween(tView.expandoStartIndex, lView.length, index);\n}\nfunction assertBetween(lower, upper, index) {\n  if (!(lower <= index && index < upper)) {\n    throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\n  }\n}\nfunction assertProjectionSlots(lView, errMessage) {\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, 'Components with projection nodes (<ng-content>) must have projection slots defined.');\n}\nfunction assertParentView(lView, errMessage) {\n  assertDefined(lView, \"Component views should always have a parent view (component's host view)\");\n}\n/**\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\n * NodeInjector data structure.\n *\n * @param lView `LView` which should be checked.\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\n */\nfunction assertNodeInjector(lView, injectorIndex) {\n  assertIndexInExpandoRange(lView, injectorIndex);\n  assertIndexInExpandoRange(lView, injectorIndex + 8 /* NodeInjectorOffset.PARENT */);\n  assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */], 'injectorIndex should point to parent injector');\n}\nconst SVG_NAMESPACE = 'svg';\nconst MATH_ML_NAMESPACE = 'math';\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapRNode(value) {\n  while (Array.isArray(value)) {\n    value = value[HOST];\n  }\n  return value;\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapLView(value) {\n  while (Array.isArray(value)) {\n    // This check is same as `isLView()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (typeof value[TYPE] === 'object') return value;\n    value = value[HOST];\n  }\n  return null;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nfunction getNativeByIndex(index, lView) {\n  ngDevMode && assertIndexInRange(lView, index);\n  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n  return unwrapRNode(lView[index]);\n}\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNode(tNode, lView) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  ngDevMode && assertIndexInRange(lView, tNode.index);\n  const node = unwrapRNode(lView[tNode.index]);\n  return node;\n}\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNodeOrNull(tNode, lView) {\n  const index = tNode === null ? -1 : tNode.index;\n  if (index !== -1) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    const node = unwrapRNode(lView[index]);\n    return node;\n  }\n  return null;\n}\n// fixme(misko): The return Type should be `TNode|null`\nfunction getTNode(tView, index) {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n  const tNode = tView.data[index];\n  ngDevMode && tNode !== null && assertTNode(tNode);\n  return tNode;\n}\n/** Retrieves a value from any `LView` or `TData`. */\nfunction load(view, index) {\n  ngDevMode && assertIndexInRange(view, index);\n  return view[index];\n}\n/** Store a value in the `data` at a given `index`. */\nfunction store(tView, lView, index, value) {\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  if (index >= tView.data.length) {\n    tView.data[index] = null;\n    tView.blueprint[index] = null;\n  }\n  lView[index] = value;\n}\nfunction getComponentLViewByIndex(nodeIndex, hostView) {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  ngDevMode && assertIndexInRange(hostView, nodeIndex);\n  const slotValue = hostView[nodeIndex];\n  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n  return lView;\n}\n/** Checks whether a given view is in creation mode */\nfunction isCreationMode(view) {\n  return (view[FLAGS] & 4 /* LViewFlags.CreationMode */) === 4 /* LViewFlags.CreationMode */;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nfunction viewAttachedToChangeDetector(view) {\n  return (view[FLAGS] & 128 /* LViewFlags.Attached */) === 128 /* LViewFlags.Attached */;\n}\n/** Returns a boolean for whether the view is attached to a container. */\nfunction viewAttachedToContainer(view) {\n  return isLContainer(view[PARENT]);\n}\nfunction getConstant(consts, index) {\n  if (index === null || index === undefined) return null;\n  ngDevMode && assertIndexInRange(consts, index);\n  return consts[index];\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nfunction resetPreOrderHookFlags(lView) {\n  lView[PREORDER_HOOK_FLAGS] = 0;\n}\n/**\n * Adds the `RefreshView` flag from the lView and updates HAS_CHILD_VIEWS_TO_REFRESH flag of\n * parents.\n */\nfunction markViewForRefresh(lView) {\n  if (lView[FLAGS] & 1024 /* LViewFlags.RefreshView */) {\n    return;\n  }\n  lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n  if (viewAttachedToChangeDetector(lView)) {\n    markAncestorsForTraversal(lView);\n  }\n}\n/**\n * Walks up the LView hierarchy.\n * @param nestingLevel Number of times to walk up in hierarchy.\n * @param currentView View from which to start the lookup.\n */\nfunction walkUpViews(nestingLevel, currentView) {\n  while (nestingLevel > 0) {\n    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW];\n    nestingLevel--;\n  }\n  return currentView;\n}\nfunction requiresRefreshOrTraversal(lView) {\n  return !!(lView[FLAGS] & (1024 /* LViewFlags.RefreshView */ | 8192 /* LViewFlags.HasChildViewsToRefresh */) || lView[REACTIVE_TEMPLATE_CONSUMER]?.dirty);\n}\n/**\n * Updates the `HasChildViewsToRefresh` flag on the parents of the `LView` as well as the\n * parents above.\n */\nfunction updateAncestorTraversalFlagsOnAttach(lView) {\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(8 /* NotificationSource.ViewAttached */);\n  if (lView[FLAGS] & 64 /* LViewFlags.Dirty */) {\n    lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n  }\n  if (requiresRefreshOrTraversal(lView)) {\n    markAncestorsForTraversal(lView);\n  }\n}\n/**\n * Ensures views above the given `lView` are traversed during change detection even when they are\n * not dirty.\n *\n * This is done by setting the `HAS_CHILD_VIEWS_TO_REFRESH` flag up to the root, stopping when the\n * flag is already `true` or the `lView` is detached.\n */\nfunction markAncestorsForTraversal(lView) {\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(0 /* NotificationSource.MarkAncestorsForTraversal */);\n  let parent = getLViewParent(lView);\n  while (parent !== null) {\n    // We stop adding markers to the ancestors once we reach one that already has the marker. This\n    // is to avoid needlessly traversing all the way to the root when the marker already exists.\n    if (parent[FLAGS] & 8192 /* LViewFlags.HasChildViewsToRefresh */) {\n      break;\n    }\n    parent[FLAGS] |= 8192 /* LViewFlags.HasChildViewsToRefresh */;\n    if (!viewAttachedToChangeDetector(parent)) {\n      break;\n    }\n    parent = getLViewParent(parent);\n  }\n}\n/**\n * Stores a LView-specific destroy callback.\n */\nfunction storeLViewOnDestroy(lView, onDestroyCallback) {\n  if (isDestroyed(lView)) {\n    throw new RuntimeError(911 /* RuntimeErrorCode.VIEW_ALREADY_DESTROYED */, ngDevMode && 'View has already been destroyed.');\n  }\n  if (lView[ON_DESTROY_HOOKS] === null) {\n    lView[ON_DESTROY_HOOKS] = [];\n  }\n  lView[ON_DESTROY_HOOKS].push(onDestroyCallback);\n}\n/**\n * Removes previously registered LView-specific destroy callback.\n */\nfunction removeLViewOnDestroy(lView, onDestroyCallback) {\n  if (lView[ON_DESTROY_HOOKS] === null) return;\n  const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);\n  if (destroyCBIdx !== -1) {\n    lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);\n  }\n}\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nfunction getLViewParent(lView) {\n  ngDevMode && assertLView(lView);\n  const parent = lView[PARENT];\n  return isLContainer(parent) ? parent[PARENT] : parent;\n}\nfunction getOrCreateLViewCleanup(view) {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] ??= [];\n}\nfunction getOrCreateTViewCleanup(tView) {\n  return tView.cleanup ??= [];\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n */\nfunction storeCleanupWithContext(tView, lView, context, cleanupFn) {\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  // Historically the `storeCleanupWithContext` was used to register both framework-level and\n  // user-defined cleanup callbacks, but over time those two types of cleanups were separated.\n  // This dev mode checks assures that user-level cleanup callbacks are _not_ stored in data\n  // structures reserved for framework-specific hooks.\n  ngDevMode && assertDefined(context, 'Cleanup context is mandatory when registering framework-level destroy hooks');\n  lCleanup.push(context);\n  if (tView.firstCreatePass) {\n    getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n  } else {\n    // Make sure that no new framework-level cleanup functions are registered after the first\n    // template pass is done (and TView data structures are meant to fully constructed).\n    if (ngDevMode) {\n      Object.freeze(getOrCreateTViewCleanup(tView));\n    }\n  }\n}\nconst instructionState = {\n  lFrame: /*#__PURE__*/createLFrame(null),\n  bindingsEnabled: true,\n  skipHydrationRootTNode: null\n};\nvar CheckNoChangesMode = /*#__PURE__*/function (CheckNoChangesMode) {\n  CheckNoChangesMode[CheckNoChangesMode[\"Off\"] = 0] = \"Off\";\n  CheckNoChangesMode[CheckNoChangesMode[\"Exhaustive\"] = 1] = \"Exhaustive\";\n  CheckNoChangesMode[CheckNoChangesMode[\"OnlyDirtyViews\"] = 2] = \"OnlyDirtyViews\";\n  return CheckNoChangesMode;\n}(CheckNoChangesMode || {});\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n *\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\n * changes exist in the change detector or its children.\n */\nlet _checkNoChangesMode = 0; /* CheckNoChangesMode.Off */\n/**\n * Flag used to indicate that we are in the middle running change detection on a view\n *\n * @see detectChangesInViewWhileDirty\n */\nlet _isRefreshingViews = false;\nfunction getElementDepthCount() {\n  return instructionState.lFrame.elementDepthCount;\n}\nfunction increaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount++;\n}\nfunction decreaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount--;\n}\nfunction getBindingsEnabled() {\n  return instructionState.bindingsEnabled;\n}\n/**\n * Returns true if currently inside a skip hydration block.\n * @returns boolean\n */\nfunction isInSkipHydrationBlock() {\n  return instructionState.skipHydrationRootTNode !== null;\n}\n/**\n * Returns true if this is the root TNode of the skip hydration block.\n * @param tNode the current TNode\n * @returns boolean\n */\nfunction isSkipHydrationRootTNode(tNode) {\n  return instructionState.skipHydrationRootTNode === tNode;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```html\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵenableBindings() {\n  instructionState.bindingsEnabled = true;\n}\n/**\n * Sets a flag to specify that the TNode is in a skip hydration block.\n * @param tNode the current TNode\n */\nfunction enterSkipHydrationBlock(tNode) {\n  instructionState.skipHydrationRootTNode = tNode;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```html\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdisableBindings() {\n  instructionState.bindingsEnabled = false;\n}\n/**\n * Clears the root skip hydration node when leaving a skip hydration block.\n */\nfunction leaveSkipHydrationBlock() {\n  instructionState.skipHydrationRootTNode = null;\n}\n/**\n * Return the current `LView`.\n */\nfunction getLView() {\n  return instructionState.lFrame.lView;\n}\n/**\n * Return the current `TView`.\n */\nfunction getTView() {\n  return instructionState.lFrame.tView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nfunction ɵɵrestoreView(viewToRestore) {\n  instructionState.lFrame.contextLView = viewToRestore;\n  return viewToRestore[CONTEXT];\n}\n/**\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\nfunction ɵɵresetView(value) {\n  instructionState.lFrame.contextLView = null;\n  return value;\n}\nfunction getCurrentTNode() {\n  let currentTNode = getCurrentTNodePlaceholderOk();\n  while (currentTNode !== null && currentTNode.type === 64 /* TNodeType.Placeholder */) {\n    currentTNode = currentTNode.parent;\n  }\n  return currentTNode;\n}\nfunction getCurrentTNodePlaceholderOk() {\n  return instructionState.lFrame.currentTNode;\n}\nfunction getCurrentParentTNode() {\n  const lFrame = instructionState.lFrame;\n  const currentTNode = lFrame.currentTNode;\n  return lFrame.isParent ? currentTNode : currentTNode.parent;\n}\nfunction setCurrentTNode(tNode, isParent) {\n  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n  const lFrame = instructionState.lFrame;\n  lFrame.currentTNode = tNode;\n  lFrame.isParent = isParent;\n}\nfunction isCurrentTNodeParent() {\n  return instructionState.lFrame.isParent;\n}\nfunction setCurrentTNodeAsNotParent() {\n  instructionState.lFrame.isParent = false;\n}\nfunction getContextLView() {\n  const contextLView = instructionState.lFrame.contextLView;\n  ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n  return contextLView;\n}\nfunction isInCheckNoChangesMode() {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _checkNoChangesMode !== CheckNoChangesMode.Off;\n}\nfunction isExhaustiveCheckNoChanges() {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _checkNoChangesMode === CheckNoChangesMode.Exhaustive;\n}\nfunction setIsInCheckNoChangesMode(mode) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  _checkNoChangesMode = mode;\n}\nfunction isRefreshingViews() {\n  return _isRefreshingViews;\n}\nfunction setIsRefreshingViews(mode) {\n  const prev = _isRefreshingViews;\n  _isRefreshingViews = mode;\n  return prev;\n}\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nfunction getBindingRoot() {\n  const lFrame = instructionState.lFrame;\n  let index = lFrame.bindingRootIndex;\n  if (index === -1) {\n    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n  }\n  return index;\n}\nfunction getBindingIndex() {\n  return instructionState.lFrame.bindingIndex;\n}\nfunction setBindingIndex(value) {\n  return instructionState.lFrame.bindingIndex = value;\n}\nfunction nextBindingIndex() {\n  return instructionState.lFrame.bindingIndex++;\n}\nfunction incrementBindingIndex(count) {\n  const lFrame = instructionState.lFrame;\n  const index = lFrame.bindingIndex;\n  lFrame.bindingIndex = lFrame.bindingIndex + count;\n  return index;\n}\nfunction isInI18nBlock() {\n  return instructionState.lFrame.inI18n;\n}\nfunction setInI18nBlock(isInI18nBlock) {\n  instructionState.lFrame.inI18n = isInI18nBlock;\n}\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nfunction setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {\n  const lFrame = instructionState.lFrame;\n  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n  setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nfunction getCurrentDirectiveIndex() {\n  return instructionState.lFrame.currentDirectiveIndex;\n}\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nfunction setCurrentDirectiveIndex(currentDirectiveIndex) {\n  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nfunction getCurrentDirectiveDef(tData) {\n  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];\n}\nfunction getCurrentQueryIndex() {\n  return instructionState.lFrame.currentQueryIndex;\n}\nfunction setCurrentQueryIndex(value) {\n  instructionState.lFrame.currentQueryIndex = value;\n}\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView) {\n  const tView = lView[TVIEW];\n  // Return the declaration parent for embedded views\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  }\n  // Components don't have `TView.declTNode` because each instance of component could be\n  // inserted in different location, hence `TView.declTNode` is meaningless.\n  // Falling back to `T_HOST` in case we cross component boundary.\n  if (tView.type === 1 /* TViewType.Component */) {\n    return lView[T_HOST];\n  }\n  // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n  return null;\n}\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nfunction enterDI(lView, tNode, flags) {\n  ngDevMode && assertLViewOrUndefined(lView);\n  if (flags & 4 /* InternalInjectFlags.SkipSelf */) {\n    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n    let parentTNode = tNode;\n    let parentLView = lView;\n    while (true) {\n      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n      parentTNode = parentTNode.parent;\n      if (parentTNode === null && !(flags & 1 /* InternalInjectFlags.Host */)) {\n        parentTNode = getDeclarationTNode(parentLView);\n        if (parentTNode === null) break;\n        // In this case, a parent exists and is definitely an element. So it will definitely\n        // have an existing lView as the declaration view, which is why we can assume it's defined.\n        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n        parentLView = parentLView[DECLARATION_VIEW];\n        // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n        // We want to skip those and look only at Elements and ElementContainers to ensure\n        // we're looking at true parent nodes, and not content or other types.\n        if (parentTNode.type & (2 /* TNodeType.Element */ | 8 /* TNodeType.ElementContainer */)) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    if (parentTNode === null) {\n      // If we failed to find a parent TNode this means that we should use module injector.\n      return false;\n    } else {\n      tNode = parentTNode;\n      lView = parentLView;\n    }\n  }\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const lFrame = instructionState.lFrame = allocLFrame();\n  lFrame.currentTNode = tNode;\n  lFrame.lView = lView;\n  return true;\n}\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nfunction enterView(newView) {\n  ngDevMode && assertNotEqual(newView[0], newView[1], '????');\n  ngDevMode && assertLViewOrUndefined(newView);\n  const newLFrame = allocLFrame();\n  if (ngDevMode) {\n    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n  }\n  const tView = newView[TVIEW];\n  instructionState.lFrame = newLFrame;\n  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n  newLFrame.currentTNode = tView.firstChild;\n  newLFrame.lView = newView;\n  newLFrame.tView = tView;\n  newLFrame.contextLView = newView;\n  newLFrame.bindingIndex = tView.bindingStartIndex;\n  newLFrame.inI18n = false;\n}\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n  const currentLFrame = instructionState.lFrame;\n  const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n  return newLFrame;\n}\nfunction createLFrame(parent) {\n  const lFrame = {\n    currentTNode: null,\n    isParent: true,\n    lView: null,\n    tView: null,\n    selectedIndex: -1,\n    contextLView: null,\n    elementDepthCount: 0,\n    currentNamespace: null,\n    currentDirectiveIndex: -1,\n    bindingRootIndex: -1,\n    bindingIndex: -1,\n    currentQueryIndex: 0,\n    parent: parent,\n    child: null,\n    inI18n: false\n  };\n  parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n  return lFrame;\n}\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight() {\n  const oldLFrame = instructionState.lFrame;\n  instructionState.lFrame = oldLFrame.parent;\n  oldLFrame.currentTNode = null;\n  oldLFrame.lView = null;\n  return oldLFrame;\n}\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nconst leaveDI = leaveViewLight;\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nfunction leaveView() {\n  const oldLFrame = leaveViewLight();\n  oldLFrame.isParent = true;\n  oldLFrame.tView = null;\n  oldLFrame.selectedIndex = -1;\n  oldLFrame.contextLView = null;\n  oldLFrame.elementDepthCount = 0;\n  oldLFrame.currentDirectiveIndex = -1;\n  oldLFrame.currentNamespace = null;\n  oldLFrame.bindingRootIndex = -1;\n  oldLFrame.bindingIndex = -1;\n  oldLFrame.currentQueryIndex = 0;\n}\nfunction nextContextImpl(level) {\n  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);\n  return contextLView[CONTEXT];\n}\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nfunction getSelectedIndex() {\n  return instructionState.lFrame.selectedIndex;\n}\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nfunction setSelectedIndex(index) {\n  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, \"Can't set index passed end of LView\");\n  instructionState.lFrame.selectedIndex = index;\n}\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nfunction getSelectedTNode() {\n  const lFrame = instructionState.lFrame;\n  return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceSVG() {\n  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceMathML() {\n  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceHTML() {\n  namespaceHTMLInternal();\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nfunction namespaceHTMLInternal() {\n  instructionState.lFrame.currentNamespace = null;\n}\nfunction getNamespace() {\n  return instructionState.lFrame.currentNamespace;\n}\nlet _wasLastNodeCreated = true;\n/**\n * Retrieves a global flag that indicates whether the most recent DOM node\n * was created or hydrated.\n */\nfunction wasLastNodeCreated() {\n  return _wasLastNodeCreated;\n}\n/**\n * Sets a global flag to indicate whether the most recent DOM node\n * was created or hydrated.\n */\nfunction lastNodeWasCreated(flag) {\n  _wasLastNodeCreated = flag;\n}\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n */\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n  injector.resolveInjectorInitializers();\n  return injector;\n}\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nfunction createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = new Set()) {\n  const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];\n  name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/di/dependency-injection-providers) that associate\n * dependencies of various types with [injection tokens](guide/di/dependency-injection-providers).\n *\n * @see [DI Providers](guide/di/dependency-injection-providers).\n * @see {@link StaticProvider}\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nclass Injector {\n  static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n  static NULL = /*#__PURE__*/new NullInjector();\n  static create(options, parent) {\n    if (Array.isArray(options)) {\n      return createInjector({\n        name: ''\n      }, parent, options, '');\n    } else {\n      const name = options.name ?? '';\n      return createInjector({\n        name\n      }, options.parent, options.providers, name);\n    }\n  }\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ɵɵdefineInjectable({\n    token: Injector,\n    providedIn: 'any',\n    factory: () => ɵɵinject(INJECTOR$1)\n  });\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__ = -1 /* InjectorMarkers.Injector */;\n}\n\n/**\n * A DI Token representing the main rendering context.\n * In a browser and SSR this is the DOM Document.\n * When using SSR, that document is created by [Domino](https://github.com/angular/domino).\n *\n * @publicApi\n */\nconst DOCUMENT = /*#__PURE__*/new InjectionToken(ngDevMode ? 'DocumentToken' : '');\n\n/**\n * `DestroyRef` lets you set callbacks to run for any cleanup or destruction behavior.\n * The scope of this destruction depends on where `DestroyRef` is injected. If `DestroyRef`\n * is injected in a component or directive, the callbacks run when that component or\n * directive is destroyed. Otherwise the callbacks run when a corresponding injector is destroyed.\n *\n * @publicApi\n */\nlet DestroyRef = /*#__PURE__*/(() => {\n  class DestroyRef {\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ELEMENT_ID__ = injectDestroyRef;\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ENV_ID__ = injector => injector;\n  }\n  return DestroyRef;\n})();\nclass NodeInjectorDestroyRef extends DestroyRef {\n  _lView;\n  constructor(_lView) {\n    super();\n    this._lView = _lView;\n  }\n  get destroyed() {\n    return isDestroyed(this._lView);\n  }\n  onDestroy(callback) {\n    const lView = this._lView;\n    storeLViewOnDestroy(lView, callback);\n    return () => removeLViewOnDestroy(lView, callback);\n  }\n}\nfunction injectDestroyRef() {\n  return new NodeInjectorDestroyRef(getLView());\n}\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * // Provide in standalone apps\n * bootstrapApplication(AppComponent, {\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n *\n * // Provide in module-based apps\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nclass ErrorHandler {\n  /**\n   * @internal\n   */\n  _console = console;\n  handleError(error) {\n    this._console.error('ERROR', error);\n  }\n}\n/**\n * `InjectionToken` used to configure how to call the `ErrorHandler`.\n */\nconst INTERNAL_APPLICATION_ERROR_HANDLER = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'internal error handler' : '', {\n  providedIn: 'root',\n  factory: () => {\n    // The user's error handler may depend on things that create a circular dependency\n    // so we inject it lazily.\n    const injector = inject(EnvironmentInjector);\n    let userErrorHandler;\n    return e => {\n      if (injector.destroyed && !userErrorHandler) {\n        setTimeout(() => {\n          throw e;\n        });\n      } else {\n        userErrorHandler ??= injector.get(ErrorHandler);\n        userErrorHandler.handleError(e);\n      }\n    };\n  }\n});\nconst errorHandlerEnvironmentInitializer = {\n  provide: ENVIRONMENT_INITIALIZER,\n  useValue: () => void inject(ErrorHandler),\n  multi: true\n};\nconst globalErrorListeners = /*#__PURE__*/new InjectionToken(ngDevMode ? 'GlobalErrorListeners' : '', {\n  providedIn: 'root',\n  factory: () => {\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      return;\n    }\n    const window = inject(DOCUMENT).defaultView;\n    if (!window) {\n      return;\n    }\n    const errorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n    const rejectionListener = e => {\n      errorHandler(e.reason);\n      e.preventDefault();\n    };\n    const errorListener = e => {\n      if (e.error) {\n        errorHandler(e.error);\n      } else {\n        errorHandler(new Error(ngDevMode ? `An ErrorEvent with no error occurred. See Error.cause for details: ${e.message}` : e.message, {\n          cause: e\n        }));\n      }\n      e.preventDefault();\n    };\n    const setupEventListeners = () => {\n      window.addEventListener('unhandledrejection', rejectionListener);\n      window.addEventListener('error', errorListener);\n    };\n    // Angular doesn't have to run change detection whenever any asynchronous tasks are invoked in\n    // the scope of this functionality.\n    if (typeof Zone !== 'undefined') {\n      Zone.root.run(setupEventListeners);\n    } else {\n      setupEventListeners();\n    }\n    inject(DestroyRef).onDestroy(() => {\n      window.removeEventListener('error', errorListener);\n      window.removeEventListener('unhandledrejection', rejectionListener);\n    });\n  }\n});\n/**\n * Provides an environment initializer which forwards unhandled errors to the ErrorHandler.\n *\n * The listeners added are for the window's 'unhandledrejection' and 'error' events.\n *\n * @publicApi\n */\nfunction provideBrowserGlobalErrorListeners() {\n  return makeEnvironmentProviders([provideEnvironmentInitializer(() => void inject(globalErrorListeners))]);\n}\n\n/**\n * Checks if the given `value` is a reactive `Signal`.\n *\n * @publicApi 17.0\n */\nfunction isSignal(value) {\n  return typeof value === 'function' && value[SIGNAL] !== undefined;\n}\n\n/**\n * Utility function used during template type checking to extract the value from a `WritableSignal`.\n * @codeGenApi\n */\nfunction ɵunwrapWritableSignal(value) {\n  // Note: the function uses `WRITABLE_SIGNAL` as a brand instead of `WritableSignal<T>`,\n  // because the latter incorrectly unwraps non-signal getter functions.\n  return null;\n}\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nfunction signal(initialValue, options) {\n  const [get, set, update] = createSignal(initialValue, options?.equal);\n  const signalFn = get;\n  const node = signalFn[SIGNAL];\n  signalFn.set = set;\n  signalFn.update = update;\n  signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn);\n  if (ngDevMode) {\n    signalFn.toString = () => `[Signal: ${signalFn()}]`;\n    node.debugName = options?.debugName;\n  }\n  return signalFn;\n}\nfunction signalAsReadonlyFn() {\n  const node = this[SIGNAL];\n  if (node.readonlyFn === undefined) {\n    const readonlyFn = () => this();\n    readonlyFn[SIGNAL] = node;\n    node.readonlyFn = readonlyFn;\n  }\n  return node.readonlyFn;\n}\n/**\n * Checks if the given `value` is a writeable signal.\n */\nfunction isWritableSignal(value) {\n  return isSignal(value) && typeof value.set === 'function';\n}\n\n/**\n * Injectable that is notified when an `LView` is made aware of changes to application state.\n */\nclass ChangeDetectionScheduler {}\n/** Token used to indicate if zoneless was enabled via provideZonelessChangeDetection(). */\nconst ZONELESS_ENABLED = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Zoneless enabled' : '', {\n  providedIn: 'root',\n  factory: () => false\n});\n/** Token used to indicate `provideZonelessChangeDetection` was used. */\nconst PROVIDED_ZONELESS = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Zoneless provided' : '', {\n  providedIn: 'root',\n  factory: () => false\n});\nconst ZONELESS_SCHEDULER_DISABLED = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'scheduler disabled' : '');\n// TODO(atscott): Remove in v19. Scheduler should be done with runOutsideAngular.\nconst SCHEDULE_IN_ROOT_ZONE = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'run changes outside zone in root' : '');\n\n/**\n * Asserts that the current stack frame is not within a reactive context. Useful\n * to disallow certain code from running inside a reactive context (see {@link /api/core/rxjs-interop/toSignal toSignal})\n *\n * @param debugFn a reference to the function making the assertion (used for the error message).\n *\n * @publicApi\n */\nfunction assertNotInReactiveContext(debugFn, extraContext) {\n  // Taking a `Function` instead of a string name here prevents the un-minified name of the function\n  // from being retained in the bundle regardless of minification.\n  if (getActiveConsumer() !== null) {\n    throw new RuntimeError(-602 /* RuntimeErrorCode.ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT */, ngDevMode && `${debugFn.name}() cannot be called from within a reactive context.${extraContext ? ` ${extraContext}` : ''}`);\n  }\n}\nlet ViewContext = /*#__PURE__*/(() => {\n  class ViewContext {\n    view;\n    node;\n    constructor(view, node) {\n      this.view = view;\n      this.node = node;\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ELEMENT_ID__ = injectViewContext;\n  }\n  return ViewContext;\n})();\nfunction injectViewContext() {\n  return new ViewContext(getLView(), getCurrentTNode());\n}\n\n/**\n * Internal implementation of the pending tasks service.\n */\nlet PendingTasksInternal = /*#__PURE__*/(() => {\n  class PendingTasksInternal {\n    taskId = 0;\n    pendingTasks = new Set();\n    destroyed = false;\n    pendingTask = new BehaviorSubject(false);\n    get hasPendingTasks() {\n      // Accessing the value of a closed `BehaviorSubject` throws an error.\n      return this.destroyed ? false : this.pendingTask.value;\n    }\n    /**\n     * In case the service is about to be destroyed, return a self-completing observable.\n     * Otherwise, return the observable that emits the current state of pending tasks.\n     */\n    get hasPendingTasksObservable() {\n      if (this.destroyed) {\n        // Manually creating the observable pulls less symbols from RxJS than `of(false)`.\n        return new Observable(subscriber => {\n          subscriber.next(false);\n          subscriber.complete();\n        });\n      }\n      return this.pendingTask;\n    }\n    add() {\n      // Emitting a value to a closed subject throws an error.\n      if (!this.hasPendingTasks && !this.destroyed) {\n        this.pendingTask.next(true);\n      }\n      const taskId = this.taskId++;\n      this.pendingTasks.add(taskId);\n      return taskId;\n    }\n    has(taskId) {\n      return this.pendingTasks.has(taskId);\n    }\n    remove(taskId) {\n      this.pendingTasks.delete(taskId);\n      if (this.pendingTasks.size === 0 && this.hasPendingTasks) {\n        this.pendingTask.next(false);\n      }\n    }\n    ngOnDestroy() {\n      this.pendingTasks.clear();\n      if (this.hasPendingTasks) {\n        this.pendingTask.next(false);\n      }\n      // We call `unsubscribe()` to release observers, as users may forget to\n      // unsubscribe manually when subscribing to `isStable`. We do not call\n      // `complete()` because it is unsafe; if someone subscribes using the `first`\n      // operator and the observable completes before emitting a value,\n      // RxJS will throw an error.\n      this.destroyed = true;\n      this.pendingTask.unsubscribe();\n    }\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ɵɵdefineInjectable({\n      token: PendingTasksInternal,\n      providedIn: 'root',\n      factory: () => new PendingTasksInternal()\n    });\n  }\n  return PendingTasksInternal;\n})();\n/**\n * Service that keeps track of pending tasks contributing to the stableness of Angular\n * application. While several existing Angular services (ex.: `HttpClient`) will internally manage\n * tasks influencing stability, this API gives control over stability to library and application\n * developers for specific cases not covered by Angular internals.\n *\n * The concept of stability comes into play in several important scenarios:\n * - SSR process needs to wait for the application stability before serializing and sending rendered\n * HTML;\n * - tests might want to delay assertions until the application becomes stable;\n *\n * @usageNotes\n * ```ts\n * const pendingTasks = inject(PendingTasks);\n * const taskCleanup = pendingTasks.add();\n * // do work that should block application's stability and then:\n * taskCleanup();\n * ```\n *\n * @publicApi 20.0\n */\nlet PendingTasks = /*#__PURE__*/(() => {\n  class PendingTasks {\n    internalPendingTasks = inject(PendingTasksInternal);\n    scheduler = inject(ChangeDetectionScheduler);\n    errorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n    /**\n     * Adds a new task that should block application's stability.\n     * @returns A cleanup function that removes a task when called.\n     */\n    add() {\n      const taskId = this.internalPendingTasks.add();\n      return () => {\n        if (!this.internalPendingTasks.has(taskId)) {\n          // This pending task has already been cleared.\n          return;\n        }\n        // Notifying the scheduler will hold application stability open until the next tick.\n        this.scheduler.notify(11 /* NotificationSource.PendingTaskRemoved */);\n        this.internalPendingTasks.remove(taskId);\n      };\n    }\n    /**\n     * Runs an asynchronous function and blocks the application's stability until the function completes.\n     *\n     * ```ts\n     * pendingTasks.run(async () => {\n     *   const userData = await fetch('/api/user');\n     *   this.userData.set(userData);\n     * });\n     * ```\n     *\n     * @param fn The asynchronous function to execute\n     * @developerPreview 19.0\n     */\n    run(fn) {\n      const removeTask = this.add();\n      fn().catch(this.errorHandler).finally(removeTask);\n    }\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ɵɵdefineInjectable({\n      token: PendingTasks,\n      providedIn: 'root',\n      factory: () => new PendingTasks()\n    });\n  }\n  return PendingTasks;\n})();\nfunction noop(...args) {\n  // Do nothing.\n}\n\n/**\n * A scheduler which manages the execution of effects.\n */\nlet EffectScheduler = /*#__PURE__*/(() => {\n  class EffectScheduler {\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ɵɵdefineInjectable({\n      token: EffectScheduler,\n      providedIn: 'root',\n      factory: () => new ZoneAwareEffectScheduler()\n    });\n  }\n  return EffectScheduler;\n})();\n/**\n * A wrapper around `ZoneAwareQueueingScheduler` that schedules flushing via the microtask queue\n * when.\n */\nclass ZoneAwareEffectScheduler {\n  dirtyEffectCount = 0;\n  queues = /*#__PURE__*/new Map();\n  add(handle) {\n    this.enqueue(handle);\n    this.schedule(handle);\n  }\n  schedule(handle) {\n    if (!handle.dirty) {\n      return;\n    }\n    this.dirtyEffectCount++;\n  }\n  remove(handle) {\n    const zone = handle.zone;\n    const queue = this.queues.get(zone);\n    if (!queue.has(handle)) {\n      return;\n    }\n    queue.delete(handle);\n    if (handle.dirty) {\n      this.dirtyEffectCount--;\n    }\n  }\n  enqueue(handle) {\n    const zone = handle.zone;\n    if (!this.queues.has(zone)) {\n      this.queues.set(zone, new Set());\n    }\n    const queue = this.queues.get(zone);\n    if (queue.has(handle)) {\n      return;\n    }\n    queue.add(handle);\n  }\n  /**\n   * Run all scheduled effects.\n   *\n   * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no\n   * ordering guarantee between effects scheduled in different zones.\n   */\n  flush() {\n    while (this.dirtyEffectCount > 0) {\n      let ranOneEffect = false;\n      for (const [zone, queue] of this.queues) {\n        // `zone` here must be defined.\n        if (zone === null) {\n          ranOneEffect ||= this.flushQueue(queue);\n        } else {\n          ranOneEffect ||= zone.run(() => this.flushQueue(queue));\n        }\n      }\n      // Safeguard against infinite looping if somehow our dirty effect count gets out of sync with\n      // the dirty flag across all the effects.\n      if (!ranOneEffect) {\n        this.dirtyEffectCount = 0;\n      }\n    }\n  }\n  flushQueue(queue) {\n    let ranOneEffect = false;\n    for (const handle of queue) {\n      if (!handle.dirty) {\n        continue;\n      }\n      this.dirtyEffectCount--;\n      ranOneEffect = true;\n      // TODO: what happens if this throws an error?\n      handle.run();\n    }\n    return ranOneEffect;\n  }\n}\nexport { AFTER_RENDER_SEQUENCES_TO_ADD, CHILD_HEAD, CHILD_TAIL, CLEANUP, CONTAINER_HEADER_OFFSET, CONTEXT, ChangeDetectionScheduler, CheckNoChangesMode, DECLARATION_COMPONENT_VIEW, DECLARATION_LCONTAINER, DECLARATION_VIEW, DEHYDRATED_VIEWS, DOCUMENT, DestroyRef, EFFECTS, EFFECTS_TO_SCHEDULE, EMBEDDED_VIEW_INJECTOR, EMPTY_ARRAY, EMPTY_OBJ, ENVIRONMENT, ENVIRONMENT_INITIALIZER, EffectScheduler, EnvironmentInjector, ErrorHandler, FLAGS, HEADER_OFFSET, HOST, HYDRATION, ID, INJECTOR$1 as INJECTOR, INJECTOR as INJECTOR$1, INJECTOR_DEF_TYPES, INJECTOR_SCOPE, INTERNAL_APPLICATION_ERROR_HANDLER, InjectionToken, Injector, MATH_ML_NAMESPACE, MOVED_VIEWS, NATIVE, NEXT, NG_COMP_DEF, NG_DIR_DEF, NG_ELEMENT_ID, NG_FACTORY_DEF, NG_INJ_DEF, NG_MOD_DEF, NG_PIPE_DEF, NG_PROV_DEF, NodeInjectorDestroyRef, NullInjector, ON_DESTROY_HOOKS, PARENT, PREORDER_HOOK_FLAGS, PROVIDED_ZONELESS, PendingTasks, PendingTasksInternal, QUERIES, R3Injector, REACTIVE_TEMPLATE_CONSUMER, RENDERER, RuntimeError, SCHEDULE_IN_ROOT_ZONE, SVG_NAMESPACE, TVIEW, T_HOST, VIEW_REFS, ViewContext, XSS_SECURITY_URL, ZONELESS_ENABLED, ZONELESS_SCHEDULER_DISABLED, _global, addToArray, arrayEquals, arrayInsert2, arraySplice, assertComponentType, assertDefined, assertDirectiveDef, assertDomNode, assertElement, assertEqual, assertFirstCreatePass, assertFirstUpdatePass, assertFunction, assertGreaterThan, assertGreaterThanOrEqual, assertHasParent, assertInInjectionContext, assertIndexInDeclRange, assertIndexInExpandoRange, assertIndexInRange, assertInjectImplementationNotEqual, assertLContainer, assertLView, assertLessThan, assertNgModuleType, assertNodeInjector, assertNotDefined, assertNotEqual, assertNotInReactiveContext, assertNotReactive, assertNotSame, assertNumber, assertNumberInRange, assertOneOf, assertParentView, assertProjectionSlots, assertSame, assertString, assertTIcu, assertTNode, assertTNodeCreationIndex, assertTNodeForLView, assertTNodeForTView, attachInjectFlag, concatStringsWithSpace, convertToBitFlags, createInjector, createInjectorWithoutInjectorInstances, cyclicDependencyError, cyclicDependencyErrorWithDetails, debugStringifyTypeForError, decreaseElementDepthCount, deepForEach, defineInjectable, emitEffectCreatedEvent, emitInjectEvent, emitInjectorToCreateInstanceEvent, emitInstanceCreatedByInjectorEvent, emitProviderConfiguredEvent, enterDI, enterSkipHydrationBlock, enterView, errorHandlerEnvironmentInitializer, fillProperties, flatten, formatRuntimeError, forwardRef, getBindingIndex, getBindingRoot, getBindingsEnabled, getClosureSafeProperty, getComponentDef, getComponentLViewByIndex, getConstant, getContextLView, getCurrentDirectiveDef, getCurrentDirectiveIndex, getCurrentParentTNode, getCurrentQueryIndex, getCurrentTNode, getCurrentTNodePlaceholderOk, getDirectiveDef, getDirectiveDefOrThrow, getElementDepthCount, getFactoryDef, getInjectableDef, getInjectorDef, getLView, getLViewParent, getNamespace, getNativeByIndex, getNativeByTNode, getNativeByTNodeOrNull, getNgModuleDef, getNgModuleDefOrThrow, getNullInjector, getOrCreateLViewCleanup, getOrCreateTViewCleanup, getPipeDef, getSelectedIndex, getSelectedTNode, getTNode, getTView, hasI18n, importProvidersFrom, increaseElementDepthCount, incrementBindingIndex, initNgDevMode, inject, injectRootLimpMode, internalImportProvidersFrom, isClassProvider, isComponentDef, isComponentHost, isContentQueryHost, isCreationMode, isCurrentTNodeParent, isDestroyed, isDirectiveHost, isEnvironmentProviders, isExhaustiveCheckNoChanges, isForwardRef, isInCheckNoChangesMode, isInI18nBlock, isInInjectionContext, isInSkipHydrationBlock, isInjectable, isLContainer, isLView, isProjectionTNode, isRefreshingViews, isRootView, isSignal, isSkipHydrationRootTNode, isStandalone, isTypeProvider, isWritableSignal, keyValueArrayGet, keyValueArrayIndexOf, keyValueArraySet, lastNodeWasCreated, leaveDI, leaveSkipHydrationBlock, leaveView, load, makeEnvironmentProviders, markAncestorsForTraversal, markViewForRefresh, newArray, nextBindingIndex, nextContextImpl, noop, provideBrowserGlobalErrorListeners, provideEnvironmentInitializer, providerToFactory, removeFromArray, removeLViewOnDestroy, renderStringify, requiresRefreshOrTraversal, resetPreOrderHookFlags, resolveForwardRef, runInInjectionContext, runInInjectorProfilerContext, setBindingIndex, setBindingRootForHostBindings, setCurrentDirectiveIndex, setCurrentQueryIndex, setCurrentTNode, setCurrentTNodeAsNotParent, setInI18nBlock, setInjectImplementation, setInjectorProfiler, setInjectorProfilerContext, setIsInCheckNoChangesMode, setIsRefreshingViews, setSelectedIndex, signal, signalAsReadonlyFn, store, storeCleanupWithContext, storeLViewOnDestroy, stringify, stringifyForError, throwError, throwProviderNotFoundError, truncateMiddle, unwrapLView, unwrapRNode, updateAncestorTraversalFlagsOnAttach, viewAttachedToChangeDetector, viewAttachedToContainer, walkProviderTree, walkUpViews, wasLastNodeCreated, ɵunwrapWritableSignal, ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵdisableBindings, ɵɵenableBindings, ɵɵinject, ɵɵinvalidFactoryDep, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵresetView, ɵɵrestoreView };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nconst Attribute = {\n  /**\n   * The jsaction attribute defines a mapping of a DOM event to a\n   * generic event (aka jsaction), to which the actual event handlers\n   * that implement the behavior of the application are bound. The\n   * value is a semicolon separated list of colon separated pairs of\n   * an optional DOM event name and a jsaction name. If the optional\n   * DOM event name is omitted, 'click' is assumed. The jsaction names\n   * are dot separated pairs of a namespace and a simple jsaction\n   * name.\n   *\n   * See grammar in README.md for expected syntax in the attribute value.\n   */\n  JSACTION: 'jsaction'\n};\nexport { Attribute };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { attachInjectFlag, _global, ɵɵdefineInjectable as __defineInjectable, ɵɵdefineInjector as __defineInjector, ɵɵinject as __inject, ɵɵinvalidFactoryDep as __invalidFactoryDep, resolveForwardRef, newArray, EMPTY_OBJ, assertString, assertNotEqual, FLAGS, assertEqual, isInCheckNoChangesMode, PREORDER_HOOK_FLAGS, assertFirstCreatePass, assertDefined, throwError, assertNumber, assertGreaterThan, HEADER_OFFSET, DECLARATION_VIEW, NG_FACTORY_DEF, isForwardRef, getFactoryDef, assertIndexInRange, assertTNodeForLView, enterDI, runInInjectorProfilerContext, getCurrentTNode, getLView, emitInjectorToCreateInstanceEvent, emitInstanceCreatedByInjectorEvent, throwProviderNotFoundError, leaveDI, assertNodeInjector, stringifyForError, cyclicDependencyErrorWithDetails, cyclicDependencyError, setInjectorProfilerContext, setInjectImplementation, assertDirectiveDef, NG_ELEMENT_ID, convertToBitFlags, isRootView, T_HOST, TVIEW, injectRootLimpMode, isComponentDef, EMBEDDED_VIEW_INJECTOR, INJECTOR$1 as INJECTOR, DECLARATION_COMPONENT_VIEW, isComponentHost, RuntimeError, NG_PROV_DEF, getClosureSafeProperty, getNativeByTNode, flatten, arrayEquals, ID, isLView, assertDomNode, unwrapRNode, getComponentLViewByIndex, CONTEXT, EMPTY_ARRAY, assertLView, HOST, CHILD_HEAD, NEXT, isLContainer, getLViewParent, Injector, CLEANUP, getComponentDef, getDirectiveDef, InjectionToken, inject, isInSkipHydrationBlock as isInSkipHydrationBlock$1, HYDRATION, isContentQueryHost, setCurrentQueryIndex, XSS_SECURITY_URL, renderStringify, ENVIRONMENT, makeEnvironmentProviders, isDirectiveHost, formatRuntimeError, resetPreOrderHookFlags, PARENT, RENDERER, CHILD_TAIL, assertSame, assertFirstUpdatePass, getSelectedIndex, getTView, assertIndexInDeclRange, setSelectedIndex, assertLContainer, MOVED_VIEWS, isDestroyed, REACTIVE_TEMPLATE_CONSUMER, DECLARATION_LCONTAINER, QUERIES, assertNotReactive, ON_DESTROY_HOOKS, assertFunction, EFFECTS, assertProjectionSlots, NATIVE, assertParentView, CONTAINER_HEADER_OFFSET, assertNotSame, setCurrentDirectiveIndex, setCurrentTNode, getElementDepthCount, increaseElementDepthCount, wasLastNodeCreated, isCurrentTNodeParent, setCurrentTNodeAsNotParent, assertHasParent, INTERNAL_APPLICATION_ERROR_HANDLER, stringify, getCurrentDirectiveIndex, unwrapLView, isCreationMode, enterView, leaveView, AFTER_RENDER_SEQUENCES_TO_ADD, markAncestorsForTraversal, markViewForRefresh, setIsRefreshingViews, isExhaustiveCheckNoChanges, requiresRefreshOrTraversal, setIsInCheckNoChangesMode, CheckNoChangesMode, setBindingIndex, EFFECTS_TO_SCHEDULE, viewAttachedToChangeDetector, setBindingRootForHostBindings, isRefreshingViews, removeFromArray, addToArray, updateAncestorTraversalFlagsOnAttach, storeLViewOnDestroy, VIEW_REFS, assertGreaterThanOrEqual, isInI18nBlock, assertTNodeForTView, getCurrentParentTNode, getCurrentTNodePlaceholderOk, assertTNode, assertTIcu, assertNumberInRange, DEHYDRATED_VIEWS, getNgModuleDef, getPipeDef as getPipeDef$1, getNgModuleDefOrThrow, isStandalone, concatStringsWithSpace, assertInjectImplementationNotEqual, emitInjectEvent, getConstant, assertLessThan, getOrCreateTViewCleanup, getOrCreateLViewCleanup, assertNotDefined, nextBindingIndex, getSelectedTNode, getDirectiveDefOrThrow, getTNode, assertComponentType, debugStringifyTypeForError, ChangeDetectionScheduler, EnvironmentInjector, SVG_NAMESPACE, MATH_ML_NAMESPACE, viewAttachedToContainer, storeCleanupWithContext, signal, createInjectorWithoutInjectorInstances, R3Injector, getNullInjector, internalImportProvidersFrom, initNgDevMode, fillProperties, getBindingsEnabled, lastNodeWasCreated, isInInjectionContext, DestroyRef, PendingTasksInternal, noop, ErrorHandler, assertNotInReactiveContext, assertInInjectionContext, ViewContext, removeLViewOnDestroy, walkUpViews, getNativeByIndex, assertElement, arrayInsert2, arraySplice, setInjectorProfiler, NullInjector, ENVIRONMENT_INITIALIZER, INJECTOR_DEF_TYPES, walkProviderTree, getInjectorDef, deepForEach, isTypeProvider, isSignal, runInInjectionContext, ZONELESS_ENABLED, EffectScheduler, PendingTasks, assertTNodeCreationIndex, isSkipHydrationRootTNode, leaveSkipHydrationBlock, decreaseElementDepthCount, getNamespace, enterSkipHydrationBlock, getCurrentDirectiveDef, assertIndexInExpandoRange, getBindingIndex, assertOneOf, setInI18nBlock, nextContextImpl, getCurrentQueryIndex, getContextLView, load, keyValueArrayIndexOf, keyValueArraySet, keyValueArrayGet, incrementBindingIndex, isWritableSignal, store, providerToFactory, emitProviderConfiguredEvent, isClassProvider, getBindingRoot, NG_COMP_DEF, ɵɵresetView as __resetView, ɵɵnamespaceHTML as __namespaceHTML, ɵɵnamespaceMathML as __namespaceMathML, ɵɵnamespaceSVG as __namespaceSVG, ɵɵenableBindings as __enableBindings, ɵɵdisableBindings as __disableBindings, ɵɵrestoreView as __restoreView, forwardRef, NG_MOD_DEF, NG_INJ_DEF, NG_DIR_DEF, NG_PIPE_DEF, ZONELESS_SCHEDULER_DISABLED, SCHEDULE_IN_ROOT_ZONE, PROVIDED_ZONELESS, getNativeByTNodeOrNull } from './root_effect_scheduler.mjs';\nimport { setActiveConsumer, SIGNAL, consumerDestroy, REACTIVE_NODE, consumerPollProducersForChange, consumerBeforeComputation, getActiveConsumer, consumerAfterComputation, createComputed, setThrowInvalidWriteToSignalError } from './signal.mjs';\nimport { Subject, Subscription } from 'rxjs';\nimport { setActiveConsumer as setActiveConsumer$1 } from '@angular/core/primitives/signals';\nimport { map } from 'rxjs/operators';\nimport { Attribute as Attribute$1 } from './attribute.mjs';\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nfunction noSideEffects(fn) {\n  return {\n    toString: fn\n  }.toString();\n}\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory(...args) {\n      if (this instanceof DecoratorFactory) {\n        metaCtor.call(this, ...args);\n        return this;\n      }\n      const annotationInstance = new DecoratorFactory(...args);\n      return function TypeDecorator(cls) {\n        if (typeFn) typeFn(cls, ...args);\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {\n          value: []\n        })[ANNOTATIONS];\n        annotations.push(annotationInstance);\n        return cls;\n      };\n    }\n    if (parentClass) {\n      DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n  });\n}\nfunction makeMetadataCtor(props) {\n  return function ctor(...args) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(...args) {\n      if (this instanceof ParamDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const annotationInstance = new ParamDecoratorFactory(...args);\n      ParamDecorator.annotation = annotationInstance;\n      return ParamDecorator;\n      function ParamDecorator(cls, unusedKey, index) {\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {\n          value: []\n        })[PARAMETERS];\n        // there might be gaps if some in between parameters do not have annotations.\n        // we pad with nulls.\n        while (parameters.length <= index) {\n          parameters.push(null);\n        }\n        (parameters[index] = parameters[index] || []).push(annotationInstance);\n        return cls;\n      }\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n  });\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory(...args) {\n      if (this instanceof PropDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const decoratorInstance = new PropDecoratorFactory(...args);\n      function PropDecorator(target, name) {\n        // target is undefined with standard decorators. This case is not supported and will throw\n        // if this decorator is used in JIT mode with standard decorators.\n        if (target === undefined) {\n          throw new Error('Standard Angular field decorators are not supported in JIT mode.');\n        }\n        const constructor = target.constructor;\n        // Use of Object.defineProperty is important because it creates a non-enumerable property\n        // which prevents the property from being copied during subclassing.\n        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {\n          value: {}\n        })[PROP_METADATA];\n        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n        meta[name].unshift(decoratorInstance);\n      }\n      return PropDecorator;\n    }\n    if (parentClass) {\n      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n  });\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Inject = /*#__PURE__*/attachInjectFlag(\n/*#__PURE__*/\n// Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\nmakeParamDecorator('Inject', token => ({\n  token\n})), -1 /* DecoratorFlags.Inject */);\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Optional =\n/*#__PURE__*/\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(/*#__PURE__*/makeParamDecorator('Optional'), 8 /* InternalInjectFlags.Optional */);\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Self =\n/*#__PURE__*/\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(/*#__PURE__*/makeParamDecorator('Self'), 2 /* InternalInjectFlags.Self */);\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst SkipSelf =\n/*#__PURE__*/\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(/*#__PURE__*/makeParamDecorator('SkipSelf'), 4 /* InternalInjectFlags.SkipSelf */);\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Host =\n/*#__PURE__*/\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(/*#__PURE__*/makeParamDecorator('Host'), 1 /* InternalInjectFlags.Host */);\nfunction getCompilerFacade(request) {\n  const globalNg = _global['ng'];\n  if (globalNg && globalNg.ɵcompilerFacade) {\n    return globalNg.ɵcompilerFacade;\n  }\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Log the type as an error so that a developer can easily navigate to the type from the\n    // console.\n    console.error(`JIT compilation failed for ${request.kind}`, request.type);\n    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n    if (request.usage === 1 /* JitCompilerUsage.PartialDeclaration */) {\n      message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n      message += '\\n';\n      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n    } else {\n      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n    }\n    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n    message += `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n    throw new Error(message);\n  } else {\n    throw new Error('JIT compiler unavailable');\n  }\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreDiEnv = {\n  'ɵɵdefineInjectable': __defineInjectable,\n  'ɵɵdefineInjector': __defineInjector,\n  'ɵɵinject': __inject,\n  'ɵɵinvalidFactoryDep': __invalidFactoryDep,\n  'resolveForwardRef': resolveForwardRef\n};\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nconst Type = Function;\nfunction isType(v) {\n  return typeof v === 'function';\n}\n\n/*\n * #########################\n * Attention: These Regular expressions have to hold even if the code is minified!\n * ##########################\n */\n/**\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\n * it intends to capture the pattern where existing constructors have been downleveled from\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\n *\n * ```ts\n *   function MyClass() {\n *     var _this = _super.apply(this, arguments) || this;\n * ```\n *\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\n * ```ts\n *   function MyClass() {\n *     var _this = _super.apply(this, __spread(arguments)) || this;\n * ```\n *\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\n * ```ts\n *   function MyClass() {\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n * ```\n *\n * More details can be found in: https://github.com/angular/angular/issues/38453.\n */\nconst ES5_DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\nconst ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes and\n * have an explicit constructor defined.\n */\nconst ES2015_INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes\n * and inherit a constructor.\n */\nconst ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\nfunction isDelegateCtor(typeStr) {\n  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);\n}\nclass ReflectionCapabilities {\n  _reflect;\n  constructor(reflect) {\n    this._reflect = reflect || _global['Reflect'];\n  }\n  factory(t) {\n    return (...args) => new t(...args);\n  }\n  /** @internal */\n  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n    let result;\n    if (typeof paramTypes === 'undefined') {\n      result = newArray(paramAnnotations.length);\n    } else {\n      result = newArray(paramTypes.length);\n    }\n    for (let i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] && paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n  _ownParameters(type, parentCtor) {\n    const typeStr = type.toString();\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (isDelegateCtor(typeStr)) {\n      return null;\n    }\n    // Prefer the direct API.\n    if (type.parameters && type.parameters !== parentCtor.parameters) {\n      return type.parameters;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    const tsickleCtorParams = type.ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const paramTypes = ctorParameters.map(ctorParam => ctorParam && ctorParam.type);\n      const paramAnnotations = ctorParameters.map(ctorParam => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // API for metadata created by invoking the decorators.\n    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);\n    if (paramTypes || paramAnnotations) {\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return newArray(type.length);\n  }\n  parameters(type) {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(type);\n    let parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n  _ownAnnotations(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n      let annotations = typeOrFunc.annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n      return typeOrFunc[ANNOTATIONS];\n    }\n    return null;\n  }\n  annotations(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n  _ownPropMetadata(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n      let propMetadata = typeOrFunc.propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n      const propDecorators = typeOrFunc.propDecorators;\n      const propMetadata = {};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n      return typeOrFunc[PROP_METADATA];\n    }\n    return null;\n  }\n  propMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const propMetadata = {};\n    if (parentCtor !== Object) {\n      const parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach(propName => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach(propName => {\n        const decorators = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n  ownPropMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n  }\n  hasLifecycleHook(type, lcProperty) {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const decoratorType = decoratorInvocation.type;\n    const annotationCls = decoratorType.annotationCls;\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\nfunction getParentCtor(ctor) {\n  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n  const parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see {@link OnChanges}\n *\n * @publicApi\n */\nclass SimpleChange {\n  previousValue;\n  currentValue;\n  firstChange;\n  constructor(previousValue, currentValue, firstChange) {\n    this.previousValue = previousValue;\n    this.currentValue = currentValue;\n    this.firstChange = firstChange;\n  }\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n  isFirstChange() {\n    return this.firstChange;\n  }\n}\nfunction applyValueToInputField(instance, inputSignalNode, privateName, value) {\n  if (inputSignalNode !== null) {\n    inputSignalNode.applyValueToInputSignal(inputSignalNode, value);\n  } else {\n    instance[privateName] = value;\n  }\n}\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```ts\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nconst ɵɵNgOnChangesFeature = /* @__PURE__ */(() => {\n  const ɵɵNgOnChangesFeatureImpl = () => NgOnChangesFeatureImpl;\n  // This option ensures that the ngOnChanges lifecycle hook will be inherited\n  // from superclasses (in InheritDefinitionFeature).\n  /** @nocollapse */\n  ɵɵNgOnChangesFeatureImpl.ngInherit = true;\n  return ɵɵNgOnChangesFeatureImpl;\n})();\nfunction NgOnChangesFeatureImpl(definition) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook() {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore?.current;\n  if (current) {\n    const previous = simpleChangesStore.previous;\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n    simpleChangesStore.current = null;\n    this.ngOnChanges(current);\n  }\n}\nfunction ngOnChangesSetInput(instance, inputSignalNode, value, publicName, privateName) {\n  const declaredName = this.declaredInputs[publicName];\n  ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\n  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {\n    previous: EMPTY_OBJ,\n    current: null\n  });\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n  applyValueToInputField(instance, inputSignalNode, privateName, value);\n}\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\nfunction getSimpleChangesStore(instance) {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\nfunction setSimpleChangesStore(instance, store) {\n  return instance[SIMPLE_CHANGES_STORE] = store;\n}\nconst profilerCallbacks = [];\nconst NOOP_PROFILER_REMOVAL = () => {};\nfunction removeProfiler(profiler) {\n  const profilerIdx = profilerCallbacks.indexOf(profiler);\n  if (profilerIdx !== -1) {\n    profilerCallbacks.splice(profilerIdx, 1);\n  }\n}\n/**\n * Adds a callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection). Multiple profiler callbacks can be set:\n * in this case profiling events are reported to every registered callback.\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable all profilers.\n * @returns a cleanup function that, when invoked, removes a given profiler callback.\n */\nfunction setProfiler(profiler) {\n  if (profiler !== null) {\n    if (!profilerCallbacks.includes(profiler)) {\n      profilerCallbacks.push(profiler);\n    }\n    return () => removeProfiler(profiler);\n  } else {\n    profilerCallbacks.length = 0;\n    return NOOP_PROFILER_REMOVAL;\n  }\n}\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param eventFn function associated with event.\n *    For example a template function, lifecycle hook, or output listener.\n *    The value depends on the execution context\n */\nconst profiler = function (event, instance = null, eventFn) {\n  for (let i = 0; i < profilerCallbacks.length; i++) {\n    const profilerCallback = profilerCallbacks[i];\n    profilerCallback(event, instance, eventFn);\n  }\n};\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const {\n    ngOnChanges,\n    ngOnInit,\n    ngDoCheck\n  } = directiveDef.type.prototype;\n  if (ngOnChanges) {\n    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n    (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);\n    (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);\n  }\n  if (ngOnInit) {\n    (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);\n  }\n  if (ngDoCheck) {\n    (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);\n    (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);\n  }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nfunction registerPostOrderHooks(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  // It's necessary to loop through the directives at elementEnd() (rather than processing in\n  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n  // hooks for projected components and directives must be called *before* their hosts.\n  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n    const directiveDef = tView.data[i];\n    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n    const lifecycleHooks = directiveDef.type.prototype;\n    const {\n      ngAfterContentInit,\n      ngAfterContentChecked,\n      ngAfterViewInit,\n      ngAfterViewChecked,\n      ngOnDestroy\n    } = lifecycleHooks;\n    if (ngAfterContentInit) {\n      (tView.contentHooks ??= []).push(-i, ngAfterContentInit);\n    }\n    if (ngAfterContentChecked) {\n      (tView.contentHooks ??= []).push(i, ngAfterContentChecked);\n      (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);\n    }\n    if (ngAfterViewInit) {\n      (tView.viewHooks ??= []).push(-i, ngAfterViewInit);\n    }\n    if (ngAfterViewChecked) {\n      (tView.viewHooks ??= []).push(i, ngAfterViewChecked);\n      (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);\n    }\n    if (ngOnDestroy != null) {\n      (tView.destroyHooks ??= []).push(i, ngOnDestroy);\n    }\n  }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeCheckHooks(lView, hooks, nodeIndex) {\n  callHooks(lView, hooks, 3 /* InitPhaseState.InitPhaseCompleted */, nodeIndex);\n}\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\n  ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');\n  if ((lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n    callHooks(lView, hooks, initPhase, nodeIndex);\n  }\n}\nfunction incrementInitPhaseFlags(lView, initPhase) {\n  ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');\n  let flags = lView[FLAGS];\n  if ((flags & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n    flags &= 16383 /* LViewFlags.IndexWithinInitPhaseReset */;\n    flags += 1 /* LViewFlags.InitPhaseStateIncrementer */;\n    lView[FLAGS] = flags;\n  }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');\n  const startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535 /* PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask */ : 0;\n  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n  const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\n  let lastNodeIndexFound = 0;\n  for (let i = startIndex; i < max; i++) {\n    const hook = arr[i + 1];\n    if (typeof hook === 'number') {\n      lastNodeIndexFound = arr[i];\n      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n        break;\n      }\n    } else {\n      const isInitHook = arr[i] < 0;\n      if (isInitHook) {\n        currentView[PREORDER_HOOK_FLAGS] += 65536 /* PreOrderHookFlags.NumberOfInitHooksCalledIncrementer */;\n      }\n      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n        callHook(currentView, initPhase, arr, i);\n        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* PreOrderHookFlags.NumberOfInitHooksCalledMask */) + i + 2;\n      }\n      i++;\n    }\n  }\n}\n/**\n * Executes a single lifecycle hook, making sure that:\n * - it is called in the non-reactive context;\n * - profiling data are registered.\n */\nfunction callHookInternal(directive, hook) {\n  profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    hook.call(directive);\n  } finally {\n    setActiveConsumer(prevConsumer);\n    profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n  }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView, initPhase, arr, i) {\n  const isInitHook = arr[i] < 0;\n  const hook = arr[i + 1];\n  const directiveIndex = isInitHook ? -arr[i] : arr[i];\n  const directive = currentView[directiveIndex];\n  if (isInitHook) {\n    const indexWithintInitPhase = currentView[FLAGS] >> 14 /* LViewFlags.IndexWithinInitPhaseShift */;\n    // The init phase state must be always checked here as it may have been recursively updated.\n    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16 /* PreOrderHookFlags.NumberOfInitHooksCalledShift */ && (currentView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n      currentView[FLAGS] += 16384 /* LViewFlags.IndexWithinInitPhaseIncrementer */;\n      callHookInternal(directive, hook);\n    }\n  } else {\n    callHookInternal(directive, hook);\n  }\n}\nconst NO_PARENT_INJECTOR = -1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n  factory;\n  name;\n  /**\n   * The inject implementation to be activated when using the factory.\n   */\n  injectImpl;\n  /**\n   * Marker set to true during factory invocation to see if we get into recursive loop.\n   * Recursive loop causes an error to be displayed.\n   */\n  resolving = false;\n  /**\n   * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n   */\n  canSeeViewProviders;\n  /**\n   * An array of factories to use in case of `multi` provider.\n   */\n  multi;\n  /**\n   * Number of `multi`-providers which belong to the component.\n   *\n   * This is needed because when multiple components and directives declare the `multi` provider\n   * they have to be concatenated in the correct order.\n   *\n   * Example:\n   *\n   * If we have a component and directive active an a single element as declared here\n   * ```ts\n   * component:\n   *   providers: [ {provide: String, useValue: 'component', multi: true} ],\n   *   viewProviders: [ {provide: String, useValue: 'componentView', multi: true} ],\n   *\n   * directive:\n   *   providers: [ {provide: String, useValue: 'directive', multi: true} ],\n   * ```\n   *\n   * Then the expected results are:\n   *\n   * ```ts\n   * providers: ['component', 'directive']\n   * viewProviders: ['component', 'componentView', 'directive']\n   * ```\n   *\n   * The way to think about it is that the `viewProviders` have been inserted after the component\n   * but before the directives, which is why we need to know how many `multi`s have been declared by\n   * the component.\n   */\n  componentProviders;\n  /**\n   * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n   * See `providerFactory`.\n   */\n  index;\n  /**\n   * Because the same `multi` provider can be declared in `providers` and `viewProviders` it is\n   * possible for `viewProviders` to shadow the `providers`. For this reason we store the\n   * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n   *\n   * Example:\n   *\n   * Given:\n   * ```ts\n   * providers: [ {provide: String, useValue: 'all', multi: true} ],\n   * viewProviders: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n   * ```\n   *\n   * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n   * of view injection. We further have to make sure that the shared instances (in our case\n   * `all`) are the exact same instance in both the content as well as the view injection. (We\n   * have to make sure that we don't double instantiate.) For this reason the `viewProviders`\n   * `Factory` has a pointer to the shadowed `providers` factory so that it can instantiate the\n   * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n   * ['all', 'viewOnly']`).\n   */\n  providerFactory;\n  constructor(\n  /**\n   * Factory to invoke in order to create a new instance.\n   */\n  factory,\n  /**\n   * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n   */\n  isViewProvider, injectImplementation,\n  // Expect `null` in devmode\n  name) {\n    this.factory = factory;\n    this.name = name;\n    ngDevMode && assertDefined(factory, 'Factory not specified');\n    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nfunction toTNodeTypeAsString(tNodeType) {\n  let text = '';\n  tNodeType & 1 /* TNodeType.Text */ && (text += '|Text');\n  tNodeType & 2 /* TNodeType.Element */ && (text += '|Element');\n  tNodeType & 4 /* TNodeType.Container */ && (text += '|Container');\n  tNodeType & 8 /* TNodeType.ElementContainer */ && (text += '|ElementContainer');\n  tNodeType & 16 /* TNodeType.Projection */ && (text += '|Projection');\n  tNodeType & 32 /* TNodeType.Icu */ && (text += '|IcuContainer');\n  tNodeType & 64 /* TNodeType.Placeholder */ && (text += '|Placeholder');\n  tNodeType & 128 /* TNodeType.LetDeclaration */ && (text += '|LetDeclaration');\n  return text.length > 0 ? text.substring(1) : text;\n}\n/**\n * Helper function to detect if a given value matches a `TNode` shape.\n *\n * The logic uses the `insertBeforeIndex` and its possible values as\n * a way to differentiate a TNode shape from other types of objects\n * within the `TView.data`. This is not a perfect check, but it can\n * be a reasonable differentiator, since we control the shapes of objects\n * within `TView.data`.\n */\nfunction isTNodeShape(value) {\n  return value != null && typeof value === 'object' && (value.insertBeforeIndex === null || typeof value.insertBeforeIndex === 'number' || Array.isArray(value.insertBeforeIndex));\n}\nfunction isLetDeclaration(tNode) {\n  return !!(tNode.type & 128 /* TNodeType.LetDeclaration */);\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```html\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```ts\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasClassInput(tNode) {\n  return (tNode.flags & 8 /* TNodeFlags.hasClassInput */) !== 0;\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```html\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```ts\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasStyleInput(tNode) {\n  return (tNode.flags & 16 /* TNodeFlags.hasStyleInput */) !== 0;\n}\nfunction assertTNodeType(tNode, expectedTypes, message) {\n  assertDefined(tNode, 'should be called with a TNode');\n  if ((tNode.type & expectedTypes) === 0) {\n    throwError(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);\n  }\n}\nfunction assertPureTNodeType(type) {\n  if (!(type === 2 /* TNodeType.Element */ || type === 1 /* TNodeType.Text */ || type === 4 /* TNodeType.Container */ || type === 8 /* TNodeType.ElementContainer */ || type === 32 /* TNodeType.Icu */ || type === 16 /* TNodeType.Projection */ || type === 64 /* TNodeType.Placeholder */ || type === 128 /* TNodeType.LetDeclaration */)) {\n    throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);\n  }\n}\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(renderer, native, attrs) {\n  let i = 0;\n  while (i < attrs.length) {\n    const value = attrs[i];\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== 0 /* AttributeMarker.NamespaceURI */) {\n        break;\n      }\n      // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n      i++;\n      const namespaceURI = attrs[i++];\n      const attrName = attrs[i++];\n      const attrVal = attrs[i++];\n      renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n    } else {\n      // attrName is string;\n      const attrName = value;\n      const attrVal = attrs[++i];\n      // Standard attributes\n      if (isAnimationProp(attrName)) {\n        renderer.setProperty(native, attrName, attrVal);\n      } else {\n        renderer.setAttribute(native, attrName, attrVal);\n      }\n      i++;\n    }\n  }\n  // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n  return i;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nfunction isNameOnlyAttributeMarker(marker) {\n  return marker === 3 /* AttributeMarker.Bindings */ || marker === 4 /* AttributeMarker.Template */ || marker === 6 /* AttributeMarker.I18n */;\n}\nfunction isAnimationProp(name) {\n  // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n  // charCodeAt doesn't allocate memory to return a substring.\n  return name.charCodeAt(0) === 64 /* CharCode.AT_SIGN */;\n}\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nfunction mergeHostAttrs(dst, src) {\n  if (src === null || src.length === 0) ;else if (dst === null || dst.length === 0) {\n    // We have source, but dst is empty, just make a copy.\n    dst = src.slice();\n  } else {\n    let srcMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n    for (let i = 0; i < src.length; i++) {\n      const item = src[i];\n      if (typeof item === 'number') {\n        srcMarker = item;\n      } else {\n        if (srcMarker === 0 /* AttributeMarker.NamespaceURI */) ;else if (srcMarker === -1 /* AttributeMarker.ImplicitAttributes */ || srcMarker === 2 /* AttributeMarker.Styles */) {\n          // Case where we have to consume `key1` and `value` only.\n          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);\n        } else {\n          // Case where we have to consume `key1` only.\n          mergeHostAttribute(dst, srcMarker, item, null, null);\n        }\n      }\n    }\n  }\n  return dst;\n}\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nfunction mergeHostAttribute(dst, marker, key1, key2, value) {\n  let i = 0;\n  // Assume that new markers will be inserted at the end.\n  let markerInsertPosition = dst.length;\n  // scan until correct type.\n  if (marker === -1 /* AttributeMarker.ImplicitAttributes */) {\n    markerInsertPosition = -1;\n  } else {\n    while (i < dst.length) {\n      const dstValue = dst[i++];\n      if (typeof dstValue === 'number') {\n        if (dstValue === marker) {\n          markerInsertPosition = -1;\n          break;\n        } else if (dstValue > marker) {\n          // We need to save this as we want the markers to be inserted in specific order.\n          markerInsertPosition = i - 1;\n          break;\n        }\n      }\n    }\n  }\n  // search until you find place of insertion\n  while (i < dst.length) {\n    const item = dst[i];\n    if (typeof item === 'number') {\n      // since `i` started as the index after the marker, we did not find it if we are at the next\n      // marker\n      break;\n    } else if (item === key1) {\n      // We already have same token\n      {\n        if (value !== null) {\n          dst[i + 1] = value;\n        }\n        return;\n      }\n    }\n    // Increment counter.\n    i++;\n    if (value !== null) i++;\n  }\n  // insert at location.\n  if (markerInsertPosition !== -1) {\n    dst.splice(markerInsertPosition, 0, marker);\n    i = markerInsertPosition + 1;\n  }\n  dst.splice(i++, 0, key1);\n  if (value !== null) {\n    dst.splice(i++, 0, value);\n  }\n}\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nfunction hasParentInjector(parentLocation) {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\nfunction getParentInjectorIndex(parentLocation) {\n  if (ngDevMode) {\n    assertNumber(parentLocation, 'Number expected');\n    assertNotEqual(parentLocation, -1, 'Not a valid state.');\n    const parentInjectorIndex = parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n    assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');\n  }\n  return parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n}\nfunction getParentInjectorViewOffset(parentLocation) {\n  return parentLocation >> 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW];\n    viewOffset--;\n  }\n  return parentView;\n}\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```ts\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\nfunction setIncludeViewProviders(v) {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n/** Value used when something wasn't found by an injector. */\nconst NOT_FOUND = {};\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n  let id;\n  if (typeof type === 'string') {\n    id = type.charCodeAt(0) || 0;\n  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n    id = type[NG_ELEMENT_ID];\n  }\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = type[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  const bloomHash = id & BLOOM_MASK;\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n  // should be written to.\n  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, lView) {\n  const existingInjectorIndex = getInjectorIndex(tNode, lView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n  const tView = lView[TVIEW];\n  if (tView.firstCreatePass) {\n    tNode.injectorIndex = lView.length;\n    insertBloom(tView.data, tNode); // foundation for node bloom\n    insertBloom(lView, null); // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n  }\n  const parentLoc = getParentInjectorLocation(tNode, lView);\n  const injectorIndex = tNode.injectorIndex;\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    const parentLView = getParentInjectorView(parentLoc, lView);\n    const parentData = parentLView[TVIEW].data;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < 8 /* NodeInjectorOffset.BLOOM_SIZE */; i++) {\n      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n  lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */] = parentLoc;\n  return injectorIndex;\n}\nfunction insertBloom(arr, footer) {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\nfunction getInjectorIndex(tNode, lView) {\n  if (tNode.injectorIndex === -1 ||\n  // If the injector index is the same as its parent's injector index, then the index has been\n  // copied down from the parent node. No injector has been created yet on this node.\n  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex ||\n  // After the first template pass, the injector index might exist but the parent values\n  // might not have been calculated yet for this instance\n  lView[tNode.injectorIndex + 8 /* NodeInjectorOffset.PARENT */] === null) {\n    return -1;\n  } else {\n    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n    return tNode.injectorIndex;\n  }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nfunction getParentInjectorLocation(tNode, lView) {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    // If we have a parent `TNode` and there is an injector associated with it we are done, because\n    // the parent injector is within the current `LView`.\n    return tNode.parent.injectorIndex; // ViewOffset is 0\n  }\n  // When parent injector location is computed it may be outside of the current view. (ie it could\n  // be pointing to a declared parent location). This variable stores number of declaration parents\n  // we need to walk up in order to find the parent injector location.\n  let declarationViewOffset = 0;\n  let parentTNode = null;\n  let lViewCursor = lView;\n  // The parent injector is not in the current `LView`. We will have to walk the declared parent\n  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n  // `NodeInjector`.\n  while (lViewCursor !== null) {\n    parentTNode = getTNodeFromLView(lViewCursor);\n    if (parentTNode === null) {\n      // If we have no parent, than we are done.\n      return NO_PARENT_INJECTOR;\n    }\n    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);\n    // Every iteration of the loop requires that we go to the declared parent.\n    declarationViewOffset++;\n    lViewCursor = lViewCursor[DECLARATION_VIEW];\n    if (parentTNode.injectorIndex !== -1) {\n      // We found a NodeInjector which points to something.\n      return parentTNode.injectorIndex | declarationViewOffset << 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n    }\n  }\n  return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nfunction diPublicInInjector(injectorIndex, tView, token) {\n  bloomAdd(injectorIndex, tView, token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```ts\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```html\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```ts\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n  ngDevMode && assertTNodeType(tNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  if (attrNameToInject === 'class') {\n    return tNode.classes;\n  }\n  if (attrNameToInject === 'style') {\n    return tNode.styles;\n  }\n  const attrs = tNode.attrs;\n  if (attrs) {\n    const attrsLength = attrs.length;\n    let i = 0;\n    while (i < attrsLength) {\n      const value = attrs[i];\n      // If we hit a `Bindings` or `Template` marker then we are done.\n      if (isNameOnlyAttributeMarker(value)) break;\n      // Skip namespaced attributes\n      if (value === 0 /* AttributeMarker.NamespaceURI */) {\n        // we skip the next two values\n        // as namespaced attributes looks like\n        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n        // 'existValue', ...]\n        i = i + 2;\n      } else if (typeof value === 'number') {\n        // Skip to the first value of the marked attribute.\n        i++;\n        while (i < attrsLength && typeof attrs[i] === 'string') {\n          i++;\n        }\n      } else if (value === attrNameToInject) {\n        return attrs[i + 1];\n      } else {\n        i = i + 2;\n      }\n    }\n  }\n  return null;\n}\nfunction notFoundValueOrThrow(notFoundValue, token, flags) {\n  if (flags & 8 /* InternalInjectFlags.Optional */ || notFoundValue !== undefined) {\n    return notFoundValue;\n  } else {\n    throwProviderNotFoundError(token, 'NodeInjector');\n  }\n}\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {\n  if (flags & 8 /* InternalInjectFlags.Optional */ && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n  if ((flags & (2 /* InternalInjectFlags.Self */ | 1 /* InternalInjectFlags.Host */)) === 0) {\n    const moduleInjector = lView[INJECTOR];\n    // switch to `injectInjectorOnly` implementation for module injector, since module injector\n    // should not have access to Component/Directive DI scope (that may happen through\n    // `directiveInject` implementation)\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      if (moduleInjector) {\n        return moduleInjector.get(token, notFoundValue, flags & 8 /* InternalInjectFlags.Optional */);\n      } else {\n        return injectRootLimpMode(token, notFoundValue, flags & 8 /* InternalInjectFlags.Optional */);\n      }\n    } finally {\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  return notFoundValueOrThrow(notFoundValue, token, flags);\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = 0 /* InternalInjectFlags.Default */, notFoundValue) {\n  if (tNode !== null) {\n    // If the view or any of its ancestors have an embedded\n    // view injector, we have to look it up there first.\n    if (lView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */ &&\n    // The token must be present on the current node injector when the `Self`\n    // flag is set, so the lookup on embedded view injector(s) can be skipped.\n    !(flags & 2 /* InternalInjectFlags.Self */)) {\n      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\n      if (embeddedInjectorValue !== NOT_FOUND) {\n        return embeddedInjectorValue;\n      }\n    }\n    // Otherwise try the node injector.\n    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n    if (value !== NOT_FOUND) {\n      return value;\n    }\n  }\n  // Finally, fall back to the module injector.\n  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n}\n/**\n * Returns the value associated to the given token from the node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {\n  const bloomHash = bloomHashBitOrFactory(token);\n  // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n  // so just call the factory function to create it.\n  if (typeof bloomHash === 'function') {\n    if (!enterDI(lView, tNode, flags)) {\n      // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n      // flag, the module injector is not searched for that token in Ivy.\n      return flags & 1 /* InternalInjectFlags.Host */ ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n    }\n    try {\n      let value;\n      if (ngDevMode) {\n        runInInjectorProfilerContext(new NodeInjector(getCurrentTNode(), getLView()), token, () => {\n          emitInjectorToCreateInstanceEvent(token);\n          value = bloomHash(flags);\n          emitInstanceCreatedByInjectorEvent(value);\n        });\n      } else {\n        value = bloomHash(flags);\n      }\n      if (value == null && !(flags & 8 /* InternalInjectFlags.Optional */)) {\n        throwProviderNotFoundError(token);\n      } else {\n        return value;\n      }\n    } finally {\n      leaveDI();\n    }\n  } else if (typeof bloomHash === 'number') {\n    // A reference to the previous injector TView that was found while climbing the element\n    // injector tree. This is used to know if viewProviders can be accessed on the current\n    // injector.\n    let previousTView = null;\n    let injectorIndex = getInjectorIndex(tNode, lView);\n    let parentLocation = NO_PARENT_INJECTOR;\n    let hostTElementNode = flags & 1 /* InternalInjectFlags.Host */ ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n    // If we should skip this injector, or if there is no injector on this node, start by\n    // searching the parent injector.\n    if (injectorIndex === -1 || flags & 4 /* InternalInjectFlags.SkipSelf */) {\n      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n        injectorIndex = -1;\n      } else {\n        previousTView = lView[TVIEW];\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      }\n    }\n    // Traverse up the injector tree until we find a potential match or until we know there\n    // *isn't* a match.\n    while (injectorIndex !== -1) {\n      ngDevMode && assertNodeInjector(lView, injectorIndex);\n      // Check the current injector. If it matches, see if it contains token.\n      const tView = lView[TVIEW];\n      ngDevMode && assertTNodeForLView(tView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */], lView);\n      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n        // At this point, we have an injector which *may* contain the token, so we step through\n        // the providers and directives associated with the injector's corresponding node to get\n        // the instance.\n        const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n        if (instance !== NOT_FOUND) {\n          return instance;\n        }\n      }\n      parentLocation = lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n      if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {\n        // The def wasn't found anywhere on this node, so it was a false positive.\n        // Traverse up the tree and continue searching.\n        previousTView = tView;\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      } else {\n        // If we should not search parent OR If the ancestor bloom filter value does not have the\n        // bit corresponding to the directive we can give up on traversing up to find the specific\n        // injector.\n        injectorIndex = -1;\n      }\n    }\n  }\n  return notFoundValue;\n}\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibilities\n  const canAccessViewProviders = previousTView == null ?\n  // 1) This is the first invocation `previousTView == null` which means that we are at the\n  // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n  // to look into the ViewProviders is if:\n  // - we are on a component\n  // - AND the injector set `includeViewProviders` to true (implying that the token can see\n  // ViewProviders because it is the Component or a Service which itself was declared in\n  // ViewProviders)\n  isComponentHost(tNode) && includeViewProviders :\n  // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n  // In such a case we are only allowed to look into the ViewProviders if:\n  // - We just crossed from child View to Parent View `previousTView != currentTView`\n  // - AND the parent TNode is an Element.\n  // This means that we just came from the Component's View and therefore are allowed to see\n  // into the ViewProviders.\n  previousTView != currentTView && (tNode.type & 3 /* TNodeType.AnyRNode */) !== 0;\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  const isHostSpecialCase = flags & 1 /* InternalInjectFlags.Host */ && hostTElementNode === tNode;\n  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n  if (injectableIdx !== null) {\n    return getNodeInjectable(lView, currentTView, injectableIdx, tNode, flags);\n  } else {\n    return NOT_FOUND;\n  }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n  const injectablesStart = nodeProviderIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount = nodeProviderIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef = tInjectables[i];\n    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart];\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n/**\n * Used in ngDevMode to keep the injection path in case of cycles in DI.\n */\nlet injectionPath = [];\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nfunction getNodeInjectable(lView, tView, index, tNode, flags) {\n  let value = lView[index];\n  const tData = tView.data;\n  if (value instanceof NodeInjectorFactory) {\n    const factory = value;\n    ngDevMode && injectionPath.push(factory.name ?? 'unknown');\n    if (factory.resolving) {\n      const token = stringifyForError(tData[index]);\n      if (ngDevMode) {\n        throw cyclicDependencyErrorWithDetails(token, injectionPath);\n      } else {\n        throw cyclicDependencyError(token);\n      }\n    }\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    // tData indexes mirror the concrete instances in its corresponding LView.\n    // lView[index] here is either the injectable instance itself or a factory,\n    // therefore tData[index] is the constructor of that injectable or a\n    // definition object that contains the constructor in a `.type` field.\n    const token = tData[index].type || tData[index];\n    let prevInjectContext;\n    if (ngDevMode) {\n      const injector = new NodeInjector(tNode, lView);\n      prevInjectContext = setInjectorProfilerContext({\n        injector,\n        token\n      });\n    }\n    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n    const success = enterDI(lView, tNode, 0 /* InternalInjectFlags.Default */);\n    ngDevMode && assertEqual(success, true, \"Because flags do not contain `SkipSelf' we expect this to always succeed.\");\n    try {\n      ngDevMode && emitInjectorToCreateInstanceEvent(token);\n      value = lView[index] = factory.factory(undefined, flags, tData, lView, tNode);\n      ngDevMode && emitInstanceCreatedByInjectorEvent(value);\n      // This code path is hit for both directives and providers.\n      // For perf reasons, we want to avoid searching for hooks on providers.\n      // It does no harm to try (the hooks just won't exist), but the extra\n      // checks are unnecessary and this is a hot path. So we check to see\n      // if the index of the dependency is in the directive range for this\n      // tNode. If it's not, we know it's a provider and skip hook registration.\n      if (tView.firstCreatePass && index >= tNode.directiveStart) {\n        ngDevMode && assertDirectiveDef(tData[index]);\n        registerPreOrderHooks(index, tData[index], tView);\n      }\n    } finally {\n      ngDevMode && setInjectorProfilerContext(prevInjectContext);\n      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      leaveDI();\n      ngDevMode && (injectionPath = []);\n    }\n  }\n  return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nfunction bloomHashBitOrFactory(token) {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  const tokenId =\n  // First check with `hasOwnProperty` so we don't get an inherited ID.\n  token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined;\n  // Negative token IDs are used for special objects such as `Injector`\n  if (typeof tokenId === 'number') {\n    if (tokenId >= 0) {\n      return tokenId & BLOOM_MASK;\n    } else {\n      ngDevMode && assertEqual(tokenId, -1 /* InjectorMarkers.Injector */, 'Expecting to get Special Injector Id');\n      return createNodeInjector;\n    }\n  } else {\n    return tokenId;\n  }\n}\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n  // that should be used.\n  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n  return !(flags & 2 /* InternalInjectFlags.Self */) && !(flags & 1 /* InternalInjectFlags.Host */ && isFirstHostTNode);\n}\nfunction getNodeInjectorLView(nodeInjector) {\n  return nodeInjector._lView;\n}\nfunction getNodeInjectorTNode(nodeInjector) {\n  return nodeInjector._tNode;\n}\nclass NodeInjector {\n  _tNode;\n  _lView;\n  constructor(_tNode, _lView) {\n    this._tNode = _tNode;\n    this._lView = _lView;\n  }\n  get(token, notFoundValue, flags) {\n    return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);\n  }\n}\n/** Creates a `NodeInjector` for the current node. */\nfunction createNodeInjector() {\n  return new NodeInjector(getCurrentTNode(), getLView());\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵgetInheritedFactory(type) {\n  return noSideEffects(() => {\n    const ownConstructor = type.prototype.constructor;\n    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n    const objectPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objectPrototype) {\n      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n      // If we hit something that has a factory and the factory isn't the same as the type,\n      // we've found the inherited factory. Note the check that the factory isn't the type's\n      // own factory is redundant in most cases, but if the user has custom decorators on the\n      // class, this lookup will start one level down in the prototype chain, causing us to\n      // find the own factory first and potentially triggering an infinite loop downstream.\n      if (factory && factory !== ownFactory) {\n        return factory;\n      }\n      parent = Object.getPrototypeOf(parent);\n    }\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return t => new t();\n  });\n}\nfunction getFactoryOf(type) {\n  if (isForwardRef(type)) {\n    return () => {\n      const factory = getFactoryOf(resolveForwardRef(type));\n      return factory && factory();\n    };\n  }\n  return getFactoryDef(type);\n}\n/**\n * Returns a value from the closest embedded or node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InternalInjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {\n  let currentTNode = tNode;\n  let currentLView = lView;\n  // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n  // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n  // Since the bloom filters for the node injectors have already been constructed and we don't\n  // have a way of extracting the records from an injector, the only way to maintain the correct\n  // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n  // the token at each level.\n  while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */ && !isRootView(currentLView)) {\n    ngDevMode && assertTNodeForLView(currentTNode, currentLView);\n    // Note that this lookup on the node injector is using the `Self` flag, because\n    // we don't want the node injector to look at any parent injectors since we\n    // may hit the embedded view injector first.\n    const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | 2 /* InternalInjectFlags.Self */, NOT_FOUND);\n    if (nodeInjectorValue !== NOT_FOUND) {\n      return nodeInjectorValue;\n    }\n    // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n    let parentTNode = currentTNode.parent;\n    // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n    // it means that we've hit the view boundary and we need to go up to the next view.\n    if (!parentTNode) {\n      // Before we go to the next LView, check if the token exists on the current embedded injector.\n      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n      if (embeddedViewInjector) {\n        const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);\n        if (embeddedViewInjectorValue !== NOT_FOUND) {\n          return embeddedViewInjectorValue;\n        }\n      }\n      // Otherwise keep going up the tree.\n      parentTNode = getTNodeFromLView(currentLView);\n      currentLView = currentLView[DECLARATION_VIEW];\n    }\n    currentTNode = parentTNode;\n  }\n  return notFoundValue;\n}\n/** Gets the TNode associated with an LView inside of the declaration view. */\nfunction getTNodeFromLView(lView) {\n  const tView = lView[TVIEW];\n  const tViewType = tView.type;\n  // The parent pointer differs based on `TView.type`.\n  if (tViewType === 2 /* TViewType.Embedded */) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  } else if (tViewType === 1 /* TViewType.Component */) {\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    return lView[T_HOST];\n  }\n  return null;\n}\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nfunction ɵɵinjectAttribute(attrNameToInject) {\n  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);\n}\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Attribute = /*#__PURE__*/makeParamDecorator('Attribute', attributeName => ({\n  attributeName,\n  __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName)\n}));\nlet _reflect = null;\nfunction getReflect() {\n  return _reflect = _reflect || new ReflectionCapabilities();\n}\nfunction reflectDependencies(type) {\n  return convertDependencies(getReflect().parameters(type));\n}\nfunction convertDependencies(deps) {\n  return deps.map(dep => reflectDependency(dep));\n}\nfunction reflectDependency(dep) {\n  const meta = {\n    token: null,\n    attribute: null,\n    host: false,\n    optional: false,\n    self: false,\n    skipSelf: false\n  };\n  if (Array.isArray(dep) && dep.length > 0) {\n    for (let j = 0; j < dep.length; j++) {\n      const param = dep[j];\n      if (param === undefined) {\n        // param may be undefined if type of dep is not set by ngtsc\n        continue;\n      }\n      const proto = Object.getPrototypeOf(param);\n      if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n        meta.optional = true;\n      } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n        meta.skipSelf = true;\n      } else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n        meta.self = true;\n      } else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n        meta.host = true;\n      } else if (param instanceof Inject) {\n        meta.token = param.token;\n      } else if (param instanceof Attribute) {\n        if (param.attributeName === undefined) {\n          throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Attribute name must be defined.`);\n        }\n        meta.attribute = param.attributeName;\n      } else {\n        meta.token = param;\n      }\n    }\n  } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {\n    meta.token = null;\n  } else {\n    meta.token = dep;\n  }\n  return meta;\n}\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\nfunction compileInjectable(type, meta) {\n  let ngInjectableDef = null;\n  let ngFactoryDef = null;\n  // if NG_PROV_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_PROV_DEF)) {\n    Object.defineProperty(type, NG_PROV_DEF, {\n      get: () => {\n        if (ngInjectableDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0 /* JitCompilerUsage.Decorator */,\n            kind: 'injectable',\n            type\n          });\n          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n        }\n        return ngInjectableDef;\n      }\n    });\n  }\n  // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n      get: () => {\n        if (ngFactoryDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0 /* JitCompilerUsage.Decorator */,\n            kind: 'injectable',\n            type\n          });\n          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n            name: type.name,\n            type,\n            typeArgumentCount: 0,\n            // In JIT mode types are not available nor used.\n            deps: reflectDependencies(type),\n            target: compiler.FactoryTarget.Injectable\n          });\n        }\n        return ngFactoryDef;\n      },\n      // Leave this configurable so that the factories from directives or pipes can take precedence.\n      configurable: true\n    });\n  }\n}\nconst USE_VALUE = /*#__PURE__*/getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\nfunction isUseClassProvider(meta) {\n  return meta.useClass !== undefined;\n}\nfunction isUseValueProvider(meta) {\n  return USE_VALUE in meta;\n}\nfunction isUseFactoryProvider(meta) {\n  return meta.useFactory !== undefined;\n}\nfunction isUseExistingProvider(meta) {\n  return meta.useExisting !== undefined;\n}\nfunction getInjectableMetadata(type, srcMeta) {\n  // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n  const meta = srcMeta || {\n    providedIn: null\n  };\n  const compilerMeta = {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    providedIn: meta.providedIn\n  };\n  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n    compilerMeta.deps = convertDependencies(meta.deps);\n  }\n  // Check to see if the user explicitly provided a `useXxxx` property.\n  if (isUseClassProvider(meta)) {\n    compilerMeta.useClass = meta.useClass;\n  } else if (isUseValueProvider(meta)) {\n    compilerMeta.useValue = meta.useValue;\n  } else if (isUseFactoryProvider(meta)) {\n    compilerMeta.useFactory = meta.useFactory;\n  } else if (isUseExistingProvider(meta)) {\n    compilerMeta.useExisting = meta.useExisting;\n  }\n  return compilerMeta;\n}\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Injectable = /*#__PURE__*/makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nfunction injectElementRef() {\n  return createElementRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nfunction createElementRef(tNode, lView) {\n  return new ElementRef(getNativeByTNode(tNode, lView));\n}\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nlet ElementRef = /*#__PURE__*/(() => {\n  class ElementRef {\n    /**\n     * <div class=\"docs-alert docs-alert-important\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. If used, it is recommended in combination with\n     *    {@link /best-practices/security#direct-use-of-the-dom-apis-and-explicit-sanitization-calls DomSanitizer}\n     *    for maxiumum security;\n     *   </p>\n     * </div>\n     */\n    nativeElement;\n    constructor(nativeElement) {\n      this.nativeElement = nativeElement;\n    }\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ELEMENT_ID__ = injectElementRef;\n  }\n  return ElementRef;\n})();\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\nfunction unwrapElementRef(value) {\n  return value instanceof ElementRef ? value.nativeElement : value;\n}\nfunction symbolIterator() {\n  // @ts-expect-error accessing a private member\n  return this._results[Symbol.iterator]();\n}\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `@for(i of myList; track $index)`.\n *\n * Changes can be observed by subscribing to the `changes` `Observable`.\n * *\n * @usageNotes\n * ### Example\n * ```ts\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nclass QueryList {\n  _emitDistinctChangesOnly;\n  dirty = true;\n  _onDirty = undefined;\n  _results = [];\n  _changesDetected = false;\n  _changes = undefined;\n  length = 0;\n  first = undefined;\n  last = undefined;\n  /**\n   * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n   */\n  get changes() {\n    return this._changes ??= new Subject();\n  }\n  /**\n   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n   *     the same result)\n   */\n  constructor(_emitDistinctChangesOnly = false) {\n    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;\n  }\n  /**\n   * Returns the QueryList entry at `index`.\n   */\n  get(index) {\n    return this._results[index];\n  }\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map(fn) {\n    return this._results.map(fn);\n  }\n  filter(fn) {\n    return this._results.filter(fn);\n  }\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn) {\n    return this._results.find(fn);\n  }\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce(fn, init) {\n    return this._results.reduce(fn, init);\n  }\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn) {\n    this._results.forEach(fn);\n  }\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn) {\n    return this._results.some(fn);\n  }\n  /**\n   * Returns a copy of the internal results list as an Array.\n   */\n  toArray() {\n    return this._results.slice();\n  }\n  toString() {\n    return this._results.toString();\n  }\n  /**\n   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n   * on change detection, it will not notify of changes to the queries, unless a new change\n   * occurs.\n   *\n   * @param resultsTree The query results to store\n   * @param identityAccessor Optional function for extracting stable object identity from a value\n   *    in the array. This function is executed for each element of the query result list while\n   *    comparing current query list with the new one (provided as a first argument of the `reset`\n   *    function) to detect if the lists are different. If the function is not provided, elements\n   *    are compared as is (without any pre-processing).\n   */\n  reset(resultsTree, identityAccessor) {\n    this.dirty = false;\n    const newResultFlat = flatten(resultsTree);\n    if (this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor)) {\n      this._results = newResultFlat;\n      this.length = newResultFlat.length;\n      this.last = newResultFlat[this.length - 1];\n      this.first = newResultFlat[0];\n    }\n  }\n  /**\n   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n   */\n  notifyOnChanges() {\n    if (this._changes !== undefined && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.next(this);\n  }\n  /** @internal */\n  onDirty(cb) {\n    this._onDirty = cb;\n  }\n  /** internal */\n  setDirty() {\n    this.dirty = true;\n    this._onDirty?.();\n  }\n  /** internal */\n  destroy() {\n    if (this._changes !== undefined) {\n      this._changes.complete();\n      this._changes.unsubscribe();\n    }\n  }\n  [Symbol.iterator] = /*#__PURE__*/(() => symbolIterator)();\n}\n\n/**\n * The name of an attribute that can be added to the hydration boundary node\n * (component host node) to disable hydration for the content within that boundary.\n */\nconst SKIP_HYDRATION_ATTR_NAME = 'ngSkipHydration';\n/** Lowercase name of the `ngSkipHydration` attribute used for case-insensitive comparisons. */\nconst SKIP_HYDRATION_ATTR_NAME_LOWER_CASE = 'ngskiphydration';\n/**\n * Helper function to check if a given TNode has the 'ngSkipHydration' attribute.\n */\nfunction hasSkipHydrationAttrOnTNode(tNode) {\n  const attrs = tNode.mergedAttrs;\n  if (attrs === null) return false;\n  // only ever look at the attribute name and skip the values\n  for (let i = 0; i < attrs.length; i += 2) {\n    const value = attrs[i];\n    // This is a marker, which means that the static attributes section is over,\n    // so we can exit early.\n    if (typeof value === 'number') return false;\n    if (typeof value === 'string' && value.toLowerCase() === SKIP_HYDRATION_ATTR_NAME_LOWER_CASE) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Helper function to check if a given RElement has the 'ngSkipHydration' attribute.\n */\nfunction hasSkipHydrationAttrOnRElement(rNode) {\n  return rNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME);\n}\n/**\n * Checks whether a TNode has a flag to indicate that it's a part of\n * a skip hydration block.\n */\nfunction hasInSkipHydrationBlockFlag(tNode) {\n  return (tNode.flags & 128 /* TNodeFlags.inSkipHydrationBlock */) === 128 /* TNodeFlags.inSkipHydrationBlock */;\n}\n/**\n * Helper function that determines if a given node is within a skip hydration block\n * by navigating up the TNode tree to see if any parent nodes have skip hydration\n * attribute.\n */\nfunction isInSkipHydrationBlock(tNode) {\n  if (hasInSkipHydrationBlockFlag(tNode)) {\n    return true;\n  }\n  let currentTNode = tNode.parent;\n  while (currentTNode) {\n    if (hasInSkipHydrationBlockFlag(tNode) || hasSkipHydrationAttrOnTNode(currentTNode)) {\n      return true;\n    }\n    currentTNode = currentTNode.parent;\n  }\n  return false;\n}\n/**\n * Check if an i18n block is in a skip hydration section by looking at a parent TNode\n * to determine if this TNode is in a skip hydration section or the TNode has\n * the `ngSkipHydration` attribute.\n */\nfunction isI18nInSkipHydrationBlock(parentTNode) {\n  return hasInSkipHydrationBlockFlag(parentTNode) || hasSkipHydrationAttrOnTNode(parentTNode) || isInSkipHydrationBlock(parentTNode);\n}\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link /api/core/ChangeDetectorRef?tab=usage-notes Change detection usage}\n * @see {@link /best-practices/skipping-subtrees Skipping component subtrees}\n *\n * @publicApi\n */\nvar ChangeDetectionStrategy = /*#__PURE__*/function (ChangeDetectionStrategy) {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n  return ChangeDetectionStrategy;\n}(ChangeDetectionStrategy || {});\n// Keeps track of the currently-active LViews.\nconst TRACKED_LVIEWS = /*#__PURE__*/new Map();\n// Used for generating unique IDs for LViews.\nlet uniqueIdCounter = 0;\n/** Gets a unique ID that can be assigned to an LView. */\nfunction getUniqueLViewId() {\n  return uniqueIdCounter++;\n}\n/** Starts tracking an LView. */\nfunction registerLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n  TRACKED_LVIEWS.set(lView[ID], lView);\n}\n/** Gets an LView by its unique ID. */\nfunction getLViewById(id) {\n  ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n  return TRACKED_LVIEWS.get(id) || null;\n}\n/** Stops tracking an LView. */\nfunction unregisterLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n  TRACKED_LVIEWS.delete(lView[ID]);\n}\n/** Gets the currently-tracked views. */\nfunction getTrackedLViews() {\n  return TRACKED_LVIEWS;\n}\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nclass LContext {\n  lViewId;\n  nodeIndex;\n  native;\n  /**\n   * The instance of the Component node.\n   */\n  component;\n  /**\n   * The list of active directives that exist on this element.\n   */\n  directives;\n  /**\n   * The map of local references (local reference name => element or directive instance) that\n   * exist on this element.\n   */\n  localRefs;\n  /** Component's parent view data. */\n  get lView() {\n    return getLViewById(this.lViewId);\n  }\n  constructor(\n  /**\n   * ID of the component's parent view data.\n   */\n  lViewId,\n  /**\n   * The index instance of the node.\n   */\n  nodeIndex,\n  /**\n   * The instance of the DOM node that is attached to the lNode.\n   */\n  native) {\n    this.lViewId = lViewId;\n    this.nodeIndex = nodeIndex;\n    this.native = native;\n  }\n}\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nfunction getLContext(target) {\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (isLView(mpValue)) {\n      const lView = mpValue;\n      let nodeIndex;\n      let component = undefined;\n      let directives = undefined;\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      const native = unwrapRNode(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target;\n    ngDevMode && assertDomNode(rElement);\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    let parent = rElement;\n    while (parent = parent.parentNode) {\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          const native = unwrapRNode(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return mpValue || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView, nodeIndex, native) {\n  return new LContext(lView[ID], nodeIndex, native);\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n  let patchedData = readPatchedData(componentInstance);\n  let lView;\n  if (isLView(patchedData)) {\n    const contextLView = patchedData;\n    const nodeIndex = findViaComponent(contextLView, componentInstance);\n    lView = getComponentLViewByIndex(nodeIndex, contextLView);\n    const context = createLContext(contextLView, nodeIndex, lView[HOST]);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = patchedData;\n    const contextLView = context.lView;\n    ngDevMode && assertLView(contextLView);\n    lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n  }\n  return lView;\n}\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nfunction attachPatchData(target, data) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n  // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n  // we can't know when to remove an `LContext`.\n  if (isLView(data)) {\n    target[MONKEY_PATCH_KEY_NAME] = data[ID];\n    registerLView(data);\n  } else {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n  }\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nfunction readPatchedData(target) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  const data = target[MONKEY_PATCH_KEY_NAME];\n  return typeof data === 'number' ? getLViewById(data) : data || null;\n}\nfunction readPatchedLView(target) {\n  const value = readPatchedData(target);\n  if (value) {\n    return isLView(value) ? value : value.lView;\n  }\n  return null;\n}\nfunction isComponentInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵcmp;\n}\nfunction isDirectiveInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵdir;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView, target) {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (unwrapRNode(lView[i]) === target) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode) {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView, componentInstance) {\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView, directiveInstance) {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n/**\n * Returns a list of directives applied to a node at a specific index. The list includes\n * directives matched by selector and any host directives, but it excludes components.\n * Use `getComponentAtNodeIndex` to find the component applied to a node.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  if (tNode.directiveStart === 0) return EMPTY_ARRAY;\n  const results = [];\n  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n    const directiveInstance = lView[i];\n    if (!isComponentInstance(directiveInstance)) {\n      results.push(directiveInstance);\n    }\n  }\n  return results;\n}\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  return isComponentHost(tNode) ? lView[tNode.directiveStart + tNode.componentOffset] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  if (tNode && tNode.localNames) {\n    const result = {};\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n    return result;\n  }\n  return null;\n}\n\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nfunction getRootView(componentOrLView) {\n  ngDevMode && assertDefined(componentOrLView, 'component');\n  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n  while (lView && !isRootView(lView)) {\n    lView = getLViewParent(lView);\n  }\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n/**\n * Returns the context information associated with the application where the target is situated. It\n * does this by walking the parent views until it gets to the root view, then getting the context\n * off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nfunction getRootContext(viewOrComponent) {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode && assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT];\n}\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nfunction getFirstLContainer(lView) {\n  return getNearestLContainer(lView[CHILD_HEAD]);\n}\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nfunction getNextLContainer(container) {\n  return getNearestLContainer(container[NEXT]);\n}\nfunction getNearestLContainer(viewOrContainer) {\n  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n    viewOrContainer = viewOrContainer[NEXT];\n  }\n  return viewOrContainer;\n}\n\n/**\n * Retrieves the component instance associated with a given DOM element.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div>\n *     <child-comp></child-comp>\n *   </div>\n * </app-root>\n * ```\n *\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\n * associated with this DOM element.\n *\n * Calling the function on `<app-root>` will return the `MyApp` instance.\n *\n *\n * @param element DOM element from which the component should be retrieved.\n * @returns Component instance associated with the element or `null` if there\n *    is no component associated with it.\n *\n * @publicApi\n */\nfunction getComponent(element) {\n  ngDevMode && assertDomElement(element);\n  const context = getLContext(element);\n  if (context === null) return null;\n  if (context.component === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return null;\n    }\n    context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\n  }\n  return context.component;\n}\n/**\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\n *\n * @param element Element for which to get the surrounding component instance.\n * @returns Instance of the component that is around the element or null if the element isn't\n *    inside any component.\n *\n * @publicApi\n */\nfunction getContext(element) {\n  assertDomElement(element);\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  return lView === null ? null : lView[CONTEXT];\n}\n/**\n * Retrieves the component instance whose view contains the DOM element.\n *\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\n * would return `<app-comp>`.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Component instance whose view owns the DOM element or null if the element is not\n *    part of a component view.\n *\n * @publicApi\n */\nfunction getOwningComponent(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  let lView = context ? context.lView : null;\n  if (lView === null) return null;\n  let parent;\n  while (lView[TVIEW].type === 2 /* TViewType.Embedded */ && (parent = getLViewParent(lView))) {\n    lView = parent;\n  }\n  return isRootView(lView) ? null : lView[CONTEXT];\n}\n/**\n * Retrieves all root components associated with a DOM element, directive or component instance.\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Root components associated with the target object.\n *\n * @publicApi\n */\nfunction getRootComponents(elementOrDir) {\n  const lView = readPatchedLView(elementOrDir);\n  return lView !== null ? [getRootContext(lView)] : [];\n}\n/**\n * Retrieves an `Injector` associated with an element, component or directive instance.\n *\n * @param elementOrDir DOM element, component or directive instance for which to\n *    retrieve the injector.\n * @returns Injector associated with the element, component or directive instance.\n *\n * @publicApi\n */\nfunction getInjector(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  const lView = context ? context.lView : null;\n  if (lView === null) return Injector.NULL;\n  const tNode = lView[TVIEW].data[context.nodeIndex];\n  return new NodeInjector(tNode, lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n */\nfunction getInjectionTokens(element) {\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const tNode = tView.data[context.nodeIndex];\n  const providerTokens = [];\n  const startIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n  const endIndex = tNode.directiveEnd;\n  for (let i = startIndex; i < endIndex; i++) {\n    let value = tView.data[i];\n    if (isDirectiveDefHack(value)) {\n      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n      // design flaw.  We should always store same type so that we can be monomorphic. The issue\n      // is that for Components/Directives we store the def instead the type. The correct behavior\n      // is that we should always be storing injectable type in this location.\n      value = value.type;\n    }\n    providerTokens.push(value);\n  }\n  return providerTokens;\n}\n/**\n * Retrieves directive instances associated with a given DOM node. Does not include\n * component instances.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <button my-button></button>\n *   <my-comp></my-comp>\n * </app-root>\n * ```\n *\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\n * directive that is associated with the DOM node.\n *\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\n *\n * @param node DOM node for which to get the directives.\n * @returns Array of directives associated with the node.\n *\n * @publicApi\n */\nfunction getDirectives(node) {\n  // Skip text nodes because we can't have directives associated with them.\n  if (node instanceof Text) {\n    return [];\n  }\n  const context = getLContext(node);\n  const lView = context ? context.lView : null;\n  if (lView === null) {\n    return [];\n  }\n  const tView = lView[TVIEW];\n  const nodeIndex = context.nodeIndex;\n  if (!tView?.data[nodeIndex]) {\n    return [];\n  }\n  if (context.directives === undefined) {\n    context.directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n  }\n  // The `directives` in this case are a named array called `LComponentView`. Clone the\n  // result so we don't expose an internal data structure in the user's console.\n  return context.directives === null ? [] : [...context.directives];\n}\n/** The framework used to author a particular application or component. */\nvar Framework = /*#__PURE__*/function (Framework) {\n  Framework[\"Angular\"] = \"angular\";\n  Framework[\"ACX\"] = \"acx\";\n  Framework[\"Wiz\"] = \"wiz\";\n  return Framework;\n}(Framework || {});\n/** ACX change detection strategies. */\nvar AcxChangeDetectionStrategy = /*#__PURE__*/function (AcxChangeDetectionStrategy) {\n  AcxChangeDetectionStrategy[AcxChangeDetectionStrategy[\"Default\"] = 0] = \"Default\";\n  AcxChangeDetectionStrategy[AcxChangeDetectionStrategy[\"OnPush\"] = 1] = \"OnPush\";\n  return AcxChangeDetectionStrategy;\n}(AcxChangeDetectionStrategy || {});\n/** ACX view encapsulation modes. */\nvar AcxViewEncapsulation = /*#__PURE__*/function (AcxViewEncapsulation) {\n  AcxViewEncapsulation[AcxViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  AcxViewEncapsulation[AcxViewEncapsulation[\"None\"] = 1] = \"None\";\n  return AcxViewEncapsulation;\n}(AcxViewEncapsulation || {});\n/**\n * Returns the debug (partial) metadata for a particular directive or component instance.\n * The function accepts an instance of a directive or component and returns the corresponding\n * metadata.\n *\n * @param directiveOrComponentInstance Instance of a directive or component\n * @returns metadata of the passed directive or component\n *\n * @publicApi\n */\nfunction getDirectiveMetadata$1(directiveOrComponentInstance) {\n  const {\n    constructor\n  } = directiveOrComponentInstance;\n  if (!constructor) {\n    throw new Error('Unable to find the instance constructor');\n  }\n  // In case a component inherits from a directive, we may have component and directive metadata\n  // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\n  const componentDef = getComponentDef(constructor);\n  if (componentDef) {\n    const inputs = extractInputDebugMetadata(componentDef.inputs);\n    return {\n      inputs,\n      outputs: componentDef.outputs,\n      encapsulation: componentDef.encapsulation,\n      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default\n    };\n  }\n  const directiveDef = getDirectiveDef(constructor);\n  if (directiveDef) {\n    const inputs = extractInputDebugMetadata(directiveDef.inputs);\n    return {\n      inputs,\n      outputs: directiveDef.outputs\n    };\n  }\n  return null;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target DOM element, component or directive instance for which to retrieve\n *    the local references.\n */\nfunction getLocalRefs(target) {\n  const context = getLContext(target);\n  if (context === null) return {};\n  if (context.localRefs === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return {};\n    }\n    context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\n  }\n  return context.localRefs || {};\n}\n/**\n * Retrieves the host element of a component or directive instance.\n * The host element is the DOM element that matched the selector of the directive.\n *\n * @param componentOrDirective Component or directive instance for which the host\n *     element should be retrieved.\n * @returns Host element of the target.\n *\n * @publicApi\n */\nfunction getHostElement(componentOrDirective) {\n  return getLContext(componentOrDirective).native;\n}\n/**\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\n * listeners, but it does not include event listeners defined outside of the Angular context\n * (e.g. through `addEventListener`).\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div (click)=\"doSomething()\"></div>\n * </app-root>\n * ```\n *\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\n *\n * ```ts\n * {\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * }\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @returns Array of event listeners on the DOM element.\n *\n * @publicApi\n */\nfunction getListeners(element) {\n  ngDevMode && assertDomElement(element);\n  const lContext = getLContext(element);\n  const lView = lContext === null ? null : lContext.lView;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const lCleanup = lView[CLEANUP];\n  const tCleanup = tView.cleanup;\n  const listeners = [];\n  if (tCleanup && lCleanup) {\n    for (let i = 0; i < tCleanup.length;) {\n      const firstParam = tCleanup[i++];\n      const secondParam = tCleanup[i++];\n      if (typeof firstParam === 'string') {\n        const name = firstParam;\n        const listenerElement = unwrapRNode(lView[secondParam]);\n        const callback = lCleanup[tCleanup[i++]];\n        const useCaptureOrIndx = tCleanup[i++];\n        // if useCaptureOrIndx is boolean then report it as is.\n        // if useCaptureOrIndx is positive number then it in unsubscribe method\n        // if useCaptureOrIndx is negative number then it is a Subscription\n        const type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';\n        const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\n        if (element == listenerElement) {\n          listeners.push({\n            element,\n            name,\n            callback,\n            useCapture,\n            type\n          });\n        }\n      }\n    }\n  }\n  listeners.sort(sortListeners);\n  return listeners;\n}\nfunction sortListeners(a, b) {\n  if (a.name == b.name) return 0;\n  return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj) {\n  return obj.type !== undefined && obj.declaredInputs !== undefined && obj.resolveHostDirectives !== undefined;\n}\n/** Asserts that a value is a DOM Element. */\nfunction assertDomElement(value) {\n  if (typeof Element !== 'undefined' && !(value instanceof Element)) {\n    throw new Error('Expecting instance of DOM Element');\n  }\n}\n/**\n * A directive definition holds additional metadata using bitwise flags to indicate\n * for example whether it is signal based.\n *\n * This information needs to be separate from the `publicName -> minifiedName`\n * mappings for backwards compatibility.\n */\nfunction extractInputDebugMetadata(inputs) {\n  const res = {};\n  for (const key in inputs) {\n    if (inputs.hasOwnProperty(key)) {\n      const value = inputs[key];\n      if (value !== undefined) {\n        res[key] = value[0];\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser` and `Server`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT = undefined;\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nfunction setDocument(document) {\n  DOCUMENT = document;\n}\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nfunction getDocument() {\n  if (DOCUMENT !== undefined) {\n    return DOCUMENT;\n  } else if (typeof document !== 'undefined') {\n    return document;\n  }\n  throw new RuntimeError(210 /* RuntimeErrorCode.MISSING_DOCUMENT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`);\n  // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n  // the current platform is not a browser. Since this is not a supported scenario at the moment\n  // this should not happen in Angular apps.\n  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n  // public API.\n}\n\n/**\n * A DI token representing a string ID, used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated} is being used.\n *\n * The token is needed in cases when multiple applications are bootstrapped on a page\n * (for example, using `bootstrapApplication` calls). In this case, ensure that those applications\n * have different `APP_ID` value setup. For example:\n *\n * ```ts\n * bootstrapApplication(ComponentA, {\n *   providers: [\n *     { provide: APP_ID, useValue: 'app-a' },\n *     // ... other providers ...\n *   ]\n * });\n *\n * bootstrapApplication(ComponentB, {\n *   providers: [\n *     { provide: APP_ID, useValue: 'app-b' },\n *     // ... other providers ...\n *   ]\n * });\n * ```\n *\n * By default, when there is only one application bootstrapped, you don't need to provide the\n * `APP_ID` token (the `ng` will be used as an app ID).\n *\n * @publicApi\n */\nconst APP_ID = /*#__PURE__*/new InjectionToken(ngDevMode ? 'AppId' : '', {\n  providedIn: 'root',\n  factory: () => DEFAULT_APP_ID\n});\n/** Default value of the `APP_ID` token. */\nconst DEFAULT_APP_ID = 'ng';\n/**\n * A function that is executed when a platform is initialized.\n *\n * @deprecated from v19.0.0, use providePlatformInitializer instead\n *\n * @see {@link providePlatformInitializer}\n *\n * @publicApi\n */\nconst PLATFORM_INITIALIZER = /*#__PURE__*/new InjectionToken(ngDevMode ? 'Platform Initializer' : '');\n/**\n * A token that indicates an opaque platform ID.\n * @publicApi\n */\nconst PLATFORM_ID = /*#__PURE__*/new InjectionToken(ngDevMode ? 'Platform ID' : '', {\n  providedIn: 'platform',\n  factory: () => 'unknown' // set a default platform name, when none set explicitly\n});\n/**\n * A DI token that indicates the root directory of\n * the application\n * @publicApi\n * @deprecated\n */\nconst PACKAGE_ROOT_URL = /*#__PURE__*/new InjectionToken(ngDevMode ? 'Application Packages Root URL' : '');\n// We keep this token here, rather than the animations package, so that modules that only care\n// about which animations module is loaded (e.g. the CDK) can retrieve it without having to\n// include extra dependencies. See #44970 for more context.\n/**\n * A [DI token](api/core/InjectionToken) that indicates which animations\n * module has been loaded.\n * @publicApi\n */\nconst ANIMATION_MODULE_TYPE = /*#__PURE__*/new InjectionToken(ngDevMode ? 'AnimationModuleType' : '');\n// TODO(crisbeto): link to CSP guide here.\n/**\n * Token used to configure the [Content Security Policy](https://web.dev/strict-csp/) nonce that\n * Angular will apply when inserting inline styles. If not provided, Angular will look up its value\n * from the `ngCspNonce` attribute of the application root node.\n *\n * @publicApi\n */\nconst CSP_NONCE = /*#__PURE__*/new InjectionToken(ngDevMode ? 'CSP nonce' : '', {\n  providedIn: 'root',\n  factory: () => {\n    // Ideally we wouldn't have to use `querySelector` here since we know that the nonce will be on\n    // the root node, but because the token value is used in renderers, it has to be available\n    // *very* early in the bootstrapping process. This should be a fairly shallow search, because\n    // the app won't have been added to the DOM yet. Some approaches that were considered:\n    // 1. Find the root node through `ApplicationRef.components[i].location` - normally this would\n    // be enough for our purposes, but the token is injected very early so the `components` array\n    // isn't populated yet.\n    // 2. Find the root `LView` through the current `LView` - renderers are a prerequisite to\n    // creating the `LView`. This means that no `LView` will have been entered when this factory is\n    // invoked for the root component.\n    // 3. Have the token factory return `() => string` which is invoked when a nonce is requested -\n    // the slightly later execution does allow us to get an `LView` reference, but the fact that\n    // it is a function means that it could be executed at *any* time (including immediately) which\n    // may lead to weird bugs.\n    // 4. Have the `ComponentFactory` read the attribute and provide it to the injector under the\n    // hood - has the same problem as #1 and #2 in that the renderer is used to query for the root\n    // node and the nonce value needs to be available when the renderer is created.\n    return getDocument().body?.querySelector('[ngCspNonce]')?.getAttribute('ngCspNonce') || null;\n  }\n});\nconst IMAGE_CONFIG_DEFAULTS = {\n  breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  placeholderResolution: 30,\n  disableImageSizeWarning: false,\n  disableImageLazyLoadWarning: false\n};\n/**\n * Injection token that configures the image optimized image functionality.\n * See {@link ImageConfig} for additional information about parameters that\n * can be used.\n *\n * @see {@link NgOptimizedImage}\n * @see {@link ImageConfig}\n * @publicApi\n */\nconst IMAGE_CONFIG = /*#__PURE__*/new InjectionToken(ngDevMode ? 'ImageConfig' : '', {\n  providedIn: 'root',\n  factory: () => IMAGE_CONFIG_DEFAULTS\n});\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```ts\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nfunction makeStateKey(key) {\n  return key;\n}\nfunction initTransferState() {\n  const transferState = new TransferState();\n  if (typeof ngServerMode === 'undefined' || !ngServerMode) {\n    transferState.store = retrieveTransferredState(getDocument(), inject(APP_ID));\n  }\n  return transferState;\n}\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n */\nlet TransferState = /*#__PURE__*/(() => {\n  class TransferState {\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: TransferState,\n      providedIn: 'root',\n      factory: initTransferState\n    });\n    /** @internal */\n    store = {};\n    onSerializeCallbacks = {};\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     */\n    get(key, defaultValue) {\n      return this.store[key] !== undefined ? this.store[key] : defaultValue;\n    }\n    /**\n     * Set the value corresponding to a key.\n     */\n    set(key, value) {\n      this.store[key] = value;\n    }\n    /**\n     * Remove a key from the store.\n     */\n    remove(key) {\n      delete this.store[key];\n    }\n    /**\n     * Test whether a key exists in the store.\n     */\n    hasKey(key) {\n      return this.store.hasOwnProperty(key);\n    }\n    /**\n     * Indicates whether the state is empty.\n     */\n    get isEmpty() {\n      return Object.keys(this.store).length === 0;\n    }\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     */\n    onSerialize(key, callback) {\n      this.onSerializeCallbacks[key] = callback;\n    }\n    /**\n     * Serialize the current state of the store to JSON.\n     */\n    toJson() {\n      // Call the onSerialize callbacks and put those values into the store.\n      for (const key in this.onSerializeCallbacks) {\n        if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n          try {\n            this.store[key] = this.onSerializeCallbacks[key]();\n          } catch (e) {\n            console.warn('Exception in onSerialize callback: ', e);\n          }\n        }\n      }\n      // Escape script tag to avoid break out of <script> tag in serialized output.\n      // Encoding of `<` is the same behaviour as G3 script_builders.\n      return JSON.stringify(this.store).replace(/</g, '\\\\u003C');\n    }\n  }\n  return TransferState;\n})();\nfunction retrieveTransferredState(doc, appId) {\n  // Locate the script tag with the JSON data transferred from the server.\n  // The id of the script tag is set to the Angular appId + 'state'.\n  const script = doc.getElementById(appId + '-state');\n  if (script?.textContent) {\n    try {\n      // Avoid using any here as it triggers lint errors in google3 (any is not allowed).\n      // Decoding of `<` is done of the box by browsers and node.js, same behaviour as G3\n      // script_builders.\n      return JSON.parse(script.textContent);\n    } catch (e) {\n      console.warn('Exception while restoring TransferState for app ' + appId, e);\n    }\n  }\n  return {};\n}\n\n/** Encodes that the node lookup should start from the host node of this component. */\nconst REFERENCE_NODE_HOST = 'h';\n/** Encodes that the node lookup should start from the document body node. */\nconst REFERENCE_NODE_BODY = 'b';\nconst NODE_NAVIGATION_STEP_FIRST_CHILD = 'f';\nconst NODE_NAVIGATION_STEP_NEXT_SIBLING = 'n';\n/**\n * Keys within serialized view data structure to represent various\n * parts. See the `SerializedView` interface below for additional information.\n */\nconst ELEMENT_CONTAINERS = 'e';\nconst TEMPLATES = 't';\nconst CONTAINERS = 'c';\nconst MULTIPLIER = 'x';\nconst NUM_ROOT_NODES = 'r';\nconst TEMPLATE_ID = 'i'; // as it's also an \"id\"\nconst NODES = 'n';\nconst DISCONNECTED_NODES = 'd';\nconst I18N_DATA = 'l';\nconst DEFER_BLOCK_ID = 'di';\nconst DEFER_BLOCK_STATE$1 = 's';\nconst DEFER_PARENT_BLOCK_ID = 'p';\nconst DEFER_HYDRATE_TRIGGERS = 't';\n\n/**\n * Internal token that specifies whether DOM reuse logic\n * during hydration is enabled.\n */\nconst IS_HYDRATION_DOM_REUSE_ENABLED = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_HYDRATION_DOM_REUSE_ENABLED' : '');\n// By default (in client rendering mode), we remove all the contents\n// of the host element and render an application after that.\nconst PRESERVE_HOST_CONTENT_DEFAULT = false;\n/**\n * Internal token that indicates whether host element content should be\n * retained during the bootstrap.\n */\nconst PRESERVE_HOST_CONTENT = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'PRESERVE_HOST_CONTENT' : '', {\n  providedIn: 'root',\n  factory: () => PRESERVE_HOST_CONTENT_DEFAULT\n});\n/**\n * Internal token that indicates whether hydration support for i18n\n * is enabled.\n */\nconst IS_I18N_HYDRATION_ENABLED = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_I18N_HYDRATION_ENABLED' : '');\n/**\n * Internal token that indicates whether event replay support for SSR\n * is enabled.\n */\nconst IS_EVENT_REPLAY_ENABLED = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_EVENT_REPLAY_ENABLED' : '');\nconst EVENT_REPLAY_ENABLED_DEFAULT = false;\n/**\n * Internal token that indicates whether incremental hydration support\n * is enabled.\n */\nconst IS_INCREMENTAL_HYDRATION_ENABLED = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_INCREMENTAL_HYDRATION_ENABLED' : '');\n/**\n * A map of DOM elements with `jsaction` attributes grouped by action names.\n */\nconst JSACTION_BLOCK_ELEMENT_MAP = /*#__PURE__*/new InjectionToken(ngDevMode ? 'JSACTION_BLOCK_ELEMENT_MAP' : '', {\n  providedIn: 'root',\n  factory: () => new Map()\n});\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/** Configuration object used to register passive and capturing events. */\nconst eventListenerOptions = {\n  passive: true,\n  capture: true\n};\n/** Keeps track of the currently-registered `on hover` triggers. */\nconst hoverTriggers = /*#__PURE__*/new WeakMap();\n/** Keeps track of the currently-registered `on interaction` triggers. */\nconst interactionTriggers = /*#__PURE__*/new WeakMap();\n/** Currently-registered `viewport` triggers. */\nconst viewportTriggers = /*#__PURE__*/new WeakMap();\n/** Names of the events considered as interaction events. */\nconst interactionEventNames = ['click', 'keydown'];\n/** Names of the events considered as hover events. */\nconst hoverEventNames = ['mouseenter', 'mouseover', 'focusin'];\n/** `IntersectionObserver` used to observe `viewport` triggers. */\nlet intersectionObserver = null;\n/** Number of elements currently observed with `viewport` triggers. */\nlet observedViewportElements = 0;\n/** Object keeping track of registered callbacks for a deferred block trigger. */\nclass DeferEventEntry {\n  callbacks = /*#__PURE__*/new Set();\n  listener = () => {\n    for (const callback of this.callbacks) {\n      callback();\n    }\n  };\n}\n/**\n * Registers an interaction trigger.\n * @param trigger Element that is the trigger.\n * @param callback Callback to be invoked when the trigger is interacted with.\n * @return cleanup function which removes trigger Element from interactionTriggers map\n * and interaction event listeners from the trigger Element\n */\nfunction onInteraction(trigger, callback) {\n  let entry = interactionTriggers.get(trigger);\n  // If this is the first entry for this element, add the listeners.\n  if (!entry) {\n    // Note that managing events centrally like this lends itself well to using global\n    // event delegation. It currently does delegation at the element level, rather than the\n    // document level, because:\n    // 1. Global delegation is the most effective when there are a lot of events being registered\n    // at the same time. Deferred blocks are unlikely to be used in such a way.\n    // 2. Matching events to their target isn't free. For each `click` and `keydown` event we\n    // would have look through all the triggers and check if the target either is the element\n    // itself or it's contained within the element. Given that `click` and `keydown` are some\n    // of the most common events, this may end up introducing a lot of runtime overhead.\n    // 3. We're still registering only two events per element, no matter how many deferred blocks\n    // are referencing it.\n    entry = new DeferEventEntry();\n    interactionTriggers.set(trigger, entry);\n    for (const name of interactionEventNames) {\n      trigger.addEventListener(name, entry.listener, eventListenerOptions);\n    }\n  }\n  entry.callbacks.add(callback);\n  return () => {\n    const {\n      callbacks,\n      listener\n    } = entry;\n    callbacks.delete(callback);\n    if (callbacks.size === 0) {\n      interactionTriggers.delete(trigger);\n      for (const name of interactionEventNames) {\n        trigger.removeEventListener(name, listener, eventListenerOptions);\n      }\n    }\n  };\n}\n/**\n * Registers a hover trigger.\n * @param trigger Element that is the trigger.\n * @param callback Callback to be invoked when the trigger is hovered over.\n * @return cleanup function which removes trigger element from hoverTriggers map\n * and removes hover interaction event listeners from the trigger element\n */\nfunction onHover(trigger, callback) {\n  let entry = hoverTriggers.get(trigger);\n  // If this is the first entry for this element, add the listener.\n  if (!entry) {\n    entry = new DeferEventEntry();\n    hoverTriggers.set(trigger, entry);\n    for (const name of hoverEventNames) {\n      trigger.addEventListener(name, entry.listener, eventListenerOptions);\n    }\n  }\n  entry.callbacks.add(callback);\n  return () => {\n    const {\n      callbacks,\n      listener\n    } = entry;\n    callbacks.delete(callback);\n    if (callbacks.size === 0) {\n      for (const name of hoverEventNames) {\n        trigger.removeEventListener(name, listener, eventListenerOptions);\n      }\n      hoverTriggers.delete(trigger);\n    }\n  };\n}\n/**\n * Used to create an IntersectionObserver instance.\n * @return IntersectionObserver that is used by onViewport\n */\nfunction createIntersectionObserver() {\n  return new IntersectionObserver(entries => {\n    for (const current of entries) {\n      if (current.isIntersecting && viewportTriggers.has(current.target)) {\n        viewportTriggers.get(current.target).listener();\n      }\n    }\n  });\n}\n/**\n * Registers a viewport trigger.\n * @param trigger Element that is the trigger.\n * @param callback Callback to be invoked when the trigger comes into the viewport.\n * @param observerFactoryFn Factory function which returns an IntersectionObserver\n * @return cleanup function which removes trigger Element from viewportTriggers map\n * and tells the intersection observer to stop observing trigger Element and set\n * intersectionObserver to null if there are no more Elements to observe\n */\nfunction onViewport(trigger, callback, observerFactoryFn) {\n  let entry = viewportTriggers.get(trigger);\n  intersectionObserver = intersectionObserver || observerFactoryFn();\n  if (!entry) {\n    entry = new DeferEventEntry();\n    intersectionObserver.observe(trigger);\n    viewportTriggers.set(trigger, entry);\n    observedViewportElements++;\n  }\n  entry.callbacks.add(callback);\n  return () => {\n    if (!viewportTriggers.has(trigger)) {\n      return;\n    }\n    entry.callbacks.delete(callback);\n    if (entry.callbacks.size === 0) {\n      intersectionObserver?.unobserve(trigger);\n      viewportTriggers.delete(trigger);\n      observedViewportElements--;\n    }\n    if (observedViewportElements === 0) {\n      intersectionObserver?.disconnect();\n      intersectionObserver = null;\n    }\n  };\n}\nconst DEFER_BLOCK_SSR_ID_ATTRIBUTE = 'ngb';\nfunction setJSActionAttributes(nativeElement, eventTypes, parentDeferBlockId = null) {\n  // jsaction attributes specifically should be applied to elements and not comment nodes.\n  // Comment nodes also have no setAttribute function. So this avoids errors.\n  if (eventTypes.length === 0 || nativeElement.nodeType !== Node.ELEMENT_NODE) {\n    return;\n  }\n  const existingAttr = nativeElement.getAttribute(Attribute$1.JSACTION);\n  // we dedupe cases where hydrate triggers are used as it's possible that\n  // someone may have added an event binding to the root node that matches what the\n  // hydrate trigger adds.\n  const parts = eventTypes.reduce((prev, curr) => {\n    // if there is no existing attribute OR it's not in the existing one, we need to add it\n    return (existingAttr?.indexOf(curr) ?? -1) === -1 ? prev + curr + ':;' : prev;\n  }, '');\n  //  This is required to be a module accessor to appease security tests on setAttribute.\n  nativeElement.setAttribute(Attribute$1.JSACTION, `${existingAttr ?? ''}${parts}`);\n  const blockName = parentDeferBlockId ?? '';\n  if (blockName !== '' && parts.length > 0) {\n    nativeElement.setAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE, blockName);\n  }\n}\nconst sharedStashFunction = (rEl, eventType, listenerFn) => {\n  const el = rEl;\n  const eventListenerMap = el.__jsaction_fns ?? new Map();\n  const eventListeners = eventListenerMap.get(eventType) ?? [];\n  eventListeners.push(listenerFn);\n  eventListenerMap.set(eventType, eventListeners);\n  el.__jsaction_fns = eventListenerMap;\n};\nconst sharedMapFunction = (rEl, jsActionMap) => {\n  const el = rEl;\n  let blockName = el.getAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE) ?? '';\n  const blockSet = jsActionMap.get(blockName) ?? new Set();\n  if (!blockSet.has(el)) {\n    blockSet.add(el);\n  }\n  jsActionMap.set(blockName, blockSet);\n};\nfunction removeListenersFromBlocks(blockNames, jsActionMap) {\n  if (blockNames.length > 0) {\n    let blockList = [];\n    for (let blockName of blockNames) {\n      if (jsActionMap.has(blockName)) {\n        blockList = [...blockList, ...jsActionMap.get(blockName)];\n      }\n    }\n    const replayList = new Set(blockList);\n    replayList.forEach(removeListeners);\n  }\n}\nconst removeListeners = el => {\n  el.removeAttribute(Attribute$1.JSACTION);\n  el.removeAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE);\n  el.__jsaction_fns = undefined;\n};\nconst JSACTION_EVENT_CONTRACT = /*#__PURE__*/new InjectionToken(ngDevMode ? 'EVENT_CONTRACT_DETAILS' : '', {\n  providedIn: 'root',\n  factory: () => ({})\n});\nfunction invokeListeners(event, currentTarget) {\n  const handlerFns = currentTarget?.__jsaction_fns?.get(event.type);\n  if (!handlerFns || !currentTarget?.isConnected) {\n    return;\n  }\n  for (const handler of handlerFns) {\n    handler(event);\n  }\n}\nconst stashEventListeners = /*#__PURE__*/new Map();\n/**\n * Registers a stashing function for a specific application ID.\n *\n * @param appId The unique identifier for the application instance.\n * @param fn The stashing function to associate with this app ID.\n * @returns A cleanup function that removes the stashing function when called.\n */\nfunction setStashFn(appId, fn) {\n  stashEventListeners.set(appId, fn);\n  return () => stashEventListeners.delete(appId);\n}\n/**\n * Indicates whether the stashing code was added, prevents adding it multiple times.\n */\nlet isStashEventListenerImplEnabled = false;\nlet _stashEventListenerImpl = (lView, target, eventName, wrappedListener) => {};\n/**\n * Optionally stashes an event listener for later replay during hydration.\n *\n * This function delegates to an internal `_stashEventListenerImpl`, which may\n * be a no-op unless the event replay feature is enabled. When active, this\n * allows capturing event listener metadata before hydration completes, so that\n * user interactions during SSR can be replayed.\n *\n * @param lView The logical view (LView) where the listener is being registered.\n * @param target The DOM element or event target the listener is attached to.\n * @param eventName The name of the event being listened for (e.g., 'click').\n * @param wrappedListener The event handler that was registered.\n */\nfunction stashEventListenerImpl(lView, target, eventName, wrappedListener) {\n  _stashEventListenerImpl(lView, target, eventName, wrappedListener);\n}\n/**\n * Enables the event listener stashing logic in a tree-shakable way.\n *\n * This function lazily sets the implementation of `_stashEventListenerImpl`\n * so that it becomes active only when `withEventReplay` is invoked. This ensures\n * that the stashing logic is excluded from production builds unless needed.\n */\nfunction enableStashEventListenerImpl() {\n  if (!isStashEventListenerImplEnabled) {\n    _stashEventListenerImpl = (lView, target, eventName, wrappedListener) => {\n      const appId = lView[INJECTOR].get(APP_ID);\n      const stashEventListener = stashEventListeners.get(appId);\n      stashEventListener?.(target, eventName, wrappedListener);\n    };\n    isStashEventListenerImplEnabled = true;\n  }\n}\n\n/**\n * An internal injection token to reference `DehydratedBlockRegistry` implementation\n * in a tree-shakable way.\n */\nconst DEHYDRATED_BLOCK_REGISTRY = /*#__PURE__*/new InjectionToken(ngDevMode ? 'DEHYDRATED_BLOCK_REGISTRY' : '');\n/**\n * The DehydratedBlockRegistry is used for incremental hydration purposes. It keeps\n * track of the Defer Blocks that need hydration so we can effectively\n * navigate up to the top dehydrated defer block and fire appropriate cleanup\n * functions post hydration.\n */\nlet DehydratedBlockRegistry = /*#__PURE__*/(() => {\n  class DehydratedBlockRegistry {\n    registry = new Map();\n    cleanupFns = new Map();\n    jsActionMap = inject(JSACTION_BLOCK_ELEMENT_MAP);\n    contract = inject(JSACTION_EVENT_CONTRACT);\n    add(blockId, info) {\n      this.registry.set(blockId, info);\n      // It's possible that hydration is queued that's waiting for the\n      // resolution of a lazy loaded route. In this case, we ensure\n      // the callback function is called to continue the hydration process\n      // for the queued block set.\n      if (this.awaitingCallbacks.has(blockId)) {\n        const awaitingCallbacks = this.awaitingCallbacks.get(blockId);\n        for (const cb of awaitingCallbacks) {\n          cb();\n        }\n      }\n    }\n    get(blockId) {\n      return this.registry.get(blockId) ?? null;\n    }\n    has(blockId) {\n      return this.registry.has(blockId);\n    }\n    cleanup(hydratedBlocks) {\n      removeListenersFromBlocks(hydratedBlocks, this.jsActionMap);\n      for (let blockId of hydratedBlocks) {\n        this.registry.delete(blockId);\n        this.jsActionMap.delete(blockId);\n        this.invokeTriggerCleanupFns(blockId);\n        this.hydrating.delete(blockId);\n        this.awaitingCallbacks.delete(blockId);\n      }\n      if (this.size === 0) {\n        this.contract.instance?.cleanUp();\n      }\n    }\n    get size() {\n      return this.registry.size;\n    }\n    // we have to leave the lowest block Id in the registry\n    // unless that block has no children\n    addCleanupFn(blockId, fn) {\n      let cleanupFunctions = [];\n      if (this.cleanupFns.has(blockId)) {\n        cleanupFunctions = this.cleanupFns.get(blockId);\n      }\n      cleanupFunctions.push(fn);\n      this.cleanupFns.set(blockId, cleanupFunctions);\n    }\n    invokeTriggerCleanupFns(blockId) {\n      const fns = this.cleanupFns.get(blockId) ?? [];\n      for (let fn of fns) {\n        fn();\n      }\n      this.cleanupFns.delete(blockId);\n    }\n    // Blocks that are being hydrated.\n    hydrating = new Map();\n    // Blocks that are awaiting a defer instruction finish.\n    awaitingCallbacks = new Map();\n    awaitParentBlock(topmostParentBlock, callback) {\n      const parentBlockAwaitCallbacks = this.awaitingCallbacks.get(topmostParentBlock) ?? [];\n      parentBlockAwaitCallbacks.push(callback);\n      this.awaitingCallbacks.set(topmostParentBlock, parentBlockAwaitCallbacks);\n    }\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: DehydratedBlockRegistry,\n      providedIn: null,\n      factory: () => new DehydratedBlockRegistry()\n    });\n  }\n  return DehydratedBlockRegistry;\n})();\n/**\n * Checks whether a TNode is considered detached, i.e. not present in the\n * translated i18n template. We should not attempt hydration for such nodes\n * and instead, use a regular \"creation mode\".\n */\nfunction isDetachedByI18n(tNode) {\n  return (tNode.flags & 32 /* TNodeFlags.isDetached */) === 32 /* TNodeFlags.isDetached */;\n}\n\n/**\n * The name of the key used in the TransferState collection,\n * where hydration information is located.\n */\nconst TRANSFER_STATE_TOKEN_ID = '__nghData__';\n/**\n * Lookup key used to reference DOM hydration data (ngh) in `TransferState`.\n */\nconst NGH_DATA_KEY = /*#__PURE__*/makeStateKey(TRANSFER_STATE_TOKEN_ID);\n/**\n * The name of the key used in the TransferState collection,\n * where serialized defer block information is located.\n */\nconst TRANSFER_STATE_DEFER_BLOCKS_INFO = '__nghDeferData__';\n/**\n * Lookup key used to retrieve defer block datain `TransferState`.\n */\nconst NGH_DEFER_BLOCKS_KEY = /*#__PURE__*/makeStateKey(TRANSFER_STATE_DEFER_BLOCKS_INFO);\n/**\n * Checks whether a given key is used by the framework for transferring hydration data.\n */\nfunction isInternalHydrationTransferStateKey(key) {\n  return key === TRANSFER_STATE_TOKEN_ID || key === TRANSFER_STATE_DEFER_BLOCKS_INFO;\n}\n/**\n * The name of the attribute that would be added to host component\n * nodes and contain a reference to a particular slot in transferred\n * state that contains the necessary hydration info for this component.\n */\nconst NGH_ATTR_NAME = 'ngh';\n/**\n * Marker used in a comment node to ensure hydration content integrity\n */\nconst SSR_CONTENT_INTEGRITY_MARKER = 'nghm';\n/**\n * Reference to a function that reads `ngh` attribute value from a given RNode\n * and retrieves hydration information from the TransferState using that value\n * as an index. Returns `null` by default, when hydration is not enabled.\n *\n * @param rNode Component's host element.\n * @param injector Injector that this component has access to.\n * @param isRootView Specifies whether we trying to read hydration info for the root view.\n */\nlet _retrieveHydrationInfoImpl = () => null;\nfunction retrieveHydrationInfoImpl(rNode, injector, isRootView = false) {\n  let nghAttrValue = rNode.getAttribute(NGH_ATTR_NAME);\n  if (nghAttrValue == null) return null;\n  // For cases when a root component also acts as an anchor node for a ViewContainerRef\n  // (for example, when ViewContainerRef is injected in a root component), there is a need\n  // to serialize information about the component itself, as well as an LContainer that\n  // represents this ViewContainerRef. Effectively, we need to serialize 2 pieces of info:\n  // (1) hydration info for the root component itself and (2) hydration info for the\n  // ViewContainerRef instance (an LContainer). Each piece of information is included into\n  // the hydration data (in the TransferState object) separately, thus we end up with 2 ids.\n  // Since we only have 1 root element, we encode both bits of info into a single string:\n  // ids are separated by the `|` char (e.g. `10|25`, where `10` is the ngh for a component view\n  // and 25 is the `ngh` for a root view which holds LContainer).\n  const [componentViewNgh, rootViewNgh] = nghAttrValue.split('|');\n  nghAttrValue = isRootView ? rootViewNgh : componentViewNgh;\n  if (!nghAttrValue) return null;\n  // We've read one of the ngh ids, keep the remaining one, so that\n  // we can set it back on the DOM element.\n  const rootNgh = rootViewNgh ? `|${rootViewNgh}` : '';\n  const remainingNgh = isRootView ? componentViewNgh : rootNgh;\n  let data = {};\n  // An element might have an empty `ngh` attribute value (e.g. `<comp ngh=\"\" />`),\n  // which means that no special annotations are required. Do not attempt to read\n  // from the TransferState in this case.\n  if (nghAttrValue !== '') {\n    const transferState = injector.get(TransferState, null, {\n      optional: true\n    });\n    if (transferState !== null) {\n      const nghData = transferState.get(NGH_DATA_KEY, []);\n      // The nghAttrValue is always a number referencing an index\n      // in the hydration TransferState data.\n      data = nghData[Number(nghAttrValue)];\n      // If the `ngh` attribute exists and has a non-empty value,\n      // the hydration info *must* be present in the TransferState.\n      // If there is no data for some reasons, this is an error.\n      ngDevMode && assertDefined(data, 'Unable to retrieve hydration info from the TransferState.');\n    }\n  }\n  const dehydratedView = {\n    data,\n    firstChild: rNode.firstChild ?? null\n  };\n  if (isRootView) {\n    // If there is hydration info present for the root view, it means that there was\n    // a ViewContainerRef injected in the root component. The root component host element\n    // acted as an anchor node in this scenario. As a result, the DOM nodes that represent\n    // embedded views in this ViewContainerRef are located as siblings to the host node,\n    // i.e. `<app-root /><#VIEW1><#VIEW2>...<!--container-->`. In this case, the current\n    // node becomes the first child of this root view and the next sibling is the first\n    // element in the DOM segment.\n    dehydratedView.firstChild = rNode;\n    // We use `0` here, since this is the slot (right after the HEADER_OFFSET)\n    // where a component LView or an LContainer is located in a root LView.\n    setSegmentHead(dehydratedView, 0, rNode.nextSibling);\n  }\n  if (remainingNgh) {\n    // If we have only used one of the ngh ids, store the remaining one\n    // back on this RNode.\n    rNode.setAttribute(NGH_ATTR_NAME, remainingNgh);\n  } else {\n    // The `ngh` attribute is cleared from the DOM node now\n    // that the data has been retrieved for all indices.\n    rNode.removeAttribute(NGH_ATTR_NAME);\n  }\n  // Note: don't check whether this node was claimed for hydration,\n  // because this node might've been previously claimed while processing\n  // template instructions.\n  ngDevMode && markRNodeAsClaimedByHydration(rNode, /* checkIfAlreadyClaimed */false);\n  ngDevMode && ngDevMode.hydratedComponents++;\n  return dehydratedView;\n}\n/**\n * Sets the implementation for the `retrieveHydrationInfo` function.\n */\nfunction enableRetrieveHydrationInfoImpl() {\n  _retrieveHydrationInfoImpl = retrieveHydrationInfoImpl;\n}\n/**\n * Retrieves hydration info by reading the value from the `ngh` attribute\n * and accessing a corresponding slot in TransferState storage.\n */\nfunction retrieveHydrationInfo(rNode, injector, isRootView = false) {\n  return _retrieveHydrationInfoImpl(rNode, injector, isRootView);\n}\n/**\n * Retrieves the necessary object from a given ViewRef to serialize:\n *  - an LView for component views\n *  - an LContainer for cases when component acts as a ViewContainerRef anchor\n *  - `null` in case of an embedded view\n */\nfunction getLNodeForHydration(viewRef) {\n  // Reading an internal field from `ViewRef` instance.\n  let lView = viewRef._lView;\n  const tView = lView[TVIEW];\n  // A registered ViewRef might represent an instance of an\n  // embedded view, in which case we do not need to annotate it.\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    return null;\n  }\n  // Check if it's a root view and if so, retrieve component's\n  // LView from the first slot after the header.\n  if (isRootView(lView)) {\n    lView = lView[HEADER_OFFSET];\n  }\n  return lView;\n}\nfunction getTextNodeContent(node) {\n  return node.textContent?.replace(/\\s/gm, '');\n}\n/**\n * Restores text nodes and separators into the DOM that were lost during SSR\n * serialization. The hydration process replaces empty text nodes and text\n * nodes that are immediately adjacent to other text nodes with comment nodes\n * that this method filters on to restore those missing nodes that the\n * hydration process is expecting to be present.\n *\n * @param node The app's root HTML Element\n */\nfunction processTextNodeMarkersBeforeHydration(node) {\n  const doc = getDocument();\n  const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {\n    acceptNode(node) {\n      const content = getTextNodeContent(node);\n      const isTextNodeMarker = content === \"ngetn\" /* TextNodeMarker.EmptyNode */ || content === \"ngtns\" /* TextNodeMarker.Separator */;\n      return isTextNodeMarker ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n    }\n  });\n  let currentNode;\n  // We cannot modify the DOM while using the commentIterator,\n  // because it throws off the iterator state.\n  // So we collect all marker nodes first and then follow up with\n  // applying the changes to the DOM: either inserting an empty node\n  // or just removing the marker if it was used as a separator.\n  const nodes = [];\n  while (currentNode = commentNodesIterator.nextNode()) {\n    nodes.push(currentNode);\n  }\n  for (const node of nodes) {\n    if (node.textContent === \"ngetn\" /* TextNodeMarker.EmptyNode */) {\n      node.replaceWith(doc.createTextNode(''));\n    } else {\n      node.remove();\n    }\n  }\n}\n/**\n * Internal type that represents a claimed node.\n * Only used in dev mode.\n */\nvar HydrationStatus = /*#__PURE__*/function (HydrationStatus) {\n  HydrationStatus[\"Hydrated\"] = \"hydrated\";\n  HydrationStatus[\"Skipped\"] = \"skipped\";\n  HydrationStatus[\"Mismatched\"] = \"mismatched\";\n  return HydrationStatus;\n}(HydrationStatus || {});\nconst HYDRATION_INFO_KEY = '__ngDebugHydrationInfo__';\nfunction patchHydrationInfo(node, info) {\n  node[HYDRATION_INFO_KEY] = info;\n}\nfunction readHydrationInfo(node) {\n  return node[HYDRATION_INFO_KEY] ?? null;\n}\n/**\n * Marks a node as \"claimed\" by hydration process.\n * This is needed to make assessments in tests whether\n * the hydration process handled all nodes.\n */\nfunction markRNodeAsClaimedByHydration(node, checkIfAlreadyClaimed = true) {\n  if (!ngDevMode) {\n    throw new Error('Calling `markRNodeAsClaimedByHydration` in prod mode ' + 'is not supported and likely a mistake.');\n  }\n  if (checkIfAlreadyClaimed && isRNodeClaimedForHydration(node)) {\n    throw new Error('Trying to claim a node, which was claimed already.');\n  }\n  patchHydrationInfo(node, {\n    status: HydrationStatus.Hydrated\n  });\n  ngDevMode.hydratedNodes++;\n}\nfunction markRNodeAsSkippedByHydration(node) {\n  if (!ngDevMode) {\n    throw new Error('Calling `markRNodeAsSkippedByHydration` in prod mode ' + 'is not supported and likely a mistake.');\n  }\n  patchHydrationInfo(node, {\n    status: HydrationStatus.Skipped\n  });\n  ngDevMode.componentsSkippedHydration++;\n}\nfunction countBlocksSkippedByHydration(injector) {\n  const transferState = injector.get(TransferState);\n  const nghDeferData = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n  if (ngDevMode) {\n    ngDevMode.deferBlocksWithIncrementalHydration = Object.keys(nghDeferData).length;\n  }\n}\nfunction markRNodeAsHavingHydrationMismatch(node, expectedNodeDetails = null, actualNodeDetails = null) {\n  if (!ngDevMode) {\n    throw new Error('Calling `markRNodeAsMismatchedByHydration` in prod mode ' + 'is not supported and likely a mistake.');\n  }\n  // The RNode can be a standard HTMLElement (not an Angular component or directive)\n  // The devtools component tree only displays Angular components & directives\n  // Therefore we attach the debug info to the closest component/directive\n  while (node && !getComponent(node)) {\n    node = node?.parentNode;\n  }\n  if (node) {\n    patchHydrationInfo(node, {\n      status: HydrationStatus.Mismatched,\n      expectedNodeDetails,\n      actualNodeDetails\n    });\n  }\n}\nfunction isRNodeClaimedForHydration(node) {\n  return readHydrationInfo(node)?.status === HydrationStatus.Hydrated;\n}\nfunction setSegmentHead(hydrationInfo, index, node) {\n  hydrationInfo.segmentHeads ??= {};\n  hydrationInfo.segmentHeads[index] = node;\n}\nfunction getSegmentHead(hydrationInfo, index) {\n  return hydrationInfo.segmentHeads?.[index] ?? null;\n}\nfunction isIncrementalHydrationEnabled(injector) {\n  return injector.get(IS_INCREMENTAL_HYDRATION_ENABLED, false, {\n    optional: true\n  });\n}\n/** Throws an error if the incremental hydration is not enabled */\nfunction assertIncrementalHydrationIsConfigured(injector) {\n  if (!isIncrementalHydrationEnabled(injector)) {\n    throw new RuntimeError(508 /* RuntimeErrorCode.MISCONFIGURED_INCREMENTAL_HYDRATION */, 'Angular has detected that some `@defer` blocks use `hydrate` triggers, ' + 'but incremental hydration was not enabled. Please ensure that the `withIncrementalHydration()` ' + 'call is added as an argument for the `provideClientHydration()` function call ' + 'in your application config.');\n  }\n}\n/** Throws an error if the ssrUniqueId on the LDeferBlockDetails is not present  */\nfunction assertSsrIdDefined(ssrUniqueId) {\n  assertDefined(ssrUniqueId, 'Internal error: expecting an SSR id for a defer block that should be hydrated, but the id is not present');\n}\n/**\n * Returns the size of an <ng-container>, using either the information\n * serialized in `ELEMENT_CONTAINERS` (element container size) or by\n * computing the sum of root nodes in all dehydrated views in a given\n * container (in case this `<ng-container>` was also used as a view\n * container host node, e.g. <ng-container *ngIf>).\n */\nfunction getNgContainerSize(hydrationInfo, index) {\n  const data = hydrationInfo.data;\n  let size = data[ELEMENT_CONTAINERS]?.[index] ?? null;\n  // If there is no serialized information available in the `ELEMENT_CONTAINERS` slot,\n  // check if we have info about view containers at this location (e.g.\n  // `<ng-container *ngIf>`) and use container size as a number of root nodes in this\n  // element container.\n  if (size === null && data[CONTAINERS]?.[index]) {\n    size = calcSerializedContainerSize(hydrationInfo, index);\n  }\n  return size;\n}\nfunction isSerializedElementContainer(hydrationInfo, index) {\n  return hydrationInfo.data[ELEMENT_CONTAINERS]?.[index] !== undefined;\n}\nfunction getSerializedContainerViews(hydrationInfo, index) {\n  return hydrationInfo.data[CONTAINERS]?.[index] ?? null;\n}\n/**\n * Computes the size of a serialized container (the number of root nodes)\n * by calculating the sum of root nodes in all dehydrated views in this container.\n */\nfunction calcSerializedContainerSize(hydrationInfo, index) {\n  const views = getSerializedContainerViews(hydrationInfo, index) ?? [];\n  let numNodes = 0;\n  for (let view of views) {\n    numNodes += view[NUM_ROOT_NODES] * (view[MULTIPLIER] ?? 1);\n  }\n  return numNodes;\n}\n/**\n * Attempt to initialize the `disconnectedNodes` field of the given\n * `DehydratedView`. Returns the initialized value.\n */\nfunction initDisconnectedNodes(hydrationInfo) {\n  // Check if we are processing disconnected info for the first time.\n  if (typeof hydrationInfo.disconnectedNodes === 'undefined') {\n    const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];\n    hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;\n  }\n  return hydrationInfo.disconnectedNodes;\n}\n/**\n * Checks whether a node is annotated as \"disconnected\", i.e. not present\n * in the DOM at serialization time. We should not attempt hydration for\n * such nodes and instead, use a regular \"creation mode\".\n */\nfunction isDisconnectedNode$1(hydrationInfo, index) {\n  // Check if we are processing disconnected info for the first time.\n  if (typeof hydrationInfo.disconnectedNodes === 'undefined') {\n    const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];\n    hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;\n  }\n  return !!initDisconnectedNodes(hydrationInfo)?.has(index);\n}\n/**\n * Checks whether a node can be hydrated.\n * @param lView View in which the node instance is placed.\n * @param tNode Node to be checked.\n */\nfunction canHydrateNode(lView, tNode) {\n  const hydrationInfo = lView[HYDRATION];\n  return hydrationInfo !== null && !isInSkipHydrationBlock$1() && !isDetachedByI18n(tNode) && !isDisconnectedNode$1(hydrationInfo, tNode.index - HEADER_OFFSET);\n}\n/**\n * Helper function to prepare text nodes for serialization by ensuring\n * that seperate logical text blocks in the DOM remain separate after\n * serialization.\n */\nfunction processTextNodeBeforeSerialization(context, node) {\n  // Handle cases where text nodes can be lost after DOM serialization:\n  //  1. When there is an *empty text node* in DOM: in this case, this\n  //     node would not make it into the serialized string and as a result,\n  //     this node wouldn't be created in a browser. This would result in\n  //     a mismatch during the hydration, where the runtime logic would expect\n  //     a text node to be present in live DOM, but no text node would exist.\n  //     Example: `<span>{{ name }}</span>` when the `name` is an empty string.\n  //     This would result in `<span></span>` string after serialization and\n  //     in a browser only the `span` element would be created. To resolve that,\n  //     an extra comment node is appended in place of an empty text node and\n  //     that special comment node is replaced with an empty text node *before*\n  //     hydration.\n  //  2. When there are 2 consecutive text nodes present in the DOM.\n  //     Example: `<div>Hello <ng-container *ngIf=\"true\">world</ng-container></div>`.\n  //     In this scenario, the live DOM would look like this:\n  //       <div>#text('Hello ') #text('world') #comment('container')</div>\n  //     Serialized string would look like this: `<div>Hello world<!--container--></div>`.\n  //     The live DOM in a browser after that would be:\n  //       <div>#text('Hello world') #comment('container')</div>\n  //     Notice how 2 text nodes are now \"merged\" into one. This would cause hydration\n  //     logic to fail, since it'd expect 2 text nodes being present, not one.\n  //     To fix this, we insert a special comment node in between those text nodes, so\n  //     serialized representation is: `<div>Hello <!--ngtns-->world<!--container--></div>`.\n  //     This forces browser to create 2 text nodes separated by a comment node.\n  //     Before running a hydration process, this special comment node is removed, so the\n  //     live DOM has exactly the same state as it was before serialization.\n  // Collect this node as required special annotation only when its\n  // contents is empty. Otherwise, such text node would be present on\n  // the client after server-side rendering and no special handling needed.\n  const el = node;\n  const corruptedTextNodes = context.corruptedTextNodes;\n  if (el.textContent === '') {\n    corruptedTextNodes.set(el, \"ngetn\" /* TextNodeMarker.EmptyNode */);\n  } else if (el.nextSibling?.nodeType === Node.TEXT_NODE) {\n    corruptedTextNodes.set(el, \"ngtns\" /* TextNodeMarker.Separator */);\n  }\n}\nfunction convertHydrateTriggersToJsAction(triggers) {\n  let actionList = [];\n  if (triggers !== null) {\n    if (triggers.has(4 /* DeferBlockTrigger.Hover */)) {\n      actionList.push(...hoverEventNames);\n    }\n    if (triggers.has(3 /* DeferBlockTrigger.Interaction */)) {\n      actionList.push(...interactionEventNames);\n    }\n  }\n  return actionList;\n}\n/**\n * Builds a queue of blocks that need to be hydrated, looking up the\n * tree to the topmost defer block that exists in the tree that hasn't\n * been hydrated, but exists in the registry. This queue is in top down\n * hierarchical order as a list of defer block ids.\n * Note: This is utilizing serialized information to navigate up the tree\n */\nfunction getParentBlockHydrationQueue(deferBlockId, injector) {\n  const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n  const transferState = injector.get(TransferState);\n  const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n  let isTopMostDeferBlock = false;\n  let currentBlockId = deferBlockId;\n  let parentBlockPromise = null;\n  const hydrationQueue = [];\n  while (!isTopMostDeferBlock && currentBlockId) {\n    ngDevMode && assertEqual(hydrationQueue.indexOf(currentBlockId), -1, 'Internal error: defer block hierarchy has a cycle.');\n    isTopMostDeferBlock = dehydratedBlockRegistry.has(currentBlockId);\n    const hydratingParentBlock = dehydratedBlockRegistry.hydrating.get(currentBlockId);\n    if (parentBlockPromise === null && hydratingParentBlock != null) {\n      parentBlockPromise = hydratingParentBlock.promise;\n      break;\n    }\n    hydrationQueue.unshift(currentBlockId);\n    currentBlockId = deferBlockParents[currentBlockId][DEFER_PARENT_BLOCK_ID];\n  }\n  return {\n    parentBlockPromise,\n    hydrationQueue\n  };\n}\nfunction gatherDeferBlocksByJSActionAttribute(doc) {\n  const jsactionNodes = doc.body.querySelectorAll('[jsaction]');\n  const blockMap = new Set();\n  const eventTypes = [hoverEventNames.join(':;'), interactionEventNames.join(':;')].join('|');\n  for (let node of jsactionNodes) {\n    const attr = node.getAttribute('jsaction');\n    const blockId = node.getAttribute('ngb');\n    if (attr?.match(eventTypes) && blockId !== null) {\n      blockMap.add(node);\n    }\n  }\n  return blockMap;\n}\nfunction appendDeferBlocksToJSActionMap(doc, injector) {\n  const blockMap = gatherDeferBlocksByJSActionAttribute(doc);\n  const jsActionMap = injector.get(JSACTION_BLOCK_ELEMENT_MAP);\n  for (let rNode of blockMap) {\n    sharedMapFunction(rNode, jsActionMap);\n  }\n}\n/**\n * Retrieves defer block hydration information from the TransferState.\n *\n * @param injector Injector that this component has access to.\n */\nlet _retrieveDeferBlockDataImpl = () => {\n  return {};\n};\nfunction retrieveDeferBlockDataImpl(injector) {\n  const transferState = injector.get(TransferState, null, {\n    optional: true\n  });\n  if (transferState !== null) {\n    const nghDeferData = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n    ngDevMode && assertDefined(nghDeferData, 'Unable to retrieve defer block info from the TransferState.');\n    return nghDeferData;\n  }\n  return {};\n}\n/**\n * Sets the implementation for the `retrieveDeferBlockData` function.\n */\nfunction enableRetrieveDeferBlockDataImpl() {\n  _retrieveDeferBlockDataImpl = retrieveDeferBlockDataImpl;\n}\n/**\n * Retrieves defer block data from TransferState storage\n */\nfunction retrieveDeferBlockData(injector) {\n  return _retrieveDeferBlockDataImpl(injector);\n}\nfunction isTimerTrigger(triggerInfo) {\n  return typeof triggerInfo === 'object' && triggerInfo.trigger === 5 /* DeferBlockTrigger.Timer */;\n}\nfunction getHydrateTimerTrigger(blockData) {\n  const trigger = blockData[DEFER_HYDRATE_TRIGGERS]?.find(t => isTimerTrigger(t));\n  return trigger?.delay ?? null;\n}\nfunction hasHydrateTrigger(blockData, trigger) {\n  return blockData[DEFER_HYDRATE_TRIGGERS]?.includes(trigger) ?? false;\n}\n/**\n * Creates a summary of the given serialized defer block, which is used later to properly initialize\n * specific triggers.\n */\nfunction createBlockSummary(blockInfo) {\n  return {\n    data: blockInfo,\n    hydrate: {\n      idle: hasHydrateTrigger(blockInfo, 0 /* DeferBlockTrigger.Idle */),\n      immediate: hasHydrateTrigger(blockInfo, 1 /* DeferBlockTrigger.Immediate */),\n      timer: getHydrateTimerTrigger(blockInfo),\n      viewport: hasHydrateTrigger(blockInfo, 2 /* DeferBlockTrigger.Viewport */)\n    }\n  };\n}\n/**\n * Processes all of the defer block data in the transfer state and creates a map of the summaries\n */\nfunction processBlockData(injector) {\n  const blockData = retrieveDeferBlockData(injector);\n  let blockDetails = new Map();\n  for (let blockId in blockData) {\n    blockDetails.set(blockId, createBlockSummary(blockData[blockId]));\n  }\n  return blockDetails;\n}\nfunction isSsrContentsIntegrity(node) {\n  return !!node && node.nodeType === Node.COMMENT_NODE && node.textContent?.trim() === SSR_CONTENT_INTEGRITY_MARKER;\n}\nfunction skipTextNodes(node) {\n  // Ignore whitespace. Before the <body>, we shouldn't find text nodes that aren't whitespace.\n  while (node && node.nodeType === Node.TEXT_NODE) {\n    node = node.previousSibling;\n  }\n  return node;\n}\n/**\n * Verifies whether the DOM contains a special marker added during SSR time to make sure\n * there is no SSR'ed contents transformations happen after SSR is completed. Typically that\n * happens either by CDN or during the build process as an optimization to remove comment nodes.\n * Hydration process requires comment nodes produced by Angular to locate correct DOM segments.\n * When this special marker is *not* present - throw an error and do not proceed with hydration,\n * since it will not be able to function correctly.\n *\n * Note: this function is invoked only on the client, so it's safe to use DOM APIs.\n */\nfunction verifySsrContentsIntegrity(doc) {\n  for (const node of doc.body.childNodes) {\n    if (isSsrContentsIntegrity(node)) {\n      return;\n    }\n  }\n  // Check if the HTML parser may have moved the marker to just before the <body> tag,\n  // e.g. because the body tag was implicit and not present in the markup. An implicit body\n  // tag is unlikely to interfer with whitespace/comments inside of the app's root element.\n  // Case 1: Implicit body. Example:\n  //   <!doctype html><head><title>Hi</title></head><!--nghm--><app-root></app-root>\n  const beforeBody = skipTextNodes(doc.body.previousSibling);\n  if (isSsrContentsIntegrity(beforeBody)) {\n    return;\n  }\n  // Case 2: Implicit body & head. Example:\n  //   <!doctype html><head><title>Hi</title><!--nghm--><app-root></app-root>\n  let endOfHead = skipTextNodes(doc.head.lastChild);\n  if (isSsrContentsIntegrity(endOfHead)) {\n    return;\n  }\n  throw new RuntimeError(-507 /* RuntimeErrorCode.MISSING_SSR_CONTENT_INTEGRITY_MARKER */, typeof ngDevMode !== 'undefined' && ngDevMode && 'Angular hydration logic detected that HTML content of this page was modified after it ' + 'was produced during server side rendering. Make sure that there are no optimizations ' + 'that remove comment nodes from HTML enabled on your CDN. Angular hydration ' + 'relies on HTML produced by the server, including whitespaces and comment nodes.');\n}\n\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView, lView) {\n  const contentQueries = tView.contentQueries;\n  if (contentQueries !== null) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      for (let i = 0; i < contentQueries.length; i += 2) {\n        const queryStartIdx = contentQueries[i];\n        const directiveDefIdx = contentQueries[i + 1];\n        if (directiveDefIdx !== -1) {\n          const directiveDef = tView.data[directiveDefIdx];\n          ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n          ngDevMode && assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n          setCurrentQueryIndex(queryStartIdx);\n          directiveDef.contentQueries(2 /* RenderFlags.Update */, lView[directiveDefIdx], directiveDefIdx);\n        }\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\nfunction executeViewQueryFn(flags, viewQueryFn, component) {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    viewQueryFn(flags, component);\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\nfunction executeContentQueries(tView, tNode, lView) {\n  if (isContentQueryHost(tNode)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const start = tNode.directiveStart;\n      const end = tNode.directiveEnd;\n      for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n        const def = tView.data[directiveIndex];\n        if (def.contentQueries) {\n          const directiveInstance = lView[directiveIndex];\n          ngDevMode && assertDefined(directiveIndex, 'Incorrect reference to a directive defining a content query');\n          def.contentQueries(1 /* RenderFlags.Create */, directiveInstance, directiveIndex);\n        }\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link /api/core/Component Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nvar ViewEncapsulation = /*#__PURE__*/function (ViewEncapsulation) {\n  // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n  // https://github.com/angular/angular/issues/44119 for additional information.\n  /**\n   * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n   * component's host element and applying the same attribute to all the CSS selectors provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n   *\n   * This is the default option.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  /**\n   * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n   * to any HTML element of the application regardless of their host Component.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  /**\n   * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n   * a ShadowRoot for the component's host element which is then used to encapsulate\n   * all the Component's styling.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n  return ViewEncapsulation;\n}(ViewEncapsulation || {});\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy$1;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy$1() {\n  if (policy$1 === undefined) {\n    policy$1 = null;\n    if (_global.trustedTypes) {\n      try {\n        policy$1 = _global.trustedTypes.createPolicy('angular', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy$1;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n  return getPolicy$1()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nfunction trustedScriptURLFromString(url) {\n  return getPolicy$1()?.createScriptURL(url) || url;\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\n * lazily constructs the Trusted Types policy, providing helper utilities for\n * promoting strings to Trusted Types. When Trusted Types are not available,\n * strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n    if (_global.trustedTypes) {\n      try {\n        policy = _global.trustedTypes.createPolicy('angular#unsafe-bypass', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedHTMLFromStringBypass(html) {\n  return getPolicy()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptFromStringBypass(script) {\n  return getPolicy()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptURLFromStringBypass(url) {\n  return getPolicy()?.createScriptURL(url) || url;\n}\nclass SafeValueImpl {\n  changingThisBreaksApplicationSecurity;\n  constructor(changingThisBreaksApplicationSecurity) {\n    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n  }\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` + ` (see ${XSS_SECURITY_URL})`;\n  }\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"HTML\" /* BypassType.Html */;\n  }\n}\nclass SafeStyleImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Style\" /* BypassType.Style */;\n  }\n}\nclass SafeScriptImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Script\" /* BypassType.Script */;\n  }\n}\nclass SafeUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"URL\" /* BypassType.Url */;\n  }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"ResourceURL\" /* BypassType.ResourceUrl */;\n  }\n}\nfunction unwrapSafeValue(value) {\n  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;\n}\nfunction allowSanitizationBypassAndThrow(value, type) {\n  const actualType = getSanitizationBypassType(value);\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === \"ResourceURL\" /* BypassType.ResourceUrl */ && type === \"URL\" /* BypassType.Url */) return true;\n    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\n  }\n  return actualType === type;\n}\nfunction getSanitizationBypassType(value) {\n  return value instanceof SafeValueImpl && value.getTypeName() || null;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nfunction getInertBodyHelper(defaultDoc) {\n  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper {\n  inertDocumentHelper;\n  constructor(inertDocumentHelper) {\n    this.inertDocumentHelper = inertDocumentHelper;\n  }\n  getInertBodyElement(html) {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n    // in `html` from consuming the otherwise explicit `</body>` tag.\n    html = '<body><remove></remove>' + html;\n    try {\n      const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;\n      if (body === null) {\n        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n        // becomes available in the following tick of the JS engine. In that case we fall back to\n        // the `inertDocumentHelper` instead.\n        return this.inertDocumentHelper.getInertBodyElement(html);\n      }\n      body.firstChild?.remove();\n      return body;\n    } catch {\n      return null;\n    }\n  }\n}\n/**\n * Use an HTML5 `template` element to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper {\n  defaultDoc;\n  inertDocument;\n  constructor(defaultDoc) {\n    this.defaultDoc = defaultDoc;\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n  }\n  getInertBodyElement(html) {\n    const templateEl = this.inertDocument.createElement('template');\n    templateEl.innerHTML = trustedHTMLFromString(html);\n    return templateEl;\n  }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n  try {\n    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');\n  } catch {\n    return false;\n  }\n}\n\n/**\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n * contexts.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if:\n * (1) Either a protocol that is not javascript:, and that has valid characters\n *     (alphanumeric or [+-.]).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\\/?#]*(?:[\\/?#]|$))/i;\nfunction _sanitizeUrl(url) {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN)) return url;\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);\n  }\n  return 'unsafe:' + url;\n}\nfunction tagSet(tags) {\n  const res = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\nfunction merge(...sets) {\n  const res = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = /*#__PURE__*/tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = /*#__PURE__*/tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = /*#__PURE__*/tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS = /*#__PURE__*/merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = /*#__PURE__*/merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, /*#__PURE__*/tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = /*#__PURE__*/merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, /*#__PURE__*/tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nconst VALID_ELEMENTS = /*#__PURE__*/merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nconst URI_ATTRS = /*#__PURE__*/tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\nconst HTML_ATTRS = /*#__PURE__*/tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = /*#__PURE__*/tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nconst VALID_ATTRS = /*#__PURE__*/merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = /*#__PURE__*/tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n  // because characters were re-encoded.\n  sanitizedSomething = false;\n  buf = [];\n  sanitizeChildren(el) {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current = el.firstChild;\n    let traverseContent = true;\n    let parentNodes = [];\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement(current);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (traverseContent && current.firstChild) {\n        // Push current node to the parent stack before entering its content.\n        parentNodes.push(current);\n        current = getFirstChild(current);\n        continue;\n      }\n      while (current) {\n        // Leaving the element.\n        // Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current);\n        }\n        let next = getNextSibling(current);\n        if (next) {\n          current = next;\n          break;\n        }\n        // There was no next sibling, walk up to the parent node (extract it from the stack).\n        current = parentNodes.pop();\n      }\n    }\n    return this.buf.join('');\n  }\n  /**\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n   * be traversed. Element content must always be traversed (even if the element itself is not\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n   *\n   * @param element The element to sanitize.\n   * @return True if the element's contents should be traversed.\n   */\n  startElement(element) {\n    const tagName = getNodeName(element).toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n  endElement(current) {\n    const tagName = getNodeName(current).toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n  chars(chars) {\n    this.buf.push(encodeEntities(chars));\n  }\n}\n/**\n * Verifies whether a given child node is a descendant of a given parent node.\n * It may not be the case when properties like `.firstChild` are clobbered and\n * accessing `.firstChild` results in an unexpected node returned.\n */\nfunction isClobberedElement(parentNode, childNode) {\n  return (parentNode.compareDocumentPosition(childNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) !== Node.DOCUMENT_POSITION_CONTAINED_BY;\n}\n/**\n * Retrieves next sibling node and makes sure that there is no\n * clobbering of the `nextSibling` property happening.\n */\nfunction getNextSibling(node) {\n  const nextSibling = node.nextSibling;\n  // Make sure there is no `nextSibling` clobbering: navigating to\n  // the next sibling and going back to the previous one should result\n  // in the original node.\n  if (nextSibling && node !== nextSibling.previousSibling) {\n    throw clobberedElementError(nextSibling);\n  }\n  return nextSibling;\n}\n/**\n * Retrieves first child node and makes sure that there is no\n * clobbering of the `firstChild` property happening.\n */\nfunction getFirstChild(node) {\n  const firstChild = node.firstChild;\n  if (firstChild && isClobberedElement(node, firstChild)) {\n    throw clobberedElementError(firstChild);\n  }\n  return firstChild;\n}\n/** Gets a reasonable nodeName, even for clobbered nodes. */\nfunction getNodeName(node) {\n  const nodeName = node.nodeName;\n  // If the property is clobbered, assume it is an `HTMLFormElement`.\n  return typeof nodeName === 'string' ? nodeName : 'FORM';\n}\nfunction clobberedElementError(node) {\n  return new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);\n}\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value) {\n  return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {\n    const hi = match.charCodeAt(0);\n    const low = match.charCodeAt(1);\n    return '&#' + ((hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000) + ';';\n  }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n    return '&#' + match.charCodeAt(0) + ';';\n  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n  let inertBodyElement = null;\n  try {\n    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);\n    }\n    return trustedHTMLFromString(safeHtml);\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.firstChild.remove();\n      }\n    }\n  }\n}\nfunction getTemplateContent(el) {\n  return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ? el.content : null;\n}\nfunction isTemplateElement(el) {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nvar SecurityContext = /*#__PURE__*/function (SecurityContext) {\n  SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n  SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n  SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n  SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n  SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n  return SecurityContext;\n}(SecurityContext || {});\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeHtml(unsafeHtml) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\" /* BypassType.Html */)) {\n    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n  }\n  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeStyle(unsafeStyle) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\" /* BypassType.Style */)) {\n    return unwrapSafeValue(unsafeStyle);\n  }\n  return renderStringify(unsafeStyle);\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrl(unsafeUrl) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\" /* BypassType.Url */)) {\n    return unwrapSafeValue(unsafeUrl);\n  }\n  return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n  }\n  throw new RuntimeError(904 /* RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL */, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeScript(unsafeScript) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\" /* BypassType.Script */)) {\n    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n  }\n  throw new RuntimeError(905 /* RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT */, ngDevMode && 'unsafe value used in a script context');\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantHtml(html) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n  // is an array with a `raw` property that is also an array. The associated\n  // template literal has no interpolation if and only if the length of the\n  // TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n  }\n  return trustedHTMLFromString(html[0]);\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantResourceUrl(url) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n  // TemplateStringsArray is an array with a `raw` property that is also an\n  // array. The associated template literal has no interpolation if and only if\n  // the length of the TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n  }\n  return trustedScriptURLFromString(url[0]);\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nfunction getUrlSanitizer(tag, prop) {\n  if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {\n    return ɵɵsanitizeResourceUrl;\n  }\n  return ɵɵsanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n  return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\nfunction validateAgainstEventProperties(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...` + `\\nIf '${name}' is a directive input, make sure the directive is imported by the` + ` current module.`;\n    throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n  }\n}\nfunction validateAgainstEventAttributes(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...`;\n    throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n  }\n}\nfunction getSanitizer() {\n  const lView = getLView();\n  return lView && lView[ENVIRONMENT].sanitizer;\n}\n\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\nconst COMMENT_DELIMITER = /(<|>)/g;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```ts\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\nfunction escapeCommentText(value) {\n  return value.replace(COMMENT_DISALLOWED, text => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n\n/** Defines the default value of the `NG_REFLECT_ATTRS_FLAG` flag. */\nconst NG_REFLECT_ATTRS_FLAG_DEFAULT = false;\n/**\n * Defines an internal flag that indicates whether the runtime code should be\n * producing `ng-reflect-*` attributes.\n */\nconst NG_REFLECT_ATTRS_FLAG = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'NG_REFLECT_FLAG' : '', {\n  providedIn: 'root',\n  factory: () => NG_REFLECT_ATTRS_FLAG_DEFAULT\n});\n/**\n * Enables the logic to produce `ng-reflect-*` attributes on elements with bindings.\n *\n * Note: this is a dev-mode only setting and it will have no effect in production mode.\n * In production mode, the `ng-reflect-*` attributes are *never* produced by Angular.\n *\n * Important: using and relying on the `ng-reflect-*` attributes is not recommended,\n * they are deprecated and only present for backwards compatibility. Angular will stop\n * producing them in one of the future versions.\n *\n * @publicApi\n */\nfunction provideNgReflectAttributes() {\n  const providers = typeof ngDevMode === 'undefined' || ngDevMode ? [{\n    provide: NG_REFLECT_ATTRS_FLAG,\n    useValue: true\n  }] : [];\n  return makeEnvironmentProviders(providers);\n}\nfunction normalizeDebugBindingName(name) {\n  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n  return `ng-reflect-${name}`;\n}\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n  return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\nfunction normalizeDebugBindingValue(value) {\n  try {\n    // Limit the size of the value as otherwise the DOM just gets polluted.\n    return value != null ? value.toString().slice(0, 30) : value;\n  } catch (e) {\n    return '[ERROR] Exception while trying to serialize the value';\n  }\n}\n\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n  name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\n * template. The usage of this schema is generally discouraged because it prevents useful validation\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\n *\n * @publicApi\n */\nconst NO_ERRORS_SCHEMA = {\n  name: 'no-errors-schema'\n};\nlet shouldThrowErrorOnUnknownElement = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownElementStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownElementStrictMode() {\n  return shouldThrowErrorOnUnknownElement;\n}\nlet shouldThrowErrorOnUnknownProperty = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownPropertyStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownPropertyStrictMode() {\n  return shouldThrowErrorOnUnknownProperty;\n}\n/**\n * Validates that the element is known at runtime and produces\n * an error if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The element is considered known if either:\n * - it's a known HTML element\n * - it's a known custom element\n * - the element matches any directive\n * - the element is allowed by one of the schemas\n *\n * @param lView An `LView` associated with a template is being rendered\n * @param tNode TNode representing an element to be validated\n */\nfunction validateElementIsKnown(lView, tNode) {\n  const tView = lView[TVIEW];\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (tView.schemas === null) return;\n  const tagName = tNode.value;\n  // If the element matches any directive, it's considered as valid.\n  if (!isDirectiveHost(tNode) && tagName !== null) {\n    // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n    // as a custom element. Note that unknown elements with a dash in their name won't be instances\n    // of HTMLUnknownElement in browsers that support web components.\n    const isUnknown =\n    // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because\n    // Domino doesn't expose HTMLUnknownElement globally.\n    typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && getNativeByTNode(tNode, lView) instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);\n    if (isUnknown && !matchingSchemas(tView.schemas, tagName)) {\n      const isHostStandalone = isHostComponentStandalone(lView);\n      const templateLocation = getTemplateLocationDetails(lView);\n      const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n      let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n      message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? \"included in the '@Component.imports' of this component\" : 'a part of an @NgModule where this component is declared'}.\\n`;\n      if (tagName && tagName.indexOf('-') > -1) {\n        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\n      } else {\n        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n      }\n      if (shouldThrowErrorOnUnknownElement) {\n        throw new RuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message);\n      } else {\n        console.error(formatRuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message));\n      }\n    }\n  }\n}\n/**\n * Validates that the property of the element is known at runtime and returns\n * false if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The property is considered known if either:\n * - it's a known property of the element\n * - the element is allowed by one of the schemas\n * - the property is used for animations\n *\n * @param element Element to validate\n * @param propName Name of the property to check\n * @param tagName Name of the tag hosting the property\n * @param schemas Array of schemas\n */\nfunction isPropertyValid(element, propName, tagName, schemas) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return true;\n  // The property is considered valid if the element matches the schema, it exists on the element,\n  // or it is synthetic.\n  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n    return true;\n  }\n  // Note: `typeof Node` returns 'function' in most browsers, but is undefined with domino.\n  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n/**\n * Logs or throws an error that a property is not supported on an element.\n *\n * @param propName Name of the invalid property\n * @param tagName Name of the tag hosting the property\n * @param nodeType Type of the node hosting the property\n * @param lView An `LView` that represents a current component\n */\nfunction handleUnknownPropertyError(propName, tagName, nodeType, lView) {\n  // Special-case a situation when a structural directive is applied to\n  // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n  // In this case the compiler generates the `ɵɵtemplate` instruction with\n  // the `null` as the tagName. The directive matching logic at runtime relies\n  // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n  // a default value of the `tNode.value` is not feasible at this moment.\n  if (!tagName && nodeType === 4 /* TNodeType.Container */) {\n    tagName = 'ng-template';\n  }\n  const isHostStandalone = isHostComponentStandalone(lView);\n  const templateLocation = getTemplateLocationDetails(lView);\n  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\n  const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n  const importLocation = isHostStandalone ? \"included in the '@Component.imports' of this component\" : 'a part of an @NgModule where this component is declared';\n  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n    // Most likely this is a control flow directive (such as `*ngIf`) used in\n    // a template, but the directive or the `CommonModule` is not imported.\n    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n    message += `\\nIf the '${propName}' is an Angular control flow directive, ` + `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n  } else {\n    // May be an Angular component, which is not imported/declared?\n    message += `\\n1. If '${tagName}' is an Angular component and it has the ` + `'${propName}' input, then verify that it is ${importLocation}.`;\n    // May be a Web Component?\n    if (tagName && tagName.indexOf('-') > -1) {\n      message += `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` + `to the ${schemas} of this component to suppress this message.`;\n      message += `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    } else {\n      // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n      message += `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    }\n  }\n  reportUnknownPropertyError(message);\n}\nfunction reportUnknownPropertyError(message) {\n  if (shouldThrowErrorOnUnknownProperty) {\n    throw new RuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message);\n  } else {\n    console.error(formatRuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message));\n  }\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode and also it relies on the constructor function being available.\n *\n * Gets a reference to the host component def (where a current component is declared).\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getDeclarationComponentDef(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  // Unable to obtain a context.\n  if (!context) return null;\n  return context.constructor ? getComponentDef(context.constructor) : null;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Checks if the current component is declared inside of a standalone component template.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction isHostComponentStandalone(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const componentDef = getDeclarationComponentDef(lView);\n  // Treat host component as non-standalone if we can't obtain the def.\n  return !!componentDef?.standalone;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Constructs a string describing the location of the host component template. The function is used\n * in dev mode to produce error messages.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getTemplateLocationDetails(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef?.type?.name;\n  return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n/**\n * The set of known control flow directives and their corresponding imports.\n * We use this set to produce a more precises error message with a note\n * that the `CommonModule` should also be included.\n */\nconst KNOWN_CONTROL_FLOW_DIRECTIVES = /*#__PURE__*/new Map([['ngIf', 'NgIf'], ['ngFor', 'NgFor'], ['ngSwitchCase', 'NgSwitchCase'], ['ngSwitchDefault', 'NgSwitchDefault']]);\n/**\n * Returns true if the tag name is allowed by specified schemas.\n * @param schemas Array of schemas\n * @param tagName Name of the tag\n */\nfunction matchingSchemas(schemas, tagName) {\n  if (schemas !== null) {\n    for (let i = 0; i < schemas.length; i++) {\n      const schema = schemas[i];\n      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveWindow(element) {\n  return element.ownerDocument.defaultView;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveDocument(element) {\n  return element.ownerDocument;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveBody(element) {\n  return element.ownerDocument.body;\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nconst INTERPOLATION_DELIMITER = `�`;\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nfunction maybeUnwrapFn(value) {\n  if (value instanceof Function) {\n    return value();\n  } else {\n    return value;\n  }\n}\n\n/**\n * The max length of the string representation of a value in an error message\n */\nconst VALUE_STRING_LENGTH_LIMIT = 200;\n/** Verifies that a given type is a Standalone Component. */\nfunction assertStandaloneComponentType(type) {\n  assertComponentDef(type);\n  const componentDef = getComponentDef(type);\n  if (!componentDef.standalone) {\n    throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(type)} component is not marked as standalone, ` + `but Angular expects to have a standalone component here. ` + `Please make sure the ${stringifyForError(type)} component has ` + `the \\`standalone: true\\` flag in the decorator.`);\n  }\n}\n/** Verifies whether a given type is a component */\nfunction assertComponentDef(type) {\n  if (!getComponentDef(type)) {\n    throw new RuntimeError(906 /* RuntimeErrorCode.MISSING_GENERATED_DEF */, `The ${stringifyForError(type)} is not an Angular component, ` + `make sure it has the \\`@Component\\` decorator.`);\n  }\n}\n/** Called when there are multiple component selectors that match a given node */\nfunction throwMultipleComponentError(tNode, first, second) {\n  throw new RuntimeError(-300 /* RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH */, `Multiple components match node with tagname ${tNode.value}: ` + `${stringifyForError(first)} and ` + `${stringifyForError(second)}`);\n}\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName, lView) {\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef?.type?.name;\n  const field = propName ? ` for '${propName}'` : '';\n  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(oldValue)}'. Current value: '${formatValue(currValue)}'.${componentClassName ? ` Expression location: ${componentClassName} component` : ''}`;\n  if (creationMode) {\n    msg += ` It seems like the view has been created after its parent and its children have been dirty checked.` + ` Has it been created in a change detection hook?`;\n  }\n  throw new RuntimeError(-100 /* RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED */, msg);\n}\nfunction formatValue(value) {\n  let strValue = String(value);\n  // JSON.stringify will throw on circular references\n  try {\n    if (Array.isArray(value) || strValue === '[object Object]') {\n      strValue = JSON.stringify(value);\n    }\n  } catch (error) {}\n  return strValue.length > VALUE_STRING_LENGTH_LIMIT ? strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + '…' : strValue;\n}\nfunction constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\n  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n  let oldValue = prefix,\n    newValue = prefix;\n  for (let i = 0; i < chunks.length; i++) {\n    const slotIdx = rootIndex + i;\n    oldValue += `${lView[slotIdx]}${chunks[i]}`;\n    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n  }\n  return {\n    propName,\n    oldValue,\n    newValue\n  };\n}\n/**\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n * - property name (for property bindings or interpolations)\n * - old and new values, enriched using information from metadata\n *\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n * function description.\n */\nfunction getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\n  const tData = lView[TVIEW].data;\n  const metadata = tData[bindingIndex];\n  if (typeof metadata === 'string') {\n    // metadata for property interpolation\n    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\n    }\n    // metadata for property binding\n    return {\n      propName: metadata,\n      oldValue,\n      newValue\n    };\n  }\n  // metadata is not available for this expression, check if this expression is a part of the\n  // property interpolation by going from the current binding index left and look for a string that\n  // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n  // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n  if (metadata === null) {\n    let idx = bindingIndex - 1;\n    while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n      idx--;\n    }\n    const meta = tData[idx];\n    if (typeof meta === 'string') {\n      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n      // first interpolation delimiter separates property name from interpolation parts (in case of\n      // property interpolations), so we subtract one from total number of found delimiters\n      if (matches && matches.length - 1 > bindingIndex - idx) {\n        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n      }\n    }\n  }\n  return {\n    propName: undefined,\n    oldValue,\n    newValue\n  };\n}\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nfunction classIndexOf(className, classToSearch, startingIndex) {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* CharCode.SPACE */) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32 /* CharCode.SPACE */) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    }\n    // False positive, keep searching from where we left off.\n    startingIndex = foundIndex + 1;\n  }\n}\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param tNode static data of the node to match\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(tNode, attrs, cssClassToMatch, isProjectionMode) {\n  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n  let i = 0;\n  if (isProjectionMode) {\n    for (; i < attrs.length && typeof attrs[i] === 'string'; i += 2) {\n      // Search for an implicit `class` attribute and check if its value matches `cssClassToMatch`.\n      if (attrs[i] === 'class' && classIndexOf(attrs[i + 1].toLowerCase(), cssClassToMatch, 0) !== -1) {\n        return true;\n      }\n    }\n  } else if (isInlineTemplate(tNode)) {\n    // Matching directives (i.e. when not matching for projection mode) should not consider the\n    // class bindings that are present on inline templates, as those class bindings only target\n    // the root node of the template, not the template itself.\n    return false;\n  }\n  // Resume the search for classes after the `Classes` marker.\n  i = attrs.indexOf(1 /* AttributeMarker.Classes */, i);\n  if (i > -1) {\n    // We found the classes section. Start searching for the class.\n    let item;\n    while (++i < attrs.length && typeof (item = attrs[i]) === 'string') {\n      if (item.toLowerCase() === cssClassToMatch) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nfunction isInlineTemplate(tNode) {\n  return tNode.type === 4 /* TNodeType.Container */ && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n  const tagNameToCompare = tNode.type === 4 /* TNodeType.Container */ && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n  return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param tNode static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  let mode = 4 /* SelectorFlags.ELEMENT */;\n  const nodeAttrs = tNode.attrs;\n  // Find the index of first attribute that has no value, only a name.\n  const nameOnlyMarkerIdx = nodeAttrs !== null ? getNameOnlyMarkerIndex(nodeAttrs) : 0;\n  // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n  let skipToNextSelector = false;\n  for (let i = 0; i < selector.length; i++) {\n    const current = selector[i];\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n        return false;\n      }\n      // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = current | mode & 1 /* SelectorFlags.NOT */;\n      continue;\n    }\n    if (skipToNextSelector) continue;\n    if (mode & 4 /* SelectorFlags.ELEMENT */) {\n      mode = 2 /* SelectorFlags.ATTRIBUTE */ | mode & 1 /* SelectorFlags.NOT */;\n      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else if (mode & 8 /* SelectorFlags.CLASS */) {\n      if (nodeAttrs === null || !isCssClassMatching(tNode, nodeAttrs, current, isProjectionMode)) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      const selectorAttrValue = selector[++i];\n      const attrIndexInNode = findAttrIndexInNode(current, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n      if (selectorAttrValue !== '') {\n        let nodeAttrValue;\n        if (attrIndexInNode > nameOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* AttributeMarker.NamespaceURI */, 'We do not match directives on namespaced attributes');\n          // we lowercase the attribute value to be able to match\n          // selectors without case-sensitivity\n          // (selectors are already in lowercase when generated)\n          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\n        }\n        if (mode & 2 /* SelectorFlags.ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n  return isPositive(mode) || skipToNextSelector;\n}\nfunction isPositive(mode) {\n  return (mode & 1 /* SelectorFlags.NOT */) === 0;\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n  if (attrs === null) return -1;\n  let i = 0;\n  if (isProjectionMode || !isInlineTemplate) {\n    let bindingsMode = false;\n    while (i < attrs.length) {\n      const maybeAttrName = attrs[i];\n      if (maybeAttrName === name) {\n        return i;\n      } else if (maybeAttrName === 3 /* AttributeMarker.Bindings */ || maybeAttrName === 6 /* AttributeMarker.I18n */) {\n        bindingsMode = true;\n      } else if (maybeAttrName === 1 /* AttributeMarker.Classes */ || maybeAttrName === 2 /* AttributeMarker.Styles */) {\n        let value = attrs[++i];\n        // We should skip classes here because we have a separate mechanism for\n        // matching classes in projection mode.\n        while (typeof value === 'string') {\n          value = attrs[++i];\n        }\n        continue;\n      } else if (maybeAttrName === 4 /* AttributeMarker.Template */) {\n        // We do not care about Template attributes in this scenario.\n        break;\n      } else if (maybeAttrName === 0 /* AttributeMarker.NamespaceURI */) {\n        // Skip the whole namespaced attribute and value. This is by design.\n        i += 4;\n        continue;\n      }\n      // In binding mode there are only names, rather than name-value pairs.\n      i += bindingsMode ? 1 : 2;\n    }\n    // We did not match the attribute\n    return -1;\n  } else {\n    return matchTemplateAttribute(attrs, name);\n  }\n}\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction getProjectAsAttrValue(tNode) {\n  const nodeAttrs = tNode.attrs;\n  if (nodeAttrs != null) {\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* AttributeMarker.ProjectAs */);\n    // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return nodeAttrs[ngProjectAsAttrIdx + 1];\n    }\n  }\n  return null;\n}\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n  for (let i = 0; i < nodeAttrs.length; i++) {\n    const nodeAttr = nodeAttrs[i];\n    if (isNameOnlyAttributeMarker(nodeAttr)) {\n      return i;\n    }\n  }\n  return nodeAttrs.length;\n}\nfunction matchTemplateAttribute(attrs, name) {\n  let i = attrs.indexOf(4 /* AttributeMarker.Template */);\n  if (i > -1) {\n    i++;\n    while (i < attrs.length) {\n      const attr = attrs[i];\n      // Return in case we checked all template attrs and are switching to the next section in the\n      // attrs array (that starts with a number that represents an attribute marker).\n      if (typeof attr === 'number') return -1;\n      if (attr === name) return i;\n      i++;\n    }\n  }\n  return -1;\n}\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nfunction isSelectorInSelectorList(selector, list) {\n  selectorListLoop: for (let i = 0; i < list.length; i++) {\n    const currentSelectorInList = list[i];\n    if (selector.length !== currentSelectorInList.length) {\n      continue;\n    }\n    for (let j = 0; j < selector.length; j++) {\n      if (selector[j] !== currentSelectorInList[j]) {\n        continue selectorListLoop;\n      }\n    }\n    return true;\n  }\n  return false;\n}\nfunction maybeWrapInNotSelector(isNegativeMode, chunk) {\n  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\nfunction stringifyCSSSelector(selector) {\n  let result = selector[0];\n  let i = 1;\n  let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n  let currentChunk = '';\n  let isNegativeMode = false;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode & 2 /* SelectorFlags.ATTRIBUTE */) {\n        const attrValue = selector[++i];\n        currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n      } else if (mode & 8 /* SelectorFlags.CLASS */) {\n        currentChunk += '.' + valueOrMarker;\n      } else if (mode & 4 /* SelectorFlags.ELEMENT */) {\n        currentChunk += ' ' + valueOrMarker;\n      }\n    } else {\n      //\n      // Append current chunk to the final result in case we come across SelectorFlag, which\n      // indicates that the previous section of a selector is over. We need to accumulate content\n      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n      // ```\n      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n      // ```\n      // should be transformed to `.classA :not(.classB .classC)`.\n      //\n      // Note: for negative selector part, we accumulate content between flags until we find the\n      // next negative flag. This is needed to support a case where `:not()` rule contains more than\n      // one chunk, e.g. the following selector:\n      // ```\n      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n      // ```\n      // should be stringified to `:not(p.foo) :not(.bar)`\n      //\n      if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        currentChunk = '';\n      }\n      mode = valueOrMarker;\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector.\n      isNegativeMode = isNegativeMode || !isPositive(mode);\n    }\n    i++;\n  }\n  if (currentChunk !== '') {\n    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n  }\n  return result;\n}\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nfunction stringifyCSSSelectorList(selectorList) {\n  return selectorList.map(stringifyCSSSelector).join(',');\n}\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nfunction extractAttrsAndClassesFromSelector(selector) {\n  const attrs = [];\n  const classes = [];\n  let i = 1;\n  let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode === 2 /* SelectorFlags.ATTRIBUTE */) {\n        if (valueOrMarker !== '') {\n          attrs.push(valueOrMarker, selector[++i]);\n        }\n      } else if (mode === 8 /* SelectorFlags.CLASS */) {\n        classes.push(valueOrMarker);\n      }\n    } else {\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n      // extracted only for \"positive\" part of the selector, we can stop here.\n      if (!isPositive(mode)) break;\n      mode = valueOrMarker;\n    }\n    i++;\n  }\n  if (classes.length) {\n    attrs.push(1 /* AttributeMarker.Classes */, ...classes);\n  }\n  return attrs;\n}\n\n/** A special value which designates that a value has not changed. */\nconst NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {\n  __brand__: 'NO_CHANGE'\n} : {};\nfunction createTextNode(renderer, value) {\n  return renderer.createText(value);\n}\nfunction updateTextNode(renderer, rNode, value) {\n  renderer.setValue(rNode, value);\n}\nfunction createCommentNode(renderer, value) {\n  return renderer.createComment(escapeCommentText(value));\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nfunction createElementNode(renderer, name, namespace) {\n  return renderer.createElement(name, namespace);\n}\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  renderer.insertBefore(parent, child, beforeNode, isMove);\n}\nfunction nativeAppendChild(renderer, parent, child) {\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  renderer.appendChild(parent, child);\n}\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n  renderer.removeChild(null, rNode, isHostElement);\n}\n/**\n * Clears the contents of a given RElement.\n *\n * @param rElement the native RElement to be cleared\n */\nfunction clearElementContents(rElement) {\n  rElement.textContent = '';\n}\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectStyle(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, \"'newValue' should be a string\");\n  renderer.setAttribute(element, 'style', newValue);\n}\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectClass(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, \"'newValue' should be a string\");\n  if (newValue === '') {\n    // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n    renderer.removeAttribute(element, 'class');\n  } else {\n    renderer.setAttribute(element, 'class', newValue);\n  }\n}\n/** Sets up the static DOM attributes on an `RNode`. */\nfunction setupStaticAttributes(renderer, element, tNode) {\n  const {\n    mergedAttrs,\n    classes,\n    styles\n  } = tNode;\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, element, mergedAttrs);\n  }\n  if (classes !== null) {\n    writeDirectClass(renderer, element, classes);\n  }\n  if (styles !== null) {\n    writeDirectStyle(renderer, element, styles);\n  }\n}\n\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nfunction createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory, ssrId) {\n  const bindingStartIndex = HEADER_OFFSET + decls;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = blueprint[TVIEW] = {\n    type: type,\n    blueprint: blueprint,\n    template: templateFn,\n    queries: null,\n    viewQuery: viewQuery,\n    declTNode: declTNode,\n    data: blueprint.slice().fill(null, bindingStartIndex),\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    hostBindingOpCodes: null,\n    firstCreatePass: true,\n    firstUpdatePass: true,\n    staticViewQueries: false,\n    staticContentQueries: false,\n    preOrderHooks: null,\n    preOrderCheckHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null,\n    schemas: schemas,\n    consts: consts,\n    incompleteFirstPass: false,\n    ssrId\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n  return tView;\n}\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n  const blueprint = [];\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n  return blueprint;\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nfunction getOrCreateComponentTView(def) {\n  const tView = def.tView;\n  // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return def.tView = createTView(1 /* TViewType.Component */, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts, def.id);\n  }\n  return tView;\n}\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, environment, renderer, injector, embeddedViewInjector, hydrationInfo) {\n  const lView = tView.blueprint.slice();\n  lView[HOST] = host;\n  lView[FLAGS] = flags | 4 /* LViewFlags.CreationMode */ | 128 /* LViewFlags.Attached */ | 8 /* LViewFlags.FirstLViewPass */ | 64 /* LViewFlags.Dirty */ | 1024 /* LViewFlags.RefreshView */;\n  if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 2048 /* LViewFlags.HasEmbeddedViewInjector */) {\n    lView[FLAGS] |= 2048 /* LViewFlags.HasEmbeddedViewInjector */;\n  }\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[ENVIRONMENT] = environment || parentLView && parentLView[ENVIRONMENT];\n  ngDevMode && assertDefined(lView[ENVIRONMENT], 'LViewEnvironment is required');\n  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;\n  lView[T_HOST] = tHostNode;\n  lView[ID] = getUniqueLViewId();\n  lView[HYDRATION] = hydrationInfo;\n  lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;\n  ngDevMode && assertEqual(tView.type == 2 /* TViewType.Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');\n  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2 /* TViewType.Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\n  return lView;\n}\nfunction createComponentLView(lView, hostTNode, def) {\n  const native = getNativeByTNode(hostTNode, lView);\n  const tView = getOrCreateComponentTView(def);\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[ENVIRONMENT].rendererFactory;\n  const componentView = addToEndOfViewTree(lView, createLView(lView, tView, null, getInitialLViewFlagsFromDef(def), native, hostTNode, null, rendererFactory.createRenderer(native, def), null, null, null));\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  return lView[hostTNode.index] = componentView;\n}\n/**\n * Gets the initial set of LView flags based on the component definition that the LView represents.\n * @param def Component definition from which to determine the flags.\n */\nfunction getInitialLViewFlagsFromDef(def) {\n  let flags = 16 /* LViewFlags.CheckAlways */;\n  if (def.signals) {\n    flags = 4096 /* LViewFlags.SignalView */;\n  } else if (def.onPush) {\n    flags = 64 /* LViewFlags.Dirty */;\n  }\n  return flags;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nfunction allocExpando(tView, lView, numSlotsToAlloc, initialValue) {\n  if (numSlotsToAlloc === 0) return -1;\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n    assertFirstUpdatePass(tView);\n  }\n  const allocIdx = lView.length;\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n  return allocIdx;\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nfunction addToEndOfViewTree(lView, lViewOrLContainer) {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n}\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nfunction ɵɵadvance(delta = 1) {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\n}\nfunction selectIndexInternal(tView, lView, index, checkNoChangesMode) {\n  ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);\n  // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, index);\n      }\n    }\n  }\n  // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n  setSelectedIndex(index);\n}\n\n/** Flags describing an input for a directive. */\nvar InputFlags = /*#__PURE__*/function (InputFlags) {\n  InputFlags[InputFlags[\"None\"] = 0] = \"None\";\n  InputFlags[InputFlags[\"SignalBased\"] = 1] = \"SignalBased\";\n  InputFlags[InputFlags[\"HasDecoratorInputTransform\"] = 2] = \"HasDecoratorInputTransform\";\n  return InputFlags;\n}(InputFlags || {});\nfunction writeToDirectiveInput(def, instance, publicName, value) {\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    if (ngDevMode) {\n      if (!def.inputs.hasOwnProperty(publicName)) {\n        throw new Error(`ASSERTION ERROR: Directive ${def.type.name} does not have an input with a public name of \"${publicName}\"`);\n      }\n      // Usually we resolve the directive instance using `LView[someIndex]` before writing to an\n      // input, however if the read happens to early, the `LView[someIndex]` might actually be a\n      // `NodeInjectorFactory`. Check for this specific case here since it can break in subtle ways.\n      if (instance instanceof NodeInjectorFactory) {\n        throw new Error(`ASSERTION ERROR: Cannot write input to factory for type ${def.type.name}. Directive has not been created yet.`);\n      }\n    }\n    const [privateName, flags, transform] = def.inputs[publicName];\n    // If we know we are dealing with a signal input, we cache its reference\n    // in a tree-shakable way. The input signal node can then be used for\n    // value transform execution or actual value updates without introducing\n    // additional megamorphic accesses for accessing the instance field.\n    let inputSignalNode = null;\n    if ((flags & InputFlags.SignalBased) !== 0) {\n      const field = instance[privateName];\n      inputSignalNode = field[SIGNAL];\n    }\n    // If there is a signal node and a transform, run it before potentially\n    // delegating to features like `NgOnChanges`.\n    if (inputSignalNode !== null && inputSignalNode.transformFn !== undefined) {\n      value = inputSignalNode.transformFn(value);\n    } else if (transform !== null) {\n      // If there is a decorator input transform, run it.\n      value = transform.call(instance, value);\n    }\n    if (def.setInput !== null) {\n      def.setInput(instance, inputSignalNode, value, publicName, privateName);\n    } else {\n      applyValueToInputField(instance, inputSignalNode, privateName, value);\n    }\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nvar RendererStyleFlags2 = /*#__PURE__*/function (RendererStyleFlags2) {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n  /**\n   * Marks a style as important.\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n  return RendererStyleFlags2;\n}(RendererStyleFlags2 || {});\nlet _icuContainerIterate;\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nfunction icuContainerIterate(tIcuContainerNode, lView) {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nfunction ensureIcuContainerVisitorLoaded(loader) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n  // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n  // won't be created until i18nApply() in the update block, so this node should be skipped.\n  // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n  // in `i18n_spec.ts`.\n  if (lNodeToHandle != null) {\n    let lContainer;\n    let isComponent = false;\n    // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n    // it has LContainer so that we can process all of those cases appropriately.\n    if (isLContainer(lNodeToHandle)) {\n      lContainer = lNodeToHandle;\n    } else if (isLView(lNodeToHandle)) {\n      isComponent = true;\n      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n      lNodeToHandle = lNodeToHandle[HOST];\n    }\n    const rNode = unwrapRNode(lNodeToHandle);\n    if (action === 0 /* WalkTNodeTreeAction.Create */ && parent !== null) {\n      if (beforeNode == null) {\n        nativeAppendChild(renderer, parent, rNode);\n      } else {\n        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n      }\n    } else if (action === 1 /* WalkTNodeTreeAction.Insert */ && parent !== null) {\n      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n    } else if (action === 2 /* WalkTNodeTreeAction.Detach */) {\n      nativeRemoveNode(renderer, rNode, isComponent);\n    } else if (action === 3 /* WalkTNodeTreeAction.Destroy */) {\n      renderer.destroyNode(rNode);\n    }\n    if (lContainer != null) {\n      applyContainer(renderer, action, lContainer, parent, beforeNode);\n    }\n  }\n}\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nfunction removeViewFromDOM(tView, lView) {\n  detachViewFromDOM(tView, lView);\n  lView[HOST] = null;\n  lView[T_HOST] = null;\n}\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nfunction addViewToDOM(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {\n  lView[HOST] = parentNativeNode;\n  lView[T_HOST] = parentTNode;\n  applyView(tView, lView, renderer, 1 /* WalkTNodeTreeAction.Insert */, parentNativeNode, beforeNode);\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nfunction detachViewFromDOM(tView, lView) {\n  // When we remove a view from the DOM, we need to rerun afterRender hooks\n  // We don't necessarily needs to run change detection. DOM removal only requires\n  // change detection if animations are enabled (this notification is handled by animations).\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(9 /* NotificationSource.ViewDetachedFromDOM */);\n  applyView(tView, lView, lView[RENDERER], 2 /* WalkTNodeTreeAction.Detach */, null, null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nfunction destroyViewTree(rootView) {\n  // If the view has no children, we can clean it up and return early.\n  let lViewOrLContainer = rootView[CHILD_HEAD];\n  if (!lViewOrLContainer) {\n    return cleanUpView(rootView[TVIEW], rootView);\n  }\n  while (lViewOrLContainer) {\n    let next = null;\n    if (isLView(lViewOrLContainer)) {\n      // If LView, traverse down to child.\n      next = lViewOrLContainer[CHILD_HEAD];\n    } else {\n      ngDevMode && assertLContainer(lViewOrLContainer);\n      // If container, traverse down to its first LView.\n      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n      if (firstView) next = firstView;\n    }\n    if (!next) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n        if (isLView(lViewOrLContainer)) {\n          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n        }\n        lViewOrLContainer = lViewOrLContainer[PARENT];\n      }\n      if (lViewOrLContainer === null) lViewOrLContainer = rootView;\n      if (isLView(lViewOrLContainer)) {\n        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n      }\n      next = lViewOrLContainer && lViewOrLContainer[NEXT];\n    }\n    lViewOrLContainer = next;\n  }\n}\nfunction detachMovedView(declarationContainer, lView) {\n  ngDevMode && assertLContainer(declarationContainer);\n  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const declarationViewIndex = movedViews.indexOf(lView);\n  movedViews.splice(declarationViewIndex, 1);\n}\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nfunction destroyLView(tView, lView) {\n  if (isDestroyed(lView)) {\n    return;\n  }\n  const renderer = lView[RENDERER];\n  if (renderer.destroyNode) {\n    applyView(tView, lView, renderer, 3 /* WalkTNodeTreeAction.Destroy */, null, null);\n  }\n  destroyViewTree(lView);\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView, lView) {\n  if (isDestroyed(lView)) {\n    return;\n  }\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    // Usually the Attached flag is removed when the view is detached from its parent, however\n    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n    lView[FLAGS] &= ~128 /* LViewFlags.Attached */;\n    // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n    // really more of an \"afterDestroy\" hook if you think about it.\n    lView[FLAGS] |= 256 /* LViewFlags.Destroyed */;\n    lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);\n    executeOnDestroys(tView, lView);\n    processCleanups(tView, lView);\n    // For component views only, the local renderer is destroyed at clean up time.\n    if (lView[TVIEW].type === 1 /* TViewType.Component */) {\n      lView[RENDERER].destroy();\n    }\n    const declarationContainer = lView[DECLARATION_LCONTAINER];\n    // we are dealing with an embedded view that is still inserted into a container\n    if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n      // and this is a projected view\n      if (declarationContainer !== lView[PARENT]) {\n        detachMovedView(declarationContainer, lView);\n      }\n      // For embedded views still attached to a container: remove query result from this view.\n      const lQueries = lView[QUERIES];\n      if (lQueries !== null) {\n        lQueries.detachView(tView);\n      }\n    }\n    // Unregister the view once everything else has been cleaned up.\n    unregisterLView(lView);\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView, lView) {\n  ngDevMode && assertNotReactive(processCleanups.name);\n  const tCleanup = tView.cleanup;\n  const lCleanup = lView[CLEANUP];\n  if (tCleanup !== null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a native DOM listener. It will occupy 4 entries in the TCleanup array (hence i +=\n        // 2 at the end of this block).\n        const targetIdx = tCleanup[i + 3];\n        ngDevMode && assertNumber(targetIdx, 'cleanup target must be a number');\n        if (targetIdx >= 0) {\n          // Destroy anything whose teardown is a function call (e.g. QueryList, ModelSignal).\n          lCleanup[targetIdx]();\n        } else {\n          // Subscription\n          lCleanup[-targetIdx].unsubscribe();\n        }\n        i += 2;\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n  }\n  if (lCleanup !== null) {\n    lView[CLEANUP] = null;\n  }\n  const destroyHooks = lView[ON_DESTROY_HOOKS];\n  if (destroyHooks !== null) {\n    // Reset the ON_DESTROY_HOOKS array before iterating over it to prevent hooks that unregister\n    // themselves from mutating the array during iteration.\n    lView[ON_DESTROY_HOOKS] = null;\n    for (let i = 0; i < destroyHooks.length; i++) {\n      const destroyHooksFn = destroyHooks[i];\n      ngDevMode && assertFunction(destroyHooksFn, 'Expecting destroy hook to be a function.');\n      destroyHooksFn();\n    }\n  }\n  // Destroy effects registered to the view. Many of these will have been processed above.\n  const effects = lView[EFFECTS];\n  if (effects !== null) {\n    lView[EFFECTS] = null;\n    for (const effect of effects) {\n      effect.destroy();\n    }\n  }\n}\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView, lView) {\n  ngDevMode && assertNotReactive(executeOnDestroys.name);\n  let destroyHooks;\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    for (let i = 0; i < destroyHooks.length; i += 2) {\n      const context = lView[destroyHooks[i]];\n      // Only call the destroy hook if the context has been requested.\n      if (!(context instanceof NodeInjectorFactory)) {\n        const toCall = destroyHooks[i + 1];\n        if (Array.isArray(toCall)) {\n          for (let j = 0; j < toCall.length; j += 2) {\n            const callContext = context[toCall[j]];\n            const hook = toCall[j + 1];\n            profiler(4 /* ProfilerEvent.LifecycleHookStart */, callContext, hook);\n            try {\n              hook.call(callContext);\n            } finally {\n              profiler(5 /* ProfilerEvent.LifecycleHookEnd */, callContext, hook);\n            }\n          }\n        } else {\n          profiler(4 /* ProfilerEvent.LifecycleHookStart */, context, toCall);\n          try {\n            toCall.call(context);\n          } finally {\n            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, context, toCall);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nfunction getParentRElement(tView, tNode, lView) {\n  return getClosestRElement(tView, tNode.parent, lView);\n}\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nfunction getClosestRElement(tView, tNode, lView) {\n  let parentTNode = tNode;\n  // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent. Also skip let declarations since they don't have a\n  // corresponding DOM node at all.\n  while (parentTNode !== null && parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */ | 128 /* TNodeType.LetDeclaration */)) {\n    tNode = parentTNode;\n    parentTNode = tNode.parent;\n  }\n  // If the parent tNode is null, then we are inserting across views: either into an embedded view\n  // or a component view.\n  if (parentTNode === null) {\n    // We are inserting a root element of the component view into the component host element and\n    // it should always be eager.\n    return lView[HOST];\n  } else {\n    ngDevMode && assertTNodeType(parentTNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n    if (isComponentHost(parentTNode)) {\n      ngDevMode && assertTNodeForLView(parentTNode, lView);\n      const {\n        encapsulation\n      } = tView.data[parentTNode.directiveStart + parentTNode.componentOffset];\n      // We've got a parent which is an element in the current view. We just need to verify if the\n      // parent element is not a component. Component's content nodes are not inserted immediately\n      // because they will be projected, and so doing insert at this point would be wasteful.\n      // Since the projection would then move it to its final destination. Note that we can't\n      // make this assumption when using the Shadow DOM, because the native projection placeholders\n      // (<content> or <slot>) have to be in place as elements are being inserted.\n      if (encapsulation === ViewEncapsulation.None || encapsulation === ViewEncapsulation.Emulated) {\n        return null;\n      }\n    }\n    return getNativeByTNode(parentTNode, lView);\n  }\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {\n  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {\n  if (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n    return getNativeByTNode(parentTNode, lView);\n  }\n  return null;\n}\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore;\nfunction setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {\n  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n  _processI18nInsertBefore = processI18nInsertBefore;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nfunction appendChild(tView, lView, childRNode, childTNode) {\n  const parentRNode = getParentRElement(tView, childTNode, lView);\n  const renderer = lView[RENDERER];\n  const parentTNode = childTNode.parent || lView[T_HOST];\n  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n  if (parentRNode != null) {\n    if (Array.isArray(childRNode)) {\n      for (let i = 0; i < childRNode.length; i++) {\n        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n      }\n    } else {\n      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n    }\n  }\n  _processI18nInsertBefore !== undefined && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nfunction getFirstNativeNode(lView, tNode) {\n  if (tNode !== null) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */ | 16 /* TNodeType.Projection */ | 128 /* TNodeType.LetDeclaration */);\n    const tNodeType = tNode.type;\n    if (tNodeType & 3 /* TNodeType.AnyRNode */) {\n      return getNativeByTNode(tNode, lView);\n    } else if (tNodeType & 4 /* TNodeType.Container */) {\n      return getBeforeNodeForView(-1, lView[tNode.index]);\n    } else if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n      const elIcuContainerChild = tNode.child;\n      if (elIcuContainerChild !== null) {\n        return getFirstNativeNode(lView, elIcuContainerChild);\n      } else {\n        const rNodeOrLContainer = lView[tNode.index];\n        if (isLContainer(rNodeOrLContainer)) {\n          return getBeforeNodeForView(-1, rNodeOrLContainer);\n        } else {\n          return unwrapRNode(rNodeOrLContainer);\n        }\n      }\n    } else if (tNodeType & 128 /* TNodeType.LetDeclaration */) {\n      return getFirstNativeNode(lView, tNode.next);\n    } else if (tNodeType & 32 /* TNodeType.Icu */) {\n      let nextRNode = icuContainerIterate(tNode, lView);\n      let rNode = nextRNode();\n      // If the ICU container has no nodes, than we use the ICU anchor as the node.\n      return rNode || unwrapRNode(lView[tNode.index]);\n    } else {\n      const projectionNodes = getProjectionNodes(lView, tNode);\n      if (projectionNodes !== null) {\n        if (Array.isArray(projectionNodes)) {\n          return projectionNodes[0];\n        }\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        return getFirstNativeNode(parentView, projectionNodes);\n      } else {\n        return getFirstNativeNode(lView, tNode.next);\n      }\n    }\n  }\n  return null;\n}\nfunction getProjectionNodes(lView, tNode) {\n  if (tNode !== null) {\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST];\n    const slotIdx = tNode.projection;\n    ngDevMode && assertProjectionSlots(lView);\n    return componentHost.projection[slotIdx];\n  }\n  return null;\n}\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\n  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n  if (nextViewIndex < lContainer.length) {\n    const lView = lContainer[nextViewIndex];\n    const firstTNodeOfView = lView[TVIEW].firstChild;\n    if (firstTNodeOfView !== null) {\n      return getFirstNativeNode(lView, firstTNodeOfView);\n    }\n  }\n  return lContainer[NATIVE];\n}\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {\n  while (tNode != null) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    // Let declarations don't have corresponding DOM nodes so we skip over them.\n    if (tNode.type === 128 /* TNodeType.LetDeclaration */) {\n      tNode = tNode.next;\n      continue;\n    }\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n    const rawSlotValue = lView[tNode.index];\n    const tNodeType = tNode.type;\n    if (isProjection) {\n      if (action === 0 /* WalkTNodeTreeAction.Create */) {\n        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n        tNode.flags |= 2 /* TNodeFlags.isProjected */;\n      }\n    }\n    if (!isDetachedByI18n(tNode)) {\n      if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 32 /* TNodeType.Icu */) {\n        const nextRNode = icuContainerIterate(tNode, lView);\n        let rNode;\n        while (rNode = nextRNode()) {\n          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 16 /* TNodeType.Projection */) {\n        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);\n      } else {\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n}\nfunction applyView(tView, lView, renderer, action, parentRElement, beforeNode) {\n  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nfunction applyProjection(tView, lView, tProjectionNode) {\n  const renderer = lView[RENDERER];\n  const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n  const parentTNode = tProjectionNode.parent || lView[T_HOST];\n  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n  applyProjectionRecursive(renderer, 0 /* WalkTNodeTreeAction.Create */, lView, tProjectionNode, parentRNode, beforeNode);\n}\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {\n  const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n  const componentNode = componentLView[T_HOST];\n  ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\n  if (Array.isArray(nodeToProjectOrRNodes)) {\n    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n    // need to support passing projectable nodes, so we cheat and put them in the TNode\n    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n    // because we know that TView is not shared and therefore it will not be a problem.\n    // This should be refactored and cleaned up.\n    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n      const rNode = nodeToProjectOrRNodes[i];\n      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n    }\n  } else {\n    let nodeToProject = nodeToProjectOrRNodes;\n    const projectedComponentLView = componentLView[PARENT];\n    // If a parent <ng-content> is located within a skip hydration block,\n    // annotate an actual node that is being projected with the same flag too.\n    if (hasInSkipHydrationBlockFlag(tProjectionNode)) {\n      nodeToProject.flags |= 128 /* TNodeFlags.inSkipHydrationBlock */;\n    }\n    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n  }\n}\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {\n  ngDevMode && assertLContainer(lContainer);\n  const anchor = lContainer[NATIVE]; // LContainer has its own before node.\n  const native = unwrapRNode(lContainer);\n  // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n  // node (comment in the DOM) that will be different from the LContainer's host node. In this\n  // particular case we need to execute action on 2 nodes:\n  // - container's host node (this is done in the executeActionOnElementOrContainer)\n  // - container's host node (this is done here)\n  if (anchor !== native) {\n    // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n    // don't see a reason why they should be different, but they are.\n    //\n    // If they are we need to process the second anchor as well.\n    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lView = lContainer[i];\n    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n  }\n}\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nfunction applyStyling(renderer, isClassBased, rNode, prop, value) {\n  if (isClassBased) {\n    // We actually want JS true/false here because any truthy value should add the class\n    if (!value) {\n      renderer.removeClass(rNode, prop);\n    } else {\n      renderer.addClass(rNode, prop);\n    }\n  } else {\n    let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\n    if (value == null /** || value === undefined */) {\n      renderer.removeStyle(rNode, prop, flags);\n    } else {\n      // A value is important if it ends with `!important`. The style\n      // parser strips any semicolons at the end of the value.\n      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n      if (isImportant) {\n        // !important has to be stripped from the value for it to be valid.\n        value = value.slice(0, -10);\n        flags |= RendererStyleFlags2.Important;\n      }\n      renderer.setStyle(rNode, prop, value, flags);\n    }\n  }\n}\nfunction executeTemplate(tView, lView, templateFn, rf, context) {\n  const prevSelectedIndex = getSelectedIndex();\n  const isUpdatePhase = rf & 2 /* RenderFlags.Update */;\n  try {\n    setSelectedIndex(-1);\n    if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n      // When we're updating, inherently select 0 so we don't\n      // have to generate that instruction for most update blocks.\n      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n    }\n    const preHookType = isUpdatePhase ? 2 /* ProfilerEvent.TemplateUpdateStart */ : 0 /* ProfilerEvent.TemplateCreateStart */;\n    profiler(preHookType, context, templateFn);\n    templateFn(rf, context);\n  } finally {\n    setSelectedIndex(prevSelectedIndex);\n    const postHookType = isUpdatePhase ? 3 /* ProfilerEvent.TemplateUpdateEnd */ : 1 /* ProfilerEvent.TemplateCreateEnd */;\n    profiler(postHookType, context, templateFn);\n  }\n}\n/**\n * Creates directive instances.\n */\nfunction createDirectivesInstances(tView, lView, tNode) {\n  instantiateAllDirectives(tView, lView, tNode);\n  if ((tNode.flags & 64 /* TNodeFlags.hasHostBindings */) === 64 /* TNodeFlags.hasHostBindings */) {\n    invokeDirectivesHostBindings(tView, lView, tNode);\n  }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1];\n      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param renderer the renderer used to locate the element.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n * @param injector Root view injector instance.\n */\nfunction locateHostElement(renderer, elementOrSelector, encapsulation, injector) {\n  // Note: we use default value for the `PRESERVE_HOST_CONTENT` here even though it's a\n  // tree-shakable one (providedIn:'root'). This code path can be triggered during dynamic\n  // component creation (after calling ViewContainerRef.createComponent) when an injector\n  // instance can be provided. The injector instance might be disconnected from the main DI\n  // tree, thus the `PRESERVE_HOST_CONTENT` would not be able to instantiate. In this case, the\n  // default value will be used.\n  const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);\n  // When using native Shadow DOM, do not clear host element to allow native slot\n  // projection.\n  const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation.ShadowDom;\n  const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);\n  applyRootElementTransform(rootElement);\n  return rootElement;\n}\n/**\n * Applies any root element transformations that are needed. If hydration is enabled,\n * this will process corrupted text nodes.\n *\n * @param rootElement the app root HTML Element\n */\nfunction applyRootElementTransform(rootElement) {\n  _applyRootElementTransformImpl(rootElement);\n}\n/**\n * Reference to a function that applies transformations to the root HTML element\n * of an app. When hydration is enabled, this processes any corrupt text nodes\n * so they are properly hydratable on the client.\n *\n * @param rootElement the app root HTML Element\n */\nlet _applyRootElementTransformImpl = () => null;\n/**\n * Processes text node markers before hydration begins. This replaces any special comment\n * nodes that were added prior to serialization are swapped out to restore proper text\n * nodes before hydration.\n *\n * @param rootElement the app root HTML Element\n */\nfunction applyRootElementTransformImpl(rootElement) {\n  if (hasSkipHydrationAttrOnRElement(rootElement)) {\n    // Handle a situation when the `ngSkipHydration` attribute is applied\n    // to the root node of an application. In this case, we should clear\n    // the contents and render everything from scratch.\n    clearElementContents(rootElement);\n  } else {\n    processTextNodeMarkersBeforeHydration(rootElement);\n  }\n}\n/**\n * Sets the implementation for the `applyRootElementTransform` function.\n */\nfunction enableApplyRootElementTransformImpl() {\n  _applyRootElementTransformImpl = applyRootElementTransformImpl;\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equivalent mappings in the compiler.\n */\nfunction mapPropName(name) {\n  if (name === 'class') return 'className';\n  if (name === 'for') return 'htmlFor';\n  if (name === 'formaction') return 'formAction';\n  if (name === 'innerHtml') return 'innerHTML';\n  if (name === 'readonly') return 'readOnly';\n  if (name === 'tabindex') return 'tabIndex';\n  return name;\n}\nfunction setPropertyAndInputs(tNode, lView, propName, value, renderer, sanitizer) {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  const tView = lView[TVIEW];\n  const hasSetInput = setAllInputsForProperty(tNode, tView, lView, propName, value);\n  if (hasSetInput) {\n    isComponentHost(tNode) && markDirtyIfOnPush(lView, tNode.index);\n    ngDevMode && setNgReflectProperties(lView, tView, tNode, propName, value);\n    return; // Stop propcessing if we've matched at least one input.\n  }\n  // If the property is going to a DOM node, we have to remap it.\n  if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n    propName = mapPropName(propName);\n  }\n  setDomProperty(tNode, lView, propName, value, renderer, sanitizer);\n}\n/**\n * Sets a DOM property on a specific node.\n * @param tNode TNode on which to set the value.\n * @param lView View in which the node is located.\n * @param propName Name of the property.\n * @param value Value to set on the property.\n * @param renderer Renderer to use when setting the property.\n * @param sanitizer Function used to sanitize the value before setting it.\n */\nfunction setDomProperty(tNode, lView, propName, value, renderer, sanitizer) {\n  if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n    const element = getNativeByTNode(tNode, lView);\n    if (ngDevMode) {\n      validateAgainstEventProperties(propName);\n      if (!isPropertyValid(element, propName, tNode.value, lView[TVIEW].schemas)) {\n        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n      }\n    }\n    // It is assumed that the sanitizer is only added when the compiler determines that the\n    // property is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;\n    renderer.setProperty(element, propName, value);\n  } else if (tNode.type & 12 /* TNodeType.AnyContainer */) {\n    // If the node is a container and the property didn't\n    // match any of the inputs or schemas we should throw.\n    if (ngDevMode && !matchingSchemas(lView[TVIEW].schemas, tNode.value)) {\n      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n    }\n  }\n}\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n  ngDevMode && assertLView(lView);\n  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & 16 /* LViewFlags.CheckAlways */)) {\n    childComponentLView[FLAGS] |= 64 /* LViewFlags.Dirty */;\n  }\n}\nfunction setNgReflectProperty(lView, tNode, attrName, value) {\n  const environment = lView[ENVIRONMENT];\n  if (!environment.ngReflect) {\n    return;\n  }\n  const element = getNativeByTNode(tNode, lView);\n  const renderer = lView[RENDERER];\n  attrName = normalizeDebugBindingName(attrName);\n  const debugValue = normalizeDebugBindingValue(value);\n  if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n    if (value == null) {\n      renderer.removeAttribute(element, attrName);\n    } else {\n      renderer.setAttribute(element, attrName, debugValue);\n    }\n  } else {\n    const textContent = escapeCommentText(`bindings=${JSON.stringify({\n      [attrName]: debugValue\n    }, null, 2)}`);\n    renderer.setValue(element, textContent);\n  }\n}\nfunction setNgReflectProperties(lView, tView, tNode, publicName, value) {\n  const environment = lView[ENVIRONMENT];\n  if (!environment.ngReflect || !(tNode.type & (3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */))) {\n    return;\n  }\n  const inputConfig = tNode.inputs?.[publicName];\n  const hostInputConfig = tNode.hostDirectiveInputs?.[publicName];\n  if (hostInputConfig) {\n    for (let i = 0; i < hostInputConfig.length; i += 2) {\n      const index = hostInputConfig[i];\n      const publicName = hostInputConfig[i + 1];\n      const def = tView.data[index];\n      setNgReflectProperty(lView, tNode, def.inputs[publicName][0], value);\n    }\n  }\n  // Note: we set the private name of the input as the reflected property, not the public one.\n  if (inputConfig) {\n    for (const index of inputConfig) {\n      const def = tView.data[index];\n      setNgReflectProperty(lView, tNode, def.inputs[publicName][0], value);\n    }\n  }\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView, lView, tNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  // The component view needs to be created before creating the node injector\n  // since it is used to inject some special symbols like `ChangeDetectorRef`.\n  if (isComponentHost(tNode)) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n    createComponentLView(lView, tNode, tView.data[start + tNode.componentOffset]);\n  }\n  if (!tView.firstCreatePass) {\n    getOrCreateNodeInjectorForNode(tNode, lView);\n  }\n  const initialInputs = tNode.initialInputs;\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i];\n    const directive = getNodeInjectable(lView, tView, i, tNode);\n    attachPatchData(directive, lView);\n    if (initialInputs !== null) {\n      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\n    }\n    if (isComponentDef(def)) {\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);\n    }\n  }\n}\nfunction invokeDirectivesHostBindings(tView, lView, tNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const elementIndex = tNode.index;\n  const currentDirectiveIndex = getCurrentDirectiveIndex();\n  try {\n    setSelectedIndex(elementIndex);\n    for (let dirIndex = start; dirIndex < end; dirIndex++) {\n      const def = tView.data[dirIndex];\n      const directive = lView[dirIndex];\n      setCurrentDirectiveIndex(dirIndex);\n      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n        invokeHostBindingsInCreationMode(def, directive);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n  }\n}\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nfunction invokeHostBindingsInCreationMode(def, directive) {\n  if (def.hostBindings !== null) {\n    def.hostBindings(1 /* RenderFlags.Create */, directive);\n  }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nfunction findDirectiveDefMatches(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n  const registry = tView.directiveRegistry;\n  let matches = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i];\n      if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */false)) {\n        matches ??= [];\n        if (isComponentDef(def)) {\n          if (ngDevMode) {\n            assertTNodeType(tNode, 2 /* TNodeType.Element */, `\"${tNode.value}\" tags cannot be used as component hosts. ` + `Please use a different tag to activate the ${stringify(def.type)} component.`);\n            if (matches.length && isComponentDef(matches[0])) {\n              throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);\n            }\n          }\n          matches.unshift(def);\n        } else {\n          matches.push(def);\n        }\n      }\n    }\n  }\n  return matches;\n}\nfunction elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {\n  if (ngDevMode) {\n    assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    validateAgainstEventAttributes(name);\n    assertTNodeType(tNode, 2 /* TNodeType.Element */, `Attempted to set attribute \\`${name}\\` on a container node. ` + `Host bindings are not valid on ng-container or ng-template.`);\n  }\n  const element = getNativeByTNode(tNode, lView);\n  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\nfunction setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {\n  if (value == null) {\n    renderer.removeAttribute(element, name, namespace);\n  } else {\n    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n    renderer.setAttribute(element, name, strValue, namespace);\n  }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\n  const initialInputs = initialInputData[directiveIndex];\n  if (initialInputs !== null) {\n    for (let i = 0; i < initialInputs.length; i += 2) {\n      const lookupName = initialInputs[i];\n      const value = initialInputs[i + 1];\n      writeToDirectiveInput(def, instance, lookupName, value);\n      if (ngDevMode) {\n        setNgReflectProperty(lView, tNode, def.inputs[lookupName][0], value);\n      }\n    }\n  }\n}\n/** Shared code between instructions that indicate the start of an element. */\nfunction elementLikeStartShared(tNode, lView, index, name, locateOrCreateNativeNode) {\n  const adjustedIndex = HEADER_OFFSET + index;\n  const tView = lView[TVIEW];\n  const native = locateOrCreateNativeNode(tView, lView, tNode, name, index);\n  lView[adjustedIndex] = native;\n  setCurrentTNode(tNode, true);\n  // It's important that this runs before we've instantiated the directives.\n  const isElement = tNode.type === 2 /* TNodeType.Element */;\n  if (isElement) {\n    setupStaticAttributes(lView[RENDERER], native, tNode);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0 || isDirectiveHost(tNode)) {\n      attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n  } else {\n    attachPatchData(native, lView);\n  }\n  if (wasLastNodeCreated() && (!isElement || !isDetachedByI18n(tNode))) {\n    // In the i18n case, the translation may have removed this element, so only add it if it is not\n    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n    appendChild(tView, lView, native, tNode);\n  }\n  return tNode;\n}\n/** Shared code between instructions that indicate the end of an element. */\nfunction elementLikeEndShared(tNode) {\n  let currentTNode = tNode;\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(getCurrentTNode());\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n  return currentTNode;\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nfunction storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {\n  // Binding meta-data are stored only the first time a given property instruction is processed.\n  // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n  // binding meta-data to decide if one should be stored (or if was stored already).\n  if (tData[bindingIndex] === null) {\n    if (!tNode.inputs?.[propertyName] && !tNode.hostDirectiveInputs?.[propertyName]) {\n      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n      propBindingIdxs.push(bindingIndex);\n      let bindingMetadata = propertyName;\n      if (interpolationParts.length > 0) {\n        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n      }\n      tData[bindingIndex] = bindingMetadata;\n    }\n  }\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nfunction loadComponentRenderer(currentDef, tNode, lView) {\n  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n  // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n  // of creating inner components, when current directive index is available in the state. In order\n  // to avoid relying on current def being `null` (thus special-casing root component creation), the\n  // process of creating root component should be unified with the process of creating inner\n  // components.\n  if (currentDef === null || isComponentDef(currentDef)) {\n    lView = unwrapLView(lView[tNode.index]);\n  }\n  return lView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\nfunction handleUncaughtError(lView, error) {\n  const injector = lView[INJECTOR];\n  if (!injector) {\n    return;\n  }\n  const errorHandler = injector.get(INTERNAL_APPLICATION_ERROR_HANDLER, null);\n  errorHandler?.(error);\n}\n/**\n * Set all directive inputs with the specific public name on the node.\n *\n * @param tNode TNode on which the input is being set.\n * @param tView Current TView\n * @param lView `LView` which contains the directives.\n * @param publicName Public name of the input being set.\n * @param value Value to set.\n */\nfunction setAllInputsForProperty(tNode, tView, lView, publicName, value) {\n  const inputs = tNode.inputs?.[publicName];\n  const hostDirectiveInputs = tNode.hostDirectiveInputs?.[publicName];\n  let hasMatch = false;\n  if (hostDirectiveInputs) {\n    for (let i = 0; i < hostDirectiveInputs.length; i += 2) {\n      const index = hostDirectiveInputs[i];\n      ngDevMode && assertIndexInRange(lView, index);\n      const publicName = hostDirectiveInputs[i + 1];\n      const def = tView.data[index];\n      writeToDirectiveInput(def, lView[index], publicName, value);\n      hasMatch = true;\n    }\n  }\n  if (inputs) {\n    for (const index of inputs) {\n      ngDevMode && assertIndexInRange(lView, index);\n      const instance = lView[index];\n      const def = tView.data[index];\n      writeToDirectiveInput(def, instance, publicName, value);\n      hasMatch = true;\n    }\n  }\n  return hasMatch;\n}\n/**\n * Sets an input value only on a specific directive and its host directives.\n * @param tNode TNode on which the input is being set.\n * @param tView Current TView\n * @param lView `LView` which contains the directives.\n * @param target Directive on which to set the input.\n * @param publicName Public name of the input being set.\n * @param value Value to set.\n */\nfunction setDirectiveInput(tNode, tView, lView, target, publicName, value) {\n  let hostIndex = null;\n  let hostDirectivesStart = null;\n  let hostDirectivesEnd = null;\n  let hasSet = false;\n  if (ngDevMode && !tNode.directiveToIndex?.has(target.type)) {\n    throw new Error(`Node does not have a directive with type ${target.type.name}`);\n  }\n  const data = tNode.directiveToIndex.get(target.type);\n  if (typeof data === 'number') {\n    hostIndex = data;\n  } else {\n    [hostIndex, hostDirectivesStart, hostDirectivesEnd] = data;\n  }\n  if (hostDirectivesStart !== null && hostDirectivesEnd !== null && tNode.hostDirectiveInputs?.hasOwnProperty(publicName)) {\n    const hostDirectiveInputs = tNode.hostDirectiveInputs[publicName];\n    for (let i = 0; i < hostDirectiveInputs.length; i += 2) {\n      const index = hostDirectiveInputs[i];\n      if (index >= hostDirectivesStart && index <= hostDirectivesEnd) {\n        ngDevMode && assertIndexInRange(lView, index);\n        const def = tView.data[index];\n        const hostDirectivePublicName = hostDirectiveInputs[i + 1];\n        writeToDirectiveInput(def, lView[index], hostDirectivePublicName, value);\n        hasSet = true;\n      } else if (index > hostDirectivesEnd) {\n        // Directives here are in ascending order so we can stop looking once we're past the range.\n        break;\n      }\n    }\n  }\n  if (hostIndex !== null && target.inputs.hasOwnProperty(publicName)) {\n    ngDevMode && assertIndexInRange(lView, hostIndex);\n    writeToDirectiveInput(target, lView[hostIndex], publicName, value);\n    hasSet = true;\n  }\n  return hasSet;\n}\nfunction renderComponent(hostLView, componentHostIdx) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  const componentTView = componentView[TVIEW];\n  syncViewWithBlueprint(componentTView, componentView);\n  const hostRNode = componentView[HOST];\n  // Populate an LView with hydration info retrieved from the DOM via TransferState.\n  if (hostRNode !== null && componentView[HYDRATION] === null) {\n    componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR]);\n  }\n  profiler(18 /* ProfilerEvent.ComponentStart */);\n  renderView(componentTView, componentView, componentView[CONTEXT]);\n  profiler(19 /* ProfilerEvent.ComponentEnd */, componentView[CONTEXT]);\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```html\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nfunction syncViewWithBlueprint(tView, lView) {\n  for (let i = lView.length; i < tView.blueprint.length; i++) {\n    lView.push(tView.blueprint[i]);\n  }\n}\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nfunction renderView(tView, lView, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n  ngDevMode && assertNotReactive(renderView.name);\n  enterView(lView);\n  try {\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(1 /* RenderFlags.Create */, viewQuery, context);\n    }\n    // Execute a template associated with this view, if it exists. A template function might not be\n    // defined for the root component views.\n    const templateFn = tView.template;\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 1 /* RenderFlags.Create */, context);\n    }\n    // This needs to be set before children are processed to support recursive components.\n    // This must be set to false immediately after the first creation run because in an\n    // ngFor loop, all the views will be created together before update mode runs and turns\n    // off firstCreatePass. If we don't set it here, instances will perform directive\n    // matching, etc again and again.\n    if (tView.firstCreatePass) {\n      tView.firstCreatePass = false;\n    }\n    // Mark all queries active in this view as dirty. This is necessary for signal-based queries to\n    // have a clear marking point where we can read query results atomically (for a given view).\n    lView[QUERIES]?.finishViewCreation(tView);\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (tView.staticContentQueries) {\n      refreshContentQueries(tView, lView);\n    }\n    // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n    if (tView.staticViewQueries) {\n      executeViewQueryFn(2 /* RenderFlags.Update */, tView.viewQuery, context);\n    }\n    // Render child component views.\n    const components = tView.components;\n    if (components !== null) {\n      renderChildComponents(lView, components);\n    }\n  } catch (error) {\n    // If we didn't manage to get past the first template pass due to\n    // an error, mark the view as corrupted so we can try to recover.\n    if (tView.firstCreatePass) {\n      tView.incompleteFirstPass = true;\n      tView.firstCreatePass = false;\n    }\n    throw error;\n  } finally {\n    lView[FLAGS] &= ~4 /* LViewFlags.CreationMode */;\n    leaveView();\n  }\n}\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView, components) {\n  for (let i = 0; i < components.length; i++) {\n    renderComponent(hostLView, components[i]);\n  }\n}\nfunction createAndRenderEmbeddedLView(declarationLView, templateTNode, context, options) {\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    const embeddedTView = templateTNode.tView;\n    ngDevMode && assertDefined(embeddedTView, 'TView must be defined for a template node.');\n    ngDevMode && assertTNodeForLView(templateTNode, declarationLView);\n    // Embedded views follow the change detection strategy of the view they're declared in.\n    const isSignalView = declarationLView[FLAGS] & 4096 /* LViewFlags.SignalView */;\n    const viewFlags = isSignalView ? 4096 /* LViewFlags.SignalView */ : 16 /* LViewFlags.CheckAlways */;\n    const embeddedLView = createLView(declarationLView, embeddedTView, context, viewFlags, null, templateTNode, null, null, options?.injector ?? null, options?.embeddedViewInjector ?? null, options?.dehydratedView ?? null);\n    const declarationLContainer = declarationLView[templateTNode.index];\n    ngDevMode && assertLContainer(declarationLContainer);\n    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n    const declarationViewLQueries = declarationLView[QUERIES];\n    if (declarationViewLQueries !== null) {\n      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n    }\n    // execute creation mode of a view\n    renderView(embeddedTView, embeddedLView, context);\n    return embeddedLView;\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n/**\n * Returns whether an elements that belong to a view should be\n * inserted into the DOM. For client-only cases, DOM elements are\n * always inserted. For hydration cases, we check whether serialized\n * info is available for a view and the view is not in a \"skip hydration\"\n * block (in which case view contents was re-created, thus needing insertion).\n */\nfunction shouldAddViewToDom(tNode, dehydratedView) {\n  return !dehydratedView || dehydratedView.firstChild === null || hasInSkipHydrationBlockFlag(tNode);\n}\nconst USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT = false;\nconst UseExhaustiveCheckNoChanges = /*#__PURE__*/new InjectionToken(ngDevMode ? 'exhaustive checkNoChanges' : '');\nfunction collectNativeNodes(tView, lView, tNode, result, isProjection = false) {\n  while (tNode !== null) {\n    // Let declarations don't have corresponding DOM nodes so we skip over them.\n    if (tNode.type === 128 /* TNodeType.LetDeclaration */) {\n      tNode = isProjection ? tNode.projectionNext : tNode.next;\n      continue;\n    }\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n    const lNode = lView[tNode.index];\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    }\n    // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n    if (isLContainer(lNode)) {\n      collectNativeNodesInLContainer(lNode, result);\n    }\n    const tNodeType = tNode.type;\n    if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & 32 /* TNodeType.Icu */) {\n      const nextRNode = icuContainerIterate(tNode, lView);\n      let rNode;\n      while (rNode = nextRNode()) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & 16 /* TNodeType.Projection */) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n  return result;\n}\n/**\n * Collects all root nodes in all views in a given LContainer.\n */\nfunction collectNativeNodesInLContainer(lContainer, result) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lViewInAContainer = lContainer[i];\n    const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n    if (lViewFirstChildTNode !== null) {\n      collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n    }\n  }\n  // When an LContainer is created, the anchor (comment) node is:\n  // - (1) either reused in case of an ElementContainer (<ng-container>)\n  // - (2) or a new comment node is created\n  // In the first case, the anchor comment node would be added to the final\n  // list by the code in the `collectNativeNodes` function\n  // (see the `result.push(unwrapRNode(lNode))` line), but the second\n  // case requires extra handling: the anchor node needs to be added to the\n  // final list manually. See additional information in the `createAnchorNode`\n  // function in the `view_container_ref.ts`.\n  //\n  // In the first case, the same reference would be stored in the `NATIVE`\n  // and `HOST` slots in an LContainer. Otherwise, this is the second case and\n  // we should add an element to the final list.\n  if (lContainer[NATIVE] !== lContainer[HOST]) {\n    result.push(lContainer[NATIVE]);\n  }\n}\nfunction addAfterRenderSequencesForView(lView) {\n  if (lView[AFTER_RENDER_SEQUENCES_TO_ADD] !== null) {\n    for (const sequence of lView[AFTER_RENDER_SEQUENCES_TO_ADD]) {\n      sequence.impl.addSequence(sequence);\n    }\n    lView[AFTER_RENDER_SEQUENCES_TO_ADD].length = 0;\n  }\n}\nlet freeConsumers = [];\n/**\n * Create a new template consumer pointing at the specified LView.\n * Sometimes, a previously created consumer may be reused, in order to save on allocations. In that\n * case, the LView will be updated.\n */\nfunction getOrBorrowReactiveLViewConsumer(lView) {\n  return lView[REACTIVE_TEMPLATE_CONSUMER] ?? borrowReactiveLViewConsumer(lView);\n}\nfunction borrowReactiveLViewConsumer(lView) {\n  const consumer = freeConsumers.pop() ?? Object.create(REACTIVE_LVIEW_CONSUMER_NODE);\n  consumer.lView = lView;\n  return consumer;\n}\nfunction maybeReturnReactiveLViewConsumer(consumer) {\n  if (consumer.lView[REACTIVE_TEMPLATE_CONSUMER] === consumer) {\n    // The consumer got committed.\n    return;\n  }\n  consumer.lView = null;\n  freeConsumers.push(consumer);\n}\nconst REACTIVE_LVIEW_CONSUMER_NODE = {\n  ...REACTIVE_NODE,\n  consumerIsAlwaysLive: true,\n  kind: 'template',\n  consumerMarkedDirty: node => {\n    markAncestorsForTraversal(node.lView);\n  },\n  consumerOnSignalRead() {\n    this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;\n  }\n};\n/**\n * Creates a temporary consumer for use with `LView`s that should not have consumers.\n * If the LView already has a consumer, returns the existing one instead.\n *\n * This is necessary because some APIs may cause change detection directly on an LView\n * that we do not want to have a consumer (Embedded views today). As a result, there\n * would be no active consumer from running change detection on its host component\n * and any signals in the LView template would be untracked. Instead, we create\n * this temporary consumer that marks the first parent that _should_ have a consumer\n * for refresh. Once change detection runs as part of that refresh, we throw away\n * this consumer because its signals will then be tracked by the parent's consumer.\n */\nfunction getOrCreateTemporaryConsumer(lView) {\n  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER] ?? Object.create(TEMPORARY_CONSUMER_NODE);\n  consumer.lView = lView;\n  return consumer;\n}\nconst TEMPORARY_CONSUMER_NODE = {\n  ...REACTIVE_NODE,\n  consumerIsAlwaysLive: true,\n  kind: 'template',\n  consumerMarkedDirty: node => {\n    let parent = getLViewParent(node.lView);\n    while (parent && !viewShouldHaveReactiveConsumer(parent[TVIEW])) {\n      parent = getLViewParent(parent);\n    }\n    if (!parent) {\n      // If we can't find an appropriate parent that should have a consumer, we\n      // don't have a way of appropriately refreshing this LView as part of application synchronization.\n      return;\n    }\n    markViewForRefresh(parent);\n  },\n  consumerOnSignalRead() {\n    this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;\n  }\n};\n/**\n * Indicates if the view should get its own reactive consumer node.\n *\n * In the current design, all embedded views share a consumer with the component view. This allows\n * us to refresh at the component level rather than at a per-view level. In addition, root views get\n * their own reactive node because root component will have a host view that executes the\n * component's host bindings. This needs to be tracked in a consumer as well.\n *\n * To get a more granular change detection than per-component, all we would just need to update the\n * condition here so that a given view gets a reactive consumer which can become dirty independently\n * from its parent component. For example embedded views for signal components could be created with\n * a new type \"SignalEmbeddedView\" and the condition here wouldn't even need updating in order to\n * get granular per-view change detection for signal components.\n */\nfunction viewShouldHaveReactiveConsumer(tView) {\n  return tView.type !== 2 /* TViewType.Embedded */;\n}\nfunction isReactiveLViewConsumer(node) {\n  return node.kind === 'template';\n}\nfunction runEffectsInView(view) {\n  if (view[EFFECTS] === null) {\n    return;\n  }\n  // Since effects can make other effects dirty, we flush them in a loop until there are no more to\n  // flush.\n  let tryFlushEffects = true;\n  while (tryFlushEffects) {\n    let foundDirtyEffect = false;\n    for (const effect of view[EFFECTS]) {\n      if (!effect.dirty) {\n        continue;\n      }\n      foundDirtyEffect = true;\n      // `runEffectsInView` is called during change detection, and therefore runs\n      // in the Angular zone if it's available.\n      if (effect.zone === null || Zone.current === effect.zone) {\n        effect.run();\n      } else {\n        effect.zone.run(() => effect.run());\n      }\n    }\n    // Check if we need to continue flushing. If we didn't find any dirty effects, then there's\n    // no need to loop back. Otherwise, check the view to see if it was marked for traversal\n    // again. If so, there's a chance that one of the effects we ran caused another effect to\n    // become dirty.\n    tryFlushEffects = foundDirtyEffect && !!(view[FLAGS] & 8192 /* LViewFlags.HasChildViewsToRefresh */);\n  }\n}\n\n/**\n * The maximum number of times the change detection traversal will rerun before throwing an error.\n */\nconst MAXIMUM_REFRESH_RERUNS$1 = 100;\nfunction detectChangesInternal(lView, mode = 0 /* ChangeDetectionMode.Global */) {\n  const environment = lView[ENVIRONMENT];\n  const rendererFactory = environment.rendererFactory;\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to invoke renderer factory functions in that mode\n  // to avoid any possible side-effects.\n  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n  if (!checkNoChangesMode) {\n    rendererFactory.begin?.();\n  }\n  try {\n    detectChangesInViewWhileDirty(lView, mode);\n  } finally {\n    if (!checkNoChangesMode) {\n      rendererFactory.end?.();\n    }\n  }\n}\nfunction detectChangesInViewWhileDirty(lView, mode) {\n  const lastIsRefreshingViewsValue = isRefreshingViews();\n  try {\n    setIsRefreshingViews(true);\n    detectChangesInView(lView, mode);\n    // We don't need or want to do any looping when in exhaustive checkNoChanges because we\n    // already traverse all the views and nothing should change so we shouldn't have to do\n    // another pass to pick up new changes.\n    if (ngDevMode && isExhaustiveCheckNoChanges()) {\n      return;\n    }\n    let retries = 0;\n    // If after running change detection, this view still needs to be refreshed or there are\n    // descendants views that need to be refreshed due to re-dirtying during the change detection\n    // run, detect changes on the view again. We run change detection in `Targeted` mode to only\n    // refresh views with the `RefreshView` flag.\n    while (requiresRefreshOrTraversal(lView)) {\n      if (retries === MAXIMUM_REFRESH_RERUNS$1) {\n        throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, ngDevMode && 'Infinite change detection while trying to refresh views. ' + 'There may be components which each cause the other to require a refresh, ' + 'causing an infinite loop.');\n      }\n      retries++;\n      // Even if this view is detached, we still detect changes in targeted mode because this was\n      // the root of the change detection run.\n      detectChangesInView(lView, 1 /* ChangeDetectionMode.Targeted */);\n    }\n  } finally {\n    // restore state to what it was before entering this change detection loop\n    setIsRefreshingViews(lastIsRefreshingViewsValue);\n  }\n}\nfunction checkNoChangesInternal(lView, exhaustive) {\n  setIsInCheckNoChangesMode(exhaustive ? CheckNoChangesMode.Exhaustive : CheckNoChangesMode.OnlyDirtyViews);\n  try {\n    detectChangesInternal(lView);\n  } finally {\n    setIsInCheckNoChangesMode(CheckNoChangesMode.Off);\n  }\n}\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\nfunction refreshView(tView, lView, templateFn, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n  if (isDestroyed(lView)) return;\n  const flags = lView[FLAGS];\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  const isInExhaustiveCheckNoChangesPass = ngDevMode && isExhaustiveCheckNoChanges();\n  // Start component reactive context\n  // - We might already be in a reactive context if this is an embedded view of the host.\n  // - We might be descending into a view that needs a consumer.\n  enterView(lView);\n  let returnConsumerToPool = true;\n  let prevConsumer = null;\n  let currentConsumer = null;\n  if (!isInCheckNoChangesPass) {\n    if (viewShouldHaveReactiveConsumer(tView)) {\n      currentConsumer = getOrBorrowReactiveLViewConsumer(lView);\n      prevConsumer = consumerBeforeComputation(currentConsumer);\n    } else if (getActiveConsumer() === null) {\n      // If the current view should not have a reactive consumer but we don't have an active consumer,\n      // we still need to create a temporary consumer to track any signal reads in this template.\n      // This is a rare case that can happen with\n      // - `viewContainerRef.createEmbeddedView(...).detectChanges()`.\n      // - `viewContainerRef.createEmbeddedView(...)` without any other dirty marking on the parent,\n      //   flagging the parent component for traversal but not triggering a full `refreshView`.\n      // This temporary consumer marks the first parent that _should_ have a consumer for refresh.\n      // Once that refresh happens, the signals will be tracked in the parent consumer and we can destroy\n      // the temporary one.\n      returnConsumerToPool = false;\n      currentConsumer = getOrCreateTemporaryConsumer(lView);\n      prevConsumer = consumerBeforeComputation(currentConsumer);\n    } else if (lView[REACTIVE_TEMPLATE_CONSUMER]) {\n      consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);\n      lView[REACTIVE_TEMPLATE_CONSUMER] = null;\n    }\n  }\n  try {\n    resetPreOrderHookFlags(lView);\n    setBindingIndex(tView.bindingStartIndex);\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 2 /* RenderFlags.Update */, context);\n    }\n    const hooksInitPhaseCompleted = (flags & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n    // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const preOrderCheckHooks = tView.preOrderCheckHooks;\n        if (preOrderCheckHooks !== null) {\n          executeCheckHooks(lView, preOrderCheckHooks, null);\n        }\n      } else {\n        const preOrderHooks = tView.preOrderHooks;\n        if (preOrderHooks !== null) {\n          executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, null);\n        }\n        incrementInitPhaseFlags(lView, 0 /* InitPhaseState.OnInitHooksToBeRun */);\n      }\n    }\n    // We do not need to mark transplanted views for refresh when doing exhaustive checks\n    // because all views will be reached anyways during the traversal.\n    if (!isInExhaustiveCheckNoChangesPass) {\n      // First mark transplanted views that are declared in this lView as needing a refresh at their\n      // insertion points. This is needed to avoid the situation where the template is defined in this\n      // `LView` but its declaration appears after the insertion component.\n      markTransplantedViewsForRefresh(lView);\n    }\n    runEffectsInView(lView);\n    detectChangesInEmbeddedViews(lView, 0 /* ChangeDetectionMode.Global */);\n    // Content query results must be refreshed before content hooks are called.\n    if (tView.contentQueries !== null) {\n      refreshContentQueries(tView, lView);\n    }\n    // execute content hooks (AfterContentInit, AfterContentChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const contentCheckHooks = tView.contentCheckHooks;\n        if (contentCheckHooks !== null) {\n          executeCheckHooks(lView, contentCheckHooks);\n        }\n      } else {\n        const contentHooks = tView.contentHooks;\n        if (contentHooks !== null) {\n          executeInitAndCheckHooks(lView, contentHooks, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n        }\n        incrementInitPhaseFlags(lView, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n      }\n    }\n    processHostBindingOpCodes(tView, lView);\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n      detectChangesInChildComponents(lView, components, 0 /* ChangeDetectionMode.Global */);\n    }\n    // View queries must execute after refreshing child components because a template in this view\n    // could be inserted in a child component. If the view query executes before child component\n    // refresh, the template might not yet be inserted.\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(2 /* RenderFlags.Update */, viewQuery, context);\n    }\n    // execute view hooks (AfterViewInit, AfterViewChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const viewCheckHooks = tView.viewCheckHooks;\n        if (viewCheckHooks !== null) {\n          executeCheckHooks(lView, viewCheckHooks);\n        }\n      } else {\n        const viewHooks = tView.viewHooks;\n        if (viewHooks !== null) {\n          executeInitAndCheckHooks(lView, viewHooks, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n        }\n        incrementInitPhaseFlags(lView, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n      }\n    }\n    if (tView.firstUpdatePass === true) {\n      // We need to make sure that we only flip the flag on successful `refreshView` only\n      // Don't do this in `finally` block.\n      // If we did this in `finally` block then an exception could block the execution of styling\n      // instructions which in turn would be unable to insert themselves into the styling linked\n      // list. The result of this would be that if the exception would not be throw on subsequent CD\n      // the styling would be unable to process it data and reflect to the DOM.\n      tView.firstUpdatePass = false;\n    }\n    // Schedule any effects that are waiting on the update pass of this view.\n    if (lView[EFFECTS_TO_SCHEDULE]) {\n      for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {\n        notifyEffect();\n      }\n      // Once they've been run, we can drop the array.\n      lView[EFFECTS_TO_SCHEDULE] = null;\n    }\n    // Do not reset the dirty state when running in check no changes mode. We don't want components\n    // to behave differently depending on whether check no changes is enabled or not. For example:\n    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n    // no changes cycle, the component would be not be dirty for the next update pass. This would\n    // be different in production mode where the component dirty state is not reset.\n    if (!isInCheckNoChangesPass) {\n      addAfterRenderSequencesForView(lView);\n      lView[FLAGS] &= ~(64 /* LViewFlags.Dirty */ | 8 /* LViewFlags.FirstLViewPass */);\n    }\n  } catch (e) {\n    if (!isInCheckNoChangesPass) {\n      // If refreshing a view causes an error, we need to remark the ancestors as needing traversal\n      // because the error might have caused a situation where views below the current location are\n      // dirty but will be unreachable because the \"has dirty children\" flag in the ancestors has been\n      // cleared during change detection and we failed to run to completion.\n      markAncestorsForTraversal(lView);\n    }\n    throw e;\n  } finally {\n    if (currentConsumer !== null) {\n      consumerAfterComputation(currentConsumer, prevConsumer);\n      if (returnConsumerToPool) {\n        maybeReturnReactiveLViewConsumer(currentConsumer);\n      }\n    }\n    leaveView();\n  }\n}\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction detectChangesInEmbeddedViews(lView, mode) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      detectChangesInViewIfAttached(embeddedLView, mode);\n    }\n  }\n}\n/**\n * Mark transplanted views as needing to be refreshed at their attachment points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    if (!(lContainer[FLAGS] & 2 /* LContainerFlags.HasTransplantedViews */)) continue;\n    const movedViews = lContainer[MOVED_VIEWS];\n    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n    for (let i = 0; i < movedViews.length; i++) {\n      const movedLView = movedViews[i];\n      markViewForRefresh(movedLView);\n    }\n  }\n}\n/**\n * Detects changes in a component by entering the component view and processing its bindings,\n * queries, etc. if it is CheckAlways, OnPush and Dirty, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction detectChangesInComponent(hostLView, componentHostIdx, mode) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n  profiler(18 /* ProfilerEvent.ComponentStart */);\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  detectChangesInViewIfAttached(componentView, mode);\n  profiler(19 /* ProfilerEvent.ComponentEnd */, componentView[CONTEXT]);\n}\n/**\n * Visits a view as part of change detection traversal.\n *\n * If the view is detached, no additional traversal happens.\n */\nfunction detectChangesInViewIfAttached(lView, mode) {\n  if (!viewAttachedToChangeDetector(lView)) {\n    return;\n  }\n  detectChangesInView(lView, mode);\n}\n/**\n * Visits a view as part of change detection traversal.\n *\n * The view is refreshed if:\n * - If the view is CheckAlways or Dirty and ChangeDetectionMode is `Global`\n * - If the view has the `RefreshView` flag\n *\n * The view is not refreshed, but descendants are traversed in `ChangeDetectionMode.Targeted` if the\n * view HasChildViewsToRefresh flag is set.\n */\nfunction detectChangesInView(lView, mode) {\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  const tView = lView[TVIEW];\n  const flags = lView[FLAGS];\n  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];\n  // Refresh CheckAlways views in Global mode.\n  let shouldRefreshView = !!(mode === 0 /* ChangeDetectionMode.Global */ && flags & 16 /* LViewFlags.CheckAlways */);\n  // Refresh Dirty views in Global mode, as long as we're not in checkNoChanges.\n  // CheckNoChanges never worked with `OnPush` components because the `Dirty` flag was\n  // cleared before checkNoChanges ran. Because there is now a loop for to check for\n  // backwards views, it gives an opportunity for `OnPush` components to be marked `Dirty`\n  // before the CheckNoChanges pass. We don't want existing errors that are hidden by the\n  // current CheckNoChanges bug to surface when making unrelated changes.\n  shouldRefreshView ||= !!(flags & 64 /* LViewFlags.Dirty */ && mode === 0 /* ChangeDetectionMode.Global */ && !isInCheckNoChangesPass);\n  // Always refresh views marked for refresh, regardless of mode.\n  shouldRefreshView ||= !!(flags & 1024 /* LViewFlags.RefreshView */);\n  // Refresh views when they have a dirty reactive consumer, regardless of mode.\n  shouldRefreshView ||= !!(consumer?.dirty && consumerPollProducersForChange(consumer));\n  shouldRefreshView ||= !!(ngDevMode && isExhaustiveCheckNoChanges());\n  // Mark the Flags and `ReactiveNode` as not dirty before refreshing the component, so that they\n  // can be re-dirtied during the refresh process.\n  if (consumer) {\n    consumer.dirty = false;\n  }\n  lView[FLAGS] &= ~(8192 /* LViewFlags.HasChildViewsToRefresh */ | 1024 /* LViewFlags.RefreshView */);\n  if (shouldRefreshView) {\n    refreshView(tView, lView, tView.template, lView[CONTEXT]);\n  } else if (flags & 8192 /* LViewFlags.HasChildViewsToRefresh */) {\n    // Set active consumer to null to avoid inheriting an improper reactive context\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      if (!isInCheckNoChangesPass) {\n        runEffectsInView(lView);\n      }\n      detectChangesInEmbeddedViews(lView, 1 /* ChangeDetectionMode.Targeted */);\n      const components = tView.components;\n      if (components !== null) {\n        detectChangesInChildComponents(lView, components, 1 /* ChangeDetectionMode.Targeted */);\n      }\n      if (!isInCheckNoChangesPass) {\n        addAfterRenderSequencesForView(lView);\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n/** Refreshes child components in the current view (update mode). */\nfunction detectChangesInChildComponents(hostLView, components, mode) {\n  for (let i = 0; i < components.length; i++) {\n    detectChangesInComponent(hostLView, components[i], mode);\n  }\n}\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nfunction processHostBindingOpCodes(tView, lView) {\n  const hostBindingOpCodes = tView.hostBindingOpCodes;\n  if (hostBindingOpCodes === null) return;\n  try {\n    for (let i = 0; i < hostBindingOpCodes.length; i++) {\n      const opCode = hostBindingOpCodes[i];\n      if (opCode < 0) {\n        // Negative numbers are element indexes.\n        setSelectedIndex(~opCode);\n      } else {\n        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n        const directiveIdx = opCode;\n        const bindingRootIndx = hostBindingOpCodes[++i];\n        const hostBindingFn = hostBindingOpCodes[++i];\n        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n        const context = lView[directiveIdx];\n        profiler(24 /* ProfilerEvent.HostBindingsUpdateStart */, context);\n        hostBindingFn(2 /* RenderFlags.Update */, context);\n        profiler(25 /* ProfilerEvent.HostBindingsUpdateEnd */, context);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n  }\n}\n\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nfunction markViewDirty(lView, source) {\n  const dirtyBitsToUse = isRefreshingViews() ?\n  // When we are actively refreshing views, we only use the `Dirty` bit to mark a view\n  64 /* LViewFlags.Dirty */ :\n  // When we are not actively refreshing a view tree, it is absolutely\n  // valid to update state and mark views dirty. We use the `RefreshView` flag in this\n  // case to allow synchronously rerunning change detection. This applies today to\n  // afterRender hooks as well as animation listeners which execute after detecting\n  // changes in a view when the render factory flushes.\n  1024 /* LViewFlags.RefreshView */ | 64 /* LViewFlags.Dirty */;\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(source);\n  while (lView) {\n    lView[FLAGS] |= dirtyBitsToUse;\n    const parent = getLViewParent(lView);\n    // Stop traversing up as soon as you find a root view that wasn't attached to any container\n    if (isRootView(lView) && !parent) {\n      return lView;\n    }\n    // continue otherwise\n    lView = parent;\n  }\n  return null;\n}\n\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nfunction createLContainer(hostNative, currentView, native, tNode) {\n  ngDevMode && assertLView(currentView);\n  const lContainer = [hostNative,\n  // host native\n  true,\n  // Boolean `true` in this position signifies that this is an `LContainer`\n  0,\n  // flags\n  currentView,\n  // parent\n  null,\n  // next\n  tNode,\n  // t_host\n  null,\n  // dehydrated views\n  native,\n  // native,\n  null,\n  // view refs\n  null // moved views\n  ];\n  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');\n  return lContainer;\n}\nfunction getLViewFromLContainer(lContainer, index) {\n  const adjustedIndex = CONTAINER_HEADER_OFFSET + index;\n  // avoid reading past the array boundaries\n  if (adjustedIndex < lContainer.length) {\n    const lView = lContainer[adjustedIndex];\n    ngDevMode && assertLView(lView);\n    return lView;\n  }\n  return undefined;\n}\nfunction addLViewToLContainer(lContainer, lView, index, addToDOM = true) {\n  const tView = lView[TVIEW];\n  // Insert into the view tree so the new view can be change-detected\n  insertView(tView, lView, lContainer, index);\n  // Insert elements that belong to this view into the DOM tree\n  if (addToDOM) {\n    const beforeNode = getBeforeNodeForView(index, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = renderer.parentNode(lContainer[NATIVE]);\n    if (parentRNode !== null) {\n      addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n  }\n  // When in hydration mode, reset the pointer to the first child in\n  // the dehydrated view. This indicates that the view was hydrated and\n  // further attaching/detaching should work with this view as normal.\n  const hydrationInfo = lView[HYDRATION];\n  if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {\n    hydrationInfo.firstChild = null;\n  }\n}\nfunction removeLViewFromLContainer(lContainer, index) {\n  const lView = detachView(lContainer, index);\n  if (lView !== undefined) {\n    destroyLView(lView[TVIEW], lView);\n  }\n  return lView;\n}\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex) {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n    }\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);\n    // notify query that a view has been removed\n    const lQueries = removedLView[QUERIES];\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~128 /* LViewFlags.Attached */;\n  }\n  return viewToDetach;\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nfunction insertView(tView, lView, lContainer, index) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n  lView[PARENT] = lContainer;\n  // track views where declaration and insertion points are different\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  }\n  // notify query that a new view has been added\n  const lQueries = lView[QUERIES];\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  }\n  updateAncestorTraversalFlagsOnAttach(lView);\n  // Sets the attached flag\n  lView[FLAGS] |= 128 /* LViewFlags.Attached */;\n}\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer or attached directly to ApplicationRef.\n */\nfunction trackMovedView(declarationContainer, lView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const parent = lView[PARENT];\n  ngDevMode && assertDefined(parent, 'missing parent');\n  if (isLView(parent)) {\n    declarationContainer[FLAGS] |= 2 /* LContainerFlags.HasTransplantedViews */;\n  } else {\n    const insertedComponentLView = parent[PARENT][DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n    if (declaredComponentLView !== insertedComponentLView) {\n      // At this point the declaration-component is not same as insertion-component; this means that\n      // this is a transplanted view. Mark the declared lView as having transplanted views so that\n      // those views can participate in CD.\n      declarationContainer[FLAGS] |= 2 /* LContainerFlags.HasTransplantedViews */;\n    }\n  }\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\nclass ViewRef {\n  _lView;\n  _cdRefInjectingView;\n  _appRef = null;\n  _attachedToViewContainer = false;\n  exhaustive;\n  get rootNodes() {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n  constructor(\n  /**\n   * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n   *\n   * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n   * component.\n   *\n   * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n   * view.\n   *\n   * @internal\n   */\n  _lView,\n  /**\n   * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n   * requested.\n   *\n   * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n   */\n  _cdRefInjectingView) {\n    this._lView = _lView;\n    this._cdRefInjectingView = _cdRefInjectingView;\n  }\n  get context() {\n    return this._lView[CONTEXT];\n  }\n  /**\n   * @deprecated Replacing the full context object is not supported. Modify the context\n   *   directly, or consider using a `Proxy` if you need to replace the full object.\n   * // TODO(devversion): Remove this.\n   */\n  set context(value) {\n    if (ngDevMode) {\n      // Note: We have a warning message here because the `@deprecated` JSDoc will not be picked\n      // up for assignments on the setter. We want to let users know about the deprecated usage.\n      console.warn('Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.');\n    }\n    this._lView[CONTEXT] = value;\n  }\n  get destroyed() {\n    return isDestroyed(this._lView);\n  }\n  destroy() {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS];\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n        if (index > -1) {\n          ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n          detachView(parent, index);\n          removeFromArray(viewRefs, index);\n        }\n      }\n      this._attachedToViewContainer = false;\n    }\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n  onDestroy(callback) {\n    storeLViewOnDestroy(this._lView, callback);\n  }\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```ts\n   * @Component({\n   *   selector: 'app-root',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n  markForCheck() {\n    markViewDirty(this._cdRefInjectingView || this._lView, 4 /* NotificationSource.MarkForCheck */);\n  }\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```ts\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     @for(d of dataProvider.data; track $index) {\n   *        <li>Data {{d}}</li>\n   *     }\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n  detach() {\n    this._lView[FLAGS] &= ~128 /* LViewFlags.Attached */;\n  }\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```ts\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app-root',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n  reattach() {\n    updateAncestorTraversalFlagsOnAttach(this._lView);\n    this._lView[FLAGS] |= 128 /* LViewFlags.Attached */;\n  }\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach} for more information.\n   */\n  detectChanges() {\n    // Add `RefreshView` flag to ensure this view is refreshed if not already dirty.\n    // `RefreshView` flag is used intentionally over `Dirty` because it gets cleared before\n    // executing any of the actual refresh code while the `Dirty` flag doesn't get cleared\n    // until the end of the refresh. Using `RefreshView` prevents creating a potential difference\n    // in the state of the LViewFlags during template execution.\n    this._lView[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n    detectChangesInternal(this._lView);\n  }\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n  checkNoChanges() {\n    if (!ngDevMode) return;\n    try {\n      this.exhaustive ??= this._lView[INJECTOR].get(UseExhaustiveCheckNoChanges, USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT);\n    } catch {\n      this.exhaustive = USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT;\n    }\n    checkNoChangesInternal(this._lView, this.exhaustive);\n  }\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached directly to the ApplicationRef!');\n    }\n    this._attachedToViewContainer = true;\n  }\n  detachFromAppRef() {\n    this._appRef = null;\n    const isRoot = isRootView(this._lView);\n    const declarationContainer = this._lView[DECLARATION_LCONTAINER];\n    if (declarationContainer !== null && !isRoot) {\n      detachMovedView(declarationContainer, this._lView);\n    }\n    detachViewFromDOM(this._lView[TVIEW], this._lView);\n  }\n  attachToAppRef(appRef) {\n    if (this._attachedToViewContainer) {\n      throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n    const isRoot = isRootView(this._lView);\n    const declarationContainer = this._lView[DECLARATION_LCONTAINER];\n    if (declarationContainer !== null && !isRoot) {\n      trackMovedView(declarationContainer, this._lView);\n    }\n    updateAncestorTraversalFlagsOnAttach(this._lView);\n  }\n}\n/**\n * Reports whether the given view is considered dirty according to the different marking mechanisms.\n */\nfunction isViewDirty(view) {\n  return requiresRefreshOrTraversal(view._lView) || !!(view._lView[FLAGS] & 64 /* LViewFlags.Dirty */);\n}\nfunction markForRefresh(view) {\n  // This function is only used by elements where _cdRefInjectingView is the same as _lView\n  markViewForRefresh(view._lView);\n}\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see {@link ViewContainerRef}\n *\n * @publicApi\n */\nlet TemplateRef = /*#__PURE__*/(() => {\n  class TemplateRef {\n    _declarationLView;\n    _declarationTContainer;\n    /**\n     * The anchor element in the parent view for this embedded view.\n     *\n     * The data-binding and [injection contexts](guide/di/dependency-injection-context) of embedded\n     * views created from this `TemplateRef` inherit from the contexts of this location.\n     *\n     * Typically new embedded views are attached to the view container of this location, but in\n     * advanced use-cases, the view can be attached to a different container while keeping the\n     * data-binding and injection context from the original location.\n     *\n     */\n    elementRef;\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ELEMENT_ID__ = injectTemplateRef;\n    /** @internal */\n    constructor(_declarationLView, _declarationTContainer, elementRef) {\n      this._declarationLView = _declarationLView;\n      this._declarationTContainer = _declarationTContainer;\n      this.elementRef = elementRef;\n    }\n    /**\n     * Returns an `ssrId` associated with a TView, which was used to\n     * create this instance of the `TemplateRef`.\n     *\n     * @internal\n     */\n    get ssrId() {\n      return this._declarationTContainer.tView?.ssrId || null;\n    }\n    /**\n     * Instantiates an unattached embedded view based on this template.\n     * @param context The data-binding context of the embedded view, as declared\n     * in the `<ng-template>` usage.\n     * @param injector Injector to be used within the embedded view.\n     * @returns The new embedded view object.\n     */\n    createEmbeddedView(context, injector) {\n      return this.createEmbeddedViewImpl(context, injector);\n    }\n    /**\n     * Implementation of the `createEmbeddedView` function.\n     *\n     * This implementation is internal and allows framework code\n     * to invoke it with extra parameters (e.g. for hydration) without\n     * affecting public API.\n     *\n     * @internal\n     */\n    createEmbeddedViewImpl(context, injector, dehydratedView) {\n      const embeddedLView = createAndRenderEmbeddedLView(this._declarationLView, this._declarationTContainer, context, {\n        embeddedViewInjector: injector,\n        dehydratedView\n      });\n      return new ViewRef(embeddedLView);\n    }\n  }\n  return TemplateRef;\n})();\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nfunction injectTemplateRef() {\n  return createTemplateRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nfunction createTemplateRef(hostTNode, hostLView) {\n  if (hostTNode.type & 4 /* TNodeType.Container */) {\n    ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\n    return new TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));\n  }\n  return null;\n}\nconst AT_THIS_LOCATION = '<-- AT THIS LOCATION';\n/**\n * Retrieves a user friendly string for a given TNodeType for use in\n * friendly error messages\n *\n * @param tNodeType\n * @returns\n */\nfunction getFriendlyStringFromTNodeType(tNodeType) {\n  switch (tNodeType) {\n    case 4 /* TNodeType.Container */:\n      return 'view container';\n    case 2 /* TNodeType.Element */:\n      return 'element';\n    case 8 /* TNodeType.ElementContainer */:\n      return 'ng-container';\n    case 32 /* TNodeType.Icu */:\n      return 'icu';\n    case 64 /* TNodeType.Placeholder */:\n      return 'i18n';\n    case 16 /* TNodeType.Projection */:\n      return 'projection';\n    case 1 /* TNodeType.Text */:\n      return 'text';\n    case 128 /* TNodeType.LetDeclaration */:\n      return '@let';\n    default:\n      // This should not happen as we cover all possible TNode types above.\n      return '<unknown>';\n  }\n}\n/**\n * Validates that provided nodes match during the hydration process.\n */\nfunction validateMatchingNode(node, nodeType, tagName, lView, tNode, isViewContainerAnchor = false) {\n  if (!node || node.nodeType !== nodeType || node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() !== tagName?.toLowerCase()) {\n    const expectedNode = shortRNodeDescription(nodeType, tagName, null);\n    let header = `During hydration Angular expected ${expectedNode} but `;\n    const hostComponentDef = getDeclarationComponentDef(lView);\n    const componentClassName = hostComponentDef?.type?.name;\n    const expectedDom = describeExpectedDom(lView, tNode, isViewContainerAnchor);\n    const expected = `Angular expected this DOM:\\n\\n${expectedDom}\\n\\n`;\n    let actual = '';\n    const componentHostElement = unwrapRNode(lView[HOST]);\n    if (!node) {\n      // No node found during hydration.\n      header += `the node was not found.\\n\\n`;\n      // Since the node is missing, we use the closest node to attach the error to\n      markRNodeAsHavingHydrationMismatch(componentHostElement, expectedDom);\n    } else {\n      const actualNode = shortRNodeDescription(node.nodeType, node.tagName ?? null, node.textContent ?? null);\n      header += `found ${actualNode}.\\n\\n`;\n      const actualDom = describeDomFromNode(node);\n      actual = `Actual DOM is:\\n\\n${actualDom}\\n\\n`;\n      // DevTools only report hydration issues on the component level, so we attach extra debug\n      // info to a component host element to make it available to DevTools.\n      markRNodeAsHavingHydrationMismatch(componentHostElement, expectedDom, actualDom);\n    }\n    const footer = getHydrationErrorFooter(componentClassName);\n    const message = header + expected + actual + getHydrationAttributeNote() + footer;\n    throw new RuntimeError(-500 /* RuntimeErrorCode.HYDRATION_NODE_MISMATCH */, message);\n  }\n}\n/**\n * Validates that a given node has sibling nodes\n */\nfunction validateSiblingNodeExists(node) {\n  validateNodeExists(node);\n  if (!node.nextSibling) {\n    const header = 'During hydration Angular expected more sibling nodes to be present.\\n\\n';\n    const actual = `Actual DOM is:\\n\\n${describeDomFromNode(node)}\\n\\n`;\n    const footer = getHydrationErrorFooter();\n    const message = header + actual + footer;\n    markRNodeAsHavingHydrationMismatch(node, '', actual);\n    throw new RuntimeError(-501 /* RuntimeErrorCode.HYDRATION_MISSING_SIBLINGS */, message);\n  }\n}\n/**\n * Validates that a node exists or throws\n */\nfunction validateNodeExists(node, lView = null, tNode = null) {\n  if (!node) {\n    const header = 'During hydration, Angular expected an element to be present at this location.\\n\\n';\n    let expected = '';\n    let footer = '';\n    if (lView !== null && tNode !== null) {\n      expected = describeExpectedDom(lView, tNode, false);\n      footer = getHydrationErrorFooter();\n      // Since the node is missing, we use the closest node to attach the error to\n      markRNodeAsHavingHydrationMismatch(unwrapRNode(lView[HOST]), expected, '');\n    }\n    throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, `${header}${expected}\\n\\n${footer}`);\n  }\n}\n/**\n * Builds the hydration error message when a node is not found\n *\n * @param lView the LView where the node exists\n * @param tNode the TNode\n */\nfunction nodeNotFoundError(lView, tNode) {\n  const header = 'During serialization, Angular was unable to find an element in the DOM:\\n\\n';\n  const expected = `${describeExpectedDom(lView, tNode, false)}\\n\\n`;\n  const footer = getHydrationErrorFooter();\n  throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + expected + footer);\n}\n/**\n * Builds a hydration error message when a node is not found at a path location\n *\n * @param host the Host Node\n * @param path the path to the node\n */\nfunction nodeNotFoundAtPathError(host, path) {\n  const header = `During hydration Angular was unable to locate a node ` + `using the \"${path}\" path, starting from the ${describeRNode(host)} node.\\n\\n`;\n  const footer = getHydrationErrorFooter();\n  markRNodeAsHavingHydrationMismatch(host);\n  throw new RuntimeError(-502 /* RuntimeErrorCode.HYDRATION_MISSING_NODE */, header + footer);\n}\n/**\n * Builds the hydration error message in the case that dom nodes are created outside of\n * the Angular context and are being used as projected nodes\n *\n * @param lView the LView\n * @param tNode the TNode\n * @returns an error\n */\nfunction unsupportedProjectionOfDomNodes(rNode) {\n  const header = 'During serialization, Angular detected DOM nodes ' + 'that were created outside of Angular context and provided as projectable nodes ' + '(likely via `ViewContainerRef.createComponent` or `createComponent` APIs). ' + 'Hydration is not supported for such cases, consider refactoring the code to avoid ' + 'this pattern or using `ngSkipHydration` on the host element of the component.\\n\\n';\n  const actual = `${describeDomFromNode(rNode)}\\n\\n`;\n  const message = header + actual + getHydrationAttributeNote();\n  return new RuntimeError(-503 /* RuntimeErrorCode.UNSUPPORTED_PROJECTION_DOM_NODES */, message);\n}\n/**\n * Builds the hydration error message in the case that ngSkipHydration was used on a\n * node that is not a component host element or host binding\n *\n * @param rNode the HTML Element\n * @returns an error\n */\nfunction invalidSkipHydrationHost(rNode) {\n  const header = 'The `ngSkipHydration` flag is applied on a node ' + \"that doesn't act as a component host. Hydration can be \" + 'skipped only on per-component basis.\\n\\n';\n  const actual = `${describeDomFromNode(rNode)}\\n\\n`;\n  const footer = 'Please move the `ngSkipHydration` attribute to the component host element.\\n\\n';\n  const message = header + actual + footer;\n  return new RuntimeError(-504 /* RuntimeErrorCode.INVALID_SKIP_HYDRATION_HOST */, message);\n}\n// Stringification methods\n/**\n * Stringifies a given TNode's attributes\n *\n * @param tNode a provided TNode\n * @returns string\n */\nfunction stringifyTNodeAttrs(tNode) {\n  const results = [];\n  if (tNode.attrs) {\n    for (let i = 0; i < tNode.attrs.length;) {\n      const attrName = tNode.attrs[i++];\n      // Once we reach the first flag, we know that the list of\n      // attributes is over.\n      if (typeof attrName == 'number') {\n        break;\n      }\n      const attrValue = tNode.attrs[i++];\n      results.push(`${attrName}=\"${shorten(attrValue)}\"`);\n    }\n  }\n  return results.join(' ');\n}\n/**\n * The list of internal attributes that should be filtered out while\n * producing an error message.\n */\nconst internalAttrs = /*#__PURE__*/new Set(['ngh', 'ng-version', 'ng-server-context']);\n/**\n * Stringifies an HTML Element's attributes\n *\n * @param rNode an HTML Element\n * @returns string\n */\nfunction stringifyRNodeAttrs(rNode) {\n  const results = [];\n  for (let i = 0; i < rNode.attributes.length; i++) {\n    const attr = rNode.attributes[i];\n    if (internalAttrs.has(attr.name)) continue;\n    results.push(`${attr.name}=\"${shorten(attr.value)}\"`);\n  }\n  return results.join(' ');\n}\n// Methods for Describing the DOM\n/**\n * Converts a tNode to a helpful readable string value for use in error messages\n *\n * @param tNode a given TNode\n * @param innerContent the content of the node\n * @returns string\n */\nfunction describeTNode(tNode, innerContent = '…') {\n  switch (tNode.type) {\n    case 1 /* TNodeType.Text */:\n      const content = tNode.value ? `(${tNode.value})` : '';\n      return `#text${content}`;\n    case 2 /* TNodeType.Element */:\n      const attrs = stringifyTNodeAttrs(tNode);\n      const tag = tNode.value.toLowerCase();\n      return `<${tag}${attrs ? ' ' + attrs : ''}>${innerContent}</${tag}>`;\n    case 8 /* TNodeType.ElementContainer */:\n      return '<!-- ng-container -->';\n    case 4 /* TNodeType.Container */:\n      return '<!-- container -->';\n    default:\n      const typeAsString = getFriendlyStringFromTNodeType(tNode.type);\n      return `#node(${typeAsString})`;\n  }\n}\n/**\n * Converts an RNode to a helpful readable string value for use in error messages\n *\n * @param rNode a given RNode\n * @param innerContent the content of the node\n * @returns string\n */\nfunction describeRNode(rNode, innerContent = '…') {\n  const node = rNode;\n  switch (node.nodeType) {\n    case Node.ELEMENT_NODE:\n      const tag = node.tagName.toLowerCase();\n      const attrs = stringifyRNodeAttrs(node);\n      return `<${tag}${attrs ? ' ' + attrs : ''}>${innerContent}</${tag}>`;\n    case Node.TEXT_NODE:\n      const content = node.textContent ? shorten(node.textContent) : '';\n      return `#text${content ? `(${content})` : ''}`;\n    case Node.COMMENT_NODE:\n      return `<!-- ${shorten(node.textContent ?? '')} -->`;\n    default:\n      return `#node(${node.nodeType})`;\n  }\n}\n/**\n * Builds the string containing the expected DOM present given the LView and TNode\n * values for a readable error message\n *\n * @param lView the lView containing the DOM\n * @param tNode the tNode\n * @param isViewContainerAnchor boolean\n * @returns string\n */\nfunction describeExpectedDom(lView, tNode, isViewContainerAnchor) {\n  const spacer = '  ';\n  let content = '';\n  if (tNode.prev) {\n    content += spacer + '…\\n';\n    content += spacer + describeTNode(tNode.prev) + '\\n';\n  } else if (tNode.type && tNode.type & 12 /* TNodeType.AnyContainer */) {\n    content += spacer + '…\\n';\n  }\n  if (isViewContainerAnchor) {\n    content += spacer + describeTNode(tNode) + '\\n';\n    content += spacer + `<!-- container -->  ${AT_THIS_LOCATION}\\n`;\n  } else {\n    content += spacer + describeTNode(tNode) + `  ${AT_THIS_LOCATION}\\n`;\n  }\n  content += spacer + '…\\n';\n  const parentRNode = tNode.type ? getParentRElement(lView[TVIEW], tNode, lView) : null;\n  if (parentRNode) {\n    content = describeRNode(parentRNode, '\\n' + content);\n  }\n  return content;\n}\n/**\n * Builds the string containing the DOM present around a given RNode for a\n * readable error message\n *\n * @param node the RNode\n * @returns string\n */\nfunction describeDomFromNode(node) {\n  const spacer = '  ';\n  let content = '';\n  const currentNode = node;\n  if (currentNode.previousSibling) {\n    content += spacer + '…\\n';\n    content += spacer + describeRNode(currentNode.previousSibling) + '\\n';\n  }\n  content += spacer + describeRNode(currentNode) + `  ${AT_THIS_LOCATION}\\n`;\n  if (node.nextSibling) {\n    content += spacer + '…\\n';\n  }\n  if (node.parentNode) {\n    content = describeRNode(currentNode.parentNode, '\\n' + content);\n  }\n  return content;\n}\n/**\n * Shortens the description of a given RNode by its type for readability\n *\n * @param nodeType the type of node\n * @param tagName the node tag name\n * @param textContent the text content in the node\n * @returns string\n */\nfunction shortRNodeDescription(nodeType, tagName, textContent) {\n  switch (nodeType) {\n    case Node.ELEMENT_NODE:\n      return `<${tagName.toLowerCase()}>`;\n    case Node.TEXT_NODE:\n      const content = textContent ? ` (with the \"${shorten(textContent)}\" content)` : '';\n      return `a text node${content}`;\n    case Node.COMMENT_NODE:\n      return 'a comment node';\n    default:\n      return `#node(nodeType=${nodeType})`;\n  }\n}\n/**\n * Builds the footer hydration error message\n *\n * @param componentClassName the name of the component class\n * @returns string\n */\nfunction getHydrationErrorFooter(componentClassName) {\n  const componentInfo = componentClassName ? `the \"${componentClassName}\"` : 'corresponding';\n  return `To fix this problem:\\n` + `  * check ${componentInfo} component for hydration-related issues\\n` + `  * check to see if your template has valid HTML structure\\n` + `  * or skip hydration by adding the \\`ngSkipHydration\\` attribute ` + `to its host node in a template\\n\\n`;\n}\n/**\n * An attribute related note for hydration errors\n */\nfunction getHydrationAttributeNote() {\n  return 'Note: attributes are only displayed to better represent the DOM' + ' but have no effect on hydration mismatches.\\n\\n';\n}\n// Node string utility functions\n/**\n * Strips all newlines out of a given string\n *\n * @param input a string to be cleared of new line characters\n * @returns\n */\nfunction stripNewlines(input) {\n  return input.replace(/\\s+/gm, '');\n}\n/**\n * Reduces a string down to a maximum length of characters with ellipsis for readability\n *\n * @param input a string input\n * @param maxLength a maximum length in characters\n * @returns string\n */\nfunction shorten(input, maxLength = 50) {\n  if (!input) {\n    return '';\n  }\n  input = stripNewlines(input);\n  return input.length > maxLength ? `${input.substring(0, maxLength - 1)}…` : input;\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {\n  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n  } else {\n    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n    return unwrapRNode(lView[insertBeforeIndex]);\n  }\n}\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {\n  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n  if (Array.isArray(tNodeInsertBeforeIndex)) {\n    // An array indicates that there are i18n nodes that need to be added as children of this\n    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n    // only now can be added. The first element of the array is the normal index where we should\n    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n    // `childRNode`.\n    ngDevMode && assertDomNode(childRNode);\n    let i18nParent = childRNode;\n    let anchorRNode = null;\n    if (!(childTNode.type & 3 /* TNodeType.AnyRNode */)) {\n      anchorRNode = i18nParent;\n      i18nParent = parentRElement;\n    }\n    if (i18nParent !== null && childTNode.componentOffset === -1) {\n      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n        // see `assertDomNode` below.\n        const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n      }\n    }\n  }\n}\nfunction getOrCreateTNode(tView, index, type, name, attrs) {\n  ngDevMode && index !== 0 &&\n  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, \"TNodes can't be in the LView header.\");\n  // Keep this function short, so that the VM will inline it.\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index];\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= 32 /* TNodeFlags.isDetached */;\n    }\n  } else if (tNode.type & 64 /* TNodeType.Placeholder */) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n  setCurrentTNode(tNode, true);\n  return tNode;\n}\nfunction createTNodeAtIndex(tView, index, type, name, attrs) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n  // Parents cannot cross component boundaries because components will be used in multiple places.\n  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs);\n  // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n  linkTNodeInTView(tView, tNode, currentTNode, isParent);\n  return tNode;\n}\nfunction linkTNodeInTView(tView, tNode, currentTNode, isParent) {\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n        tNode.prev = currentTNode;\n      }\n    }\n  }\n}\nfunction createTNode(tView, tParent, type, index, value, attrs) {\n  ngDevMode && index !== 0 &&\n  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, \"TNodes can't be in the LView header.\");\n  ngDevMode && assertNotSame(attrs, undefined, \"'undefined' is not valid value for 'attrs'\");\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  let flags = 0;\n  if (isInSkipHydrationBlock$1()) {\n    flags |= 128 /* TNodeFlags.inSkipHydrationBlock */;\n  }\n  // TODO: would it be helpful to use a prototypal inheritance here, similar to the way we do so with signals?\n  const tNode = {\n    type,\n    index,\n    insertBeforeIndex: null,\n    injectorIndex,\n    directiveStart: -1,\n    directiveEnd: -1,\n    directiveStylingLast: -1,\n    componentOffset: -1,\n    propertyBindings: null,\n    flags,\n    providerIndexes: 0,\n    value: value,\n    attrs: attrs,\n    mergedAttrs: null,\n    localNames: null,\n    initialInputs: null,\n    inputs: null,\n    hostDirectiveInputs: null,\n    outputs: null,\n    hostDirectiveOutputs: null,\n    directiveToIndex: null,\n    tView: null,\n    next: null,\n    prev: null,\n    projectionNext: null,\n    child: null,\n    parent: tParent,\n    projection: null,\n    styles: null,\n    stylesWithoutHost: null,\n    residualStyles: undefined,\n    classes: null,\n    classesWithoutHost: null,\n    residualClasses: undefined,\n    classBindings: 0,\n    styleBindings: 0\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n  return tNode;\n}\n\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\nfunction addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {\n  // Start with Rule1\n  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n  previousTNodes.push(newTNode);\n  if (previousTNodes.length > 1) {\n    for (let i = previousTNodes.length - 2; i >= 0; i--) {\n      const existingTNode = previousTNodes[i];\n      // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n      // It is safe to ignore them.\n      if (!isI18nText(existingTNode)) {\n        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {\n          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n          // then add the `insertBeforeIndex`.\n          setInsertBeforeIndex(existingTNode, newTNode.index);\n        }\n      }\n    }\n  }\n}\nfunction isI18nText(tNode) {\n  return !(tNode.type & 64 /* TNodeType.Placeholder */);\n}\nfunction isNewTNodeCreatedBefore(existingTNode, newTNode) {\n  return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\nfunction getInsertBeforeIndex(tNode) {\n  const index = tNode.insertBeforeIndex;\n  return Array.isArray(index) ? index[0] : index;\n}\nfunction setInsertBeforeIndex(tNode, value) {\n  const index = tNode.insertBeforeIndex;\n  if (Array.isArray(index)) {\n    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n    index[0] = value;\n  } else {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    tNode.insertBeforeIndex = value;\n  }\n}\n\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\nfunction getTIcu(tView, index) {\n  const value = tView.data[index];\n  if (value === null || typeof value === 'string') return null;\n  if (ngDevMode && !(value.hasOwnProperty('tView') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n    throwError(\"We expect to get 'null'|'TIcu'|'TIcuContainer', but got: \" + value);\n  }\n  // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n  // will be just two cases which fits into the browser inline cache (inline cache can take up to\n  // 4)\n  const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value : value.value;\n  ngDevMode && assertTIcu(tIcu);\n  return tIcu;\n}\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\nfunction setTIcu(tView, index, tIcu) {\n  const tNode = tView.data[index];\n  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty('tView'), true, \"We expect to get 'null'|'TIcuContainer'\");\n  if (tNode === null) {\n    tView.data[index] = tIcu;\n  } else {\n    ngDevMode && assertTNodeType(tNode, 32 /* TNodeType.Icu */);\n    tNode.value = tIcu;\n  }\n}\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction setTNodeInsertBeforeIndex(tNode, index) {\n  ngDevMode && assertTNode(tNode);\n  let insertBeforeIndex = tNode.insertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    insertBeforeIndex = tNode.insertBeforeIndex = [null /* may be updated to number later */, index];\n  } else {\n    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n    insertBeforeIndex.push(index);\n  }\n}\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\nfunction createTNodePlaceholder(tView, previousTNodes, index) {\n  const tNode = createTNodeAtIndex(tView, index, 64 /* TNodeType.Placeholder */, null, null);\n  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n  return tNode;\n}\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\nfunction getCurrentICUCaseIndex(tIcu, lView) {\n  const currentCase = lView[tIcu.currentCaseLViewIndex];\n  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;\n}\nfunction getParentFromIcuCreateOpCode(mergedCode) {\n  return mergedCode >>> 17 /* IcuCreateOpCode.SHIFT_PARENT */;\n}\nfunction getRefFromIcuCreateOpCode(mergedCode) {\n  return (mergedCode & 131070 /* IcuCreateOpCode.MASK_REF */) >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\nfunction getInstructionFromIcuCreateOpCode(mergedCode) {\n  return mergedCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */;\n}\nfunction icuCreateOpCode(opCode, parentIdx, refIdx) {\n  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n  return opCode | parentIdx << 17 /* IcuCreateOpCode.SHIFT_PARENT */ | refIdx << 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n// Returns whether the given value corresponds to a root template message,\n// or a sub-template.\nfunction isRootTemplateMessage(subTemplateIndex) {\n  return subTemplateIndex === -1;\n}\nfunction enterIcu(state, tIcu, lView) {\n  state.index = 0;\n  const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n  if (currentCase !== null) {\n    ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n    state.removes = tIcu.remove[currentCase];\n  } else {\n    state.removes = EMPTY_ARRAY;\n  }\n}\nfunction icuContainerIteratorNext(state) {\n  if (state.index < state.removes.length) {\n    const removeOpCode = state.removes[state.index++];\n    ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n    if (removeOpCode > 0) {\n      const rNode = state.lView[removeOpCode];\n      ngDevMode && assertDomNode(rNode);\n      return rNode;\n    } else {\n      state.stack.push(state.index, state.removes);\n      // ICUs are represented by negative indices\n      const tIcuIndex = ~removeOpCode;\n      const tIcu = state.lView[TVIEW].data[tIcuIndex];\n      ngDevMode && assertTIcu(tIcu);\n      enterIcu(state, tIcu, state.lView);\n      return icuContainerIteratorNext(state);\n    }\n  } else {\n    if (state.stack.length === 0) {\n      return null;\n    } else {\n      state.removes = state.stack.pop();\n      state.index = state.stack.pop();\n      return icuContainerIteratorNext(state);\n    }\n  }\n}\nfunction loadIcuContainerVisitor() {\n  const _state = {\n    stack: [],\n    index: -1\n  };\n  /**\n   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n   * to determine which root belong to the ICU.\n   *\n   * Example of usage.\n   * ```ts\n   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n   * let rNode: RNode|null;\n   * while(rNode = nextRNode()) {\n   *   console.log(rNode);\n   * }\n   * ```\n   *\n   * @param tIcuContainerNode Current `TIcuContainerNode`\n   * @param lView `LView` where the `RNode`s should be looked up.\n   */\n  function icuContainerIteratorStart(tIcuContainerNode, lView) {\n    _state.lView = lView;\n    while (_state.stack.length) _state.stack.pop();\n    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n    enterIcu(_state, tIcuContainerNode.value, lView);\n    return icuContainerIteratorNext.bind(null, _state);\n  }\n  return icuContainerIteratorStart;\n}\nfunction createIcuIterator(tIcu, lView) {\n  const state = {\n    stack: [],\n    index: -1,\n    lView\n  };\n  ngDevMode && assertTIcu(tIcu);\n  enterIcu(state, tIcu, lView);\n  return icuContainerIteratorNext.bind(null, state);\n}\n\n/**\n * Regexp that extracts a reference node information from the compressed node location.\n * The reference node is represented as either:\n *  - a number which points to an LView slot\n *  - the `b` char which indicates that the lookup should start from the `document.body`\n *  - the `h` char to start lookup from the component host node (`lView[HOST]`)\n */\nconst REF_EXTRACTOR_REGEXP = /* @__PURE__ */new RegExp(`^(\\\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`);\n/**\n * Helper function that takes a reference node location and a set of navigation steps\n * (from the reference node) to a target node and outputs a string that represents\n * a location.\n *\n * For example, given: referenceNode = 'b' (body) and path = ['firstChild', 'firstChild',\n * 'nextSibling'], the function returns: `bf2n`.\n */\nfunction compressNodeLocation(referenceNode, path) {\n  const result = [referenceNode];\n  for (const segment of path) {\n    const lastIdx = result.length - 1;\n    if (lastIdx > 0 && result[lastIdx - 1] === segment) {\n      // An empty string in a count slot represents 1 occurrence of an instruction.\n      const value = result[lastIdx] || 1;\n      result[lastIdx] = value + 1;\n    } else {\n      // Adding a new segment to the path.\n      // Using an empty string in a counter field to avoid encoding `1`s\n      // into the path, since they are implicit (e.g. `f1n1` vs `fn`), so\n      // it's enough to have a single char in this case.\n      result.push(segment, '');\n    }\n  }\n  return result.join('');\n}\n/**\n * Helper function that reverts the `compressNodeLocation` and transforms a given\n * string into an array where at 0th position there is a reference node info and\n * after that it contains information (in pairs) about a navigation step and the\n * number of repetitions.\n *\n * For example, the path like 'bf2n' will be transformed to:\n * ['b', 'firstChild', 2, 'nextSibling', 1].\n *\n * This information is later consumed by the code that navigates the DOM to find\n * a given node by its location.\n */\nfunction decompressNodeLocation(path) {\n  const matches = path.match(REF_EXTRACTOR_REGEXP);\n  const [_, refNodeId, refNodeName, rest] = matches;\n  // If a reference node is represented by an index, transform it to a number.\n  const ref = refNodeId ? parseInt(refNodeId, 10) : refNodeName;\n  const steps = [];\n  // Match all segments in a path.\n  for (const [_, step, count] of rest.matchAll(/(f|n)(\\d*)/g)) {\n    const repeat = parseInt(count, 10) || 1;\n    steps.push(step, repeat);\n  }\n  return [ref, ...steps];\n}\n\n/** Whether current TNode is a first node in an <ng-container>. */\nfunction isFirstElementInNgContainer(tNode) {\n  return !tNode.prev && tNode.parent?.type === 8 /* TNodeType.ElementContainer */;\n}\n/** Returns an instruction index (subtracting HEADER_OFFSET). */\nfunction getNoOffsetIndex(tNode) {\n  return tNode.index - HEADER_OFFSET;\n}\n/**\n * Check whether a given node exists, but is disconnected from the DOM.\n */\nfunction isDisconnectedNode(tNode, lView) {\n  return !(tNode.type & (16 /* TNodeType.Projection */ | 128 /* TNodeType.LetDeclaration */)) && !!lView[tNode.index] && isDisconnectedRNode(unwrapRNode(lView[tNode.index]));\n}\n/**\n * Check whether the given node exists, but is disconnected from the DOM.\n *\n * Note: we leverage the fact that we have this information available in the DOM emulation\n * layer (in Domino) for now. Longer-term solution should not rely on the DOM emulation and\n * only use internal data structures and state to compute this information.\n */\nfunction isDisconnectedRNode(rNode) {\n  return !!rNode && !rNode.isConnected;\n}\n/**\n * Locate a node in an i18n tree that corresponds to a given instruction index.\n *\n * @param hydrationInfo The hydration annotation data\n * @param noOffsetIndex the instruction index\n * @returns an RNode that corresponds to the instruction index\n */\nfunction locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex) {\n  const i18nNodes = hydrationInfo.i18nNodes;\n  if (i18nNodes) {\n    return i18nNodes.get(noOffsetIndex);\n  }\n  return undefined;\n}\n/**\n * Attempt to locate an RNode by a path, if it exists.\n *\n * @param hydrationInfo The hydration annotation data\n * @param lView the current lView\n * @param noOffsetIndex the instruction index\n * @returns an RNode that corresponds to the instruction index or null if no path exists\n */\nfunction tryLocateRNodeByPath(hydrationInfo, lView, noOffsetIndex) {\n  const nodes = hydrationInfo.data[NODES];\n  const path = nodes?.[noOffsetIndex];\n  return path ? locateRNodeByPath(path, lView) : null;\n}\n/**\n * Locate a node in DOM tree that corresponds to a given TNode.\n *\n * @param hydrationInfo The hydration annotation data\n * @param tView the current tView\n * @param lView the current lView\n * @param tNode the current tNode\n * @returns an RNode that represents a given tNode\n */\nfunction locateNextRNode(hydrationInfo, tView, lView, tNode) {\n  const noOffsetIndex = getNoOffsetIndex(tNode);\n  let native = locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex);\n  if (native === undefined) {\n    const nodes = hydrationInfo.data[NODES];\n    if (nodes?.[noOffsetIndex]) {\n      // We know the exact location of the node.\n      native = locateRNodeByPath(nodes[noOffsetIndex], lView);\n    } else if (tView.firstChild === tNode) {\n      // We create a first node in this view, so we use a reference\n      // to the first child in this DOM segment.\n      native = hydrationInfo.firstChild;\n    } else {\n      // Locate a node based on a previous sibling or a parent node.\n      const previousTNodeParent = tNode.prev === null;\n      const previousTNode = tNode.prev ?? tNode.parent;\n      ngDevMode && assertDefined(previousTNode, 'Unexpected state: current TNode does not have a connection ' + 'to the previous node or a parent node.');\n      if (isFirstElementInNgContainer(tNode)) {\n        const noOffsetParentIndex = getNoOffsetIndex(tNode.parent);\n        native = getSegmentHead(hydrationInfo, noOffsetParentIndex);\n      } else {\n        let previousRElement = getNativeByTNode(previousTNode, lView);\n        if (previousTNodeParent) {\n          native = previousRElement.firstChild;\n        } else {\n          // If the previous node is an element, but it also has container info,\n          // this means that we are processing a node like `<div #vcrTarget>`, which is\n          // represented in the DOM as `<div></div>...<!--container-->`.\n          // In this case, there are nodes *after* this element and we need to skip\n          // all of them to reach an element that we are looking for.\n          const noOffsetPrevSiblingIndex = getNoOffsetIndex(previousTNode);\n          const segmentHead = getSegmentHead(hydrationInfo, noOffsetPrevSiblingIndex);\n          if (previousTNode.type === 2 /* TNodeType.Element */ && segmentHead) {\n            const numRootNodesToSkip = calcSerializedContainerSize(hydrationInfo, noOffsetPrevSiblingIndex);\n            // `+1` stands for an anchor comment node after all the views in this container.\n            const nodesToSkip = numRootNodesToSkip + 1;\n            // First node after this segment.\n            native = siblingAfter(nodesToSkip, segmentHead);\n          } else {\n            native = previousRElement.nextSibling;\n          }\n        }\n      }\n    }\n  }\n  return native;\n}\n/**\n * Skips over a specified number of nodes and returns the next sibling node after that.\n */\nfunction siblingAfter(skip, from) {\n  let currentNode = from;\n  for (let i = 0; i < skip; i++) {\n    ngDevMode && validateSiblingNodeExists(currentNode);\n    currentNode = currentNode.nextSibling;\n  }\n  return currentNode;\n}\n/**\n * Helper function to produce a string representation of the navigation steps\n * (in terms of `nextSibling` and `firstChild` navigations). Used in error\n * messages in dev mode.\n */\nfunction stringifyNavigationInstructions(instructions) {\n  const container = [];\n  for (let i = 0; i < instructions.length; i += 2) {\n    const step = instructions[i];\n    const repeat = instructions[i + 1];\n    for (let r = 0; r < repeat; r++) {\n      container.push(step === NODE_NAVIGATION_STEP_FIRST_CHILD ? 'firstChild' : 'nextSibling');\n    }\n  }\n  return container.join('.');\n}\n/**\n * Helper function that navigates from a starting point node (the `from` node)\n * using provided set of navigation instructions (within `path` argument).\n */\nfunction navigateToNode(from, instructions) {\n  let node = from;\n  for (let i = 0; i < instructions.length; i += 2) {\n    const step = instructions[i];\n    const repeat = instructions[i + 1];\n    for (let r = 0; r < repeat; r++) {\n      if (ngDevMode && !node) {\n        throw nodeNotFoundAtPathError(from, stringifyNavigationInstructions(instructions));\n      }\n      switch (step) {\n        case NODE_NAVIGATION_STEP_FIRST_CHILD:\n          node = node.firstChild;\n          break;\n        case NODE_NAVIGATION_STEP_NEXT_SIBLING:\n          node = node.nextSibling;\n          break;\n      }\n    }\n  }\n  if (ngDevMode && !node) {\n    throw nodeNotFoundAtPathError(from, stringifyNavigationInstructions(instructions));\n  }\n  return node;\n}\n/**\n * Locates an RNode given a set of navigation instructions (which also contains\n * a starting point node info).\n */\nfunction locateRNodeByPath(path, lView) {\n  const [referenceNode, ...navigationInstructions] = decompressNodeLocation(path);\n  let ref;\n  if (referenceNode === REFERENCE_NODE_HOST) {\n    ref = lView[DECLARATION_COMPONENT_VIEW][HOST];\n  } else if (referenceNode === REFERENCE_NODE_BODY) {\n    ref = ɵɵresolveBody(lView[DECLARATION_COMPONENT_VIEW][HOST]);\n  } else {\n    const parentElementId = Number(referenceNode);\n    ref = unwrapRNode(lView[parentElementId + HEADER_OFFSET]);\n  }\n  return navigateToNode(ref, navigationInstructions);\n}\n/**\n * Generate a list of DOM navigation operations to get from node `start` to node `finish`.\n *\n * Note: assumes that node `start` occurs before node `finish` in an in-order traversal of the DOM\n * tree. That is, we should be able to get from `start` to `finish` purely by using `.firstChild`\n * and `.nextSibling` operations.\n */\nfunction navigateBetween(start, finish) {\n  if (start === finish) {\n    return [];\n  } else if (start.parentElement == null || finish.parentElement == null) {\n    return null;\n  } else if (start.parentElement === finish.parentElement) {\n    return navigateBetweenSiblings(start, finish);\n  } else {\n    // `finish` is a child of its parent, so the parent will always have a child.\n    const parent = finish.parentElement;\n    const parentPath = navigateBetween(start, parent);\n    const childPath = navigateBetween(parent.firstChild, finish);\n    if (!parentPath || !childPath) return null;\n    return [\n    // First navigate to `finish`'s parent\n    ...parentPath,\n    // Then to its first child.\n    NODE_NAVIGATION_STEP_FIRST_CHILD,\n    // And finally from that node to `finish` (maybe a no-op if we're already there).\n    ...childPath];\n  }\n}\n/**\n * Calculates a path between 2 sibling nodes (generates a number of `NextSibling` navigations).\n * Returns `null` if no such path exists between the given nodes.\n */\nfunction navigateBetweenSiblings(start, finish) {\n  const nav = [];\n  let node = null;\n  for (node = start; node != null && node !== finish; node = node.nextSibling) {\n    nav.push(NODE_NAVIGATION_STEP_NEXT_SIBLING);\n  }\n  // If the `node` becomes `null` or `undefined` at the end, that means that we\n  // didn't find the `end` node, thus return `null` (which would trigger serialization\n  // error to be produced).\n  return node == null ? null : nav;\n}\n/**\n * Calculates a path between 2 nodes in terms of `nextSibling` and `firstChild`\n * navigations:\n * - the `from` node is a known node, used as an starting point for the lookup\n *   (the `fromNodeName` argument is a string representation of the node).\n * - the `to` node is a node that the runtime logic would be looking up,\n *   using the path generated by this function.\n */\nfunction calcPathBetween(from, to, fromNodeName) {\n  const path = navigateBetween(from, to);\n  return path === null ? null : compressNodeLocation(fromNodeName, path);\n}\n/**\n * Invoked at serialization time (on the server) when a set of navigation\n * instructions needs to be generated for a TNode.\n */\nfunction calcPathForNode(tNode, lView, excludedParentNodes) {\n  let parentTNode = tNode.parent;\n  let parentIndex;\n  let parentRNode;\n  let referenceNodeName;\n  // Skip over all parent nodes that are disconnected from the DOM, such nodes\n  // can not be used as anchors.\n  //\n  // This might happen in certain content projection-based use-cases, where\n  // a content of an element is projected and used, when a parent element\n  // itself remains detached from DOM. In this scenario we try to find a parent\n  // element that is attached to DOM and can act as an anchor instead.\n  //\n  // It can also happen that the parent node should be excluded, for example,\n  // because it belongs to an i18n block, which requires paths which aren't\n  // relative to other views in an i18n block.\n  while (parentTNode !== null && (isDisconnectedNode(parentTNode, lView) || excludedParentNodes?.has(parentTNode.index))) {\n    parentTNode = parentTNode.parent;\n  }\n  if (parentTNode === null || !(parentTNode.type & 3 /* TNodeType.AnyRNode */)) {\n    // If there is no parent TNode or a parent TNode does not represent an RNode\n    // (i.e. not a DOM node), use component host element as a reference node.\n    parentIndex = referenceNodeName = REFERENCE_NODE_HOST;\n    parentRNode = lView[DECLARATION_COMPONENT_VIEW][HOST];\n  } else {\n    // Use parent TNode as a reference node.\n    parentIndex = parentTNode.index;\n    parentRNode = unwrapRNode(lView[parentIndex]);\n    referenceNodeName = renderStringify(parentIndex - HEADER_OFFSET);\n  }\n  let rNode = unwrapRNode(lView[tNode.index]);\n  if (tNode.type & (12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */)) {\n    // For <ng-container> nodes, instead of serializing a reference\n    // to the anchor comment node, serialize a location of the first\n    // DOM element. Paired with the container size (serialized as a part\n    // of `ngh.containers`), it should give enough information for runtime\n    // to hydrate nodes in this container.\n    const firstRNode = getFirstNativeNode(lView, tNode);\n    // If container is not empty, use a reference to the first element,\n    // otherwise, rNode would point to an anchor comment node.\n    if (firstRNode) {\n      rNode = firstRNode;\n    }\n  }\n  let path = calcPathBetween(parentRNode, rNode, referenceNodeName);\n  if (path === null && parentRNode !== rNode) {\n    // Searching for a path between elements within a host node failed.\n    // Trying to find a path to an element starting from the `document.body` instead.\n    //\n    // Important note: this type of reference is relatively unstable, since Angular\n    // may not be able to control parts of the page that the runtime logic navigates\n    // through. This is mostly needed to cover \"portals\" use-case (like menus, dialog boxes,\n    // etc), where nodes are content-projected (including direct DOM manipulations) outside\n    // of the host node. The better solution is to provide APIs to work with \"portals\",\n    // at which point this code path would not be needed.\n    const body = parentRNode.ownerDocument.body;\n    path = calcPathBetween(body, rNode, REFERENCE_NODE_BODY);\n    if (path === null) {\n      // If the path is still empty, it's likely that this node is detached and\n      // won't be found during hydration.\n      throw nodeNotFoundError(lView, tNode);\n    }\n  }\n  return path;\n}\n/**\n * Retrieves all comments nodes that contain ngh comments referring to a defer block\n */\nfunction gatherDeferBlocksCommentNodes(doc, node) {\n  const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {\n    acceptNode\n  });\n  let currentNode;\n  const nodesByBlockId = new Map();\n  while (currentNode = commentNodesIterator.nextNode()) {\n    const nghPattern = 'ngh=';\n    const content = currentNode?.textContent;\n    const nghIdx = content?.indexOf(nghPattern) ?? -1;\n    if (nghIdx > -1) {\n      const nghValue = content.substring(nghIdx + nghPattern.length).trim();\n      // Make sure the value has an expected format.\n      ngDevMode && assertEqual(nghValue.startsWith('d'), true, 'Invalid defer block id found in a comment node.');\n      nodesByBlockId.set(nghValue, currentNode);\n    }\n  }\n  return nodesByBlockId;\n}\nfunction acceptNode(node) {\n  return node.textContent?.trimStart().startsWith('ngh=') ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n}\nlet _isI18nHydrationSupportEnabled = false;\nlet _prepareI18nBlockForHydrationImpl = () => {\n  // noop unless `enablePrepareI18nBlockForHydrationImpl` is invoked.\n};\nfunction setIsI18nHydrationSupportEnabled(enabled) {\n  _isI18nHydrationSupportEnabled = enabled;\n}\nfunction isI18nHydrationSupportEnabled() {\n  return _isI18nHydrationSupportEnabled;\n}\n/**\n * Prepares an i18n block and its children, located at the given\n * view and instruction index, for hydration.\n *\n * @param lView lView with the i18n block\n * @param index index of the i18n block in the lView\n * @param parentTNode TNode of the parent of the i18n block\n * @param subTemplateIndex sub-template index, or -1 for the main template\n */\nfunction prepareI18nBlockForHydration(lView, index, parentTNode, subTemplateIndex) {\n  _prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex);\n}\nfunction enablePrepareI18nBlockForHydrationImpl() {\n  _prepareI18nBlockForHydrationImpl = prepareI18nBlockForHydrationImpl;\n}\nfunction isI18nHydrationEnabled(injector) {\n  injector = injector ?? inject(Injector);\n  return injector.get(IS_I18N_HYDRATION_ENABLED, false);\n}\n/**\n * Collects, if not already cached, all of the indices in the\n * given TView which are children of an i18n block.\n *\n * Since i18n blocks don't introduce a parent TNode, this is necessary\n * in order to determine which indices in a LView are translated.\n */\nfunction getOrComputeI18nChildren(tView, context) {\n  let i18nChildren = context.i18nChildren.get(tView);\n  if (i18nChildren === undefined) {\n    i18nChildren = collectI18nChildren(tView);\n    context.i18nChildren.set(tView, i18nChildren);\n  }\n  return i18nChildren;\n}\nfunction collectI18nChildren(tView) {\n  const children = new Set();\n  function collectI18nViews(node) {\n    children.add(node.index);\n    switch (node.kind) {\n      case 1 /* I18nNodeKind.ELEMENT */:\n      case 2 /* I18nNodeKind.PLACEHOLDER */:\n        {\n          for (const childNode of node.children) {\n            collectI18nViews(childNode);\n          }\n          break;\n        }\n      case 3 /* I18nNodeKind.ICU */:\n        {\n          for (const caseNodes of node.cases) {\n            for (const caseNode of caseNodes) {\n              collectI18nViews(caseNode);\n            }\n          }\n          break;\n        }\n    }\n  }\n  // Traverse through the AST of each i18n block in the LView,\n  // and collect every instruction index.\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    const tI18n = tView.data[i];\n    if (!tI18n || !tI18n.ast) {\n      continue;\n    }\n    for (const node of tI18n.ast) {\n      collectI18nViews(node);\n    }\n  }\n  return children.size === 0 ? null : children;\n}\n/**\n * Attempts to serialize i18n data for an i18n block, located at\n * the given view and instruction index.\n *\n * @param lView lView with the i18n block\n * @param index index of the i18n block in the lView\n * @param context the hydration context\n * @returns the i18n data, or null if there is no relevant data\n */\nfunction trySerializeI18nBlock(lView, index, context) {\n  if (!context.isI18nHydrationEnabled) {\n    return null;\n  }\n  const tView = lView[TVIEW];\n  const tI18n = tView.data[index];\n  if (!tI18n || !tI18n.ast) {\n    return null;\n  }\n  const parentTNode = tView.data[tI18n.parentTNodeIndex];\n  if (parentTNode && isI18nInSkipHydrationBlock(parentTNode)) {\n    return null;\n  }\n  const serializedI18nBlock = {\n    caseQueue: [],\n    disconnectedNodes: new Set(),\n    disjointNodes: new Set()\n  };\n  serializeI18nBlock(lView, serializedI18nBlock, context, tI18n.ast);\n  return serializedI18nBlock.caseQueue.length === 0 && serializedI18nBlock.disconnectedNodes.size === 0 && serializedI18nBlock.disjointNodes.size === 0 ? null : serializedI18nBlock;\n}\nfunction serializeI18nBlock(lView, serializedI18nBlock, context, nodes) {\n  let prevRNode = null;\n  for (const node of nodes) {\n    const nextRNode = serializeI18nNode(lView, serializedI18nBlock, context, node);\n    if (nextRNode) {\n      if (isDisjointNode(prevRNode, nextRNode)) {\n        serializedI18nBlock.disjointNodes.add(node.index - HEADER_OFFSET);\n      }\n      prevRNode = nextRNode;\n    }\n  }\n  return prevRNode;\n}\n/**\n * Helper to determine whether the given nodes are \"disjoint\".\n *\n * The i18n hydration process walks through the DOM and i18n nodes\n * at the same time. It expects the sibling DOM node of the previous\n * i18n node to be the first node of the next i18n node.\n *\n * In cases of content projection, this won't always be the case. So\n * when we detect that, we mark the node as \"disjoint\", ensuring that\n * we will serialize the path to the node. This way, when we hydrate the\n * i18n node, we will be able to find the correct place to start.\n */\nfunction isDisjointNode(prevNode, nextNode) {\n  return prevNode && prevNode.nextSibling !== nextNode;\n}\n/**\n * Process the given i18n node for serialization.\n * Returns the first RNode for the i18n node to begin hydration.\n */\nfunction serializeI18nNode(lView, serializedI18nBlock, context, node) {\n  const maybeRNode = unwrapRNode(lView[node.index]);\n  if (!maybeRNode || isDisconnectedRNode(maybeRNode)) {\n    serializedI18nBlock.disconnectedNodes.add(node.index - HEADER_OFFSET);\n    return null;\n  }\n  const rNode = maybeRNode;\n  switch (node.kind) {\n    case 0 /* I18nNodeKind.TEXT */:\n      {\n        processTextNodeBeforeSerialization(context, rNode);\n        break;\n      }\n    case 1 /* I18nNodeKind.ELEMENT */:\n    case 2 /* I18nNodeKind.PLACEHOLDER */:\n      {\n        serializeI18nBlock(lView, serializedI18nBlock, context, node.children);\n        break;\n      }\n    case 3 /* I18nNodeKind.ICU */:\n      {\n        const currentCase = lView[node.currentCaseLViewIndex];\n        if (currentCase != null) {\n          // i18n uses a negative value to signal a change to a new case, so we\n          // need to invert it to get the proper value.\n          const caseIdx = currentCase < 0 ? ~currentCase : currentCase;\n          serializedI18nBlock.caseQueue.push(caseIdx);\n          serializeI18nBlock(lView, serializedI18nBlock, context, node.cases[caseIdx]);\n        }\n        break;\n      }\n  }\n  return getFirstNativeNodeForI18nNode(lView, node);\n}\n/**\n * Helper function to get the first native node to begin hydrating\n * the given i18n node.\n */\nfunction getFirstNativeNodeForI18nNode(lView, node) {\n  const tView = lView[TVIEW];\n  const maybeTNode = tView.data[node.index];\n  if (isTNodeShape(maybeTNode)) {\n    // If the node is backed by an actual TNode, we can simply delegate.\n    return getFirstNativeNode(lView, maybeTNode);\n  } else if (node.kind === 3 /* I18nNodeKind.ICU */) {\n    // A nested ICU container won't have an actual TNode. In that case, we can use\n    // an iterator to find the first child.\n    const icuIterator = createIcuIterator(maybeTNode, lView);\n    let rNode = icuIterator();\n    // If the ICU container has no nodes, then we use the ICU anchor as the node.\n    return rNode ?? unwrapRNode(lView[node.index]);\n  } else {\n    // Otherwise, the node is a text or trivial element in an ICU container,\n    // and we can just use the RNode directly.\n    return unwrapRNode(lView[node.index]) ?? null;\n  }\n}\nfunction setCurrentNode(state, node) {\n  state.currentNode = node;\n}\n/**\n * Marks the current RNode as the hydration root for the given\n * AST node.\n */\nfunction appendI18nNodeToCollection(context, state, astNode) {\n  const noOffsetIndex = astNode.index - HEADER_OFFSET;\n  const {\n    disconnectedNodes\n  } = context;\n  const currentNode = state.currentNode;\n  if (state.isConnected) {\n    context.i18nNodes.set(noOffsetIndex, currentNode);\n    // We expect the node to be connected, so ensure that it\n    // is not in the set, regardless of whether we found it,\n    // so that the downstream error handling can provide the\n    // proper context.\n    disconnectedNodes.delete(noOffsetIndex);\n  } else {\n    disconnectedNodes.add(noOffsetIndex);\n  }\n  return currentNode;\n}\n/**\n * Skip over some sibling nodes during hydration.\n *\n * Note: we use this instead of `siblingAfter` as it's expected that\n * sometimes we might encounter null nodes. In those cases, we want to\n * defer to downstream error handling to provide proper context.\n */\nfunction skipSiblingNodes(state, skip) {\n  let currentNode = state.currentNode;\n  for (let i = 0; i < skip; i++) {\n    if (!currentNode) {\n      break;\n    }\n    currentNode = currentNode?.nextSibling ?? null;\n  }\n  return currentNode;\n}\n/**\n * Fork the given state into a new state for hydrating children.\n */\nfunction forkHydrationState(state, nextNode) {\n  return {\n    currentNode: nextNode,\n    isConnected: state.isConnected\n  };\n}\nfunction prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex) {\n  const hydrationInfo = lView[HYDRATION];\n  if (!hydrationInfo) {\n    return;\n  }\n  if (!isI18nHydrationSupportEnabled() || parentTNode && (isI18nInSkipHydrationBlock(parentTNode) || isDisconnectedNode$1(hydrationInfo, parentTNode.index - HEADER_OFFSET))) {\n    return;\n  }\n  const tView = lView[TVIEW];\n  const tI18n = tView.data[index];\n  ngDevMode && assertDefined(tI18n, 'Expected i18n data to be present in a given TView slot during hydration');\n  function findHydrationRoot() {\n    if (isRootTemplateMessage(subTemplateIndex)) {\n      // This is the root of an i18n block. In this case, our hydration root will\n      // depend on where our parent TNode (i.e. the block with i18n applied) is\n      // in the DOM.\n      ngDevMode && assertDefined(parentTNode, 'Expected parent TNode while hydrating i18n root');\n      const rootNode = locateNextRNode(hydrationInfo, tView, lView, parentTNode);\n      // If this i18n block is attached to an <ng-container>, then we want to begin\n      // hydrating directly with the RNode. Otherwise, for a TNode with a physical DOM\n      // element, we want to recurse into the first child and begin there.\n      return parentTNode.type & 8 /* TNodeType.ElementContainer */ ? rootNode : rootNode.firstChild;\n    }\n    // This is a nested template in an i18n block. In this case, the entire view\n    // is translated, and part of a dehydrated view in a container. This means that\n    // we can simply begin hydration with the first dehydrated child.\n    return hydrationInfo?.firstChild;\n  }\n  const currentNode = findHydrationRoot();\n  ngDevMode && assertDefined(currentNode, 'Expected root i18n node during hydration');\n  const disconnectedNodes = initDisconnectedNodes(hydrationInfo) ?? new Set();\n  const i18nNodes = hydrationInfo.i18nNodes ??= new Map();\n  const caseQueue = hydrationInfo.data[I18N_DATA]?.[index - HEADER_OFFSET] ?? [];\n  const dehydratedIcuData = hydrationInfo.dehydratedIcuData ??= new Map();\n  collectI18nNodesFromDom({\n    hydrationInfo,\n    lView,\n    i18nNodes,\n    disconnectedNodes,\n    caseQueue,\n    dehydratedIcuData\n  }, {\n    currentNode,\n    isConnected: true\n  }, tI18n.ast);\n  // Nodes from inactive ICU cases should be considered disconnected. We track them above\n  // because they aren't (and shouldn't be) serialized. Since we may mutate or create a\n  // new set, we need to be sure to write the expected value back to the DehydratedView.\n  hydrationInfo.disconnectedNodes = disconnectedNodes.size === 0 ? null : disconnectedNodes;\n}\nfunction collectI18nNodesFromDom(context, state, nodeOrNodes) {\n  if (Array.isArray(nodeOrNodes)) {\n    let nextState = state;\n    for (const node of nodeOrNodes) {\n      // Whenever a node doesn't directly follow the previous RNode, it\n      // is given a path. We need to resume collecting nodes from that location\n      // until and unless we find another disjoint node.\n      const targetNode = tryLocateRNodeByPath(context.hydrationInfo, context.lView, node.index - HEADER_OFFSET);\n      if (targetNode) {\n        nextState = forkHydrationState(state, targetNode);\n      }\n      collectI18nNodesFromDom(context, nextState, node);\n    }\n  } else {\n    if (context.disconnectedNodes.has(nodeOrNodes.index - HEADER_OFFSET)) {\n      // i18n nodes can be considered disconnected if e.g. they were projected.\n      // In that case, we have to make sure to skip over them.\n      return;\n    }\n    switch (nodeOrNodes.kind) {\n      case 0 /* I18nNodeKind.TEXT */:\n        {\n          // Claim a text node for hydration\n          const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n          setCurrentNode(state, currentNode?.nextSibling ?? null);\n          break;\n        }\n      case 1 /* I18nNodeKind.ELEMENT */:\n        {\n          // Recurse into the current element's children...\n          collectI18nNodesFromDom(context, forkHydrationState(state, state.currentNode?.firstChild ?? null), nodeOrNodes.children);\n          // And claim the parent element itself.\n          const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n          setCurrentNode(state, currentNode?.nextSibling ?? null);\n          break;\n        }\n      case 2 /* I18nNodeKind.PLACEHOLDER */:\n        {\n          const noOffsetIndex = nodeOrNodes.index - HEADER_OFFSET;\n          const {\n            hydrationInfo\n          } = context;\n          const containerSize = getNgContainerSize(hydrationInfo, noOffsetIndex);\n          switch (nodeOrNodes.type) {\n            case 0 /* I18nPlaceholderType.ELEMENT */:\n              {\n                // Hydration expects to find the head of the element.\n                const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n                // A TNode for the node may not yet if we're hydrating during the first pass,\n                // so use the serialized data to determine if this is an <ng-container>.\n                if (isSerializedElementContainer(hydrationInfo, noOffsetIndex)) {\n                  // An <ng-container> doesn't have a physical DOM node, so we need to\n                  // continue hydrating from siblings.\n                  collectI18nNodesFromDom(context, state, nodeOrNodes.children);\n                  // Skip over the anchor element. It will be claimed by the\n                  // downstream container hydration.\n                  const nextNode = skipSiblingNodes(state, 1);\n                  setCurrentNode(state, nextNode);\n                } else {\n                  // Non-container elements represent an actual node in the DOM, so we\n                  // need to continue hydration with the children, and claim the node.\n                  collectI18nNodesFromDom(context, forkHydrationState(state, state.currentNode?.firstChild ?? null), nodeOrNodes.children);\n                  setCurrentNode(state, currentNode?.nextSibling ?? null);\n                  // Elements can also be the anchor of a view container, so there may\n                  // be elements after this node that we need to skip.\n                  if (containerSize !== null) {\n                    // `+1` stands for an anchor node after all of the views in the container.\n                    const nextNode = skipSiblingNodes(state, containerSize + 1);\n                    setCurrentNode(state, nextNode);\n                  }\n                }\n                break;\n              }\n            case 1 /* I18nPlaceholderType.SUBTEMPLATE */:\n              {\n                ngDevMode && assertNotEqual(containerSize, null, 'Expected a container size while hydrating i18n subtemplate');\n                // Hydration expects to find the head of the template.\n                appendI18nNodeToCollection(context, state, nodeOrNodes);\n                // Skip over all of the template children, as well as the anchor\n                // node, since the template itself will handle them instead.\n                const nextNode = skipSiblingNodes(state, containerSize + 1);\n                setCurrentNode(state, nextNode);\n                break;\n              }\n          }\n          break;\n        }\n      case 3 /* I18nNodeKind.ICU */:\n        {\n          // If the current node is connected, we need to pop the next case from the\n          // queue, so that the active case is also considered connected.\n          const selectedCase = state.isConnected ? context.caseQueue.shift() : null;\n          const childState = {\n            currentNode: null,\n            isConnected: false\n          };\n          // We traverse through each case, even if it's not active,\n          // so that we correctly populate disconnected nodes.\n          for (let i = 0; i < nodeOrNodes.cases.length; i++) {\n            collectI18nNodesFromDom(context, i === selectedCase ? state : childState, nodeOrNodes.cases[i]);\n          }\n          if (selectedCase !== null) {\n            // ICUs represent a branching state, and the selected case could be different\n            // than what it was on the server. In that case, we need to be able to clean\n            // up the nodes from the original case. To do that, we store the selected case.\n            context.dehydratedIcuData.set(nodeOrNodes.index, {\n              case: selectedCase,\n              node: nodeOrNodes\n            });\n          }\n          // Hydration expects to find the ICU anchor element.\n          const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n          setCurrentNode(state, currentNode?.nextSibling ?? null);\n          break;\n        }\n    }\n  }\n}\nlet _claimDehydratedIcuCaseImpl = () => {\n  // noop unless `enableClaimDehydratedIcuCaseImpl` is invoked\n};\n/**\n * Mark the case for the ICU node at the given index in the view as claimed,\n * allowing its nodes to be hydrated and not cleaned up.\n */\nfunction claimDehydratedIcuCase(lView, icuIndex, caseIndex) {\n  _claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex);\n}\nfunction enableClaimDehydratedIcuCaseImpl() {\n  _claimDehydratedIcuCaseImpl = claimDehydratedIcuCaseImpl;\n}\nfunction claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex) {\n  const dehydratedIcuDataMap = lView[HYDRATION]?.dehydratedIcuData;\n  if (dehydratedIcuDataMap) {\n    const dehydratedIcuData = dehydratedIcuDataMap.get(icuIndex);\n    if (dehydratedIcuData?.case === caseIndex) {\n      // If the case we're attempting to claim matches the dehydrated one,\n      // we remove it from the map to mark it as \"claimed.\"\n      dehydratedIcuDataMap.delete(icuIndex);\n    }\n  }\n}\n/**\n * Clean up all i18n hydration data associated with the given view.\n */\nfunction cleanupI18nHydrationData(lView) {\n  const hydrationInfo = lView[HYDRATION];\n  if (hydrationInfo) {\n    const {\n      i18nNodes,\n      dehydratedIcuData: dehydratedIcuDataMap\n    } = hydrationInfo;\n    if (i18nNodes && dehydratedIcuDataMap) {\n      const renderer = lView[RENDERER];\n      for (const dehydratedIcuData of dehydratedIcuDataMap.values()) {\n        cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData);\n      }\n    }\n    hydrationInfo.i18nNodes = undefined;\n    hydrationInfo.dehydratedIcuData = undefined;\n  }\n}\nfunction cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData) {\n  for (const node of dehydratedIcuData.node.cases[dehydratedIcuData.case]) {\n    const rNode = i18nNodes.get(node.index - HEADER_OFFSET);\n    if (rNode) {\n      nativeRemoveNode(renderer, rNode, false);\n    }\n  }\n}\n\n/**\n * Removes all dehydrated views from a given LContainer:\n * both in internal data structure, as well as removing\n * corresponding DOM nodes that belong to that dehydrated view.\n */\nfunction removeDehydratedViews(lContainer) {\n  const views = lContainer[DEHYDRATED_VIEWS] ?? [];\n  const parentLView = lContainer[PARENT];\n  const renderer = parentLView[RENDERER];\n  const retainedViews = [];\n  for (const view of views) {\n    // Do not clean up contents of `@defer` blocks.\n    // The cleanup for this content would happen once a given block\n    // is triggered and hydrated.\n    if (view.data[DEFER_BLOCK_ID] !== undefined) {\n      retainedViews.push(view);\n    } else {\n      removeDehydratedView(view, renderer);\n      ngDevMode && ngDevMode.dehydratedViewsRemoved++;\n    }\n  }\n  // Reset the value to an array to indicate that no\n  // further processing of dehydrated views is needed for\n  // this view container (i.e. do not trigger the lookup process\n  // once again in case a `ViewContainerRef` is created later).\n  lContainer[DEHYDRATED_VIEWS] = retainedViews;\n}\nfunction removeDehydratedViewList(deferBlock) {\n  const {\n    lContainer\n  } = deferBlock;\n  const dehydratedViews = lContainer[DEHYDRATED_VIEWS];\n  if (dehydratedViews === null) return;\n  const parentLView = lContainer[PARENT];\n  const renderer = parentLView[RENDERER];\n  for (const view of dehydratedViews) {\n    removeDehydratedView(view, renderer);\n    ngDevMode && ngDevMode.dehydratedViewsRemoved++;\n  }\n}\n/**\n * Helper function to remove all nodes from a dehydrated view.\n */\nfunction removeDehydratedView(dehydratedView, renderer) {\n  let nodesRemoved = 0;\n  let currentRNode = dehydratedView.firstChild;\n  if (currentRNode) {\n    const numNodes = dehydratedView.data[NUM_ROOT_NODES];\n    while (nodesRemoved < numNodes) {\n      ngDevMode && validateSiblingNodeExists(currentRNode);\n      const nextSibling = currentRNode.nextSibling;\n      nativeRemoveNode(renderer, currentRNode, false);\n      currentRNode = nextSibling;\n      nodesRemoved++;\n    }\n  }\n}\n/**\n * Walks over all views within this LContainer invokes dehydrated views\n * cleanup function for each one.\n */\nfunction cleanupLContainer(lContainer) {\n  removeDehydratedViews(lContainer);\n  // The host could be an LView if this container is on a component node.\n  // In this case, descend into host LView for further cleanup. See also\n  // LContainer[HOST] docs for additional information.\n  const hostLView = lContainer[HOST];\n  if (isLView(hostLView)) {\n    cleanupLView(hostLView);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    cleanupLView(lContainer[i]);\n  }\n}\n/**\n * Walks over `LContainer`s and components registered within\n * this LView and invokes dehydrated views cleanup function for each one.\n */\nfunction cleanupLView(lView) {\n  cleanupI18nHydrationData(lView);\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (isLContainer(lView[i])) {\n      const lContainer = lView[i];\n      cleanupLContainer(lContainer);\n    } else if (isLView(lView[i])) {\n      // This is a component, enter the `cleanupLView` recursively.\n      cleanupLView(lView[i]);\n    }\n  }\n}\n/**\n * Walks over all views registered within the ApplicationRef and removes\n * all dehydrated views from all `LContainer`s along the way.\n */\nfunction cleanupDehydratedViews(appRef) {\n  const viewRefs = appRef._views;\n  for (const viewRef of viewRefs) {\n    const lNode = getLNodeForHydration(viewRef);\n    // An `lView` might be `null` if a `ViewRef` represents\n    // an embedded view (not a component view).\n    if (lNode !== null && lNode[HOST] !== null) {\n      if (isLView(lNode)) {\n        cleanupLView(lNode);\n      } else {\n        // Cleanup in all views within this view container\n        cleanupLContainer(lNode);\n      }\n      ngDevMode && ngDevMode.dehydratedViewsCleanupRuns++;\n    }\n  }\n}\n/**\n * post hydration cleanup handling for defer blocks that were incrementally\n * hydrated. This removes all the jsaction attributes, timers, observers,\n * dehydrated views and containers\n */\nfunction cleanupHydratedDeferBlocks(deferBlock, hydratedBlocks, registry, appRef) {\n  if (deferBlock !== null) {\n    registry.cleanup(hydratedBlocks);\n    cleanupLContainer(deferBlock.lContainer);\n    cleanupDehydratedViews(appRef);\n  }\n}\n\n/**\n * Given a current DOM node and a serialized information about the views\n * in a container, walks over the DOM structure, collecting the list of\n * dehydrated views.\n */\nfunction locateDehydratedViewsInContainer(currentRNode, serializedViews) {\n  const dehydratedViews = [];\n  for (const serializedView of serializedViews) {\n    // Repeats a view multiple times as needed, based on the serialized information\n    // (for example, for *ngFor-produced views).\n    for (let i = 0; i < (serializedView[MULTIPLIER] ?? 1); i++) {\n      const view = {\n        data: serializedView,\n        firstChild: null\n      };\n      if (serializedView[NUM_ROOT_NODES] > 0) {\n        // Keep reference to the first node in this view,\n        // so it can be accessed while invoking template instructions.\n        view.firstChild = currentRNode;\n        // Move over to the next node after this view, which can\n        // either be a first node of the next view or an anchor comment\n        // node after the last view in a container.\n        currentRNode = siblingAfter(serializedView[NUM_ROOT_NODES], currentRNode);\n      }\n      dehydratedViews.push(view);\n    }\n  }\n  return [currentRNode, dehydratedViews];\n}\n/**\n * Reference to a function that searches for a matching dehydrated views\n * stored on a given lContainer.\n * Returns `null` by default, when hydration is not enabled.\n */\nlet _findMatchingDehydratedViewImpl = () => null;\n/**\n * Reference to a function that searches for a matching dehydrated view\n * stored on a control flow lContainer and removes the dehydrated content\n * once found.\n * Returns `null` by default, when hydration is not enabled.\n */\nlet _findAndReconcileMatchingDehydratedViewsImpl = () => null;\nfunction enableFindMatchingDehydratedViewImpl() {\n  _findMatchingDehydratedViewImpl = findMatchingDehydratedViewImpl;\n  _findAndReconcileMatchingDehydratedViewsImpl = findAndReconcileMatchingDehydratedViewsImpl;\n}\n/**\n * Retrieves the next dehydrated view from the LContainer and verifies that\n * it matches a given template id (from the TView that was used to create this\n * instance of a view). If the id doesn't match, that means that we are in an\n * unexpected state and can not complete the reconciliation process. Thus,\n * all dehydrated views from this LContainer are removed (including corresponding\n * DOM nodes) and the rendering is performed as if there were no dehydrated views\n * in this container.\n */\nfunction findMatchingDehydratedViewImpl(lContainer, template) {\n  if (hasMatchingDehydratedView(lContainer, template)) {\n    return lContainer[DEHYDRATED_VIEWS].shift();\n  } else {\n    // Otherwise, we are at the state when reconciliation can not be completed,\n    // thus we remove all dehydrated views within this container (remove them\n    // from internal data structures as well as delete associated elements from\n    // the DOM tree).\n    removeDehydratedViews(lContainer);\n    return null;\n  }\n}\nfunction findMatchingDehydratedView(lContainer, template) {\n  return _findMatchingDehydratedViewImpl(lContainer, template);\n}\nfunction findAndReconcileMatchingDehydratedViewsImpl(lContainer, templateTNode, hostLView) {\n  if (templateTNode.tView.ssrId === null) return null;\n  const dehydratedView = findMatchingDehydratedView(lContainer, templateTNode.tView.ssrId);\n  // we know that an ssrId was generated, but we were unable to match it to\n  // a dehydrated view, which means that we may have changed branches\n  // between server and client. We'll need to find and remove those\n  // stale dehydrated views.\n  if (hostLView[TVIEW].firstUpdatePass && dehydratedView === null) {\n    removeStaleDehydratedBranch(hostLView, templateTNode);\n  }\n  return dehydratedView;\n}\nfunction findAndReconcileMatchingDehydratedViews(lContainer, templateTNode, hostLView) {\n  return _findAndReconcileMatchingDehydratedViewsImpl(lContainer, templateTNode, hostLView);\n}\n/**\n * In the case that we have control flow that changes branches between server and\n * client, we're left with dehydrated content that will not be used. We need to find\n * it and clean it up at the right time so that we don't see duplicate content for\n * a few moments before the application reaches stability. This navigates the\n * control flow containers by looking at the TNodeFlags to find the matching\n * dehydrated content for the branch that is now stale from the server and removes it.\n */\nfunction removeStaleDehydratedBranch(hostLView, tNode) {\n  let currentTNode = tNode;\n  while (currentTNode) {\n    // We can return here if we've found the dehydrated view and cleaned it up.\n    // Otherwise we continue on until we either find it or reach the start of\n    // the control flow.\n    if (cleanupMatchingDehydratedViews(hostLView, currentTNode)) return;\n    if ((currentTNode.flags & 256 /* TNodeFlags.isControlFlowStart */) === 256 /* TNodeFlags.isControlFlowStart */) {\n      // we've hit the top of the control flow loop\n      break;\n    }\n    currentTNode = currentTNode.prev;\n  }\n  currentTNode = tNode.next; // jump to place we started so we can navigate down from there\n  while (currentTNode) {\n    if ((currentTNode.flags & 512 /* TNodeFlags.isInControlFlow */) !== 512 /* TNodeFlags.isInControlFlow */) {\n      // we've exited control flow and need to exit the loop.\n      break;\n    }\n    // Similar to above, we can return here if we've found the dehydrated view\n    // and cleaned it up. Otherwise we continue on until we either find it or\n    // reach the end of the control flow.\n    if (cleanupMatchingDehydratedViews(hostLView, currentTNode)) return;\n    currentTNode = currentTNode.next;\n  }\n}\nfunction hasMatchingDehydratedView(lContainer, template) {\n  const views = lContainer[DEHYDRATED_VIEWS];\n  if (!template || views === null || views.length === 0) {\n    return false;\n  }\n  // Verify whether the first dehydrated view in the container matches\n  // the template id passed to this function (that originated from a TView\n  // that was used to create an instance of an embedded or component views.\n  return views[0].data[TEMPLATE_ID] === template;\n}\nfunction cleanupMatchingDehydratedViews(hostLView, currentTNode) {\n  const ssrId = currentTNode.tView?.ssrId;\n  if (ssrId == null /* check both `null` and `undefined` */) return false;\n  const container = hostLView[currentTNode.index];\n  // if we can find the dehydrated view in this container, we know we've found the stale view\n  // and we can remove it.\n  if (isLContainer(container) && hasMatchingDehydratedView(container, ssrId)) {\n    removeDehydratedViews(container);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nlet ComponentRef$1 = class ComponentRef {};\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nlet ComponentFactory$1 = class ComponentFactory {};\nclass _NullComponentFactoryResolver {\n  resolveComponentFactory(component) {\n    throw new RuntimeError(917 /* RuntimeErrorCode.NO_COMPONENT_FACTORY_FOUND */, typeof ngDevMode !== 'undefined' && ngDevMode && `No component factory found for ${stringify(component)}.`);\n  }\n}\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nlet ComponentFactoryResolver$1 = class ComponentFactoryResolver {\n  static NULL = /*#__PURE__*/new _NullComponentFactoryResolver();\n};\n\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nclass RendererFactory2 {}\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * <div class=\"docs-alert docs-alert-important\">\n * <p>\n * Please be aware that usage of `Renderer2`, in context of accessing DOM elements, provides no\n * extra security which makes it equivalent to\n * {@link /best-practices/security#direct-use-of-the-dom-apis-and-explicit-sanitization-calls Security vulnerabilities}.\n * </p>\n * </div>\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nlet Renderer2 = /*#__PURE__*/(() => {\n  class Renderer2 {\n    /**\n     * If null or undefined, the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     */\n    destroyNode = null;\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ELEMENT_ID__ = () => injectRenderer2();\n  }\n  return Renderer2;\n})();\n/** Injects a Renderer2 for the current component. */\nfunction injectRenderer2() {\n  // We need the Renderer to be based on the component that it's being injected into, however since\n  // DI happens before we've entered its view, `getLView` will return the parent view instead.\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];\n}\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nlet Sanitizer = /*#__PURE__*/(() => {\n  class Sanitizer {\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: Sanitizer,\n      providedIn: 'root',\n      factory: () => null\n    });\n  }\n  return Sanitizer;\n})();\nfunction isModuleWithProviders(value) {\n  return value.ngModule !== undefined;\n}\nfunction isNgModule(value) {\n  return !!getNgModuleDef(value);\n}\nfunction isPipe(value) {\n  return !!getPipeDef$1(value);\n}\nfunction isDirective(value) {\n  return !!getDirectiveDef(value);\n}\nfunction isComponent(value) {\n  return !!getComponentDef(value);\n}\nfunction getDependencyTypeForError(type) {\n  if (getComponentDef(type)) return 'component';\n  if (getDirectiveDef(type)) return 'directive';\n  if (getPipeDef$1(type)) return 'pipe';\n  return 'type';\n}\nfunction verifyStandaloneImport(depType, importingType) {\n  if (isForwardRef(depType)) {\n    depType = resolveForwardRef(depType);\n    if (!depType) {\n      throw new Error(`Expected forwardRef function, imported from \"${stringifyForError(importingType)}\", to return a standalone entity or NgModule but got \"${stringifyForError(depType) || depType}\".`);\n    }\n  }\n  if (getNgModuleDef(depType) == null) {\n    const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef$1(depType);\n    if (def != null) {\n      // if a component, directive or pipe is imported make sure that it is standalone\n      if (!def.standalone) {\n        throw new Error(`The \"${stringifyForError(depType)}\" ${getDependencyTypeForError(depType)}, imported from \"${stringifyForError(importingType)}\", is not standalone. Did you forget to add the standalone: true flag?`);\n      }\n    } else {\n      // it can be either a module with provider or an unknown (not annotated) type\n      if (isModuleWithProviders(depType)) {\n        throw new Error(`A module with providers was imported from \"${stringifyForError(importingType)}\". Modules with providers are not supported in standalone components imports.`);\n      } else {\n        throw new Error(`The \"${stringifyForError(depType)}\" type, imported from \"${stringifyForError(importingType)}\", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);\n      }\n    }\n  }\n}\n\n/**\n * An implementation of DepsTrackerApi which will be used for JIT and local compilation.\n */\nclass DepsTracker {\n  ownerNgModule = /*#__PURE__*/new Map();\n  ngModulesWithSomeUnresolvedDecls = /*#__PURE__*/new Set();\n  ngModulesScopeCache = /*#__PURE__*/new Map();\n  standaloneComponentsScopeCache = /*#__PURE__*/new Map();\n  /**\n   * Attempts to resolve ng module's forward ref declarations as much as possible and add them to\n   * the `ownerNgModule` map. This method normally should be called after the initial parsing when\n   * all the forward refs are resolved (e.g., when trying to render a component)\n   */\n  resolveNgModulesDecls() {\n    if (this.ngModulesWithSomeUnresolvedDecls.size === 0) {\n      return;\n    }\n    for (const moduleType of this.ngModulesWithSomeUnresolvedDecls) {\n      const def = getNgModuleDef(moduleType);\n      if (def?.declarations) {\n        for (const decl of maybeUnwrapFn(def.declarations)) {\n          if (isComponent(decl)) {\n            this.ownerNgModule.set(decl, moduleType);\n          }\n        }\n      }\n    }\n    this.ngModulesWithSomeUnresolvedDecls.clear();\n  }\n  /** @override */\n  getComponentDependencies(type, rawImports) {\n    this.resolveNgModulesDecls();\n    const def = getComponentDef(type);\n    if (def === null) {\n      throw new Error(`Attempting to get component dependencies for a type that is not a component: ${type}`);\n    }\n    if (def.standalone) {\n      const scope = this.getStandaloneComponentScope(type, rawImports);\n      if (scope.compilation.isPoisoned) {\n        return {\n          dependencies: []\n        };\n      }\n      return {\n        dependencies: [...scope.compilation.directives, ...scope.compilation.pipes, ...scope.compilation.ngModules]\n      };\n    } else {\n      if (!this.ownerNgModule.has(type)) {\n        // This component is orphan! No need to handle the error since the component rendering\n        // pipeline (e.g., view_container_ref) will check for this error based on configs.\n        return {\n          dependencies: []\n        };\n      }\n      const scope = this.getNgModuleScope(this.ownerNgModule.get(type));\n      if (scope.compilation.isPoisoned) {\n        return {\n          dependencies: []\n        };\n      }\n      return {\n        dependencies: [...scope.compilation.directives, ...scope.compilation.pipes]\n      };\n    }\n  }\n  /**\n   * @override\n   * This implementation does not make use of param scopeInfo since it assumes the scope info is\n   * already added to the type itself through methods like {@link ɵɵsetNgModuleScope}\n   */\n  registerNgModule(type, scopeInfo) {\n    if (!isNgModule(type)) {\n      throw new Error(`Attempting to register a Type which is not NgModule as NgModule: ${type}`);\n    }\n    // Lazily process the NgModules later when needed.\n    this.ngModulesWithSomeUnresolvedDecls.add(type);\n  }\n  /** @override */\n  clearScopeCacheFor(type) {\n    this.ngModulesScopeCache.delete(type);\n    this.standaloneComponentsScopeCache.delete(type);\n  }\n  /** @override */\n  getNgModuleScope(type) {\n    if (this.ngModulesScopeCache.has(type)) {\n      return this.ngModulesScopeCache.get(type);\n    }\n    const scope = this.computeNgModuleScope(type);\n    this.ngModulesScopeCache.set(type, scope);\n    return scope;\n  }\n  /** Compute NgModule scope afresh. */\n  computeNgModuleScope(type) {\n    const def = getNgModuleDefOrThrow(type);\n    const scope = {\n      exported: {\n        directives: new Set(),\n        pipes: new Set()\n      },\n      compilation: {\n        directives: new Set(),\n        pipes: new Set()\n      }\n    };\n    // Analyzing imports\n    for (const imported of maybeUnwrapFn(def.imports)) {\n      if (isNgModule(imported)) {\n        const importedScope = this.getNgModuleScope(imported);\n        // When this module imports another, the imported module's exported directives and pipes\n        // are added to the compilation scope of this module.\n        addSet(importedScope.exported.directives, scope.compilation.directives);\n        addSet(importedScope.exported.pipes, scope.compilation.pipes);\n      } else if (isStandalone(imported)) {\n        if (isDirective(imported) || isComponent(imported)) {\n          scope.compilation.directives.add(imported);\n        } else if (isPipe(imported)) {\n          scope.compilation.pipes.add(imported);\n        } else {\n          // The standalone thing is neither a component nor a directive nor a pipe ... (what?)\n          throw new RuntimeError(980 /* RuntimeErrorCode.RUNTIME_DEPS_INVALID_IMPORTED_TYPE */, 'The standalone imported type is neither a component nor a directive nor a pipe');\n        }\n      } else {\n        // The import is neither a module nor a module-with-providers nor a standalone thing. This\n        // is going to be an error. So we short circuit.\n        scope.compilation.isPoisoned = true;\n        break;\n      }\n    }\n    // Analyzing declarations\n    if (!scope.compilation.isPoisoned) {\n      for (const decl of maybeUnwrapFn(def.declarations)) {\n        // Cannot declare another NgModule or a standalone thing\n        if (isNgModule(decl) || isStandalone(decl)) {\n          scope.compilation.isPoisoned = true;\n          break;\n        }\n        if (isPipe(decl)) {\n          scope.compilation.pipes.add(decl);\n        } else {\n          // decl is either a directive or a component. The component may not yet have the ɵcmp due\n          // to async compilation.\n          scope.compilation.directives.add(decl);\n        }\n      }\n    }\n    // Analyzing exports\n    for (const exported of maybeUnwrapFn(def.exports)) {\n      if (isNgModule(exported)) {\n        // When this module exports another, the exported module's exported directives and pipes\n        // are added to both the compilation and exported scopes of this module.\n        const exportedScope = this.getNgModuleScope(exported);\n        // Based on the current logic there is no way to have poisoned exported scope. So no need to\n        // check for it.\n        addSet(exportedScope.exported.directives, scope.exported.directives);\n        addSet(exportedScope.exported.pipes, scope.exported.pipes);\n        // Some test toolings which run in JIT mode depend on this behavior that the exported scope\n        // should also be present in the compilation scope, even though AoT does not support this\n        // and it is also in odds with NgModule metadata definitions. Without this some tests in\n        // Google will fail.\n        addSet(exportedScope.exported.directives, scope.compilation.directives);\n        addSet(exportedScope.exported.pipes, scope.compilation.pipes);\n      } else if (isPipe(exported)) {\n        scope.exported.pipes.add(exported);\n      } else {\n        scope.exported.directives.add(exported);\n      }\n    }\n    return scope;\n  }\n  /** @override */\n  getStandaloneComponentScope(type, rawImports) {\n    if (this.standaloneComponentsScopeCache.has(type)) {\n      return this.standaloneComponentsScopeCache.get(type);\n    }\n    const ans = this.computeStandaloneComponentScope(type, rawImports);\n    this.standaloneComponentsScopeCache.set(type, ans);\n    return ans;\n  }\n  computeStandaloneComponentScope(type, rawImports) {\n    const ans = {\n      compilation: {\n        // Standalone components are always able to self-reference.\n        directives: new Set([type]),\n        pipes: new Set(),\n        ngModules: new Set()\n      }\n    };\n    for (const rawImport of flatten(rawImports ?? [])) {\n      const imported = resolveForwardRef(rawImport);\n      try {\n        verifyStandaloneImport(imported, type);\n      } catch (e) {\n        // Short-circuit if an import is not valid\n        ans.compilation.isPoisoned = true;\n        return ans;\n      }\n      if (isNgModule(imported)) {\n        ans.compilation.ngModules.add(imported);\n        const importedScope = this.getNgModuleScope(imported);\n        // Short-circuit if an imported NgModule has corrupted exported scope.\n        if (importedScope.exported.isPoisoned) {\n          ans.compilation.isPoisoned = true;\n          return ans;\n        }\n        addSet(importedScope.exported.directives, ans.compilation.directives);\n        addSet(importedScope.exported.pipes, ans.compilation.pipes);\n      } else if (isPipe(imported)) {\n        ans.compilation.pipes.add(imported);\n      } else if (isDirective(imported) || isComponent(imported)) {\n        ans.compilation.directives.add(imported);\n      } else {\n        // The imported thing is not module/pipe/directive/component, so we error and short-circuit\n        // here\n        ans.compilation.isPoisoned = true;\n        return ans;\n      }\n    }\n    return ans;\n  }\n  /** @override */\n  isOrphanComponent(cmp) {\n    const def = getComponentDef(cmp);\n    if (!def || def.standalone) {\n      return false;\n    }\n    this.resolveNgModulesDecls();\n    return !this.ownerNgModule.has(cmp);\n  }\n}\nfunction addSet(sourceSet, targetSet) {\n  for (const m of sourceSet) {\n    targetSet.add(m);\n  }\n}\n/** The deps tracker to be used in the current Angular app in dev mode. */\nconst depsTracker = /*#__PURE__*/new DepsTracker();\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n\n/**\n * Injector that looks up a value using a specific injector, before falling back to the module\n * injector. Used primarily when creating components or embedded views dynamically.\n */\nclass ChainedInjector {\n  injector;\n  parentInjector;\n  constructor(injector, parentInjector) {\n    this.injector = injector;\n    this.parentInjector = parentInjector;\n  }\n  get(token, notFoundValue, options) {\n    const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, options);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n      // Return the value from the root element injector when\n      // - it provides it\n      //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      // - the module injector should not be checked\n      //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      return value;\n    }\n    return this.parentInjector.get(token, notFoundValue, options);\n  }\n}\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nfunction computeStaticStyling(tNode, attrs, writeToHost) {\n  ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles = writeToHost ? tNode.styles : null;\n  let classes = writeToHost ? tNode.classes : null;\n  let mode = 0;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == 1 /* AttributeMarker.Classes */) {\n        classes = concatStringsWithSpace(classes, value);\n      } else if (mode == 2 /* AttributeMarker.Styles */) {\n        const style = value;\n        const styleValue = attrs[++i];\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\nfunction ɵɵdirectiveInject(token, flags = 0 /* InternalInjectFlags.Default */) {\n  const lView = getLView();\n  // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return __inject(token, flags);\n  }\n  const tNode = getCurrentTNode();\n  const value = getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\n  ngDevMode && emitInjectEvent(token, value, flags);\n  return value;\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactory() {\n  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n  throw new Error(msg);\n}\n\n/**\n * Resolve the matched directives on a node.\n */\nfunction resolveDirectives(tView, lView, tNode, localRefs, directiveMatcher) {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n  ngDevMode && assertFirstCreatePass(tView);\n  const exportsMap = localRefs === null ? null : {\n    '': -1\n  };\n  const matchedDirectiveDefs = directiveMatcher(tView, tNode);\n  if (matchedDirectiveDefs !== null) {\n    let directiveDefs = matchedDirectiveDefs;\n    let hostDirectiveDefs = null;\n    let hostDirectiveRanges = null;\n    for (const def of matchedDirectiveDefs) {\n      if (def.resolveHostDirectives !== null) {\n        [directiveDefs, hostDirectiveDefs, hostDirectiveRanges] = def.resolveHostDirectives(matchedDirectiveDefs);\n        break;\n      }\n    }\n    ngDevMode && assertNoDuplicateDirectives(directiveDefs);\n    initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs, hostDirectiveRanges);\n  }\n  if (exportsMap !== null && localRefs !== null) {\n    cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n  }\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n  const localNames = tNode.localNames = [];\n  // Local names must be stored in tNode in the same order that localRefs are defined\n  // in the template to ensure the data is loaded in the same slots as their refs\n  // in the template (for template queries).\n  for (let i = 0; i < localRefs.length; i += 2) {\n    const index = exportsMap[localRefs[i + 1]];\n    if (index == null) throw new RuntimeError(-301 /* RuntimeErrorCode.EXPORT_NOT_FOUND */, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\n    localNames.push(localRefs[i], index);\n  }\n}\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting the component offset on the TNode.\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nfunction markAsComponentHost(tView, hostTNode, componentOffset) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertGreaterThan(componentOffset, -1, 'componentOffset must be great than -1');\n  hostTNode.componentOffset = componentOffset;\n  (tView.components ??= []).push(hostTNode.index);\n}\n/** Initializes the data structures necessary for a list of directives to be instantiated. */\nfunction initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs, hostDirectiveRanges) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const directivesLength = directives.length;\n  let hasSeenComponent = false;\n  // Publishes the directive types to DI so they can be injected. Needs to\n  // happen in a separate pass before the TNode flags have been initialized.\n  for (let i = 0; i < directivesLength; i++) {\n    const def = directives[i];\n    if (!hasSeenComponent && isComponentDef(def)) {\n      hasSeenComponent = true;\n      markAsComponentHost(tView, tNode, i);\n    }\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, def.type);\n  }\n  initTNodeFlags(tNode, tView.data.length, directivesLength);\n  // When the same token is provided by several directives on the same node, some rules apply in\n  // the viewEngine:\n  // - viewProviders have priority over providers\n  // - the last directive in NgModule.declarations has priority over the previous one\n  // So to match these rules, the order in which providers are added in the arrays is very\n  // important.\n  for (let i = 0; i < directivesLength; i++) {\n    const def = directives[i];\n    if (def.providersResolver) def.providersResolver(def);\n  }\n  let preOrderHooksFound = false;\n  let preOrderCheckHooksFound = false;\n  let directiveIdx = allocExpando(tView, lView, directivesLength, null);\n  ngDevMode && assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');\n  // If there's at least one directive, we'll have to track it so initialize the map.\n  if (directivesLength > 0) {\n    tNode.directiveToIndex = new Map();\n  }\n  for (let i = 0; i < directivesLength; i++) {\n    const def = directives[i];\n    // Merge the attrs in the order of matches. This assumes that the first directive is the\n    // component itself, so that the component has the least priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n    saveNameToExportMap(directiveIdx, def, exportsMap);\n    // If a directive has host directives, we need to track both its index and the range within\n    // the host directives are declared. Host directives are not tracked, but should be resolved\n    // by looking up the host and getting its indexes from there.\n    if (hostDirectiveRanges !== null && hostDirectiveRanges.has(def)) {\n      const [start, end] = hostDirectiveRanges.get(def);\n      tNode.directiveToIndex.set(def.type, [directiveIdx, start + tNode.directiveStart, end + tNode.directiveStart]);\n    } else if (hostDirectiveDefs === null || !hostDirectiveDefs.has(def)) {\n      tNode.directiveToIndex.set(def.type, directiveIdx);\n    }\n    if (def.contentQueries !== null) tNode.flags |= 4 /* TNodeFlags.hasContentQuery */;\n    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0) tNode.flags |= 64 /* TNodeFlags.hasHostBindings */;\n    const lifeCycleHooks = def.type.prototype;\n    // Only push a node index into the preOrderHooks array if this is the first\n    // pre-order hook found on this node.\n    if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n      // We will push the actual hook function into this array later during dir instantiation.\n      // We cannot do it now because we must ensure hooks are registered in the same\n      // order that directives are created (i.e. injection order).\n      (tView.preOrderHooks ??= []).push(tNode.index);\n      preOrderHooksFound = true;\n    }\n    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n      (tView.preOrderCheckHooks ??= []).push(tNode.index);\n      preOrderCheckHooksFound = true;\n    }\n    directiveIdx++;\n  }\n  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);\n}\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs) {\n  ngDevMode && assertFirstCreatePass(tView);\n  for (let index = tNode.directiveStart; index < tNode.directiveEnd; index++) {\n    const directiveDef = tView.data[index];\n    if (hostDirectiveDefs === null || !hostDirectiveDefs.has(directiveDef)) {\n      setupSelectorMatchedInputsOrOutputs(0 /* BindingType.Inputs */, tNode, directiveDef, index);\n      setupSelectorMatchedInputsOrOutputs(1 /* BindingType.Outputs */, tNode, directiveDef, index);\n      setupInitialInputs(tNode, index, false);\n    } else {\n      const hostDirectiveDef = hostDirectiveDefs.get(directiveDef);\n      setupHostDirectiveInputsOrOutputs(0 /* BindingType.Inputs */, tNode, hostDirectiveDef, index);\n      setupHostDirectiveInputsOrOutputs(1 /* BindingType.Outputs */, tNode, hostDirectiveDef, index);\n      setupInitialInputs(tNode, index, true);\n    }\n  }\n}\n/**\n * Sets up the input/output bindings for a directive that was matched in the template through its\n * selector. This method is called repeatedly to build up all of the available inputs on a node.\n *\n * @param mode Whether inputs or outputs are being contructed.\n * @param tNode Node on which the bindings are being set up.\n * @param def Directive definition for which the bindings are being set up.\n * @param directiveIndex Index at which the directive instance will be stored in the LView.\n */\nfunction setupSelectorMatchedInputsOrOutputs(mode, tNode, def, directiveIndex) {\n  const aliasMap = mode === 0 /* BindingType.Inputs */ ? def.inputs : def.outputs;\n  for (const publicName in aliasMap) {\n    if (aliasMap.hasOwnProperty(publicName)) {\n      let bindings;\n      if (mode === 0 /* BindingType.Inputs */) {\n        bindings = tNode.inputs ??= {};\n      } else {\n        bindings = tNode.outputs ??= {};\n      }\n      bindings[publicName] ??= [];\n      bindings[publicName].push(directiveIndex);\n      setShadowStylingInputFlags(tNode, publicName);\n    }\n  }\n}\n/**\n * Sets up input/output bindings that were defined through host directives on a specific node.\n * @param mode Whether inputs or outputs are being contructed.\n * @param tNode Node on which the bindings are being set up.\n * @param config Host directive definition that is being set up.\n * @param directiveIndex Index at which the directive instance will be stored in the LView.\n */\nfunction setupHostDirectiveInputsOrOutputs(mode, tNode, config, directiveIndex) {\n  const aliasMap = mode === 0 /* BindingType.Inputs */ ? config.inputs : config.outputs;\n  for (const initialName in aliasMap) {\n    if (aliasMap.hasOwnProperty(initialName)) {\n      const publicName = aliasMap[initialName];\n      let bindings;\n      if (mode === 0 /* BindingType.Inputs */) {\n        bindings = tNode.hostDirectiveInputs ??= {};\n      } else {\n        bindings = tNode.hostDirectiveOutputs ??= {};\n      }\n      bindings[publicName] ??= [];\n      bindings[publicName].push(directiveIndex, initialName);\n      setShadowStylingInputFlags(tNode, publicName);\n    }\n  }\n}\nfunction setShadowStylingInputFlags(tNode, publicName) {\n  if (publicName === 'class') {\n    tNode.flags |= 8 /* TNodeFlags.hasClassInput */;\n  } else if (publicName === 'style') {\n    tNode.flags |= 16 /* TNodeFlags.hasStyleInput */;\n  }\n}\n/**\n * Sets up the initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param tNode TNode on which to set up the initial inputs.\n * @param directiveIndex Index of the directive that is currently being processed.\n */\nfunction setupInitialInputs(tNode, directiveIndex, isHostDirective) {\n  const {\n    attrs,\n    inputs,\n    hostDirectiveInputs\n  } = tNode;\n  if (attrs === null || !isHostDirective && inputs === null || isHostDirective && hostDirectiveInputs === null ||\n  // Do not use unbound attributes as inputs to structural directives, since structural\n  // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n  isInlineTemplate(tNode)) {\n    tNode.initialInputs ??= [];\n    tNode.initialInputs.push(null);\n    return;\n  }\n  let inputsToStore = null;\n  let i = 0;\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n    if (attrName === 0 /* AttributeMarker.NamespaceURI */) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    } else if (attrName === 5 /* AttributeMarker.ProjectAs */) {\n      // Skip over the `ngProjectAs` value.\n      i += 2;\n      continue;\n    } else if (typeof attrName === 'number') {\n      // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n      break;\n    }\n    if (!isHostDirective && inputs.hasOwnProperty(attrName)) {\n      // Find the input's public name from the input store. Note that we can be found easier\n      // through the directive def, but we want to do it using the inputs store so that it can\n      // account for host directive aliases.\n      const inputConfig = inputs[attrName];\n      for (const index of inputConfig) {\n        if (index === directiveIndex) {\n          inputsToStore ??= [];\n          inputsToStore.push(attrName, attrs[i + 1]);\n          // A directive can't have multiple inputs with the same name so we can break here.\n          break;\n        }\n      }\n    } else if (isHostDirective && hostDirectiveInputs.hasOwnProperty(attrName)) {\n      const config = hostDirectiveInputs[attrName];\n      for (let j = 0; j < config.length; j += 2) {\n        if (config[j] === directiveIndex) {\n          inputsToStore ??= [];\n          inputsToStore.push(config[j + 1], attrs[i + 1]);\n          break;\n        }\n      }\n    }\n    i += 2;\n  }\n  tNode.initialInputs ??= [];\n  tNode.initialInputs.push(inputsToStore);\n}\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nfunction configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {\n  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n  tView.data[directiveIndex] = def;\n  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));\n  // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n  // we also want to support `inject()` directly from the directive constructor context so we set\n  // `ɵɵdirectiveInject` as the inject implementation here too.\n  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject, ngDevMode ? def.type.name : null);\n  tView.blueprint[directiveIndex] = nodeInjectorFactory;\n  lView[directiveIndex] = nodeInjectorFactory;\n  registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\n}\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nfunction registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const hostBindings = def.hostBindings;\n  if (hostBindings) {\n    let hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null) {\n      hostBindingOpCodes = tView.hostBindingOpCodes = [];\n    }\n    const elementIndx = ~tNode.index;\n    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n      // Conditionally add select element so that we are more efficient in execution.\n      // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n      // (We could just always add it.)\n      hostBindingOpCodes.push(elementIndx);\n    }\n    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n  }\n}\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes) {\n  let i = hostBindingOpCodes.length;\n  while (i > 0) {\n    const value = hostBindingOpCodes[--i];\n    if (typeof value === 'number' && value < 0) {\n      return value;\n    }\n  }\n  return 0;\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(directiveIdx, def, exportsMap) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = directiveIdx;\n      }\n    }\n    if (isComponentDef(def)) exportsMap[''] = directiveIdx;\n  }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nfunction initTNodeFlags(tNode, index, numberOfDirectives) {\n  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n  tNode.flags |= 1 /* TNodeFlags.isDirectiveHost */;\n  // When the first directive is created on a node, save the index\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\nfunction assertNoDuplicateDirectives(directives) {\n  // The array needs at least two elements in order to have duplicates.\n  if (directives.length < 2) {\n    return;\n  }\n  const seenDirectives = new Set();\n  for (const current of directives) {\n    if (seenDirectives.has(current)) {\n      throw new RuntimeError(309 /* RuntimeErrorCode.DUPLICATE_DIRECTIVE */, `Directive ${current.type.name} matches multiple times on the same element. ` + `Directives can only match an element once.`);\n    }\n    seenDirectives.add(current);\n  }\n}\nfunction directiveHostFirstCreatePass(index, lView, type, name, directiveMatcher, bindingsEnabled, attrsIndex, localRefsIndex) {\n  const tView = lView[TVIEW];\n  ngDevMode && assertFirstCreatePass(tView);\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, type, name, attrs);\n  if (bindingsEnabled) {\n    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex), directiveMatcher);\n  }\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n  return tNode;\n}\nfunction directiveHostEndFirstCreatePass(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  registerPostOrderHooks(tView, tNode);\n  if (isContentQueryHost(tNode)) {\n    tView.queries.elementEnd(tNode);\n  }\n}\nfunction domOnlyFirstCreatePass(index, tView, type, name, attrsIndex, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, type, name, attrs);\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n  if (localRefsIndex != null) {\n    const refs = getConstant(tViewConsts, localRefsIndex);\n    tNode.localNames = [];\n    for (let i = 0; i < refs.length; i += 2) {\n      // Always -1 since DOM-only instructions can only refer to the native node.\n      tNode.localNames.push(refs[i], -1);\n    }\n  }\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n  return tNode;\n}\nfunction isListLikeIterable(obj) {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) || !(obj instanceof Map) &&\n  // JS Map are iterables but return entries as [k, v]\n  Symbol.iterator in obj; // JS Iterable have a Symbol.iterator prop\n}\nfunction areIterablesEqual(a, b, comparator) {\n  const iterator1 = a[Symbol.iterator]();\n  const iterator2 = b[Symbol.iterator]();\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\nfunction iterateListLike(obj, fn) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[Symbol.iterator]();\n    let item;\n    while (!(item = iterator.next()).done) {\n      fn(item.value);\n    }\n  }\n}\nfunction isJsObject(o) {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\nfunction devModeEqual(a, b) {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return Object.is(a, b);\n    }\n  }\n}\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nfunction updateBinding(lView, bindingIndex, value) {\n  return lView[bindingIndex] = value;\n}\n/** Gets the current binding value. */\nfunction getBinding(lView, bindingIndex) {\n  ngDevMode && assertIndexInRange(lView, bindingIndex);\n  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  if (value === NO_CHANGE) {\n    return false;\n  }\n  const oldValue = lView[bindingIndex];\n  if (Object.is(oldValue, value)) {\n    return false;\n  } else {\n    if (ngDevMode && isInCheckNoChangesMode()) {\n      // View engine didn't report undefined values as changed on the first checkNoChanges pass\n      // (before the change detection was run).\n      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n      if (!devModeEqual(oldValueToCompare, value)) {\n        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName, lView);\n      }\n      // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n      // For this reason we exit as if no change. The early exit is needed to prevent the changed\n      // value to be written into `LView` (If we would write the new value that we would not see it\n      // as change on next CD.)\n      return false;\n    }\n    lView[bindingIndex] = value;\n    return true;\n  }\n}\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(tNode, lView, listenerFn) {\n  // Note: we are performing most of the work in the listener function itself\n  // to optimize listener registration.\n  return function wrapListenerIn_markDirtyAndPreventDefault(event) {\n    // In order to be backwards compatible with View Engine, events on component host nodes\n    // must also mark the component view itself dirty (i.e. the view that it owns).\n    const startView = isComponentHost(tNode) ? getComponentLViewByIndex(tNode.index, lView) : lView;\n    markViewDirty(startView, 5 /* NotificationSource.Listener */);\n    const context = lView[CONTEXT];\n    let result = executeListenerWithErrorHandling(lView, context, listenerFn, event);\n    // A just-invoked listener function might have coalesced listeners so we need to check for\n    // their presence and invoke as needed.\n    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n    while (nextListenerFn) {\n      // We should prevent default if any of the listeners explicitly return false\n      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, event) && result;\n      nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n    }\n    return result;\n  };\n}\nfunction executeListenerWithErrorHandling(lView, context, listenerFn, e) {\n  const prevConsumer = setActiveConsumer$1(null);\n  try {\n    profiler(6 /* ProfilerEvent.OutputStart */, context, listenerFn);\n    // Only explicitly returning false from a listener should preventDefault\n    return listenerFn(e) !== false;\n  } catch (error) {\n    handleUncaughtError(lView, error);\n    return false;\n  } finally {\n    profiler(7 /* ProfilerEvent.OutputEnd */, context, listenerFn);\n    setActiveConsumer$1(prevConsumer);\n  }\n}\n/**\n * Listen to a DOM event on a specific node.\n * @param tNode TNode on which to listen.\n * @param tView TView in which the node is placed.\n * @param lView LView in which the node instance is placed.\n * @param eventTargetResolver Resolver for global event targets.\n * @param renderer Renderer to use for listening to the event.\n * @param eventName Name of the event.\n * @param originalListener Original listener as it was created by the compiler. Necessary for event\n *   coalescing.\n * @param wrappedListener Listener wrapped with additional logic like marking for check and error\n *   handling.\n * @returns Boolean indicating whether the event was bound or was coalesced into an existing\n *   listener.\n */\nfunction listenToDomEvent(tNode, tView, lView, eventTargetResolver, renderer, eventName, originalListener, wrappedListener) {\n  ngDevMode && assertNotSame(wrappedListener, originalListener, 'Expected wrapped and original listeners to be different.');\n  const isTNodeDirectiveHost = isDirectiveHost(tNode);\n  let hasCoalesced = false;\n  // In order to match current behavior, native DOM event listeners must be added for all\n  // events (including outputs).\n  // There might be cases where multiple directives on the same element try to register an event\n  // handler function for the same event. In this situation we want to avoid registration of\n  // several native listeners as each registration would be intercepted by NgZone and\n  // trigger change detection. This would mean that a single user action would result in several\n  // change detections being invoked. To avoid this situation we want to have only one call to\n  // native handler registration (for the same element and same type of event).\n  //\n  // In order to have just one native event handler in presence of multiple handler functions,\n  // we just register a first handler function as a native event listener and then chain\n  // (coalesce) other handler functions on top of the first native handler function.\n  let existingListener = null;\n  // Please note that the coalescing described here doesn't happen for events specifying an\n  // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n  // view engine.\n  // Also, we don't have to search for existing listeners if there are no directives\n  // matching on a given node as we can't register multiple event handlers for the same event in\n  // a template (this would mean having duplicate attributes).\n  if (!eventTargetResolver && isTNodeDirectiveHost) {\n    existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n  }\n  if (existingListener !== null) {\n    // Attach a new listener to coalesced listeners list, maintaining the order in which\n    // listeners are registered. For performance reasons, we keep a reference to the last\n    // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n    // the entire set each time we need to add a new listener.\n    const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\n    lastListenerFn.__ngNextListenerFn__ = originalListener;\n    existingListener.__ngLastListenerFn__ = originalListener;\n    hasCoalesced = true;\n  } else {\n    const native = getNativeByTNode(tNode, lView);\n    const target = eventTargetResolver ? eventTargetResolver(native) : native;\n    stashEventListenerImpl(lView, target, eventName, wrappedListener);\n    const cleanupFn = renderer.listen(target, eventName, wrappedListener);\n    const idxOrTargetGetter = eventTargetResolver ? _lView => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index;\n    storeListenerCleanup(idxOrTargetGetter, tView, lView, eventName, wrappedListener, cleanupFn, false);\n  }\n  return hasCoalesced;\n}\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(tView, lView, eventName, tNodeIndex) {\n  const tCleanup = tView.cleanup;\n  if (tCleanup != null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      const cleanupEventName = tCleanup[i];\n      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIndex) {\n        // We have found a matching event name on the same node but it might not have been\n        // registered yet, so we must explicitly verify entries in the LView cleanup data\n        // structures.\n        const lCleanup = lView[CLEANUP];\n        const listenerIdxInLCleanup = tCleanup[i + 2];\n        return lCleanup && lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n      }\n      // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n      // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n      // documentation of TView.cleanup for more details of this data structure layout.\n      if (typeof cleanupEventName === 'string') {\n        i += 2;\n      }\n    }\n  }\n  return null;\n}\n/**\n * Stores a cleanup function for an event listener.\n * @param indexOrTargetGetter Either the index of the TNode on which the event is bound or a\n *  function that when invoked will return the event target.\n * @param tView TView in which the event is bound.\n * @param lView LView in which the event is bound.\n * @param eventName Name of the event.\n * @param listenerFn Final callback of the event.\n * @param cleanup Function to invoke during cleanup.\n * @param isOutput Whether this is an output listener or a native DOM listener.\n */\nfunction storeListenerCleanup(indexOrTargetGetter, tView, lView, eventName, listenerFn, cleanup, isOutput) {\n  const tCleanup = tView.firstCreatePass ? getOrCreateTViewCleanup(tView) : null;\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  const index = lCleanup.length;\n  lCleanup.push(listenerFn, cleanup);\n  tCleanup && tCleanup.push(eventName, indexOrTargetGetter, index, (index + 1) * (isOutput ? -1 : 1));\n}\nfunction createOutputListener(tNode, lView, listenerFn, targetDef, eventName) {\n  // TODO(pk): decouple checks from the actual binding\n  const wrappedListener = wrapListener(tNode, lView, listenerFn);\n  const hasBound = listenToDirectiveOutput(tNode, lView, targetDef, eventName, wrappedListener);\n  if (!hasBound && ngDevMode) {\n    throw new RuntimeError(316 /* RuntimeErrorCode.INVALID_BINDING_TARGET */, `${stringifyForError(targetDef.type)} does not have an output with a public name of \"${eventName}\".`);\n  }\n}\n/** Listens to an output on a specific directive. */\nfunction listenToDirectiveOutput(tNode, lView, target, eventName, listenerFn) {\n  let hostIndex = null;\n  let hostDirectivesStart = null;\n  let hostDirectivesEnd = null;\n  let hasOutput = false;\n  if (ngDevMode && !tNode.directiveToIndex?.has(target.type)) {\n    throw new Error(`Node does not have a directive with type ${target.type.name}`);\n  }\n  const data = tNode.directiveToIndex.get(target.type);\n  if (typeof data === 'number') {\n    hostIndex = data;\n  } else {\n    [hostIndex, hostDirectivesStart, hostDirectivesEnd] = data;\n  }\n  if (hostDirectivesStart !== null && hostDirectivesEnd !== null && tNode.hostDirectiveOutputs?.hasOwnProperty(eventName)) {\n    const hostDirectiveOutputs = tNode.hostDirectiveOutputs[eventName];\n    for (let i = 0; i < hostDirectiveOutputs.length; i += 2) {\n      const index = hostDirectiveOutputs[i];\n      if (index >= hostDirectivesStart && index <= hostDirectivesEnd) {\n        ngDevMode && assertIndexInRange(lView, index);\n        hasOutput = true;\n        listenToOutput(tNode, lView, index, hostDirectiveOutputs[i + 1], eventName, listenerFn);\n      } else if (index > hostDirectivesEnd) {\n        break;\n      }\n    }\n  }\n  if (target.outputs.hasOwnProperty(eventName)) {\n    ngDevMode && assertIndexInRange(lView, hostIndex);\n    hasOutput = true;\n    listenToOutput(tNode, lView, hostIndex, eventName, eventName, listenerFn);\n  }\n  return hasOutput;\n}\nfunction listenToOutput(tNode, lView, directiveIndex, lookupName, eventName, listenerFn) {\n  ngDevMode && assertIndexInRange(lView, directiveIndex);\n  const instance = lView[directiveIndex];\n  const tView = lView[TVIEW];\n  const def = tView.data[directiveIndex];\n  const propertyName = def.outputs[lookupName];\n  const output = instance[propertyName];\n  if (ngDevMode && !isOutputSubscribable(output)) {\n    throw new Error(`@Output ${propertyName} not initialized in '${instance.constructor.name}'.`);\n  }\n  const subscription = output.subscribe(listenerFn);\n  storeListenerCleanup(tNode.index, tView, lView, eventName, listenerFn, subscription, true);\n}\n/**\n * Whether the given value represents a subscribable output.\n *\n * For example, an `EventEmitter, a `Subject`, an `Observable` or an\n * `OutputEmitter`.\n */\nfunction isOutputSubscribable(value) {\n  return value != null && typeof value.subscribe === 'function';\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/** Symbol used to store and retrieve metadata about a binding. */\nconst BINDING = /* @__PURE__ */Symbol('BINDING');\n// These are constant between all the bindings so we can reuse the objects.\nconst INPUT_BINDING_METADATA = {\n  kind: 'input',\n  requiredVars: 1\n};\nconst OUTPUT_BINDING_METADATA = {\n  kind: 'output',\n  requiredVars: 0\n};\n// TODO(pk): this is a sketch of an input binding instruction that still needs some cleanups\n// - take an index of a directive on TNode (as matched), review all the index mappings that we need to do\n// - move more logic to the first creation pass\n// - move this function to under the instructions folder\nfunction inputBindingUpdate(targetDirectiveIdx, publicName, value) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = lView[TVIEW];\n    const tNode = getSelectedTNode();\n    const componentLView = getComponentLViewByIndex(tNode.index, lView);\n    markViewDirty(componentLView, 1 /* NotificationSource.SetInput */);\n    // TODO(pk): don't check on each and every binding, just assert in dev mode\n    const targetDef = tView.directiveRegistry[targetDirectiveIdx];\n    if (ngDevMode && !targetDef) {\n      throw new RuntimeError(315 /* RuntimeErrorCode.NO_BINDING_TARGET */, `Input binding to property \"${publicName}\" does not have a target.`);\n    }\n    // TODO(pk): the hasSet check should be replaced by one-off check in the first creation pass\n    const hasSet = setDirectiveInput(tNode, tView, lView, targetDef, publicName, value);\n    if (ngDevMode) {\n      if (!hasSet) {\n        throw new RuntimeError(315 /* RuntimeErrorCode.NO_BINDING_TARGET */, `${stringifyForError(targetDef.type)} does not have an input with a public name of \"${publicName}\".`);\n      }\n      storePropertyBindingMetadata(tView.data, tNode, publicName, bindingIndex);\n    }\n  }\n}\n/**\n * Creates an input binding.\n * @param publicName Public name of the input to bind to.\n * @param value Callback that returns the current value for the binding. Can be either a signal or\n *   a plain getter function.\n *\n * ### Usage Example\n * In this example we create an instance of the `MyButton` component and bind the value of\n * the `isDisabled` signal to its `disabled` input.\n *\n * ```\n * const isDisabled = signal(false);\n *\n * createComponent(MyButton, {\n *   bindings: [inputBinding('disabled', isDisabled)]\n * });\n * ```\n */\nfunction inputBinding(publicName, value) {\n  // Note: ideally we would use a class here, but it seems like they\n  // don't get tree shaken when constructed by a function like this.\n  const binding = {\n    [BINDING]: INPUT_BINDING_METADATA,\n    update: () => inputBindingUpdate(binding.targetIdx, publicName, value())\n  };\n  return binding;\n}\n/**\n * Creates an output binding.\n * @param eventName Public name of the output to listen to.\n * @param listener Function to be called when the output emits.\n *\n * ### Usage example\n * In this example we create an instance of the `MyCheckbox` component and listen\n * to its `onChange` event.\n *\n * ```\n * interface CheckboxChange {\n *   value: string;\n * }\n *\n * createComponent(MyCheckbox, {\n *   bindings: [\n *    outputBinding<CheckboxChange>('onChange', event => console.log(event.value))\n *   ],\n * });\n * ```\n */\nfunction outputBinding(eventName, listener) {\n  // Note: ideally we would use a class here, but it seems like they\n  // don't get tree shaken when constructed by a function like this.\n  const binding = {\n    [BINDING]: OUTPUT_BINDING_METADATA,\n    create: () => {\n      const lView = getLView();\n      const tNode = getCurrentTNode();\n      const tView = lView[TVIEW];\n      const targetDef = tView.directiveRegistry[binding.targetIdx];\n      createOutputListener(tNode, lView, listener, targetDef, eventName);\n    }\n  };\n  return binding;\n}\n/**\n * Creates a two-way binding.\n * @param eventName Public name of the two-way compatible input.\n * @param value Writable signal from which to get the current value and to which to write new\n * values.\n *\n * ### Usage example\n * In this example we create an instance of the `MyCheckbox` component and bind to its `value`\n * input using a two-way binding.\n *\n * ```\n * const checkboxValue = signal('');\n *\n * createComponent(MyCheckbox, {\n *   bindings: [\n *    twoWayBinding('value', checkboxValue),\n *   ],\n * });\n * ```\n */\nfunction twoWayBinding(publicName, value) {\n  const input = inputBinding(publicName, value);\n  const output = outputBinding(publicName + 'Change', eventValue => value.set(eventValue));\n  // We take advantage of inputs only having a `create` block and outputs only having an `update`\n  // block by passing them through directly instead of creating dedicated functions here. This\n  // assumption can break down if one of them starts targeting both blocks. These assertions\n  // are here to help us catch it if something changes in the future.\n  ngDevMode && assertNotDefined(input.create, 'Unexpected `create` callback in inputBinding');\n  ngDevMode && assertNotDefined(output.update, 'Unexpected `update` callback in outputBinding');\n  const binding = {\n    [BINDING]: {\n      kind: 'twoWay',\n      requiredVars: input[BINDING].requiredVars + output[BINDING].requiredVars\n    },\n    set targetIdx(idx) {\n      input.targetIdx = idx;\n      output.targetIdx = idx;\n    },\n    create: output.create,\n    update: input.update\n  };\n  return binding;\n}\nclass ComponentFactoryResolver extends ComponentFactoryResolver$1 {\n  ngModule;\n  /**\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(ngModule) {\n    super();\n    this.ngModule = ngModule;\n  }\n  resolveComponentFactory(component) {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef(component);\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n}\nfunction toInputRefArray(map) {\n  return Object.keys(map).map(name => {\n    const [propName, flags, transform] = map[name];\n    const inputData = {\n      propName: propName,\n      templateName: name,\n      isSignal: (flags & InputFlags.SignalBased) !== 0\n    };\n    if (transform) {\n      inputData.transform = transform;\n    }\n    return inputData;\n  });\n}\nfunction toOutputRefArray(map) {\n  return Object.keys(map).map(name => ({\n    propName: map[name],\n    templateName: name\n  }));\n}\nfunction verifyNotAnOrphanComponent(componentDef) {\n  // TODO(pk): create assert that verifies ngDevMode\n  if ((typeof ngJitMode === 'undefined' || ngJitMode) && componentDef.debugInfo?.forbidOrphanRendering) {\n    if (depsTracker.isOrphanComponent(componentDef.type)) {\n      throw new RuntimeError(981 /* RuntimeErrorCode.RUNTIME_DEPS_ORPHAN_COMPONENT */, `Orphan component found! Trying to render the component ${debugStringifyTypeForError(componentDef.type)} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`);\n    }\n  }\n}\nfunction createRootViewInjector(componentDef, environmentInjector, injector) {\n  let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : environmentInjector?.injector;\n  if (realEnvironmentInjector && componentDef.getStandaloneInjector !== null) {\n    realEnvironmentInjector = componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;\n  }\n  const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;\n  return rootViewInjector;\n}\nfunction createRootLViewEnvironment(rootLViewInjector) {\n  const rendererFactory = rootLViewInjector.get(RendererFactory2, null);\n  if (rendererFactory === null) {\n    throw new RuntimeError(407 /* RuntimeErrorCode.RENDERER_NOT_FOUND */, ngDevMode && 'Angular was not able to inject a renderer (RendererFactory2). ' + 'Likely this is due to a broken DI hierarchy. ' + 'Make sure that any injector used to create this component has a correct parent.');\n  }\n  const sanitizer = rootLViewInjector.get(Sanitizer, null);\n  const changeDetectionScheduler = rootLViewInjector.get(ChangeDetectionScheduler, null);\n  let ngReflect = false;\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ngReflect = rootLViewInjector.get(NG_REFLECT_ATTRS_FLAG, NG_REFLECT_ATTRS_FLAG_DEFAULT);\n  }\n  return {\n    rendererFactory,\n    sanitizer,\n    changeDetectionScheduler,\n    ngReflect\n  };\n}\nfunction createHostElement(componentDef, render) {\n  // Determine a tag name used for creating host elements when this component is created\n  // dynamically. Default to 'div' if this component did not specify any tag name in its\n  // selector.\n  const tagName = (componentDef.selectors[0][0] || 'div').toLowerCase();\n  const namespace = tagName === 'svg' ? SVG_NAMESPACE : tagName === 'math' ? MATH_ML_NAMESPACE : null;\n  return createElementNode(render, tagName, namespace);\n}\n/**\n * ComponentFactory interface implementation.\n */\nclass ComponentFactory extends ComponentFactory$1 {\n  componentDef;\n  ngModule;\n  selector;\n  componentType;\n  ngContentSelectors;\n  isBoundToModule;\n  cachedInputs = null;\n  cachedOutputs = null;\n  get inputs() {\n    this.cachedInputs ??= toInputRefArray(this.componentDef.inputs);\n    return this.cachedInputs;\n  }\n  get outputs() {\n    this.cachedOutputs ??= toOutputRefArray(this.componentDef.outputs);\n    return this.cachedOutputs;\n  }\n  /**\n   * @param componentDef The component definition.\n   * @param ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(componentDef, ngModule) {\n    super();\n    this.componentDef = componentDef;\n    this.ngModule = ngModule;\n    this.componentType = componentDef.type;\n    this.selector = stringifyCSSSelectorList(componentDef.selectors);\n    this.ngContentSelectors = componentDef.ngContentSelectors ?? [];\n    this.isBoundToModule = !!ngModule;\n  }\n  create(injector, projectableNodes, rootSelectorOrNode, environmentInjector, directives, componentBindings) {\n    profiler(22 /* ProfilerEvent.DynamicComponentStart */);\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const cmpDef = this.componentDef;\n      ngDevMode && verifyNotAnOrphanComponent(cmpDef);\n      const rootTView = createRootTView(rootSelectorOrNode, cmpDef, componentBindings, directives);\n      const rootViewInjector = createRootViewInjector(cmpDef, environmentInjector || this.ngModule, injector);\n      const environment = createRootLViewEnvironment(rootViewInjector);\n      const hostRenderer = environment.rendererFactory.createRenderer(null, cmpDef);\n      const hostElement = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, cmpDef.encapsulation, rootViewInjector) : createHostElement(cmpDef, hostRenderer);\n      const hasInputBindings = componentBindings?.some(isInputBinding) || directives?.some(d => typeof d !== 'function' && d.bindings.some(isInputBinding));\n      const rootLView = createLView(null, rootTView, null, 512 /* LViewFlags.IsRoot */ | getInitialLViewFlagsFromDef(cmpDef), null, null, environment, hostRenderer, rootViewInjector, null, retrieveHydrationInfo(hostElement, rootViewInjector, true /* isRootView */));\n      rootLView[HEADER_OFFSET] = hostElement;\n      // rootView is the parent when bootstrapping\n      // TODO(misko): it looks like we are entering view here but we don't really need to as\n      // `renderView` does that. However as the code is written it is needed because\n      // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n      // issues would allow us to drop this.\n      enterView(rootLView);\n      let componentView = null;\n      try {\n        const hostTNode = directiveHostFirstCreatePass(HEADER_OFFSET, rootLView, 2 /* TNodeType.Element */, '#host', () => rootTView.directiveRegistry, true, 0);\n        // ---- element instruction\n        // TODO(crisbeto): in practice `hostElement` should always be defined, but there are some\n        // tests where the renderer is mocked out and `undefined` is returned. We should update the\n        // tests so that this check can be removed.\n        if (hostElement) {\n          setupStaticAttributes(hostRenderer, hostElement, hostTNode);\n          attachPatchData(hostElement, rootLView);\n        }\n        // TODO(pk): this logic is similar to the instruction code where a node can have directives\n        createDirectivesInstances(rootTView, rootLView, hostTNode);\n        executeContentQueries(rootTView, hostTNode, rootLView);\n        directiveHostEndFirstCreatePass(rootTView, hostTNode);\n        if (projectableNodes !== undefined) {\n          projectNodes(hostTNode, this.ngContentSelectors, projectableNodes);\n        }\n        componentView = getComponentLViewByIndex(hostTNode.index, rootLView);\n        // TODO(pk): why do we need this logic?\n        rootLView[CONTEXT] = componentView[CONTEXT];\n        renderView(rootTView, rootLView, null);\n      } catch (e) {\n        // Stop tracking the views if creation failed since\n        // the consumer won't have a way to dereference them.\n        if (componentView !== null) {\n          unregisterLView(componentView);\n        }\n        unregisterLView(rootLView);\n        throw e;\n      } finally {\n        profiler(23 /* ProfilerEvent.DynamicComponentEnd */);\n        leaveView();\n      }\n      return new ComponentRef(this.componentType, rootLView, !!hasInputBindings);\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\nfunction createRootTView(rootSelectorOrNode, componentDef, componentBindings, directives) {\n  const tAttributes = rootSelectorOrNode ? ['ng-version', '20.1.6'] :\n  // Extract attributes and classes from the first selector only to match VE behavior.\n  extractAttrsAndClassesFromSelector(componentDef.selectors[0]);\n  let creationBindings = null;\n  let updateBindings = null;\n  let varsToAllocate = 0;\n  if (componentBindings) {\n    for (const binding of componentBindings) {\n      varsToAllocate += binding[BINDING].requiredVars;\n      if (binding.create) {\n        binding.targetIdx = 0;\n        (creationBindings ??= []).push(binding);\n      }\n      if (binding.update) {\n        binding.targetIdx = 0;\n        (updateBindings ??= []).push(binding);\n      }\n    }\n  }\n  if (directives) {\n    for (let i = 0; i < directives.length; i++) {\n      const directive = directives[i];\n      if (typeof directive !== 'function') {\n        for (const binding of directive.bindings) {\n          varsToAllocate += binding[BINDING].requiredVars;\n          const targetDirectiveIdx = i + 1;\n          if (binding.create) {\n            binding.targetIdx = targetDirectiveIdx;\n            (creationBindings ??= []).push(binding);\n          }\n          if (binding.update) {\n            binding.targetIdx = targetDirectiveIdx;\n            (updateBindings ??= []).push(binding);\n          }\n        }\n      }\n    }\n  }\n  const directivesToApply = [componentDef];\n  if (directives) {\n    for (const directive of directives) {\n      const directiveType = typeof directive === 'function' ? directive : directive.type;\n      const directiveDef = ngDevMode ? getDirectiveDefOrThrow(directiveType) : getDirectiveDef(directiveType);\n      if (ngDevMode && !directiveDef.standalone) {\n        throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(directiveType)} directive must be standalone in ` + `order to be applied to a dynamically-created component.`);\n      }\n      directivesToApply.push(directiveDef);\n    }\n  }\n  const rootTView = createTView(0 /* TViewType.Root */, null, getRootTViewTemplate(creationBindings, updateBindings), 1, varsToAllocate, directivesToApply, null, null, null, [tAttributes], null);\n  return rootTView;\n}\nfunction getRootTViewTemplate(creationBindings, updateBindings) {\n  if (!creationBindings && !updateBindings) {\n    return null;\n  }\n  return flags => {\n    if (flags & 1 /* RenderFlags.Create */ && creationBindings) {\n      for (const binding of creationBindings) {\n        binding.create();\n      }\n    }\n    if (flags & 2 /* RenderFlags.Update */ && updateBindings) {\n      for (const binding of updateBindings) {\n        binding.update();\n      }\n    }\n  };\n}\nfunction isInputBinding(binding) {\n  const kind = binding[BINDING].kind;\n  return kind === 'input' || kind === 'twoWay';\n}\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nclass ComponentRef extends ComponentRef$1 {\n  _rootLView;\n  _hasInputBindings;\n  instance;\n  hostView;\n  changeDetectorRef;\n  componentType;\n  location;\n  previousInputValues = null;\n  _tNode;\n  constructor(componentType, _rootLView, _hasInputBindings) {\n    super();\n    this._rootLView = _rootLView;\n    this._hasInputBindings = _hasInputBindings;\n    this._tNode = getTNode(_rootLView[TVIEW], HEADER_OFFSET);\n    this.location = createElementRef(this._tNode, _rootLView);\n    this.instance = getComponentLViewByIndex(this._tNode.index, _rootLView)[CONTEXT];\n    this.hostView = this.changeDetectorRef = new ViewRef(_rootLView, undefined /* _cdRefInjectingView */);\n    this.componentType = componentType;\n  }\n  setInput(name, value) {\n    if (this._hasInputBindings && ngDevMode) {\n      throw new RuntimeError(317 /* RuntimeErrorCode.INVALID_SET_INPUT_CALL */, 'Cannot call `setInput` on a component that is using the `inputBinding` or `twoWayBinding` functions.');\n    }\n    const tNode = this._tNode;\n    this.previousInputValues ??= new Map();\n    // Do not set the input if it is the same as the last value\n    // This behavior matches `bindingUpdated` when binding inputs in templates.\n    if (this.previousInputValues.has(name) && Object.is(this.previousInputValues.get(name), value)) {\n      return;\n    }\n    const lView = this._rootLView;\n    const hasSetInput = setAllInputsForProperty(tNode, lView[TVIEW], lView, name, value);\n    this.previousInputValues.set(name, value);\n    const childComponentLView = getComponentLViewByIndex(tNode.index, lView);\n    markViewDirty(childComponentLView, 1 /* NotificationSource.SetInput */);\n    if (ngDevMode && !hasSetInput) {\n      const cmpNameForError = stringifyForError(this.componentType);\n      let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n      message += `Make sure that the '${name}' property is declared as an input using the @Input() decorator or the input() function.`;\n      reportUnknownPropertyError(message);\n    }\n  }\n  get injector() {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n  destroy() {\n    this.hostView.destroy();\n  }\n  onDestroy(callback) {\n    this.hostView.onDestroy(callback);\n  }\n}\n/** Projects the `projectableNodes` that were specified when creating a root component. */\nfunction projectNodes(tNode, ngContentSelectors, projectableNodes) {\n  const projection = tNode.projection = [];\n  for (let i = 0; i < ngContentSelectors.length; i++) {\n    const nodesforSlot = projectableNodes[i];\n    // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n    // complex checks down the line.\n    // We also normalize the length of the passed in projectable nodes (to match the number of\n    // <ng-container> slots defined by a component).\n    projection.push(nodesforSlot != null && nodesforSlot.length ? Array.from(nodesforSlot) : null);\n  }\n}\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a view hierarchy.\n *\n * @usageNotes\n *\n * The example below demonstrates how the `createComponent` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   selector: 'dynamic',\n *   template: `<span>This is a content of a dynamic component.</span>`,\n * })\n * class DynamicComponent {\n *   vcr = inject(ViewContainerRef);\n * }\n *\n * @Component({\n *   standalone: true,\n *   selector: 'app',\n *   template: `<main>Hi! This is the main content.</main>`,\n * })\n * class AppComponent {\n *   vcr = inject(ViewContainerRef);\n *\n *   ngAfterViewInit() {\n *     const compRef = this.vcr.createComponent(DynamicComponent);\n *     compRef.changeDetectorRef.detectChanges();\n *   }\n * }\n * ```\n *\n * @see {@link ComponentRef}\n * @see {@link EmbeddedViewRef}\n *\n * @publicApi\n */\nlet ViewContainerRef = /*#__PURE__*/(() => {\n  class ViewContainerRef {\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ELEMENT_ID__ = injectViewContainerRef;\n  }\n  return ViewContainerRef;\n})();\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef() {\n  const previousTNode = getCurrentTNode();\n  return createContainerRef(previousTNode, getLView());\n}\nconst VE_ViewContainerRef = ViewContainerRef;\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n  _lContainer;\n  _hostTNode;\n  _hostLView;\n  constructor(_lContainer, _hostTNode, _hostLView) {\n    super();\n    this._lContainer = _lContainer;\n    this._hostTNode = _hostTNode;\n    this._hostLView = _hostLView;\n  }\n  get element() {\n    return createElementRef(this._hostTNode, this._hostLView);\n  }\n  get injector() {\n    return new NodeInjector(this._hostTNode, this._hostLView);\n  }\n  /** @deprecated No replacement */\n  get parentInjector() {\n    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n    if (hasParentInjector(parentLocation)) {\n      const parentView = getParentInjectorView(parentLocation, this._hostLView);\n      const injectorIndex = getParentInjectorIndex(parentLocation);\n      ngDevMode && assertNodeInjector(parentView, injectorIndex);\n      const parentTNode = parentView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n      return new NodeInjector(parentTNode, parentView);\n    } else {\n      return new NodeInjector(null, this._hostLView);\n    }\n  }\n  clear() {\n    while (this.length > 0) {\n      this.remove(this.length - 1);\n    }\n  }\n  get(index) {\n    const viewRefs = getViewRefs(this._lContainer);\n    return viewRefs !== null && viewRefs[index] || null;\n  }\n  get length() {\n    return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n  createEmbeddedView(templateRef, context, indexOrOptions) {\n    let index;\n    let injector;\n    if (typeof indexOrOptions === 'number') {\n      index = indexOrOptions;\n    } else if (indexOrOptions != null) {\n      index = indexOrOptions.index;\n      injector = indexOrOptions.injector;\n    }\n    const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);\n    const viewRef = templateRef.createEmbeddedViewImpl(context || {}, injector, dehydratedView);\n    this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\n    return viewRef;\n  }\n  createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector, directives, bindings) {\n    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n    let index;\n    // This function supports 2 signatures and we need to handle options correctly for both:\n    //   1. When first argument is a Component type. This signature also requires extra\n    //      options to be provided as object (more ergonomic option).\n    //   2. First argument is a Component factory. In this case extra options are represented as\n    //      positional arguments. This signature is less ergonomic and will be deprecated.\n    if (isComponentFactory) {\n      if (ngDevMode) {\n        assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' + 'and an options object as the second argument. This combination of arguments ' + 'is incompatible. You can either change the first argument to provide Component ' + 'type or change the second argument to be a number (representing an index at ' + \"which to insert the new component's host view into this container)\");\n      }\n      index = indexOrOptions;\n    } else {\n      if (ngDevMode) {\n        assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` + `Please check whether provided class has @Component decorator.`);\n        assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' + \"and a number (representing an index at which to insert the new component's \" + 'host view into this container as the second argument. This combination of arguments ' + 'is incompatible. Please use an object as the second argument instead.');\n      }\n      const options = indexOrOptions || {};\n      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n        throwError(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\n      }\n      index = options.index;\n      injector = options.injector;\n      projectableNodes = options.projectableNodes;\n      environmentInjector = options.environmentInjector || options.ngModuleRef;\n      directives = options.directives;\n      bindings = options.bindings;\n    }\n    const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory(getComponentDef(componentFactoryOrType));\n    const contextInjector = injector || this.parentInjector;\n    // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n    if (!environmentInjector && componentFactory.ngModule == null) {\n      // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n      // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n      // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n      // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n      // using a provided injector first, then fall back to the parent injector of this\n      // `ViewContainerRef` instance.\n      //\n      // For the factory-less case, it's critical to establish a connection with the module\n      // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n      // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n      // rely on the provided injector, since it might be detached from the DI tree (for example, if\n      // it was created via `Injector.create` without specifying a parent injector, or if an\n      // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n      // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n      // injector, which is normally connected to the DI tree, which includes module injector\n      // subtree.\n      const _injector = isComponentFactory ? contextInjector : this.parentInjector;\n      // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n      // undefined` expression which seems to cause internal google apps to fail. This is documented\n      // in the following internal bug issue: go/b/142967802\n      const result = _injector.get(EnvironmentInjector, null);\n      if (result) {\n        environmentInjector = result;\n      }\n    }\n    const componentDef = getComponentDef(componentFactory.componentType ?? {});\n    const dehydratedView = findMatchingDehydratedView(this._lContainer, componentDef?.id ?? null);\n    const rNode = dehydratedView?.firstChild ?? null;\n    const componentRef = componentFactory.create(contextInjector, projectableNodes, rNode, environmentInjector, directives, bindings);\n    this.insertImpl(componentRef.hostView, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\n    return componentRef;\n  }\n  insert(viewRef, index) {\n    return this.insertImpl(viewRef, index, true);\n  }\n  insertImpl(viewRef, index, addToDOM) {\n    const lView = viewRef._lView;\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n    if (viewAttachedToContainer(lView)) {\n      // If view is already attached, detach it first so we clean up references appropriately.\n      const prevIdx = this.indexOf(viewRef);\n      // A view might be attached either to this or a different container. The `prevIdx` for\n      // those cases will be:\n      // equal to -1 for views attached to this ViewContainerRef\n      // >= 0 for views attached to a different ViewContainerRef\n      if (prevIdx !== -1) {\n        this.detach(prevIdx);\n      } else {\n        const prevLContainer = lView[PARENT];\n        ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');\n        // We need to re-create a R3ViewContainerRef instance since those are not stored on\n        // LView (nor anywhere else).\n        const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\n        prevVCRef.detach(prevVCRef.indexOf(viewRef));\n      }\n    }\n    // Logical operation of adding `LView` to `LContainer`\n    const adjustedIdx = this._adjustIndex(index);\n    const lContainer = this._lContainer;\n    addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);\n    viewRef.attachToViewContainerRef();\n    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n    return viewRef;\n  }\n  move(viewRef, newIndex) {\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    return this.insert(viewRef, newIndex);\n  }\n  indexOf(viewRef) {\n    const viewRefsArr = getViewRefs(this._lContainer);\n    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n  }\n  remove(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const detachedView = detachView(this._lContainer, adjustedIdx);\n    if (detachedView) {\n      // Before destroying the view, remove it from the container's array of `ViewRef`s.\n      // This ensures the view container length is updated before calling\n      // `destroyLView`, which could recursively call view container methods that\n      // rely on an accurate container length.\n      // (e.g. a method on this view container being called by a child directive's OnDestroy\n      // lifecycle hook)\n      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n      destroyLView(detachedView[TVIEW], detachedView);\n    }\n  }\n  detach(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const view = detachView(this._lContainer, adjustedIdx);\n    const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n    return wasDetached ? new ViewRef(view) : null;\n  }\n  _adjustIndex(index, shift = 0) {\n    if (index == null) {\n      return this.length + shift;\n    }\n    if (ngDevMode) {\n      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n      // +1 because it's legal to insert at the end.\n      assertLessThan(index, this.length + 1 + shift, 'index');\n    }\n    return index;\n  }\n};\nfunction getViewRefs(lContainer) {\n  return lContainer[VIEW_REFS];\n}\nfunction getOrCreateViewRefs(lContainer) {\n  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nfunction createContainerRef(hostTNode, hostLView) {\n  ngDevMode && assertTNodeType(hostTNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n  let lContainer;\n  const slotValue = hostLView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n  } else {\n    // An LContainer anchor can not be `null`, but we set it here temporarily\n    // and update to the actual value later in this function (see\n    // `_locateOrCreateAnchorNode`).\n    lContainer = createLContainer(slotValue, hostLView, null, hostTNode);\n    hostLView[hostTNode.index] = lContainer;\n    addToEndOfViewTree(hostLView, lContainer);\n  }\n  _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);\n  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n/**\n * Creates and inserts a comment node that acts as an anchor for a view container.\n *\n * If the host is a regular element, we have to insert a comment node manually which will\n * be used as an anchor when inserting elements. In this specific case we use low-level DOM\n * manipulation to insert it.\n */\nfunction insertAnchorNode(hostLView, hostTNode) {\n  const renderer = hostLView[RENDERER];\n  const commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n  const hostNative = getNativeByTNode(hostTNode, hostLView);\n  const parentOfHostNative = renderer.parentNode(hostNative);\n  nativeInsertBefore(renderer, parentOfHostNative, commentNode, renderer.nextSibling(hostNative), false);\n  return commentNode;\n}\nlet _locateOrCreateAnchorNode = createAnchorNode;\nlet _populateDehydratedViewsInLContainer = () => false; // noop by default\n/**\n * Looks up dehydrated views that belong to a given LContainer and populates\n * this information into the `LContainer[DEHYDRATED_VIEWS]` slot. When running\n * in client-only mode, this function is a noop.\n *\n * @param lContainer LContainer that should be populated.\n * @param tNode Corresponding TNode.\n * @param hostLView LView that hosts LContainer.\n * @returns a boolean flag that indicates whether a populating operation\n *   was successful. The operation might be unsuccessful in case is has completed\n *   previously, we are rendering in client-only mode or this content is located\n *   in a skip hydration section.\n */\nfunction populateDehydratedViewsInLContainer(lContainer, tNode, hostLView) {\n  return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);\n}\n/**\n * Regular creation mode: an anchor is created and\n * assigned to the `lContainer[NATIVE]` slot.\n */\nfunction createAnchorNode(lContainer, hostLView, hostTNode, slotValue) {\n  // We already have a native element (anchor) set, return.\n  if (lContainer[NATIVE]) return;\n  let commentNode;\n  // If the host is an element container, the native host element is guaranteed to be a\n  // comment and we can reuse that comment as anchor element for the new LContainer.\n  // The comment node in question is already part of the DOM structure so we don't need to append\n  // it again.\n  if (hostTNode.type & 8 /* TNodeType.ElementContainer */) {\n    commentNode = unwrapRNode(slotValue);\n  } else {\n    commentNode = insertAnchorNode(hostLView, hostTNode);\n  }\n  lContainer[NATIVE] = commentNode;\n}\n/**\n * Hydration logic that looks up all dehydrated views in this container\n * and puts them into `lContainer[DEHYDRATED_VIEWS]` slot.\n *\n * @returns a boolean flag that indicates whether a populating operation\n *   was successful. The operation might be unsuccessful in case is has completed\n *   previously, we are rendering in client-only mode or this content is located\n *   in a skip hydration section.\n */\nfunction populateDehydratedViewsInLContainerImpl(lContainer, tNode, hostLView) {\n  // We already have a native element (anchor) set and the process\n  // of finding dehydrated views happened (so the `lContainer[DEHYDRATED_VIEWS]`\n  // is not null), exit early.\n  if (lContainer[NATIVE] && lContainer[DEHYDRATED_VIEWS]) {\n    return true;\n  }\n  const hydrationInfo = hostLView[HYDRATION];\n  const noOffsetIndex = tNode.index - HEADER_OFFSET;\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock(tNode) || isDisconnectedNode$1(hydrationInfo, noOffsetIndex);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return false;\n  }\n  // Hydration mode, looking up an anchor node and dehydrated views in DOM.\n  const currentRNode = getSegmentHead(hydrationInfo, noOffsetIndex);\n  const serializedViews = hydrationInfo.data[CONTAINERS]?.[noOffsetIndex];\n  ngDevMode && assertDefined(serializedViews, 'Unexpected state: no hydration info available for a given TNode, ' + 'which represents a view container.');\n  const [commentNode, dehydratedViews] = locateDehydratedViewsInContainer(currentRNode, serializedViews);\n  if (ngDevMode) {\n    validateMatchingNode(commentNode, Node.COMMENT_NODE, null, hostLView, tNode, true);\n    // Do not throw in case this node is already claimed (thus `false` as a second\n    // argument). If this container is created based on an `<ng-template>`, the comment\n    // node would be already claimed from the `template` instruction. If an element acts\n    // as an anchor (e.g. <div #vcRef>), a separate comment node would be created/located,\n    // so we need to claim it here.\n    markRNodeAsClaimedByHydration(commentNode, false);\n  }\n  lContainer[NATIVE] = commentNode;\n  lContainer[DEHYDRATED_VIEWS] = dehydratedViews;\n  return true;\n}\nfunction locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue) {\n  if (!_populateDehydratedViewsInLContainer(lContainer, hostTNode, hostLView)) {\n    // Populating dehydrated views operation returned `false`, which indicates\n    // that the logic was running in client-only mode, this an anchor comment\n    // node should be created for this container.\n    createAnchorNode(lContainer, hostLView, hostTNode, slotValue);\n  }\n}\nfunction enableLocateOrCreateContainerRefImpl() {\n  _locateOrCreateAnchorNode = locateOrCreateAnchorNode;\n  _populateDehydratedViewsInLContainer = populateDehydratedViewsInLContainerImpl;\n}\nclass LQuery_ {\n  queryList;\n  matches = null;\n  constructor(queryList) {\n    this.queryList = queryList;\n  }\n  clone() {\n    return new LQuery_(this.queryList);\n  }\n  setDirty() {\n    this.queryList.setDirty();\n  }\n}\nclass LQueries_ {\n  queries;\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n  createEmbeddedView(tView) {\n    const tQueries = tView.queries;\n    if (tQueries !== null) {\n      const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n      const viewLQueries = [];\n      // An embedded view has queries propagated from a declaration view at the beginning of the\n      // TQueries collection and up until a first content query declared in the embedded view. Only\n      // propagated LQueries are created at this point (LQuery corresponding to declared content\n      // queries will be instantiated from the content query instructions for each directive).\n      for (let i = 0; i < noOfInheritedQueries; i++) {\n        const tQuery = tQueries.getByIndex(i);\n        const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n        viewLQueries.push(parentLQuery.clone());\n      }\n      return new LQueries_(viewLQueries);\n    }\n    return null;\n  }\n  insertView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  detachView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  finishViewCreation(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  dirtyQueriesWithMatches(tView) {\n    for (let i = 0; i < this.queries.length; i++) {\n      if (getTQuery(tView, i).matches !== null) {\n        this.queries[i].setDirty();\n      }\n    }\n  }\n}\nclass TQueryMetadata_ {\n  flags;\n  read;\n  predicate;\n  constructor(predicate, flags, read = null) {\n    this.flags = flags;\n    this.read = read;\n    // Compiler might not be able to pre-optimize and split multiple selectors.\n    if (typeof predicate === 'string') {\n      this.predicate = splitQueryMultiSelectors(predicate);\n    } else {\n      this.predicate = predicate;\n    }\n  }\n}\nclass TQueries_ {\n  queries;\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n  elementStart(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementStart(tView, tNode);\n    }\n  }\n  elementEnd(tNode) {\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementEnd(tNode);\n    }\n  }\n  embeddedTView(tNode) {\n    let queriesForTemplateRef = null;\n    for (let i = 0; i < this.length; i++) {\n      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n      if (tqueryClone) {\n        tqueryClone.indexInDeclarationView = i;\n        if (queriesForTemplateRef !== null) {\n          queriesForTemplateRef.push(tqueryClone);\n        } else {\n          queriesForTemplateRef = [tqueryClone];\n        }\n      }\n    }\n    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n  }\n  template(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].template(tView, tNode);\n    }\n  }\n  getByIndex(index) {\n    ngDevMode && assertIndexInRange(this.queries, index);\n    return this.queries[index];\n  }\n  get length() {\n    return this.queries.length;\n  }\n  track(tquery) {\n    this.queries.push(tquery);\n  }\n}\nclass TQuery_ {\n  metadata;\n  matches = null;\n  indexInDeclarationView = -1;\n  crossesNgTemplate = false;\n  /**\n   * A node index on which a query was declared (-1 for view queries and ones inherited from the\n   * declaration template). We use this index (alongside with _appliesToNextNode flag) to know\n   * when to apply content queries to elements in a template.\n   */\n  _declarationNodeIndex;\n  /**\n   * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n   * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n   * elements in a template.\n   */\n  _appliesToNextNode = true;\n  constructor(metadata, nodeIndex = -1) {\n    this.metadata = metadata;\n    this._declarationNodeIndex = nodeIndex;\n  }\n  elementStart(tView, tNode) {\n    if (this.isApplyingToNode(tNode)) {\n      this.matchTNode(tView, tNode);\n    }\n  }\n  elementEnd(tNode) {\n    if (this._declarationNodeIndex === tNode.index) {\n      this._appliesToNextNode = false;\n    }\n  }\n  template(tView, tNode) {\n    this.elementStart(tView, tNode);\n  }\n  embeddedTView(tNode, childQueryIndex) {\n    if (this.isApplyingToNode(tNode)) {\n      this.crossesNgTemplate = true;\n      // A marker indicating a `<ng-template>` element (a placeholder for query results from\n      // embedded views created based on this `<ng-template>`).\n      this.addMatch(-tNode.index, childQueryIndex);\n      return new TQuery_(this.metadata);\n    }\n    return null;\n  }\n  isApplyingToNode(tNode) {\n    if (this._appliesToNextNode && (this.metadata.flags & 1 /* QueryFlags.descendants */) !== 1 /* QueryFlags.descendants */) {\n      const declarationNodeIdx = this._declarationNodeIndex;\n      let parent = tNode.parent;\n      // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n      // declared (only direct children of query's host node can match with the descendants: false\n      // option). There are 3 main use-case / conditions to consider here:\n      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n      // host node;\n      // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n      // here <i #target> parent node is null;\n      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n      // up past the query's host node!).\n      while (parent !== null && parent.type & 8 /* TNodeType.ElementContainer */ && parent.index !== declarationNodeIdx) {\n        parent = parent.parent;\n      }\n      return declarationNodeIdx === (parent !== null ? parent.index : -1);\n    }\n    return this._appliesToNextNode;\n  }\n  matchTNode(tView, tNode) {\n    const predicate = this.metadata.predicate;\n    if (Array.isArray(predicate)) {\n      for (let i = 0; i < predicate.length; i++) {\n        const name = predicate[i];\n        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n        // Also try matching the name to a provider since strings can be used as DI tokens too.\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n      }\n    } else {\n      if (predicate === TemplateRef) {\n        if (tNode.type & 4 /* TNodeType.Container */) {\n          this.matchTNodeWithReadOption(tView, tNode, -1);\n        }\n      } else {\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n      }\n    }\n  }\n  matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\n    if (nodeMatchIdx !== null) {\n      const read = this.metadata.read;\n      if (read !== null) {\n        if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4 /* TNodeType.Container */) {\n          this.addMatch(tNode.index, -2);\n        } else {\n          const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n          if (directiveOrProviderIdx !== null) {\n            this.addMatch(tNode.index, directiveOrProviderIdx);\n          }\n        }\n      } else {\n        this.addMatch(tNode.index, nodeMatchIdx);\n      }\n    }\n  }\n  addMatch(tNodeIdx, matchIdx) {\n    if (this.matches === null) {\n      this.matches = [tNodeIdx, matchIdx];\n    } else {\n      this.matches.push(tNodeIdx, matchIdx);\n    }\n  }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1];\n      }\n    }\n  }\n  return null;\n}\nfunction createResultByTNodeType(tNode, currentView) {\n  if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n    return createElementRef(tNode, currentView);\n  } else if (tNode.type & 4 /* TNodeType.Container */) {\n    return createTemplateRef(tNode, currentView);\n  }\n  return null;\n}\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\n  if (matchingIdx === -1) {\n    // if read token and / or strategy is not specified, detect it using appropriate tNode type\n    return createResultByTNodeType(tNode, lView);\n  } else if (matchingIdx === -2) {\n    // read a special token from a node injector\n    return createSpecialToken(lView, tNode, read);\n  } else {\n    // read a token\n    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\n  }\n}\nfunction createSpecialToken(lView, tNode, read) {\n  if (read === ElementRef) {\n    return createElementRef(tNode, lView);\n  } else if (read === TemplateRef) {\n    return createTemplateRef(tNode, lView);\n  } else if (read === ViewContainerRef) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    return createContainerRef(tNode, lView);\n  } else {\n    ngDevMode && throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\n  }\n}\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults(tView, lView, tQuery, queryIndex) {\n  const lQuery = lView[QUERIES].queries[queryIndex];\n  if (lQuery.matches === null) {\n    const tViewData = tView.data;\n    const tQueryMatches = tQuery.matches;\n    const result = [];\n    for (let i = 0; tQueryMatches !== null && i < tQueryMatches.length; i += 2) {\n      const matchedNodeIdx = tQueryMatches[i];\n      if (matchedNodeIdx < 0) {\n        // we at the <ng-template> marker which might have results in views created based on this\n        // <ng-template> - those results will be in separate views though, so here we just leave\n        // null as a placeholder\n        result.push(null);\n      } else {\n        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n        const tNode = tViewData[matchedNodeIdx];\n        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n      }\n    }\n    lQuery.matches = result;\n  }\n  return lQuery.matches;\n}\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults(tView, lView, queryIndex, result) {\n  const tQuery = tView.queries.getByIndex(queryIndex);\n  const tQueryMatches = tQuery.matches;\n  if (tQueryMatches !== null) {\n    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const tNodeIdx = tQueryMatches[i];\n      if (tNodeIdx > 0) {\n        result.push(lViewResults[i / 2]);\n      } else {\n        const childQueryIndex = tQueryMatches[i + 1];\n        const declarationLContainer = lView[-tNodeIdx];\n        ngDevMode && assertLContainer(declarationLContainer);\n        // collect matches for views inserted in this container\n        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n          const embeddedLView = declarationLContainer[i];\n          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n        // collect matches for views created from this declaration container and inserted into\n        // different containers\n        if (declarationLContainer[MOVED_VIEWS] !== null) {\n          const embeddedLViews = declarationLContainer[MOVED_VIEWS];\n          for (let i = 0; i < embeddedLViews.length; i++) {\n            const embeddedLView = embeddedLViews[i];\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\nfunction loadQueryInternal(lView, queryIndex) {\n  ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);\n  return lView[QUERIES].queries[queryIndex].queryList;\n}\n/**\n * Creates a new instance of LQuery and returns its index in the collection of LQuery objects.\n *\n * @returns index in the collection of LQuery objects\n */\nfunction createLQuery(tView, lView, flags) {\n  const queryList = new QueryList((flags & 4 /* QueryFlags.emitDistinctChangesOnly */) === 4 /* QueryFlags.emitDistinctChangesOnly */);\n  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n  const lQueries = (lView[QUERIES] ??= new LQueries_()).queries;\n  return lQueries.push(new LQuery_(queryList)) - 1;\n}\nfunction createViewQuery(predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n    if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n      tView.staticViewQueries = true;\n    }\n  }\n  return createLQuery(tView, getLView(), flags);\n}\nfunction createContentQuery(directiveIndex, predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const tNode = getCurrentTNode();\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n    saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n    if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n      tView.staticContentQueries = true;\n    }\n  }\n  return createLQuery(tView, getLView(), flags);\n}\n/** Splits multiple selectors in the locator. */\nfunction splitQueryMultiSelectors(locator) {\n  return locator.split(',').map(s => s.trim());\n}\nfunction createTQuery(tView, metadata, nodeIndex) {\n  if (tView.queries === null) tView.queries = new TQueries_();\n  tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n  if (directiveIndex !== lastSavedDirectiveIndex) {\n    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\n  }\n}\nfunction getTQuery(tView, index) {\n  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n  return tView.queries.getByIndex(index);\n}\n/**\n * A helper function collecting results from all the views where a given query was active.\n * @param lView\n * @param queryIndex\n */\nfunction getQueryResults(lView, queryIndex) {\n  const tView = lView[TVIEW];\n  const tQuery = getTQuery(tView, queryIndex);\n  return tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);\n}\n\n/**\n * A signal factory function in charge of creating a new computed signal capturing query\n * results. This centralized creation function is used by all types of queries (child / children,\n * required / optional).\n *\n * @param firstOnly indicates if all or only the first result should be returned\n * @param required indicates if at least one result is required\n * @returns a read-only signal with query results\n */\nfunction createQuerySignalFn(firstOnly, required, opts) {\n  let node;\n  const signalFn = createComputed(() => {\n    // A dedicated signal that increments its value every time a query changes its dirty status. By\n    // using this signal we can implement a query as computed and avoid creation of a specialized\n    // reactive node type. Please note that a query gets marked dirty under the following\n    // circumstances:\n    // - a view (where a query is active) finished its first creation pass;\n    // - a new view is inserted / deleted and it impacts query results.\n    node._dirtyCounter();\n    const value = refreshSignalQuery(node, firstOnly);\n    if (required && value === undefined) {\n      throw new RuntimeError(-951 /* RuntimeErrorCode.REQUIRED_QUERY_NO_VALUE */, ngDevMode && 'Child query result is required but no value is available.');\n    }\n    return value;\n  });\n  node = signalFn[SIGNAL];\n  node._dirtyCounter = signal(0);\n  node._flatValue = undefined;\n  if (ngDevMode) {\n    signalFn.toString = () => `[Query Signal]`;\n    node.debugName = opts?.debugName;\n  }\n  return signalFn;\n}\nfunction createSingleResultOptionalQuerySignalFn(opts) {\n  return createQuerySignalFn(/* firstOnly */true, /* required */false, opts);\n}\nfunction createSingleResultRequiredQuerySignalFn(opts) {\n  return createQuerySignalFn(/* firstOnly */true, /* required */true, opts);\n}\nfunction createMultiResultQuerySignalFn(opts) {\n  return createQuerySignalFn(/* firstOnly */false, /* required */false, opts);\n}\nfunction bindQueryToSignal(target, queryIndex) {\n  const node = target[SIGNAL];\n  node._lView = getLView();\n  node._queryIndex = queryIndex;\n  node._queryList = loadQueryInternal(node._lView, queryIndex);\n  node._queryList.onDirty(() => node._dirtyCounter.update(v => v + 1));\n}\nfunction refreshSignalQuery(node, firstOnly) {\n  const lView = node._lView;\n  const queryIndex = node._queryIndex;\n  // There are 2 conditions under which we want to return \"empty\" results instead of the ones\n  // collected by a query:\n  //\n  // 1) a given query wasn't created yet (this is a period of time between the directive creation\n  // and execution of the query creation function) - in this case a query doesn't exist yet and we\n  // don't have any results to return.\n  //\n  // 2) we are in the process of constructing a view (the first\n  // creation pass didn't finish) and a query might have partial results, but we don't want to\n  // return those - instead we do delay results collection until all nodes had a chance of matching\n  // and we can present consistent, \"atomic\" (on a view level) results.\n  if (lView === undefined || queryIndex === undefined || lView[FLAGS] & 4 /* LViewFlags.CreationMode */) {\n    return firstOnly ? undefined : EMPTY_ARRAY;\n  }\n  const queryList = loadQueryInternal(lView, queryIndex);\n  const results = getQueryResults(lView, queryIndex);\n  queryList.reset(results, unwrapElementRef);\n  if (firstOnly) {\n    return queryList.first;\n  } else {\n    // TODO: remove access to the private _changesDetected field by abstracting / removing usage of\n    // QueryList in the signal-based queries (perf follow-up)\n    const resultChanged = queryList._changesDetected;\n    if (resultChanged || node._flatValue === undefined) {\n      return node._flatValue = queryList.toArray();\n    }\n    return node._flatValue;\n  }\n}\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```ts\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nfunction resolveComponentResources(resourceResolver) {\n  // Store all promises which are fetching the resources.\n  const componentResolved = [];\n  // Cache so that we don't fetch the same resource more than once.\n  const urlMap = new Map();\n  function cachedResourceResolve(url) {\n    let promise = urlMap.get(url);\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(res => unwrapResponse(url, res)));\n    }\n    return promise;\n  }\n  componentResourceResolutionQueue.forEach((component, type) => {\n    const promises = [];\n    if (component.templateUrl) {\n      promises.push(cachedResourceResolve(component.templateUrl).then(template => {\n        component.template = template;\n      }));\n    }\n    const styles = typeof component.styles === 'string' ? [component.styles] : component.styles || [];\n    component.styles = styles;\n    if (component.styleUrl && component.styleUrls?.length) {\n      throw new Error('@Component cannot define both `styleUrl` and `styleUrls`. ' + 'Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple');\n    } else if (component.styleUrls?.length) {\n      const styleOffset = component.styles.length;\n      const styleUrls = component.styleUrls;\n      component.styleUrls.forEach((styleUrl, index) => {\n        styles.push(''); // pre-allocate array.\n        promises.push(cachedResourceResolve(styleUrl).then(style => {\n          styles[styleOffset + index] = style;\n          styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n          if (styleUrls.length == 0) {\n            component.styleUrls = undefined;\n          }\n        }));\n      });\n    } else if (component.styleUrl) {\n      promises.push(cachedResourceResolve(component.styleUrl).then(style => {\n        styles.push(style);\n        component.styleUrl = undefined;\n      }));\n    }\n    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(() => undefined);\n}\nlet componentResourceResolutionQueue = /*#__PURE__*/new Map();\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = /*#__PURE__*/new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\nfunction isComponentDefPendingResolution(type) {\n  return componentDefPendingResolution.has(type);\n}\nfunction componentNeedsResolution(component) {\n  return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length || component.styleUrl);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n  const old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\nfunction restoreComponentResolutionQueue(queue) {\n  componentDefPendingResolution.clear();\n  queue.forEach((_, type) => componentDefPendingResolution.add(type));\n  componentResourceResolutionQueue = queue;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(url, response) {\n  if (typeof response === 'string') {\n    return response;\n  }\n  if (response.status !== undefined && response.status !== 200) {\n    return Promise.reject(new RuntimeError(918 /* RuntimeErrorCode.EXTERNAL_RESOURCE_LOADING_FAILED */, ngDevMode && `Could not load resource: ${url}. Response status: ${response.status}`));\n  }\n  return response.text();\n}\nfunction componentDefResolved(type) {\n  componentDefPendingResolution.delete(type);\n}\n\n/**\n * Map of module-id to the corresponding NgModule.\n */\nconst modules = /*#__PURE__*/new Map();\n/**\n * Whether to check for duplicate NgModule registrations.\n *\n * This can be disabled for testing.\n */\nlet checkForDuplicateNgModules = true;\nfunction assertSameOrNotExisting(id, type, incoming) {\n  if (type && type !== incoming && checkForDuplicateNgModules) {\n    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n  }\n}\n/**\n * Adds the given NgModule type to Angular's NgModule registry.\n *\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\n * fully resolved when it's registered.\n *\n * @codeGenApi\n */\nfunction registerNgModuleType(ngModuleType, id) {\n  const existing = modules.get(id) || null;\n  assertSameOrNotExisting(id, existing, ngModuleType);\n  modules.set(id, ngModuleType);\n}\nfunction getRegisteredNgModuleType(id) {\n  return modules.get(id);\n}\n/**\n * Control whether the NgModule registration system enforces that each NgModule type registered has\n * a unique id.\n *\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\n * Angular's current API.\n */\nfunction setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {\n  checkForDuplicateNgModules = !allowDuplicates;\n}\n\n/**\n * Validation function invoked at runtime for each binding that might potentially\n * represent a security-sensitive attribute of an <iframe>.\n * See `IFRAME_SECURITY_SENSITIVE_ATTRS` in the\n * `packages/compiler/src/schema/dom_security_schema.ts` script for the full list\n * of such attributes.\n *\n * @codeGenApi\n */\nfunction ɵɵvalidateIframeAttribute(attrValue, tagName, attrName) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  const element = getNativeByTNode(tNode, lView);\n  // Restrict any dynamic bindings of security-sensitive attributes/properties\n  // on an <iframe> for security reasons.\n  if (tNode.type === 2 /* TNodeType.Element */ && tagName.toLowerCase() === 'iframe') {\n    const iframe = element;\n    // Unset previously applied `src` and `srcdoc` if we come across a situation when\n    // a security-sensitive attribute is set later via an attribute/property binding.\n    iframe.src = '';\n    iframe.srcdoc = trustedHTMLFromString('');\n    // Also remove the <iframe> from the document.\n    nativeRemoveNode(lView[RENDERER], iframe);\n    const errorMessage = ngDevMode && `Angular has detected that the \\`${attrName}\\` was applied ` + `as a binding to an <iframe>${getTemplateLocationDetails(lView)}. ` + `For security reasons, the \\`${attrName}\\` can be set on an <iframe> ` + `as a static attribute only. \\n` + `To fix this, switch the \\`${attrName}\\` binding to a static attribute ` + `in a template or in host bindings section.`;\n    throw new RuntimeError(-910 /* RuntimeErrorCode.UNSAFE_IFRAME_ATTRS */, errorMessage);\n  }\n  return attrValue;\n}\nconst markedFeatures = /*#__PURE__*/new Set();\n// tslint:disable:ban\n/**\n * A guarded `performance.mark` for feature marking.\n *\n * This method exists because while all supported browser and node.js version supported by Angular\n * support performance.mark API. This is not the case for other environments such as JSDOM and\n * Cloudflare workers.\n */\nfunction performanceMarkFeature(feature) {\n  if (markedFeatures.has(feature)) {\n    return;\n  }\n  markedFeatures.add(feature);\n  performance?.mark?.('mark_feature_usage', {\n    detail: {\n      feature\n    }\n  });\n}\n\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\nlet NgModuleRef$1 = class NgModuleRef {};\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\nlet NgModuleFactory$1 = class NgModuleFactory {};\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\nfunction createNgModule(ngModule, parentInjector) {\n  return new NgModuleRef(ngModule, parentInjector ?? null, []);\n}\n/**\n * The `createNgModule` function alias for backwards-compatibility.\n * Please avoid using it directly and use `createNgModule` instead.\n *\n * @deprecated Use `createNgModule` instead.\n */\nconst createNgModuleRef = createNgModule;\nclass NgModuleRef extends NgModuleRef$1 {\n  ngModuleType;\n  _parent;\n  // tslint:disable-next-line:require-internal-with-underscore\n  _bootstrapComponents = [];\n  _r3Injector;\n  instance;\n  destroyCbs = [];\n  // When bootstrapping a module we have a dependency graph that looks like this:\n  // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n  // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n  // circular dependency which will result in a runtime error, because the injector doesn't\n  // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n  // and providing it, rather than letting the injector resolve it.\n  componentFactoryResolver = /*#__PURE__*/new ComponentFactoryResolver(this);\n  constructor(ngModuleType, _parent, additionalProviders, runInjectorInitializers = true) {\n    super();\n    this.ngModuleType = ngModuleType;\n    this._parent = _parent;\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\n    this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }, ...additionalProviders], stringify(ngModuleType), new Set(['environment']));\n    // We need to resolve the injector types separately from the injector creation, because\n    // the module might be trying to use this ref in its constructor for DI which will cause a\n    // circular error that will eventually error out, because the injector isn't created yet.\n    if (runInjectorInitializers) {\n      this.resolveInjectorInitializers();\n    }\n  }\n  resolveInjectorInitializers() {\n    this._r3Injector.resolveInjectorInitializers();\n    this.instance = this._r3Injector.get(this.ngModuleType);\n  }\n  get injector() {\n    return this._r3Injector;\n  }\n  destroy() {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    const injector = this._r3Injector;\n    !injector.destroyed && injector.destroy();\n    this.destroyCbs.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  onDestroy(callback) {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs.push(callback);\n  }\n}\nclass NgModuleFactory extends NgModuleFactory$1 {\n  moduleType;\n  constructor(moduleType) {\n    super();\n    this.moduleType = moduleType;\n  }\n  create(parentInjector) {\n    return new NgModuleRef(this.moduleType, parentInjector, []);\n  }\n}\nfunction createNgModuleRefWithProviders(moduleType, parentInjector, additionalProviders) {\n  return new NgModuleRef(moduleType, parentInjector, additionalProviders, false);\n}\nclass EnvironmentNgModuleRefAdapter extends NgModuleRef$1 {\n  injector;\n  componentFactoryResolver = /*#__PURE__*/new ComponentFactoryResolver(this);\n  instance = null;\n  constructor(config) {\n    super();\n    const injector = new R3Injector([...config.providers, {\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }], config.parent || getNullInjector(), config.debugName, new Set(['environment']));\n    this.injector = injector;\n    if (config.runEnvironmentInitializers) {\n      injector.resolveInjectorInitializers();\n    }\n  }\n  destroy() {\n    this.injector.destroy();\n  }\n  onDestroy(callback) {\n    this.injector.onDestroy(callback);\n  }\n}\n/**\n * Create a new environment injector.\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n */\nfunction createEnvironmentInjector(providers, parent, debugName = null) {\n  const adapter = new EnvironmentNgModuleRefAdapter({\n    providers,\n    parent,\n    debugName,\n    runEnvironmentInitializers: true\n  });\n  return adapter.injector;\n}\n\n/**\n * A service used by the framework to create instances of standalone injectors. Those injectors are\n * created on demand in case of dynamic component instantiation and contain ambient providers\n * collected from the imports graph rooted at a given standalone component.\n */\nlet StandaloneService = /*#__PURE__*/(() => {\n  class StandaloneService {\n    _injector;\n    cachedInjectors = new Map();\n    constructor(_injector) {\n      this._injector = _injector;\n    }\n    getOrCreateStandaloneInjector(componentDef) {\n      if (!componentDef.standalone) {\n        return null;\n      }\n      if (!this.cachedInjectors.has(componentDef)) {\n        const providers = internalImportProvidersFrom(false, componentDef.type);\n        const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;\n        this.cachedInjectors.set(componentDef, standaloneInjector);\n      }\n      return this.cachedInjectors.get(componentDef);\n    }\n    ngOnDestroy() {\n      try {\n        for (const injector of this.cachedInjectors.values()) {\n          if (injector !== null) {\n            injector.destroy();\n          }\n        }\n      } finally {\n        this.cachedInjectors.clear();\n      }\n    }\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: StandaloneService,\n      providedIn: 'environment',\n      factory: () => new StandaloneService(__inject(EnvironmentInjector))\n    });\n  }\n  return StandaloneService;\n})();\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```ts\n * class MyComponent {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nfunction ɵɵdefineComponent(componentDefinition) {\n  return noSideEffects(() => {\n    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n    const baseDef = getNgDirectiveDef(componentDefinition);\n    const def = {\n      ...baseDef,\n      decls: componentDefinition.decls,\n      vars: componentDefinition.vars,\n      template: componentDefinition.template,\n      consts: componentDefinition.consts || null,\n      ngContentSelectors: componentDefinition.ngContentSelectors,\n      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n      directiveDefs: null,\n      // assigned in noSideEffects\n      pipeDefs: null,\n      // assigned in noSideEffects\n      dependencies: baseDef.standalone && componentDefinition.dependencies || null,\n      getStandaloneInjector: baseDef.standalone ? parentInjector => {\n        return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(def);\n      } : null,\n      getExternalStyles: null,\n      signals: componentDefinition.signals ?? false,\n      data: componentDefinition.data || {},\n      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n      styles: componentDefinition.styles || EMPTY_ARRAY,\n      _: null,\n      schemas: componentDefinition.schemas || null,\n      tView: null,\n      id: ''\n    };\n    // TODO: Do we still need/want this ?\n    if (baseDef.standalone) {\n      performanceMarkFeature('NgStandalone');\n    }\n    initFeatures(def);\n    const dependencies = componentDefinition.dependencies;\n    def.directiveDefs = extractDefListOrFactory(dependencies, extractDirectiveDef);\n    def.pipeDefs = extractDefListOrFactory(dependencies, getPipeDef$1);\n    def.id = getComponentId(def);\n    return def;\n  });\n}\nfunction extractDirectiveDef(type) {\n  return getComponentDef(type) || getDirectiveDef(type);\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵdefineNgModule(def) {\n  return noSideEffects(() => {\n    const res = {\n      type: def.type,\n      bootstrap: def.bootstrap || EMPTY_ARRAY,\n      declarations: def.declarations || EMPTY_ARRAY,\n      imports: def.imports || EMPTY_ARRAY,\n      exports: def.exports || EMPTY_ARRAY,\n      transitiveCompileScopes: null,\n      schemas: def.schemas || null,\n      id: def.id || null\n    };\n    return res;\n  });\n}\n/**\n * Converts binding objects from the `DirectiveDefinition` into more efficient\n * lookup dictionaries that are optimized for the framework runtime.\n *\n * This function converts inputs or output directive information into new objects\n * where the public name conveniently maps to the minified internal field name.\n *\n * For inputs, the input flags are additionally persisted into the new data structure,\n * so that those can be quickly retrieved when needed.\n *\n * e.g. for\n *\n * ```ts\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n *\n *   inputSignal = input(3);\n * }\n * ```\n *\n * will be serialized as\n *\n * ```ts\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n *   inputSignal: [InputFlags.SignalBased, 'inputSignal'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```ts\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n *   minifiedInputSignal: [InputFlags.SignalBased, 'inputSignal'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName + isSignal if needed)\n *\n * ```ts\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n *  'inputSignal': ['minifiedInputSignal', InputFlags.SignalBased],\n * }\n * ```\n *\n * Optionally the function can take `declaredInputs` which will result\n * in: (public name => declared name)\n *\n * ```ts\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n *  'inputSignal': 'inputSignal',\n * }\n * ```\n *\n\n */\nfunction parseAndConvertInputsForDefinition(obj, declaredInputs) {\n  if (obj == null) return EMPTY_OBJ;\n  const newLookup = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      const value = obj[minifiedKey];\n      let publicName;\n      let declaredName;\n      let inputFlags;\n      let transform;\n      if (Array.isArray(value)) {\n        inputFlags = value[0];\n        publicName = value[1];\n        declaredName = value[2] ?? publicName; // declared name might not be set to save bytes.\n        transform = value[3] || null;\n      } else {\n        publicName = value;\n        declaredName = value;\n        inputFlags = InputFlags.None;\n        transform = null;\n      }\n      newLookup[publicName] = [minifiedKey, inputFlags, transform];\n      declaredInputs[publicName] = declaredName;\n    }\n  }\n  return newLookup;\n}\nfunction parseAndConvertOutputsForDefinition(obj) {\n  if (obj == null) return EMPTY_OBJ;\n  const newLookup = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      newLookup[obj[minifiedKey]] = minifiedKey;\n    }\n  }\n  return newLookup;\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdefineDirective(directiveDefinition) {\n  return noSideEffects(() => {\n    const def = getNgDirectiveDef(directiveDefinition);\n    initFeatures(def);\n    return def;\n  });\n}\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```ts\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nfunction ɵɵdefinePipe(pipeDef) {\n  return {\n    type: pipeDef.type,\n    name: pipeDef.name,\n    factory: null,\n    pure: pipeDef.pure !== false,\n    standalone: pipeDef.standalone ?? true,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  };\n}\nfunction getNgDirectiveDef(directiveDefinition) {\n  const declaredInputs = {};\n  return {\n    type: directiveDefinition.type,\n    providersResolver: null,\n    factory: null,\n    hostBindings: directiveDefinition.hostBindings || null,\n    hostVars: directiveDefinition.hostVars || 0,\n    hostAttrs: directiveDefinition.hostAttrs || null,\n    contentQueries: directiveDefinition.contentQueries || null,\n    declaredInputs: declaredInputs,\n    inputConfig: directiveDefinition.inputs || EMPTY_OBJ,\n    exportAs: directiveDefinition.exportAs || null,\n    standalone: directiveDefinition.standalone ?? true,\n    signals: directiveDefinition.signals === true,\n    selectors: directiveDefinition.selectors || EMPTY_ARRAY,\n    viewQuery: directiveDefinition.viewQuery || null,\n    features: directiveDefinition.features || null,\n    setInput: null,\n    resolveHostDirectives: null,\n    hostDirectives: null,\n    inputs: parseAndConvertInputsForDefinition(directiveDefinition.inputs, declaredInputs),\n    outputs: parseAndConvertOutputsForDefinition(directiveDefinition.outputs),\n    debugInfo: null\n  };\n}\nfunction initFeatures(definition) {\n  definition.features?.forEach(fn => fn(definition));\n}\nfunction extractDefListOrFactory(dependencies, defExtractor) {\n  if (!dependencies) {\n    return null;\n  }\n  return () => {\n    const resolvedDependencies = typeof dependencies === 'function' ? dependencies() : dependencies;\n    const result = [];\n    for (const dep of resolvedDependencies) {\n      const definition = defExtractor(dep);\n      if (definition !== null) {\n        result.push(definition);\n      }\n    }\n    return result;\n  };\n}\n/**\n * A map that contains the generated component IDs and type.\n */\nconst GENERATED_COMP_IDS = /*#__PURE__*/new Map();\n/**\n * A method can returns a component ID from the component definition using a variant of DJB2 hash\n * algorithm.\n */\nfunction getComponentId(componentDef) {\n  let hash = 0;\n  // For components with i18n in templates, the `consts` array is generated by the compiler\n  // as a function. If client and server bundles were produced with different minification\n  // configurations, the serializable contents of the function body would be different on\n  // the client and on the server. This might result in different ids generated. To avoid this\n  // issue, we do not take the `consts` contents into account if it's a function.\n  // See https://github.com/angular/angular/issues/58713.\n  const componentDefConsts = typeof componentDef.consts === 'function' ? '' : componentDef.consts;\n  // We cannot rely solely on the component selector as the same selector can be used in different\n  // modules.\n  //\n  // `componentDef.style` is not used, due to it causing inconsistencies. Ex: when server\n  // component styles has no sourcemaps and browsers do.\n  //\n  // Example:\n  // https://github.com/angular/components/blob/d9f82c8f95309e77a6d82fd574c65871e91354c2/src/material/core/option/option.ts#L248\n  // https://github.com/angular/components/blob/285f46dc2b4c5b127d356cb7c4714b221f03ce50/src/material/legacy-core/option/option.ts#L32\n  const hashSelectors = [componentDef.selectors, componentDef.ngContentSelectors, componentDef.hostVars, componentDef.hostAttrs, componentDefConsts, componentDef.vars, componentDef.decls, componentDef.encapsulation, componentDef.standalone, componentDef.signals, componentDef.exportAs, JSON.stringify(componentDef.inputs), JSON.stringify(componentDef.outputs),\n  // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not\n  // match in the server and browser bundles.\n  Object.getOwnPropertyNames(componentDef.type.prototype), !!componentDef.contentQueries, !!componentDef.viewQuery];\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // If client and server bundles were produced with different minification configurations,\n    // the serializable contents of the function body would be different on the client and on\n    // the server. Ensure that we do not accidentally use functions in component id computation.\n    for (const item of hashSelectors) {\n      assertNotEqual(typeof item, 'function', 'Internal error: attempting to use a function in component id computation logic.');\n    }\n  }\n  for (const char of hashSelectors.join('|')) {\n    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n  }\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n  const compId = 'c' + hash;\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && (\n  // Skip the check on the server since we can't guarantee the same component instance between\n  // requests. Note that we can't use DI to check if we're on the server, because the component\n  // hasn't been instantiated yet.\n  typeof ngServerMode === 'undefined' || !ngServerMode)) {\n    if (GENERATED_COMP_IDS.has(compId)) {\n      const previousCompDefType = GENERATED_COMP_IDS.get(compId);\n      if (previousCompDefType !== componentDef.type) {\n        console.warn(formatRuntimeError(-912 /* RuntimeErrorCode.COMPONENT_ID_COLLISION */, `Component ID generation collision detected. Components '${previousCompDefType.name}' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(componentDef.selectors)}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`));\n      }\n    } else {\n      GENERATED_COMP_IDS.set(compId, componentDef.type);\n    }\n  }\n  return compId;\n}\nfunction getSuperType(type) {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nfunction ɵɵInheritDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let shouldInheritFields = true;\n  const inheritanceChain = [definition];\n  while (superType) {\n    let superDef = undefined;\n    if (isComponentDef(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵcmp || superType.ɵdir;\n    } else {\n      if (superType.ɵcmp) {\n        throw new RuntimeError(903 /* RuntimeErrorCode.INVALID_INHERITANCE */, ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);\n      }\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵdir;\n    }\n    if (superDef) {\n      if (shouldInheritFields) {\n        inheritanceChain.push(superDef);\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        const writeableDef = definition;\n        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        // Merge hostBindings\n        const superHostBindings = superDef.hostBindings;\n        superHostBindings && inheritHostBindings(definition, superHostBindings);\n        // Merge queries\n        const superViewQuery = superDef.viewQuery;\n        const superContentQueries = superDef.contentQueries;\n        superViewQuery && inheritViewQuery(definition, superViewQuery);\n        superContentQueries && inheritContentQueries(definition, superContentQueries);\n        // Merge inputs and outputs\n        mergeInputsWithTransforms(definition, superDef);\n        fillProperties(definition.outputs, superDef.outputs);\n        // Merge animations metadata.\n        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n        if (isComponentDef(superDef) && superDef.data.animation) {\n          // If super def is a Component, the `definition` is also a Component, since Directives can\n          // not inherit Components (we throw an error above and cannot reach this code).\n          const defData = definition.data;\n          defData.animation = (defData.animation || []).concat(superDef.data.animation);\n        }\n      }\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (let i = 0; i < features.length; i++) {\n          const feature = features[i];\n          if (feature && feature.ngInherit) {\n            feature(definition);\n          }\n          // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n          // def already has all the necessary information inherited from its super class(es), so we\n          // can stop merging fields from super classes. However we need to iterate through the\n          // prototype chain to look for classes that might contain other \"features\" (like\n          // NgOnChanges), which we should invoke for the original `definition`. We set the\n          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n          // logic and only invoking functions from the \"features\" list.\n          if (feature === ɵɵInheritDefinitionFeature) {\n            shouldInheritFields = false;\n          }\n        }\n      }\n    }\n    superType = Object.getPrototypeOf(superType);\n  }\n  mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\nfunction mergeInputsWithTransforms(target, source) {\n  for (const key in source.inputs) {\n    if (!source.inputs.hasOwnProperty(key)) {\n      continue;\n    }\n    if (target.inputs.hasOwnProperty(key)) {\n      continue;\n    }\n    const value = source.inputs[key];\n    if (value !== undefined) {\n      target.inputs[key] = value;\n      target.declaredInputs[key] = source.declaredInputs[key];\n    }\n  }\n}\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain) {\n  let hostVars = 0;\n  let hostAttrs = null;\n  // We process the inheritance order from the base to the leaves here.\n  for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n    const def = inheritanceChain[i];\n    // For each `hostVars`, we need to add the superclass amount.\n    def.hostVars = hostVars += def.hostVars;\n    // for each `hostAttrs` we need to merge it with superclass.\n    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n  }\n}\nfunction maybeUnwrapEmpty(value) {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\nfunction inheritViewQuery(definition, superViewQuery) {\n  const prevViewQuery = definition.viewQuery;\n  if (prevViewQuery) {\n    definition.viewQuery = (rf, ctx) => {\n      superViewQuery(rf, ctx);\n      prevViewQuery(rf, ctx);\n    };\n  } else {\n    definition.viewQuery = superViewQuery;\n  }\n}\nfunction inheritContentQueries(definition, superContentQueries) {\n  const prevContentQueries = definition.contentQueries;\n  if (prevContentQueries) {\n    definition.contentQueries = (rf, ctx, directiveIndex) => {\n      superContentQueries(rf, ctx, directiveIndex);\n      prevContentQueries(rf, ctx, directiveIndex);\n    };\n  } else {\n    definition.contentQueries = superContentQueries;\n  }\n}\nfunction inheritHostBindings(definition, superHostBindings) {\n  const prevHostBindings = definition.hostBindings;\n  if (prevHostBindings) {\n    definition.hostBindings = (rf, ctx) => {\n      superHostBindings(rf, ctx);\n      prevHostBindings(rf, ctx);\n    };\n  } else {\n    definition.hostBindings = superHostBindings;\n  }\n}\n\n/**\n * Fields which exist on either directive or component definitions, and need to be copied from\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n */\nconst COPY_DIRECTIVE_FIELDS = [\n// The child class should use the providers of its parent.\n'providersResolver'\n// Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n// as inputs, outputs, and host binding functions.\n];\n/**\n * Fields which exist only on component definitions, and need to be copied from parent to child\n * classes by the `ɵɵCopyDefinitionFeature`.\n *\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n */\nconst COPY_COMPONENT_FIELDS = [\n// The child class should use the template function of its parent, including all template\n// semantics.\n'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors',\n// The child class should use the CSS styles of its parent, including all styling semantics.\n'styles', 'encapsulation',\n// The child class should be checked by the runtime in the same way as its parent.\n'schemas'];\n/**\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\nfunction ɵɵCopyDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let superDef = undefined;\n  if (isComponentDef(definition)) {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵcmp;\n  } else {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵdir;\n  }\n  // Needed because `definition` fields are readonly.\n  const defAny = definition;\n  // Copy over any fields that apply to either directives or components.\n  for (const field of COPY_DIRECTIVE_FIELDS) {\n    defAny[field] = superDef[field];\n  }\n  if (isComponentDef(superDef)) {\n    // Copy over any component-specific fields.\n    for (const field of COPY_COMPONENT_FIELDS) {\n      defAny[field] = superDef[field];\n    }\n  }\n}\n\n/**\n * This feature adds the host directives behavior to a directive definition by patching a\n * function onto it. The expectation is that the runtime will invoke the function during\n * directive matching.\n *\n * For example:\n * ```ts\n * class ComponentWithHostDirective {\n *   static ɵcmp = defineComponent({\n *    type: ComponentWithHostDirective,\n *    features: [ɵɵHostDirectivesFeature([\n *      SimpleHostDirective,\n *      {directive: AdvancedHostDirective, inputs: ['foo: alias'], outputs: ['bar']},\n *    ])]\n *  });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵHostDirectivesFeature(rawHostDirectives) {\n  const feature = definition => {\n    const isEager = Array.isArray(rawHostDirectives);\n    if (definition.hostDirectives === null) {\n      definition.resolveHostDirectives = resolveHostDirectives;\n      definition.hostDirectives = isEager ? rawHostDirectives.map(createHostDirectiveDef) : [rawHostDirectives];\n    } else if (isEager) {\n      definition.hostDirectives.unshift(...rawHostDirectives.map(createHostDirectiveDef));\n    } else {\n      definition.hostDirectives.unshift(rawHostDirectives);\n    }\n  };\n  feature.ngInherit = true;\n  return feature;\n}\n/**\n * Function that will be patched onto a definition to enable host directives. It is intended to\n * be called once during directive matching and is the same for all definitions.\n * @param matches Directives resolved through selector matching.\n */\nfunction resolveHostDirectives(matches) {\n  const allDirectiveDefs = [];\n  let hasComponent = false;\n  let hostDirectiveDefs = null;\n  let hostDirectiveRanges = null;\n  // Components are inserted at the front of the matches array so that their lifecycle\n  // hooks run before any directive lifecycle hooks. This appears to be for ViewEngine\n  // compatibility. This logic doesn't make sense with host directives, because it\n  // would allow the host directives to undo any overrides the host may have made.\n  // To handle this case, the host directives of components are inserted at the beginning\n  // of the array, followed by the component. As such, the insertion order is as follows:\n  // 1. Host directives belonging to the selector-matched component.\n  // 2. Selector-matched component.\n  // 3. Host directives belonging to selector-matched directives.\n  // 4. Selector-matched dir\n  for (let i = 0; i < matches.length; i++) {\n    const def = matches[i];\n    if (def.hostDirectives !== null) {\n      const start = allDirectiveDefs.length;\n      hostDirectiveDefs ??= new Map();\n      hostDirectiveRanges ??= new Map();\n      // TODO(pk): probably could return matches instead of taking in an array to fill in?\n      findHostDirectiveDefs(def, allDirectiveDefs, hostDirectiveDefs);\n      // Note that these indexes are within the offset by `directiveStart`. We can't do the\n      // offsetting here, because `directiveStart` hasn't been initialized on the TNode yet.\n      hostDirectiveRanges.set(def, [start, allDirectiveDefs.length - 1]);\n    }\n    // Component definition is always first and needs to be\n    // pushed early to maintain the correct ordering.\n    if (i === 0 && isComponentDef(def)) {\n      hasComponent = true;\n      allDirectiveDefs.push(def);\n    }\n  }\n  for (let i = hasComponent ? 1 : 0; i < matches.length; i++) {\n    allDirectiveDefs.push(matches[i]);\n  }\n  return [allDirectiveDefs, hostDirectiveDefs, hostDirectiveRanges];\n}\nfunction findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {\n  if (currentDef.hostDirectives !== null) {\n    for (const configOrFn of currentDef.hostDirectives) {\n      if (typeof configOrFn === 'function') {\n        const resolved = configOrFn();\n        for (const config of resolved) {\n          trackHostDirectiveDef(createHostDirectiveDef(config), matchedDefs, hostDirectiveDefs);\n        }\n      } else {\n        trackHostDirectiveDef(configOrFn, matchedDefs, hostDirectiveDefs);\n      }\n    }\n  }\n}\n/** Tracks a single host directive during directive matching. */\nfunction trackHostDirectiveDef(def, matchedDefs, hostDirectiveDefs) {\n  const hostDirectiveDef = getDirectiveDef(def.directive);\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    validateHostDirective(def, hostDirectiveDef);\n  }\n  // We need to patch the `declaredInputs` so that\n  // `ngOnChanges` can map the properties correctly.\n  patchDeclaredInputs(hostDirectiveDef.declaredInputs, def.inputs);\n  // Host directives execute before the host so that its host bindings can be overwritten.\n  findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);\n  hostDirectiveDefs.set(hostDirectiveDef, def);\n  matchedDefs.push(hostDirectiveDef);\n}\n/** Creates a `HostDirectiveDef` from a used-defined host directive configuration. */\nfunction createHostDirectiveDef(config) {\n  return typeof config === 'function' ? {\n    directive: resolveForwardRef(config),\n    inputs: EMPTY_OBJ,\n    outputs: EMPTY_OBJ\n  } : {\n    directive: resolveForwardRef(config.directive),\n    inputs: bindingArrayToMap(config.inputs),\n    outputs: bindingArrayToMap(config.outputs)\n  };\n}\n/**\n * Converts an array in the form of `['publicName', 'alias', 'otherPublicName', 'otherAlias']` into\n * a map in the form of `{publicName: 'alias', otherPublicName: 'otherAlias'}`.\n */\nfunction bindingArrayToMap(bindings) {\n  if (bindings === undefined || bindings.length === 0) {\n    return EMPTY_OBJ;\n  }\n  const result = {};\n  for (let i = 0; i < bindings.length; i += 2) {\n    result[bindings[i]] = bindings[i + 1];\n  }\n  return result;\n}\n/**\n * `ngOnChanges` has some leftover legacy ViewEngine behavior where the keys inside the\n * `SimpleChanges` event refer to the *declared* name of the input, not its public name or its\n * minified name. E.g. in `@Input('alias') foo: string`, the name in the `SimpleChanges` object\n * will always be `foo`, and not `alias` or the minified name of `foo` in apps using property\n * minification.\n *\n * This is achieved through the `DirectiveDef.declaredInputs` map that is constructed when the\n * definition is declared. When a property is written to the directive instance, the\n * `NgOnChangesFeature` will try to remap the property name being written to using the\n * `declaredInputs`.\n *\n * Since the host directive input remapping happens during directive matching, `declaredInputs`\n * won't contain the new alias that the input is available under. This function addresses the\n * issue by patching the host directive aliases to the `declaredInputs`. There is *not* a risk of\n * this patching accidentally introducing new inputs to the host directive, because `declaredInputs`\n * is used *only* by the `NgOnChangesFeature` when determining what name is used in the\n * `SimpleChanges` object which won't be reached if an input doesn't exist.\n */\nfunction patchDeclaredInputs(declaredInputs, exposedInputs) {\n  for (const publicName in exposedInputs) {\n    if (exposedInputs.hasOwnProperty(publicName)) {\n      const remappedPublicName = exposedInputs[publicName];\n      const privateName = declaredInputs[publicName];\n      // We *technically* shouldn't be able to hit this case because we can't have multiple\n      // inputs on the same property and we have validations against conflicting aliases in\n      // `validateMappings`. If we somehow did, it would lead to `ngOnChanges` being invoked\n      // with the wrong name so we have a non-user-friendly assertion here just in case.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && declaredInputs.hasOwnProperty(remappedPublicName)) {\n        assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);\n      }\n      declaredInputs[remappedPublicName] = privateName;\n    }\n  }\n}\n/**\n * Verifies that the host directive has been configured correctly.\n * @param hostDirectiveConfig Host directive configuration object.\n * @param directiveDef Directive definition of the host directive.\n */\nfunction validateHostDirective(hostDirectiveConfig, directiveDef) {\n  const type = hostDirectiveConfig.directive;\n  if (directiveDef === null) {\n    if (getComponentDef(type) !== null) {\n      throw new RuntimeError(310 /* RuntimeErrorCode.HOST_DIRECTIVE_COMPONENT */, `Host directive ${type.name} cannot be a component.`);\n    }\n    throw new RuntimeError(307 /* RuntimeErrorCode.HOST_DIRECTIVE_UNRESOLVABLE */, `Could not resolve metadata for host directive ${type.name}. ` + `Make sure that the ${type.name} class is annotated with an @Directive decorator.`);\n  }\n  if (!directiveDef.standalone) {\n    throw new RuntimeError(308 /* RuntimeErrorCode.HOST_DIRECTIVE_NOT_STANDALONE */, `Host directive ${directiveDef.type.name} must be standalone.`);\n  }\n  validateMappings('input', directiveDef, hostDirectiveConfig.inputs);\n  validateMappings('output', directiveDef, hostDirectiveConfig.outputs);\n}\n/**\n * Checks that the host directive inputs/outputs configuration is valid.\n * @param bindingType Kind of binding that is being validated. Used in the error message.\n * @param def Definition of the host directive that is being validated against.\n * @param hostDirectiveBindings Host directive mapping object that shold be validated.\n */\nfunction validateMappings(bindingType, def, hostDirectiveBindings) {\n  const className = def.type.name;\n  const bindings = bindingType === 'input' ? def.inputs : def.outputs;\n  for (const publicName in hostDirectiveBindings) {\n    if (hostDirectiveBindings.hasOwnProperty(publicName)) {\n      if (!bindings.hasOwnProperty(publicName)) {\n        throw new RuntimeError(311 /* RuntimeErrorCode.HOST_DIRECTIVE_UNDEFINED_BINDING */, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);\n      }\n      const remappedPublicName = hostDirectiveBindings[publicName];\n      if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName) {\n        throw new RuntimeError(312 /* RuntimeErrorCode.HOST_DIRECTIVE_CONFLICTING_ALIAS */, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);\n      }\n    }\n  }\n}\nfunction templateCreate(tNode, declarationLView, declarationTView, index, templateFn, decls, vars, flags) {\n  if (declarationTView.firstCreatePass) {\n    // Merge the template attrs last so that they have the highest priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n    const embeddedTView = tNode.tView = createTView(2 /* TViewType.Embedded */, tNode, templateFn, decls, vars, declarationTView.directiveRegistry, declarationTView.pipeRegistry, null, declarationTView.schemas, declarationTView.consts, null /* ssrId */);\n    if (declarationTView.queries !== null) {\n      declarationTView.queries.template(declarationTView, tNode);\n      embeddedTView.queries = declarationTView.queries.embeddedTView(tNode);\n    }\n  }\n  if (flags) {\n    tNode.flags |= flags;\n  }\n  setCurrentTNode(tNode, false);\n  const comment = _locateOrCreateContainerAnchor(declarationTView, declarationLView, tNode, index);\n  if (wasLastNodeCreated()) {\n    appendChild(declarationTView, declarationLView, comment, tNode);\n  }\n  attachPatchData(comment, declarationLView);\n  const lContainer = createLContainer(comment, declarationLView, comment, tNode);\n  declarationLView[index + HEADER_OFFSET] = lContainer;\n  addToEndOfViewTree(declarationLView, lContainer);\n  // If hydration is enabled, looks up dehydrated views in the DOM\n  // using hydration annotation info and stores those views on LContainer.\n  // In client-only mode, this function is a noop.\n  populateDehydratedViewsInLContainer(lContainer, tNode, declarationLView);\n}\n/**\n * Declares a new template that can have directives on its host node.\n *\n * @param declarationLView LView in which the template was declared.\n * @param declarationTView TView in which the template wa declared.\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n */\nfunction declareDirectiveHostTemplate(declarationLView, declarationTView, index, templateFn, decls, vars, tagName, attrs, flags, localRefsIndex, localRefExtractor) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  let tNode;\n  if (declarationTView.firstCreatePass) {\n    // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n    tNode = getOrCreateTNode(declarationTView, adjustedIndex, 4 /* TNodeType.Container */, tagName || null, attrs || null);\n    if (getBindingsEnabled()) {\n      resolveDirectives(declarationTView, declarationLView, tNode, getConstant(declarationTView.consts, localRefsIndex), findDirectiveDefMatches);\n    }\n    registerPostOrderHooks(declarationTView, tNode);\n  } else {\n    tNode = declarationTView.data[adjustedIndex];\n  }\n  templateCreate(tNode, declarationLView, declarationTView, index, templateFn, decls, vars, flags);\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(declarationTView, declarationLView, tNode);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);\n  }\n  return tNode;\n}\n/**\n * Declares a new template that *cannot& have directives on its host node.\n *\n * @param declarationLView LView in which the template was declared.\n * @param declarationTView TView in which the template wa declared.\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n */\nfunction declareNoDirectiveHostTemplate(declarationLView, declarationTView, index, templateFn, decls, vars, tagName, attrs, flags, localRefsIndex, localRefExtractor) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  let tNode;\n  if (declarationTView.firstCreatePass) {\n    tNode = getOrCreateTNode(declarationTView, adjustedIndex, 4 /* TNodeType.Container */, tagName || null, attrs || null);\n    if (localRefsIndex != null) {\n      const refs = getConstant(declarationTView.consts, localRefsIndex);\n      tNode.localNames = [];\n      for (let i = 0; i < refs.length; i += 2) {\n        // Always -1 since DOM-only instructions can only refer to the native node.\n        tNode.localNames.push(refs[i], -1);\n      }\n    }\n  } else {\n    tNode = declarationTView.data[adjustedIndex];\n  }\n  templateCreate(tNode, declarationLView, declarationTView, index, templateFn, decls, vars, flags);\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);\n  }\n  return tNode;\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  const lView = getLView();\n  const tView = getTView();\n  const attrs = getConstant(tView.consts, attrsIndex);\n  declareDirectiveHostTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, undefined, localRefsIndex, localRefExtractor);\n  return ɵɵtemplate;\n}\n/**\n * Creates an LContainer for an ng-template that cannot have directives.\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nfunction ɵɵdomTemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  const lView = getLView();\n  const tView = getTView();\n  const attrs = getConstant(tView.consts, attrsIndex);\n  declareNoDirectiveHostTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, undefined, localRefsIndex, localRefExtractor);\n  return ɵɵdomTemplate;\n}\nlet _locateOrCreateContainerAnchor = createContainerAnchorImpl;\n/**\n * Regular creation mode for LContainers and their anchor (comment) nodes.\n */\nfunction createContainerAnchorImpl(tView, lView, tNode, index) {\n  lastNodeWasCreated(true);\n  return lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n}\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode for LContainers and their\n * anchor (comment) nodes.\n */\nfunction locateOrCreateContainerAnchorImpl(tView, lView, tNode, index) {\n  const isNodeCreationMode = !canHydrateNode(lView, tNode);\n  lastNodeWasCreated(isNodeCreationMode);\n  const ssrId = lView[HYDRATION]?.data[TEMPLATES]?.[index] ?? null;\n  // Apply `ssrId` value to the underlying TView if it was not previously set.\n  //\n  // There might be situations when the same component is present in a template\n  // multiple times and some instances are opted-out of using hydration via\n  // `ngSkipHydration` attribute. In this scenario, at the time a TView is created,\n  // the `ssrId` might be `null` (if the first component is opted-out of hydration).\n  // The code below makes sure that the `ssrId` is applied to the TView if it's still\n  // `null` and verifies we never try to override it with a different value.\n  if (ssrId !== null && tNode.tView !== null) {\n    if (tNode.tView.ssrId === null) {\n      tNode.tView.ssrId = ssrId;\n    } else {\n      ngDevMode && assertEqual(tNode.tView.ssrId, ssrId, 'Unexpected value of the `ssrId` for this TView');\n    }\n  }\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createContainerAnchorImpl(tView, lView);\n  }\n  const hydrationInfo = lView[HYDRATION];\n  // Hydration mode, looking up existing elements in DOM.\n  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n  setSegmentHead(hydrationInfo, index, currentRNode);\n  const viewContainerSize = calcSerializedContainerSize(hydrationInfo, index);\n  const comment = siblingAfter(viewContainerSize, currentRNode);\n  if (ngDevMode) {\n    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n    markRNodeAsClaimedByHydration(comment);\n  }\n  return comment;\n}\nfunction enableLocateOrCreateContainerAnchorImpl() {\n  _locateOrCreateContainerAnchor = locateOrCreateContainerAnchorImpl;\n}\n\n/**\n * Describes the state of defer block dependency loading.\n */\nvar DeferDependenciesLoadingState = /*#__PURE__*/function (DeferDependenciesLoadingState) {\n  /** Initial state, dependency loading is not yet triggered */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"NOT_STARTED\"] = 0] = \"NOT_STARTED\";\n  /** Dependency loading is in progress */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n  /** Dependency loading has completed successfully */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"COMPLETE\"] = 2] = \"COMPLETE\";\n  /** Dependency loading has failed */\n  DeferDependenciesLoadingState[DeferDependenciesLoadingState[\"FAILED\"] = 3] = \"FAILED\";\n  return DeferDependenciesLoadingState;\n}(DeferDependenciesLoadingState || {});\n/** Slot index where `minimum` parameter value is stored. */\nconst MINIMUM_SLOT = 0;\n/** Slot index where `after` parameter value is stored. */\nconst LOADING_AFTER_SLOT = 1;\n/**\n * Describes the current state of this defer block instance.\n *\n * @publicApi\n */\nvar DeferBlockState = /*#__PURE__*/function (DeferBlockState) {\n  /** The placeholder block content is rendered */\n  DeferBlockState[DeferBlockState[\"Placeholder\"] = 0] = \"Placeholder\";\n  /** The loading block content is rendered */\n  DeferBlockState[DeferBlockState[\"Loading\"] = 1] = \"Loading\";\n  /** The main content block content is rendered */\n  DeferBlockState[DeferBlockState[\"Complete\"] = 2] = \"Complete\";\n  /** The error block content is rendered */\n  DeferBlockState[DeferBlockState[\"Error\"] = 3] = \"Error\";\n  return DeferBlockState;\n}(DeferBlockState || {});\n/**\n * Describes the initial state of this defer block instance.\n *\n * Note: this state is internal only and *must* be represented\n * with a number lower than any value in the `DeferBlockState` enum.\n */\nvar DeferBlockInternalState = /*#__PURE__*/function (DeferBlockInternalState) {\n  /** Initial state. Nothing is rendered yet. */\n  DeferBlockInternalState[DeferBlockInternalState[\"Initial\"] = -1] = \"Initial\";\n  return DeferBlockInternalState;\n}(DeferBlockInternalState || {});\nconst NEXT_DEFER_BLOCK_STATE = 0;\n// Note: it's *important* to keep the state in this slot, because this slot\n// is used by runtime logic to differentiate between LViews, LContainers and\n// other types (see `isLView` and `isLContainer` functions). In case of defer\n// blocks, this slot would always be a number.\nconst DEFER_BLOCK_STATE = 1;\nconst STATE_IS_FROZEN_UNTIL = 2;\nconst LOADING_AFTER_CLEANUP_FN = 3;\nconst TRIGGER_CLEANUP_FNS = 4;\nconst PREFETCH_TRIGGER_CLEANUP_FNS = 5;\nconst SSR_UNIQUE_ID = 6;\nconst SSR_BLOCK_STATE = 7;\nconst ON_COMPLETE_FNS = 8;\nconst HYDRATE_TRIGGER_CLEANUP_FNS = 9;\n/**\n * Options for configuring defer blocks behavior.\n * @publicApi\n */\nvar DeferBlockBehavior = /*#__PURE__*/function (DeferBlockBehavior) {\n  /**\n   * Manual triggering mode for defer blocks. Provides control over when defer blocks render\n   * and which state they render.\n   */\n  DeferBlockBehavior[DeferBlockBehavior[\"Manual\"] = 0] = \"Manual\";\n  /**\n   * Playthrough mode for defer blocks. This mode behaves like defer blocks would in a browser.\n   * This is the default behavior in test environments.\n   */\n  DeferBlockBehavior[DeferBlockBehavior[\"Playthrough\"] = 1] = \"Playthrough\";\n  return DeferBlockBehavior;\n}(DeferBlockBehavior || {});\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Registers a cleanup function associated with a prefetching trigger\n * or a regular trigger of a defer block.\n */\nfunction storeTriggerCleanupFn(type, lDetails, cleanupFn) {\n  const key = getCleanupFnKeyByType(type);\n  if (lDetails[key] === null) {\n    lDetails[key] = [];\n  }\n  lDetails[key].push(cleanupFn);\n}\n/**\n * Invokes registered cleanup functions either for prefetch or for regular triggers.\n */\nfunction invokeTriggerCleanupFns(type, lDetails) {\n  const key = getCleanupFnKeyByType(type);\n  const cleanupFns = lDetails[key];\n  if (cleanupFns !== null) {\n    for (const cleanupFn of cleanupFns) {\n      cleanupFn();\n    }\n    lDetails[key] = null;\n  }\n}\n/**\n * Invokes registered cleanup functions for prefetch, hydrate, and regular triggers.\n */\nfunction invokeAllTriggerCleanupFns(lDetails) {\n  invokeTriggerCleanupFns(1 /* TriggerType.Prefetch */, lDetails);\n  invokeTriggerCleanupFns(0 /* TriggerType.Regular */, lDetails);\n  invokeTriggerCleanupFns(2 /* TriggerType.Hydrate */, lDetails);\n}\nfunction getCleanupFnKeyByType(type) {\n  let key = TRIGGER_CLEANUP_FNS;\n  if (type === 1 /* TriggerType.Prefetch */) {\n    key = PREFETCH_TRIGGER_CLEANUP_FNS;\n  } else if (type === 2 /* TriggerType.Hydrate */) {\n    key = HYDRATE_TRIGGER_CLEANUP_FNS;\n  }\n  return key;\n}\n\n/** Actions that are supported by the tracing framework. */\nvar TracingAction = /*#__PURE__*/function (TracingAction) {\n  TracingAction[TracingAction[\"CHANGE_DETECTION\"] = 0] = \"CHANGE_DETECTION\";\n  TracingAction[TracingAction[\"AFTER_NEXT_RENDER\"] = 1] = \"AFTER_NEXT_RENDER\";\n  return TracingAction;\n}(TracingAction || {});\n/**\n * Injection token for a `TracingService`, optionally provided.\n */\nconst TracingService = /*#__PURE__*/new InjectionToken(ngDevMode ? 'TracingService' : '');\nconst SCHEDULE_IN_ROOT_ZONE_DEFAULT = false;\nclass EventEmitter_ extends Subject {\n  // tslint:disable-next-line:require-internal-with-underscore\n  __isAsync;\n  destroyRef = undefined;\n  pendingTasks = undefined;\n  constructor(isAsync = false) {\n    super();\n    this.__isAsync = isAsync;\n    // Attempt to retrieve a `DestroyRef` and `PendingTasks` optionally.\n    // For backwards compatibility reasons, this cannot be required.\n    if (isInInjectionContext()) {\n      // `DestroyRef` is optional because it is not available in all contexts.\n      // But it is useful to properly complete the `EventEmitter` if used with `outputToObservable`\n      // when the component/directive is destroyed. (See `outputToObservable` for more details.)\n      this.destroyRef = inject(DestroyRef, {\n        optional: true\n      }) ?? undefined;\n      this.pendingTasks = inject(PendingTasksInternal, {\n        optional: true\n      }) ?? undefined;\n    }\n  }\n  emit(value) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      super.next(value);\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n  subscribe(observerOrNext, error, complete) {\n    let nextFn = observerOrNext;\n    let errorFn = error || (() => null);\n    let completeFn = complete;\n    if (observerOrNext && typeof observerOrNext === 'object') {\n      const observer = observerOrNext;\n      nextFn = observer.next?.bind(observer);\n      errorFn = observer.error?.bind(observer);\n      completeFn = observer.complete?.bind(observer);\n    }\n    if (this.__isAsync) {\n      errorFn = this.wrapInTimeout(errorFn);\n      if (nextFn) {\n        nextFn = this.wrapInTimeout(nextFn);\n      }\n      if (completeFn) {\n        completeFn = this.wrapInTimeout(completeFn);\n      }\n    }\n    const sink = super.subscribe({\n      next: nextFn,\n      error: errorFn,\n      complete: completeFn\n    });\n    if (observerOrNext instanceof Subscription) {\n      observerOrNext.add(sink);\n    }\n    return sink;\n  }\n  wrapInTimeout(fn) {\n    return value => {\n      const taskId = this.pendingTasks?.add();\n      setTimeout(() => {\n        try {\n          fn(value);\n        } finally {\n          if (taskId !== undefined) {\n            this.pendingTasks?.remove(taskId);\n          }\n        }\n      });\n    };\n  }\n}\n/**\n * @publicApi\n */\nconst EventEmitter = EventEmitter_;\n\n/**\n * Gets a scheduling function that runs the callback after the first of setTimeout and\n * requestAnimationFrame resolves.\n *\n * - `requestAnimationFrame` ensures that change detection runs ahead of a browser repaint.\n * This ensures that the create and update passes of a change detection always happen\n * in the same frame.\n * - When the browser is resource-starved, `rAF` can execute _before_ a `setTimeout` because\n * rendering is a very high priority process. This means that `setTimeout` cannot guarantee\n * same-frame create and update pass, when `setTimeout` is used to schedule the update phase.\n * - While `rAF` gives us the desirable same-frame updates, it has two limitations that\n * prevent it from being used alone. First, it does not run in background tabs, which would\n * prevent Angular from initializing an application when opened in a new tab (for example).\n * Second, repeated calls to requestAnimationFrame will execute at the refresh rate of the\n * hardware (~16ms for a 60Hz display). This would cause significant slowdown of tests that\n * are written with several updates and asserts in the form of \"update; await stable; assert;\".\n * - Both `setTimeout` and `rAF` are able to \"coalesce\" several events from a single user\n * interaction into a single change detection. Importantly, this reduces view tree traversals when\n * compared to an alternative timing mechanism like `queueMicrotask`, where change detection would\n * then be interleaves between each event.\n *\n * By running change detection after the first of `setTimeout` and `rAF` to execute, we get the\n * best of both worlds.\n *\n * @returns a function to cancel the scheduled callback\n */\nfunction scheduleCallbackWithRafRace(callback) {\n  let timeoutId;\n  let animationFrameId;\n  function cleanup() {\n    callback = noop;\n    try {\n      if (animationFrameId !== undefined && typeof cancelAnimationFrame === 'function') {\n        cancelAnimationFrame(animationFrameId);\n      }\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId);\n      }\n    } catch {\n      // Clearing/canceling can fail in tests due to the timing of functions being patched and unpatched\n      // Just ignore the errors - we protect ourselves from this issue by also making the callback a no-op.\n    }\n  }\n  timeoutId = setTimeout(() => {\n    callback();\n    cleanup();\n  });\n  if (typeof requestAnimationFrame === 'function') {\n    animationFrameId = requestAnimationFrame(() => {\n      callback();\n      cleanup();\n    });\n  }\n  return () => cleanup();\n}\nfunction scheduleCallbackWithMicrotask(callback) {\n  queueMicrotask(() => callback());\n  return () => {\n    callback = noop;\n  };\n}\nclass AsyncStackTaggingZoneSpec {\n  createTask;\n  constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {\n    this.name = 'asyncStackTagging for ' + namePrefix;\n    this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);\n  }\n  // ZoneSpec implementation below.\n  name;\n  onScheduleTask(delegate, _current, target, task) {\n    task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);\n    return delegate.scheduleTask(target, task);\n  }\n  onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {\n    let ret;\n    if (task.consoleTask) {\n      ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));\n    } else {\n      ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);\n    }\n    return ret;\n  }\n}\nconst isAngularZoneProperty = 'isAngularZone';\nconst angularZoneInstanceIdProperty = isAngularZoneProperty + '_ID';\nlet ngZoneInstanceId = 0;\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * import {Component, NgZone} from '@angular/core';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     @if(progress >= 100) {\n *        <p>Done processing {{label}} of Angular zone!</p>\n *     }\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass NgZone {\n  hasPendingMacrotasks = false;\n  hasPendingMicrotasks = false;\n  /**\n   * Whether there are no outstanding microtasks or macrotasks.\n   */\n  isStable = true;\n  /**\n   * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n   */\n  onUnstable = /*#__PURE__*/new EventEmitter(false);\n  /**\n   * Notifies when there is no more microtasks enqueued in the current VM Turn.\n   * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n   * For this reason this event can fire multiple times per VM Turn.\n   */\n  onMicrotaskEmpty = /*#__PURE__*/new EventEmitter(false);\n  /**\n   * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n   * implies we are about to relinquish VM turn.\n   * This event gets called just once.\n   */\n  onStable = /*#__PURE__*/new EventEmitter(false);\n  /**\n   * Notifies that an error has been delivered.\n   */\n  onError = /*#__PURE__*/new EventEmitter(false);\n  constructor(options) {\n    const {\n      enableLongStackTrace = false,\n      shouldCoalesceEventChangeDetection = false,\n      shouldCoalesceRunChangeDetection = false,\n      scheduleInRootZone = SCHEDULE_IN_ROOT_ZONE_DEFAULT\n    } = options;\n    if (typeof Zone == 'undefined') {\n      throw new RuntimeError(908 /* RuntimeErrorCode.MISSING_ZONEJS */, ngDevMode && `In this configuration Angular requires Zone.js`);\n    }\n    Zone.assertZonePatched();\n    const self = this;\n    self._nesting = 0;\n    self._outer = self._inner = Zone.current;\n    // AsyncStackTaggingZoneSpec provides `linked stack traces` to show\n    // where the async operation is scheduled. For more details, refer\n    // to this article, https://developer.chrome.com/blog/devtools-better-angular-debugging/\n    // And we only import this AsyncStackTaggingZoneSpec in development mode,\n    // in the production mode, the AsyncStackTaggingZoneSpec will be tree shaken away.\n    if (ngDevMode) {\n      self._inner = self._inner.fork(new AsyncStackTaggingZoneSpec('Angular'));\n    }\n    if (Zone['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']());\n    }\n    if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n    }\n    // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be\n    // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.\n    self.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;\n    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;\n    self.callbackScheduled = false;\n    self.scheduleInRootZone = scheduleInRootZone;\n    forkInnerZoneWithAngularBehavior(self);\n  }\n  /**\n    This method checks whether the method call happens within an Angular Zone instance.\n  */\n  static isInAngularZone() {\n    // Zone needs to be checked, because this method might be called even when NoopNgZone is used.\n    return typeof Zone !== 'undefined' && Zone.current.get(isAngularZoneProperty) === true;\n  }\n  /**\n    Assures that the method is called within the Angular Zone, otherwise throws an error.\n  */\n  static assertInAngularZone() {\n    if (!NgZone.isInAngularZone()) {\n      throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to be in Angular Zone, but it is not!');\n    }\n  }\n  /**\n    Assures that the method is called outside of the Angular Zone, otherwise throws an error.\n  */\n  static assertNotInAngularZone() {\n    if (NgZone.isInAngularZone()) {\n      throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to not be in Angular Zone, but it is!');\n    }\n  }\n  /**\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n   * the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  run(fn, applyThis, applyArgs) {\n    return this._inner.run(fn, applyThis, applyArgs);\n  }\n  /**\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n   * returned by the function.\n   *\n   * Running functions via `runTask` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  runTask(fn, applyThis, applyArgs, name) {\n    const zone = this._inner;\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n    try {\n      return zone.runTask(task, applyThis, applyArgs);\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n  /**\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n   * rethrown.\n   */\n  runGuarded(fn, applyThis, applyArgs) {\n    return this._inner.runGuarded(fn, applyThis, applyArgs);\n  }\n  /**\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n   * the function.\n   *\n   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n   * work that\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * outside of the Angular zone.\n   *\n   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n   */\n  runOutsideAngular(fn) {\n    return this._outer.run(fn);\n  }\n}\nconst EMPTY_PAYLOAD = {};\nfunction checkStable(zone) {\n  // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent\n  // re-entry. The case is:\n  //\n  // @Component({...})\n  // export class AppComponent {\n  // constructor(private ngZone: NgZone) {\n  //   this.ngZone.onStable.subscribe(() => {\n  //     this.ngZone.run(() => console.log('stable'););\n  //   });\n  // }\n  //\n  // The onStable subscriber run another function inside ngZone\n  // which causes `checkStable()` re-entry.\n  // But this fix causes some issues in g3, so this fix will be\n  // launched in another PR.\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\nfunction delayChangeDetectionForEvents(zone) {\n  /**\n   * We also need to check _nesting here\n   * Consider the following case with shouldCoalesceRunChangeDetection = true\n   *\n   * ngZone.run(() => {});\n   * ngZone.run(() => {});\n   *\n   * We want the two `ngZone.run()` only trigger one change detection\n   * when shouldCoalesceRunChangeDetection is true.\n   * And because in this case, change detection run in async way(requestAnimationFrame),\n   * so we also need to check the _nesting here to prevent multiple\n   * change detections.\n   */\n  if (zone.isCheckStableRunning || zone.callbackScheduled) {\n    return;\n  }\n  zone.callbackScheduled = true;\n  function scheduleCheckStable() {\n    scheduleCallbackWithRafRace(() => {\n      zone.callbackScheduled = false;\n      updateMicroTaskStatus(zone);\n      zone.isCheckStableRunning = true;\n      checkStable(zone);\n      zone.isCheckStableRunning = false;\n    });\n  }\n  if (zone.scheduleInRootZone) {\n    Zone.root.run(() => {\n      scheduleCheckStable();\n    });\n  } else {\n    zone._outer.run(() => {\n      scheduleCheckStable();\n    });\n  }\n  updateMicroTaskStatus(zone);\n}\nfunction forkInnerZoneWithAngularBehavior(zone) {\n  const delayChangeDetectionForEventsDelegate = () => {\n    delayChangeDetectionForEvents(zone);\n  };\n  const instanceId = ngZoneInstanceId++;\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: {\n      [isAngularZoneProperty]: true,\n      [angularZoneInstanceIdProperty]: instanceId,\n      [angularZoneInstanceIdProperty + instanceId]: true\n    },\n    onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {\n      // Prevent triggering change detection when the flag is detected.\n      if (shouldBeIgnoredByZone(applyArgs)) {\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      }\n      try {\n        onEnter(zone);\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      } finally {\n        if (zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask' || zone.shouldCoalesceRunChangeDetection) {\n          delayChangeDetectionForEventsDelegate();\n        }\n        onLeave(zone);\n      }\n    },\n    onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {\n      try {\n        onEnter(zone);\n        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n      } finally {\n        if (zone.shouldCoalesceRunChangeDetection &&\n        // Do not delay change detection when the task is the scheduler's tick.\n        // We need to synchronously trigger the stability logic so that the\n        // zone-based scheduler can prevent a duplicate ApplicationRef.tick\n        // by first checking if the scheduler tick is running. This does seem a bit roundabout,\n        // but we _do_ still want to trigger all the correct events when we exit the zone.run\n        // (`onMicrotaskEmpty` and `onStable` _should_ emit; developers can have code which\n        // relies on these events happening after change detection runs).\n        // Note: `zone.callbackScheduled` is already in delayChangeDetectionForEventsDelegate\n        // but is added here as well to prevent reads of applyArgs when not necessary\n        !zone.callbackScheduled && !isSchedulerTick(applyArgs)) {\n          delayChangeDetectionForEventsDelegate();\n        }\n        onLeave(zone);\n      }\n    },\n    onHasTask: (delegate, current, target, hasTaskState) => {\n      delegate.hasTask(target, hasTaskState);\n      if (current === target) {\n        // We are only interested in hasTask events which originate from our zone\n        // (A child hasTask event is not interesting to us)\n        if (hasTaskState.change == 'microTask') {\n          zone._hasPendingMicrotasks = hasTaskState.microTask;\n          updateMicroTaskStatus(zone);\n          checkStable(zone);\n        } else if (hasTaskState.change == 'macroTask') {\n          zone.hasPendingMacrotasks = hasTaskState.macroTask;\n        }\n      }\n    },\n    onHandleError: (delegate, current, target, error) => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\nfunction updateMicroTaskStatus(zone) {\n  if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.callbackScheduled === true) {\n    zone.hasPendingMicrotasks = true;\n  } else {\n    zone.hasPendingMicrotasks = false;\n  }\n}\nfunction onEnter(zone) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\nfunction onLeave(zone) {\n  zone._nesting--;\n  checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nclass NoopNgZone {\n  hasPendingMicrotasks = false;\n  hasPendingMacrotasks = false;\n  isStable = true;\n  onUnstable = /*#__PURE__*/new EventEmitter();\n  onMicrotaskEmpty = /*#__PURE__*/new EventEmitter();\n  onStable = /*#__PURE__*/new EventEmitter();\n  onError = /*#__PURE__*/new EventEmitter();\n  run(fn, applyThis, applyArgs) {\n    return fn.apply(applyThis, applyArgs);\n  }\n  runGuarded(fn, applyThis, applyArgs) {\n    return fn.apply(applyThis, applyArgs);\n  }\n  runOutsideAngular(fn) {\n    return fn();\n  }\n  runTask(fn, applyThis, applyArgs, name) {\n    return fn.apply(applyThis, applyArgs);\n  }\n}\nfunction shouldBeIgnoredByZone(applyArgs) {\n  return hasApplyArgsData(applyArgs, '__ignore_ng_zone__');\n}\nfunction isSchedulerTick(applyArgs) {\n  return hasApplyArgsData(applyArgs, '__scheduler_tick__');\n}\nfunction hasApplyArgsData(applyArgs, key) {\n  if (!Array.isArray(applyArgs)) {\n    return false;\n  }\n  // We should only ever get 1 arg passed through to invokeTask.\n  // Short circuit here incase that behavior changes.\n  if (applyArgs.length !== 1) {\n    return false;\n  }\n  return applyArgs[0]?.data?.[key] === true;\n}\nfunction getNgZone(ngZoneToUse = 'zone.js', options) {\n  if (ngZoneToUse === 'noop') {\n    return new NoopNgZone();\n  }\n  if (ngZoneToUse === 'zone.js') {\n    return new NgZone(options);\n  }\n  return ngZoneToUse;\n}\nlet AfterRenderManager = /*#__PURE__*/(() => {\n  class AfterRenderManager {\n    impl = null;\n    execute() {\n      this.impl?.execute();\n    }\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: AfterRenderManager,\n      providedIn: 'root',\n      factory: () => new AfterRenderManager()\n    });\n  }\n  return AfterRenderManager;\n})();\nconst AFTER_RENDER_PHASES = /* @__PURE__ **/(() => [0 /* AfterRenderPhase.EarlyRead */, 1 /* AfterRenderPhase.Write */, 2 /* AfterRenderPhase.MixedReadWrite */, 3 /* AfterRenderPhase.Read */])();\nlet AfterRenderImpl = /*#__PURE__*/(() => {\n  class AfterRenderImpl {\n    ngZone = inject(NgZone);\n    scheduler = inject(ChangeDetectionScheduler);\n    errorHandler = inject(ErrorHandler, {\n      optional: true\n    });\n    /** Current set of active sequences. */\n    sequences = new Set();\n    /** Tracks registrations made during the current set of executions. */\n    deferredRegistrations = new Set();\n    /** Whether the `AfterRenderManager` is currently executing hooks. */\n    executing = false;\n    constructor() {\n      // Inject the tracing service to make sure it's initialized.\n      inject(TracingService, {\n        optional: true\n      });\n    }\n    /**\n     * Run the sequence of phases of hooks, once through. As a result of executing some hooks, more\n     * might be scheduled.\n     */\n    execute() {\n      const hasSequencesToExecute = this.sequences.size > 0;\n      if (hasSequencesToExecute) {\n        profiler(16 /* ProfilerEvent.AfterRenderHooksStart */);\n      }\n      this.executing = true;\n      for (const phase of AFTER_RENDER_PHASES) {\n        for (const sequence of this.sequences) {\n          if (sequence.erroredOrDestroyed || !sequence.hooks[phase]) {\n            continue;\n          }\n          try {\n            sequence.pipelinedValue = this.ngZone.runOutsideAngular(() => this.maybeTrace(() => {\n              const hookFn = sequence.hooks[phase];\n              const value = hookFn(sequence.pipelinedValue);\n              return value;\n            }, sequence.snapshot));\n          } catch (err) {\n            sequence.erroredOrDestroyed = true;\n            this.errorHandler?.handleError(err);\n          }\n        }\n      }\n      this.executing = false;\n      // Cleanup step to reset sequence state and also collect one-shot sequences for removal.\n      for (const sequence of this.sequences) {\n        sequence.afterRun();\n        if (sequence.once) {\n          this.sequences.delete(sequence);\n          // Destroy the sequence so its on destroy callbacks can be cleaned up\n          // immediately, instead of waiting until the injector is destroyed.\n          sequence.destroy();\n        }\n      }\n      for (const sequence of this.deferredRegistrations) {\n        this.sequences.add(sequence);\n      }\n      if (this.deferredRegistrations.size > 0) {\n        this.scheduler.notify(7 /* NotificationSource.RenderHook */);\n      }\n      this.deferredRegistrations.clear();\n      if (hasSequencesToExecute) {\n        profiler(17 /* ProfilerEvent.AfterRenderHooksEnd */);\n      }\n    }\n    register(sequence) {\n      const {\n        view\n      } = sequence;\n      if (view !== undefined) {\n        // Delay adding it to the manager, add it to the view instead.\n        (view[AFTER_RENDER_SEQUENCES_TO_ADD] ??= []).push(sequence);\n        // Mark the view for traversal to ensure we eventually schedule the afterNextRender.\n        markAncestorsForTraversal(view);\n        view[FLAGS] |= 8192 /* LViewFlags.HasChildViewsToRefresh */;\n      } else if (!this.executing) {\n        this.addSequence(sequence);\n      } else {\n        this.deferredRegistrations.add(sequence);\n      }\n    }\n    addSequence(sequence) {\n      this.sequences.add(sequence);\n      // Trigger an `ApplicationRef.tick()` if one is not already pending/running, because we have a\n      // new render hook that needs to run.\n      this.scheduler.notify(7 /* NotificationSource.RenderHook */);\n    }\n    unregister(sequence) {\n      if (this.executing && this.sequences.has(sequence)) {\n        // We can't remove an `AfterRenderSequence` in the middle of iteration.\n        // Instead, mark it as destroyed so it doesn't run any more, and mark it as one-shot so it'll\n        // be removed at the end of the current execution.\n        sequence.erroredOrDestroyed = true;\n        sequence.pipelinedValue = undefined;\n        sequence.once = true;\n      } else {\n        // It's safe to directly remove this sequence.\n        this.sequences.delete(sequence);\n        this.deferredRegistrations.delete(sequence);\n      }\n    }\n    maybeTrace(fn, snapshot) {\n      // Only trace the execution if the snapshot is defined.\n      return snapshot ? snapshot.run(TracingAction.AFTER_NEXT_RENDER, fn) : fn();\n    }\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: AfterRenderImpl,\n      providedIn: 'root',\n      factory: () => new AfterRenderImpl()\n    });\n  }\n  return AfterRenderImpl;\n})();\nclass AfterRenderSequence {\n  impl;\n  hooks;\n  view;\n  once;\n  snapshot;\n  /**\n   * Whether this sequence errored or was destroyed during this execution, and hooks should no\n   * longer run for it.\n   */\n  erroredOrDestroyed = false;\n  /**\n   * The value returned by the last hook execution (if any), ready to be pipelined into the next\n   * one.\n   */\n  pipelinedValue = undefined;\n  unregisterOnDestroy;\n  constructor(impl, hooks, view, once, destroyRef, snapshot = null) {\n    this.impl = impl;\n    this.hooks = hooks;\n    this.view = view;\n    this.once = once;\n    this.snapshot = snapshot;\n    this.unregisterOnDestroy = destroyRef?.onDestroy(() => this.destroy());\n  }\n  afterRun() {\n    this.erroredOrDestroyed = false;\n    this.pipelinedValue = undefined;\n    // Clear the tracing snapshot after the initial run. This snapshot only\n    // associates the initial run of the hook with the context that created it.\n    // Follow-up runs are independent of that initial context and have different\n    // triggers.\n    this.snapshot?.dispose();\n    this.snapshot = null;\n  }\n  destroy() {\n    this.impl.unregister(this);\n    this.unregisterOnDestroy?.();\n    const scheduled = this.view?.[AFTER_RENDER_SEQUENCES_TO_ADD];\n    if (scheduled) {\n      this.view[AFTER_RENDER_SEQUENCES_TO_ADD] = scheduled.filter(s => s !== this);\n    }\n  }\n}\nfunction afterEveryRender(callbackOrSpec, options) {\n  ngDevMode && assertNotInReactiveContext(afterEveryRender, 'Call `afterEveryRender` outside of a reactive context. For example, schedule the render ' + 'callback inside the component constructor`.');\n  if (ngDevMode && !options?.injector) {\n    assertInInjectionContext(afterEveryRender);\n  }\n  const injector = options?.injector ?? inject(Injector);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return NOOP_AFTER_RENDER_REF;\n  }\n  performanceMarkFeature('NgAfterRender');\n  return afterEveryRenderImpl(callbackOrSpec, injector, options, /* once */false);\n}\nfunction afterNextRender(callbackOrSpec, options) {\n  if (ngDevMode && !options?.injector) {\n    assertInInjectionContext(afterNextRender);\n  }\n  const injector = options?.injector ?? inject(Injector);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return NOOP_AFTER_RENDER_REF;\n  }\n  performanceMarkFeature('NgAfterNextRender');\n  return afterEveryRenderImpl(callbackOrSpec, injector, options, /* once */true);\n}\nfunction getHooks(callbackOrSpec) {\n  if (callbackOrSpec instanceof Function) {\n    return [undefined, undefined, /* MixedReadWrite */callbackOrSpec, undefined];\n  } else {\n    return [callbackOrSpec.earlyRead, callbackOrSpec.write, callbackOrSpec.mixedReadWrite, callbackOrSpec.read];\n  }\n}\n/**\n * Shared implementation for `afterEveryRender` and `afterNextRender`.\n */\nfunction afterEveryRenderImpl(callbackOrSpec, injector, options, once) {\n  const manager = injector.get(AfterRenderManager);\n  // Lazily initialize the handler implementation, if necessary. This is so that it can be\n  // tree-shaken if `afterEveryRender` and `afterNextRender` aren't used.\n  manager.impl ??= injector.get(AfterRenderImpl);\n  const tracing = injector.get(TracingService, null, {\n    optional: true\n  });\n  const destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;\n  const viewContext = injector.get(ViewContext, null, {\n    optional: true\n  });\n  const sequence = new AfterRenderSequence(manager.impl, getHooks(callbackOrSpec), viewContext?.view, once, destroyRef, tracing?.snapshot(null));\n  manager.impl.register(sequence);\n  return sequence;\n}\n/** `AfterRenderRef` that does nothing. */\nconst NOOP_AFTER_RENDER_REF = {\n  destroy() {}\n};\n\n/**\n * Calculates a data slot index for defer block info (either static or\n * instance-specific), given an index of a defer instruction.\n */\nfunction getDeferBlockDataIndex(deferBlockIndex) {\n  // Instance state is located at the *next* position\n  // after the defer block slot in an LView or TView.data.\n  return deferBlockIndex + 1;\n}\n/** Retrieves a defer block state from an LView, given a TNode that represents a block. */\nfunction getLDeferBlockDetails(lView, tNode) {\n  const tView = lView[TVIEW];\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  return lView[slotIndex];\n}\n/** Stores a defer block instance state in LView. */\nfunction setLDeferBlockDetails(lView, deferBlockIndex, lDetails) {\n  const tView = lView[TVIEW];\n  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  lView[slotIndex] = lDetails;\n}\n/** Retrieves static info about a defer block, given a TView and a TNode that represents a block. */\nfunction getTDeferBlockDetails(tView, tNode) {\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  return tView.data[slotIndex];\n}\n/** Stores a defer block static info in `TView.data`. */\nfunction setTDeferBlockDetails(tView, deferBlockIndex, deferBlockConfig) {\n  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  tView.data[slotIndex] = deferBlockConfig;\n}\nfunction getTemplateIndexForState(newState, hostLView, tNode) {\n  const tView = hostLView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  switch (newState) {\n    case DeferBlockState.Complete:\n      return tDetails.primaryTmplIndex;\n    case DeferBlockState.Loading:\n      return tDetails.loadingTmplIndex;\n    case DeferBlockState.Error:\n      return tDetails.errorTmplIndex;\n    case DeferBlockState.Placeholder:\n      return tDetails.placeholderTmplIndex;\n    default:\n      ngDevMode && throwError(`Unexpected defer block state: ${newState}`);\n      return null;\n  }\n}\n/**\n * Returns a minimum amount of time that a given state should be rendered for,\n * taking into account `minimum` parameter value. If the `minimum` value is\n * not specified - returns `null`.\n */\nfunction getMinimumDurationForState(tDetails, currentState) {\n  if (currentState === DeferBlockState.Placeholder) {\n    return tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null;\n  } else if (currentState === DeferBlockState.Loading) {\n    return tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null;\n  }\n  return null;\n}\n/** Retrieves the value of the `after` parameter on the @loading block. */\nfunction getLoadingBlockAfter(tDetails) {\n  return tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null;\n}\n/**\n * Adds downloaded dependencies into a directive or a pipe registry,\n * making sure that a dependency doesn't yet exist in the registry.\n */\nfunction addDepsToRegistry(currentDeps, newDeps) {\n  if (!currentDeps || currentDeps.length === 0) {\n    return newDeps;\n  }\n  const currentDepSet = new Set(currentDeps);\n  for (const dep of newDeps) {\n    currentDepSet.add(dep);\n  }\n  // If `currentDeps` is the same length, there were no new deps and can\n  // return the original array.\n  return currentDeps.length === currentDepSet.size ? currentDeps : Array.from(currentDepSet);\n}\n/** Retrieves a TNode that represents main content of a defer block. */\nfunction getPrimaryBlockTNode(tView, tDetails) {\n  const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;\n  return getTNode(tView, adjustedIndex);\n}\n/**\n * Asserts whether all dependencies for a defer block are loaded.\n * Always run this function (in dev mode) before rendering a defer\n * block in completed state.\n */\nfunction assertDeferredDependenciesLoaded(tDetails) {\n  assertEqual(tDetails.loadingState, DeferDependenciesLoadingState.COMPLETE, 'Expecting all deferred dependencies to be loaded.');\n}\n/**\n * Determines if a given value matches the expected structure of a defer block\n *\n * We can safely rely on the primaryTmplIndex because every defer block requires\n * that a primary template exists. All the other template options are optional.\n */\nfunction isTDeferBlockDetails(value) {\n  return value !== null && typeof value === 'object' && typeof value.primaryTmplIndex === 'number';\n}\n/**\n * Whether a given TNode represents a defer block.\n */\nfunction isDeferBlock(tView, tNode) {\n  let tDetails = null;\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  // Check if a slot index is in the reasonable range.\n  // Note: we do `-1` on the right border, since defer block details are stored\n  // in the `n+1` slot, see `getDeferBlockDataIndex` for more info.\n  if (HEADER_OFFSET < slotIndex && slotIndex < tView.bindingStartIndex) {\n    tDetails = getTDeferBlockDetails(tView, tNode);\n  }\n  return !!tDetails && isTDeferBlockDetails(tDetails);\n}\n/**\n * Tracks debugging information about a trigger.\n * @param tView TView in which the trigger is declared.\n * @param tNode TNode on which the trigger is declared.\n * @param textRepresentation Text representation of the trigger to be used for debugging purposes.\n */\nfunction trackTriggerForDebugging(tView, tNode, textRepresentation) {\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  tDetails.debug ??= {};\n  tDetails.debug.triggers ??= new Set();\n  tDetails.debug.triggers.add(textRepresentation);\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Wrapper for onViewport trigger with angular specific Injector for resolving NgZone instance\n * and creating an IntersectionObserver which can run outside of Angular zone.\n * @param trigger Element that is the trigger.\n * @param callback Callback to be invoked when the trigger comes into the viewport.\n * @param injector Injector that can be used by the trigger to resolve DI tokens.\n */\nfunction onViewportWrapper(trigger, callback, injector) {\n  const ngZone = injector.get(NgZone);\n  return onViewport(trigger, () => ngZone.run(callback), () => ngZone.runOutsideAngular(() => createIntersectionObserver()));\n}\n/**\n * Helper function to get the LView in which a deferred block's trigger is rendered.\n * @param deferredHostLView LView in which the deferred block is defined.\n * @param deferredTNode TNode defining the deferred block.\n * @param walkUpTimes Number of times to go up in the view hierarchy to find the trigger's view.\n *   A negative value means that the trigger is inside the block's placeholder, while an undefined\n *   value means that the trigger is in the same LView as the deferred block.\n */\nfunction getTriggerLView(deferredHostLView, deferredTNode, walkUpTimes) {\n  // The trigger is in the same view, we don't need to traverse.\n  if (walkUpTimes == null) {\n    return deferredHostLView;\n  }\n  // A positive value or zero means that the trigger is in a parent view.\n  if (walkUpTimes >= 0) {\n    return walkUpViews(walkUpTimes, deferredHostLView);\n  }\n  // If the value is negative, it means that the trigger is inside the placeholder.\n  const deferredContainer = deferredHostLView[deferredTNode.index];\n  ngDevMode && assertLContainer(deferredContainer);\n  const triggerLView = deferredContainer[CONTAINER_HEADER_OFFSET] ?? null;\n  // We need to null check, because the placeholder might not have been rendered yet.\n  if (ngDevMode && triggerLView !== null) {\n    const lDetails = getLDeferBlockDetails(deferredHostLView, deferredTNode);\n    const renderedState = lDetails[DEFER_BLOCK_STATE];\n    assertEqual(renderedState, DeferBlockState.Placeholder, 'Expected a placeholder to be rendered in this defer block.');\n    assertLView(triggerLView);\n  }\n  return triggerLView;\n}\n/**\n * Gets the element that a deferred block's trigger is pointing to.\n * @param triggerLView LView in which the trigger is defined.\n * @param triggerIndex Index at which the trigger element should've been rendered.\n */\nfunction getTriggerElement(triggerLView, triggerIndex) {\n  const element = getNativeByIndex(HEADER_OFFSET + triggerIndex, triggerLView);\n  ngDevMode && assertElement(element);\n  return element;\n}\n/**\n * Registers a DOM-node based trigger.\n * @param initialLView LView in which the defer block is rendered.\n * @param tNode TNode representing the defer block.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to go up/down in the view hierarchy to find the trigger.\n * @param registerFn Function that will register the DOM events.\n * @param callback Callback to be invoked when the trigger receives the event that should render\n *     the deferred block.\n * @param type Trigger type to distinguish between regular and prefetch triggers.\n */\nfunction registerDomTrigger(initialLView, tNode, triggerIndex, walkUpTimes, registerFn, callback, type) {\n  const injector = initialLView[INJECTOR];\n  const zone = injector.get(NgZone);\n  let poll;\n  function pollDomTrigger() {\n    // If the initial view was destroyed, we don't need to do anything.\n    if (isDestroyed(initialLView)) {\n      poll.destroy();\n      return;\n    }\n    const lDetails = getLDeferBlockDetails(initialLView, tNode);\n    const renderedState = lDetails[DEFER_BLOCK_STATE];\n    // If the block was loaded before the trigger was resolved, we don't need to do anything.\n    if (renderedState !== DeferBlockInternalState.Initial && renderedState !== DeferBlockState.Placeholder) {\n      poll.destroy();\n      return;\n    }\n    const triggerLView = getTriggerLView(initialLView, tNode, walkUpTimes);\n    // Keep polling until we resolve the trigger's LView.\n    if (!triggerLView) {\n      // Keep polling.\n      return;\n    }\n    poll.destroy();\n    // It's possible that the trigger's view was destroyed before we resolved the trigger element.\n    if (isDestroyed(triggerLView)) {\n      return;\n    }\n    const element = getTriggerElement(triggerLView, triggerIndex);\n    const cleanup = registerFn(element, () => {\n      // `pollDomTrigger` runs outside the zone (because of `afterNextRender`) and registers its\n      // listeners outside the zone, so we jump back into the zone prior to running the callback.\n      zone.run(() => {\n        if (initialLView !== triggerLView) {\n          removeLViewOnDestroy(triggerLView, cleanup);\n        }\n        callback();\n      });\n    }, injector);\n    // The trigger and deferred block might be in different LViews.\n    // For the main LView the cleanup would happen as a part of\n    // `storeTriggerCleanupFn` logic. For trigger LView we register\n    // a cleanup function there to remove event handlers in case an\n    // LView gets destroyed before a trigger is invoked.\n    if (initialLView !== triggerLView) {\n      storeLViewOnDestroy(triggerLView, cleanup);\n    }\n    storeTriggerCleanupFn(type, lDetails, cleanup);\n  }\n  // Begin polling for the trigger.\n  poll = afterEveryRender({\n    read: pollDomTrigger\n  }, {\n    injector\n  });\n}\n\n/**\n * Helper function to schedule a callback to be invoked when a browser becomes idle.\n *\n * @param callback A function to be invoked when a browser becomes idle.\n * @param injector injector for the app\n */\nfunction onIdle(callback, injector) {\n  const scheduler = injector.get(IdleScheduler);\n  const cleanupFn = () => scheduler.remove(callback);\n  scheduler.add(callback);\n  return cleanupFn;\n}\n/**\n * Use shims for the `requestIdleCallback` and `cancelIdleCallback` functions for\n * environments where those functions are not available (e.g. Node.js and Safari).\n *\n * Note: we wrap the `requestIdleCallback` call into a function, so that it can be\n * overridden/mocked in test environment and picked up by the runtime code.\n */\nconst _requestIdleCallback = () => typeof requestIdleCallback !== 'undefined' ? requestIdleCallback : setTimeout;\nconst _cancelIdleCallback = () => typeof requestIdleCallback !== 'undefined' ? cancelIdleCallback : clearTimeout;\n/**\n * Helper service to schedule `requestIdleCallback`s for batches of defer blocks,\n * to avoid calling `requestIdleCallback` for each defer block (e.g. if\n * defer blocks are defined inside a for loop).\n */\nlet IdleScheduler = /*#__PURE__*/(() => {\n  class IdleScheduler {\n    // Indicates whether current callbacks are being invoked.\n    executingCallbacks = false;\n    // Currently scheduled idle callback id.\n    idleId = null;\n    // Set of callbacks to be invoked next.\n    current = new Set();\n    // Set of callbacks collected while invoking current set of callbacks.\n    // Those callbacks are scheduled for the next idle period.\n    deferred = new Set();\n    ngZone = inject(NgZone);\n    requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);\n    cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);\n    add(callback) {\n      const target = this.executingCallbacks ? this.deferred : this.current;\n      target.add(callback);\n      if (this.idleId === null) {\n        this.scheduleIdleCallback();\n      }\n    }\n    remove(callback) {\n      const {\n        current,\n        deferred\n      } = this;\n      current.delete(callback);\n      deferred.delete(callback);\n      // If the last callback was removed and there is a pending\n      // idle callback - cancel it.\n      if (current.size === 0 && deferred.size === 0) {\n        this.cancelIdleCallback();\n      }\n    }\n    scheduleIdleCallback() {\n      const callback = () => {\n        this.cancelIdleCallback();\n        this.executingCallbacks = true;\n        for (const callback of this.current) {\n          callback();\n        }\n        this.current.clear();\n        this.executingCallbacks = false;\n        // If there are any callbacks added during an invocation\n        // of the current ones - make them \"current\" and schedule\n        // a new idle callback.\n        if (this.deferred.size > 0) {\n          for (const callback of this.deferred) {\n            this.current.add(callback);\n          }\n          this.deferred.clear();\n          this.scheduleIdleCallback();\n        }\n      };\n      // Ensure that the callback runs in the NgZone since\n      // the `requestIdleCallback` is not currently patched by Zone.js.\n      this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback));\n    }\n    cancelIdleCallback() {\n      if (this.idleId !== null) {\n        this.cancelIdleCallbackFn(this.idleId);\n        this.idleId = null;\n      }\n    }\n    ngOnDestroy() {\n      this.cancelIdleCallback();\n      this.current.clear();\n      this.deferred.clear();\n    }\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: IdleScheduler,\n      providedIn: 'root',\n      factory: () => new IdleScheduler()\n    });\n  }\n  return IdleScheduler;\n})();\n/**\n * Returns a function that captures a provided delay.\n * Invoking the returned function schedules a trigger.\n */\nfunction onTimer(delay) {\n  return (callback, injector) => scheduleTimerTrigger(delay, callback, injector);\n}\n/**\n * Schedules a callback to be invoked after a given timeout.\n *\n * @param delay A number of ms to wait until firing a callback.\n * @param callback A function to be invoked after a timeout.\n * @param injector injector for the app.\n */\nfunction scheduleTimerTrigger(delay, callback, injector) {\n  const scheduler = injector.get(TimerScheduler);\n  const ngZone = injector.get(NgZone);\n  const cleanupFn = () => scheduler.remove(callback);\n  scheduler.add(delay, callback, ngZone);\n  return cleanupFn;\n}\n/**\n * Helper service to schedule `setTimeout`s for batches of defer blocks,\n * to avoid calling `setTimeout` for each defer block (e.g. if defer blocks\n * are created inside a for loop).\n */\nlet TimerScheduler = /*#__PURE__*/(() => {\n  class TimerScheduler {\n    // Indicates whether current callbacks are being invoked.\n    executingCallbacks = false;\n    // Currently scheduled `setTimeout` id.\n    timeoutId = null;\n    // When currently scheduled timer would fire.\n    invokeTimerAt = null;\n    // List of callbacks to be invoked.\n    // For each callback we also store a timestamp on when the callback\n    // should be invoked. We store timestamps and callback functions\n    // in a flat array to avoid creating new objects for each entry.\n    // [timestamp1, callback1, timestamp2, callback2, ...]\n    current = [];\n    // List of callbacks collected while invoking current set of callbacks.\n    // Those callbacks are added to the \"current\" queue at the end of\n    // the current callback invocation. The shape of this list is the same\n    // as the shape of the `current` list.\n    deferred = [];\n    add(delay, callback, ngZone) {\n      const target = this.executingCallbacks ? this.deferred : this.current;\n      this.addToQueue(target, Date.now() + delay, callback);\n      this.scheduleTimer(ngZone);\n    }\n    remove(callback) {\n      const {\n        current,\n        deferred\n      } = this;\n      const callbackIndex = this.removeFromQueue(current, callback);\n      if (callbackIndex === -1) {\n        // Try cleaning up deferred queue only in case\n        // we didn't find a callback in the \"current\" queue.\n        this.removeFromQueue(deferred, callback);\n      }\n      // If the last callback was removed and there is a pending timeout - cancel it.\n      if (current.length === 0 && deferred.length === 0) {\n        this.clearTimeout();\n      }\n    }\n    addToQueue(target, invokeAt, callback) {\n      let insertAtIndex = target.length;\n      for (let i = 0; i < target.length; i += 2) {\n        const invokeQueuedCallbackAt = target[i];\n        if (invokeQueuedCallbackAt > invokeAt) {\n          // We've reached a first timer that is scheduled\n          // for a later time than what we are trying to insert.\n          // This is the location at which we need to insert,\n          // no need to iterate further.\n          insertAtIndex = i;\n          break;\n        }\n      }\n      arrayInsert2(target, insertAtIndex, invokeAt, callback);\n    }\n    removeFromQueue(target, callback) {\n      let index = -1;\n      for (let i = 0; i < target.length; i += 2) {\n        const queuedCallback = target[i + 1];\n        if (queuedCallback === callback) {\n          index = i;\n          break;\n        }\n      }\n      if (index > -1) {\n        // Remove 2 elements: a timestamp slot and\n        // the following slot with a callback function.\n        arraySplice(target, index, 2);\n      }\n      return index;\n    }\n    scheduleTimer(ngZone) {\n      const callback = () => {\n        this.clearTimeout();\n        this.executingCallbacks = true;\n        // Clone the current state of the queue, since it might be altered\n        // as we invoke callbacks.\n        const current = [...this.current];\n        // Invoke callbacks that were scheduled to run before the current time.\n        const now = Date.now();\n        for (let i = 0; i < current.length; i += 2) {\n          const invokeAt = current[i];\n          const callback = current[i + 1];\n          if (invokeAt <= now) {\n            callback();\n          } else {\n            // We've reached a timer that should not be invoked yet.\n            break;\n          }\n        }\n        // The state of the queue might've changed after callbacks invocation,\n        // run the cleanup logic based on the *current* state of the queue.\n        let lastCallbackIndex = -1;\n        for (let i = 0; i < this.current.length; i += 2) {\n          const invokeAt = this.current[i];\n          if (invokeAt <= now) {\n            // Add +1 to account for a callback function that\n            // goes after the timestamp in events array.\n            lastCallbackIndex = i + 1;\n          } else {\n            // We've reached a timer that should not be invoked yet.\n            break;\n          }\n        }\n        if (lastCallbackIndex >= 0) {\n          arraySplice(this.current, 0, lastCallbackIndex + 1);\n        }\n        this.executingCallbacks = false;\n        // If there are any callbacks added during an invocation\n        // of the current ones - move them over to the \"current\"\n        // queue.\n        if (this.deferred.length > 0) {\n          for (let i = 0; i < this.deferred.length; i += 2) {\n            const invokeAt = this.deferred[i];\n            const callback = this.deferred[i + 1];\n            this.addToQueue(this.current, invokeAt, callback);\n          }\n          this.deferred.length = 0;\n        }\n        this.scheduleTimer(ngZone);\n      };\n      // Avoid running timer callbacks more than once per\n      // average frame duration. This is needed for better\n      // batching and to avoid kicking off excessive change\n      // detection cycles.\n      const FRAME_DURATION_MS = 16; // 1000ms / 60fps\n      if (this.current.length > 0) {\n        const now = Date.now();\n        // First element in the queue points at the timestamp\n        // of the first (earliest) event.\n        const invokeAt = this.current[0];\n        if (this.timeoutId === null ||\n        // Reschedule a timer in case a queue contains an item with\n        // an earlier timestamp and the delta is more than an average\n        // frame duration.\n        this.invokeTimerAt && this.invokeTimerAt - invokeAt > FRAME_DURATION_MS) {\n          // There was a timeout already, but an earlier event was added\n          // into the queue. In this case we drop an old timer and setup\n          // a new one with an updated (smaller) timeout.\n          this.clearTimeout();\n          const timeout = Math.max(invokeAt - now, FRAME_DURATION_MS);\n          this.invokeTimerAt = invokeAt;\n          this.timeoutId = ngZone.runOutsideAngular(() => {\n            return setTimeout(() => ngZone.run(callback), timeout);\n          });\n        }\n      }\n    }\n    clearTimeout() {\n      if (this.timeoutId !== null) {\n        clearTimeout(this.timeoutId);\n        this.timeoutId = null;\n      }\n    }\n    ngOnDestroy() {\n      this.clearTimeout();\n      this.current.length = 0;\n      this.deferred.length = 0;\n    }\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: TimerScheduler,\n      providedIn: 'root',\n      factory: () => new TimerScheduler()\n    });\n  }\n  return TimerScheduler;\n})();\n/**\n * A service used by the framework to create and cache injector instances.\n *\n * This service is used to create a single injector instance for each defer\n * block definition, to avoid creating an injector for each defer block instance\n * of a certain type.\n */\nlet CachedInjectorService = /*#__PURE__*/(() => {\n  class CachedInjectorService {\n    cachedInjectors = new Map();\n    getOrCreateInjector(key, parentInjector, providers, debugName) {\n      if (!this.cachedInjectors.has(key)) {\n        const injector = providers.length > 0 ? createEnvironmentInjector(providers, parentInjector, debugName) : null;\n        this.cachedInjectors.set(key, injector);\n      }\n      return this.cachedInjectors.get(key);\n    }\n    ngOnDestroy() {\n      try {\n        for (const injector of this.cachedInjectors.values()) {\n          if (injector !== null) {\n            injector.destroy();\n          }\n        }\n      } finally {\n        this.cachedInjectors.clear();\n      }\n    }\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: CachedInjectorService,\n      providedIn: 'environment',\n      factory: () => new CachedInjectorService()\n    });\n  }\n  return CachedInjectorService;\n})();\n/**\n * **INTERNAL**, avoid referencing it in application code.\n * *\n * Injector token that allows to provide `DeferBlockDependencyInterceptor` class\n * implementation.\n *\n * This token is only injected in devMode\n */\nconst DEFER_BLOCK_DEPENDENCY_INTERCEPTOR = /* @__PURE__ */new InjectionToken('DEFER_BLOCK_DEPENDENCY_INTERCEPTOR');\n/**\n * **INTERNAL**, token used for configuring defer block behavior.\n */\nconst DEFER_BLOCK_CONFIG = /*#__PURE__*/new InjectionToken(ngDevMode ? 'DEFER_BLOCK_CONFIG' : '');\n/**\n * Checks whether there is a cached injector associated with a given defer block\n * declaration and returns if it exists. If there is no cached injector present -\n * creates a new injector and stores in the cache.\n */\nfunction getOrCreateEnvironmentInjector(parentInjector, tDetails, providers) {\n  return parentInjector.get(CachedInjectorService).getOrCreateInjector(tDetails, parentInjector, providers, ngDevMode ? 'DeferBlock Injector' : '');\n}\n/** Injector Helpers */\n/**\n * Creates a new injector, which contains providers collected from dependencies (NgModules) of\n * defer-loaded components. This function detects different types of parent injectors and creates\n * a new injector based on that.\n */\nfunction createDeferBlockInjector(parentInjector, tDetails, providers) {\n  // Check if the parent injector is an instance of a `ChainedInjector`.\n  //\n  // In this case, we retain the shape of the injector and use a newly created\n  // `EnvironmentInjector` as a parent in the `ChainedInjector`. That is needed to\n  // make sure that the primary injector gets consulted first (since it's typically\n  // a NodeInjector) and `EnvironmentInjector` tree is consulted after that.\n  if (parentInjector instanceof ChainedInjector) {\n    const origInjector = parentInjector.injector;\n    // Guaranteed to be an environment injector\n    const parentEnvInjector = parentInjector.parentInjector;\n    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);\n    return new ChainedInjector(origInjector, envInjector);\n  }\n  const parentEnvInjector = parentInjector.get(EnvironmentInjector);\n  // If the `parentInjector` is *not* an `EnvironmentInjector` - we need to create\n  // a new `ChainedInjector` with the following setup:\n  //\n  //  - the provided `parentInjector` becomes a primary injector\n  //  - an existing (real) `EnvironmentInjector` becomes a parent injector for\n  //    a newly-created one, which contains extra providers\n  //\n  // So the final order in which injectors would be consulted in this case would look like this:\n  //\n  //  1. Provided `parentInjector`\n  //  2. Newly-created `EnvironmentInjector` with extra providers\n  //  3. `EnvironmentInjector` from the `parentInjector`\n  if (parentEnvInjector !== parentInjector) {\n    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);\n    return new ChainedInjector(parentInjector, envInjector);\n  }\n  // The `parentInjector` is an instance of an `EnvironmentInjector`.\n  // No need for special handling, we can use `parentInjector` as a\n  // parent injector directly.\n  return getOrCreateEnvironmentInjector(parentInjector, tDetails, providers);\n}\n/** Rendering Helpers */\n/**\n * Transitions a defer block to the new state. Updates the  necessary\n * data structures and renders corresponding block.\n *\n * @param newState New state that should be applied to the defer block.\n * @param tNode TNode that represents a defer block.\n * @param lContainer Represents an instance of a defer block.\n * @param skipTimerScheduling Indicates that `@loading` and `@placeholder` block\n *   should be rendered immediately, even if they have `after` or `minimum` config\n *   options setup. This flag to needed for testing APIs to transition defer block\n *   between states via `DeferFixture.render` method.\n */\nfunction renderDeferBlockState(newState, tNode, lContainer, skipTimerScheduling = false) {\n  const hostLView = lContainer[PARENT];\n  const hostTView = hostLView[TVIEW];\n  // Check if this view is not destroyed. Since the loading process was async,\n  // the view might end up being destroyed by the time rendering happens.\n  if (isDestroyed(hostLView)) return;\n  // Make sure this TNode belongs to TView that represents host LView.\n  ngDevMode && assertTNodeForLView(tNode, hostLView);\n  const lDetails = getLDeferBlockDetails(hostLView, tNode);\n  ngDevMode && assertDefined(lDetails, 'Expected a defer block state defined');\n  const currentState = lDetails[DEFER_BLOCK_STATE];\n  const ssrState = lDetails[SSR_BLOCK_STATE];\n  if (ssrState !== null && newState < ssrState) {\n    return; // trying to render a previous state, exit\n  }\n  if (isValidStateChange(currentState, newState) && isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)) {\n    const tDetails = getTDeferBlockDetails(hostTView, tNode);\n    // Skips scheduling on the server since it can delay the server response.\n    const needsScheduling = !skipTimerScheduling && (typeof ngServerMode === 'undefined' || !ngServerMode) && (getLoadingBlockAfter(tDetails) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));\n    if (ngDevMode && needsScheduling) {\n      assertDefined(applyDeferBlockStateWithSchedulingImpl, 'Expected scheduling function to be defined');\n    }\n    const applyStateFn = needsScheduling ? applyDeferBlockStateWithSchedulingImpl : applyDeferBlockState;\n    try {\n      applyStateFn(newState, lDetails, lContainer, tNode, hostLView);\n    } catch (error) {\n      handleUncaughtError(hostLView, error);\n    }\n  }\n}\nfunction findMatchingDehydratedViewForDeferBlock(lContainer, lDetails) {\n  const dehydratedViewIx = lContainer[DEHYDRATED_VIEWS]?.findIndex(view => view.data[DEFER_BLOCK_STATE$1] === lDetails[DEFER_BLOCK_STATE]) ?? -1;\n  const dehydratedView = dehydratedViewIx > -1 ? lContainer[DEHYDRATED_VIEWS][dehydratedViewIx] : null;\n  return {\n    dehydratedView,\n    dehydratedViewIx\n  };\n}\n/**\n * Applies changes to the DOM to reflect a given state.\n */\nfunction applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView) {\n  profiler(20 /* ProfilerEvent.DeferBlockStateStart */);\n  const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);\n  if (stateTmplIndex !== null) {\n    lDetails[DEFER_BLOCK_STATE] = newState;\n    const hostTView = hostLView[TVIEW];\n    const adjustedIndex = stateTmplIndex + HEADER_OFFSET;\n    // The TNode that represents a template that will activated in the defer block\n    const activeBlockTNode = getTNode(hostTView, adjustedIndex);\n    // There is only 1 view that can be present in an LContainer that\n    // represents a defer block, so always refer to the first one.\n    const viewIndex = 0;\n    removeLViewFromLContainer(lContainer, viewIndex);\n    let injector;\n    if (newState === DeferBlockState.Complete) {\n      // When we render a defer block in completed state, there might be\n      // newly loaded standalone components used within the block, which may\n      // import NgModules with providers. In order to make those providers\n      // available for components declared in that NgModule, we create an instance\n      // of an environment injector to host those providers and pass this injector\n      // to the logic that creates a view.\n      const tDetails = getTDeferBlockDetails(hostTView, tNode);\n      const providers = tDetails.providers;\n      if (providers && providers.length > 0) {\n        injector = createDeferBlockInjector(hostLView[INJECTOR], tDetails, providers);\n      }\n    }\n    const {\n      dehydratedView,\n      dehydratedViewIx\n    } = findMatchingDehydratedViewForDeferBlock(lContainer, lDetails);\n    const embeddedLView = createAndRenderEmbeddedLView(hostLView, activeBlockTNode, null, {\n      injector,\n      dehydratedView\n    });\n    addLViewToLContainer(lContainer, embeddedLView, viewIndex, shouldAddViewToDom(activeBlockTNode, dehydratedView));\n    markViewDirty(embeddedLView, 2 /* NotificationSource.DeferBlockStateUpdate */);\n    if (dehydratedViewIx > -1) {\n      // Erase dehydrated view info in a given LContainer, so that the view is not\n      // removed later by post-hydration cleanup process (which iterates over all\n      // dehydrated views in component tree). This clears only the dehydrated view\n      // that was found for this render, which in most cases will be the only view.\n      // In the case that there was control flow that changed, there may be either\n      // more than one or the views would not match up due to the server rendered\n      // content being a different branch of the control flow.\n      lContainer[DEHYDRATED_VIEWS]?.splice(dehydratedViewIx, 1);\n    }\n    if ((newState === DeferBlockState.Complete || newState === DeferBlockState.Error) && Array.isArray(lDetails[ON_COMPLETE_FNS])) {\n      for (const callback of lDetails[ON_COMPLETE_FNS]) {\n        callback();\n      }\n      lDetails[ON_COMPLETE_FNS] = null;\n    }\n  }\n  profiler(21 /* ProfilerEvent.DeferBlockStateEnd */);\n}\n/**\n * Extends the `applyDeferBlockState` with timer-based scheduling.\n * This function becomes available on a page if there are defer blocks\n * that use `after` or `minimum` parameters in the `@loading` or\n * `@placeholder` blocks.\n */\nfunction applyDeferBlockStateWithScheduling(newState, lDetails, lContainer, tNode, hostLView) {\n  const now = Date.now();\n  const hostTView = hostLView[TVIEW];\n  const tDetails = getTDeferBlockDetails(hostTView, tNode);\n  if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {\n    lDetails[STATE_IS_FROZEN_UNTIL] = null;\n    const loadingAfter = getLoadingBlockAfter(tDetails);\n    const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;\n    if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {\n      // Trying to render loading, but it has an `after` config,\n      // so schedule an update action after a timeout.\n      lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n      const cleanupFn = scheduleDeferBlockUpdate(loadingAfter, lDetails, tNode, lContainer, hostLView);\n      lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;\n    } else {\n      // If we transition to a complete or an error state and there is a pending\n      // operation to render loading after a timeout - invoke a cleanup operation,\n      // which stops the timer.\n      if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {\n        lDetails[LOADING_AFTER_CLEANUP_FN]();\n        lDetails[LOADING_AFTER_CLEANUP_FN] = null;\n        lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n      }\n      applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);\n      const duration = getMinimumDurationForState(tDetails, newState);\n      if (duration !== null) {\n        lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;\n        scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);\n      }\n    }\n  } else {\n    // We are still rendering the previous state.\n    // Update the `NEXT_DEFER_BLOCK_STATE`, which would be\n    // picked up once it's time to transition to the next state.\n    lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n  }\n}\n/**\n * Schedules an update operation after a specified timeout.\n */\nfunction scheduleDeferBlockUpdate(timeout, lDetails, tNode, lContainer, hostLView) {\n  const callback = () => {\n    const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];\n    lDetails[STATE_IS_FROZEN_UNTIL] = null;\n    lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n    if (nextState !== null) {\n      renderDeferBlockState(nextState, tNode, lContainer);\n    }\n  };\n  return scheduleTimerTrigger(timeout, callback, hostLView[INJECTOR]);\n}\n/**\n * Checks whether we can transition to the next state.\n *\n * We transition to the next state if the previous state was represented\n * with a number that is less than the next state. For example, if the current\n * state is \"loading\" (represented as `1`), we should not show a placeholder\n * (represented as `0`), but we can show a completed state (represented as `2`)\n * or an error state (represented as `3`).\n */\nfunction isValidStateChange(currentState, newState) {\n  return currentState < newState;\n}\n/** Utility function to render placeholder content (if present) */\nfunction renderPlaceholder(lView, tNode) {\n  const lContainer = lView[tNode.index];\n  ngDevMode && assertLContainer(lContainer);\n  renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);\n}\n/**\n * Subscribes to the \"loading\" Promise and renders corresponding defer sub-block,\n * based on the loading results.\n *\n * @param lContainer Represents an instance of a defer block.\n * @param tNode Represents defer block info shared across all instances.\n */\nfunction renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer) {\n  ngDevMode && assertDefined(tDetails.loadingPromise, 'Expected loading Promise to exist on this defer block');\n  tDetails.loadingPromise.then(() => {\n    if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {\n      ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n      // Everything is loaded, show the primary block content\n      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n    } else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {\n      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n    }\n  });\n}\n/**\n * Reference to the timer-based scheduler implementation of defer block state\n * rendering method. It's used to make timer-based scheduling tree-shakable.\n * If `minimum` or `after` parameters are used, compiler generates an extra\n * argument for the `ɵɵdefer` instruction, which references a timer-based\n * implementation.\n */\nlet applyDeferBlockStateWithSchedulingImpl = null;\n/**\n * Enables timer-related scheduling if `after` or `minimum` parameters are setup\n * on the `@loading` or `@placeholder` blocks.\n */\nfunction ɵɵdeferEnableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex) {\n  const tViewConsts = tView.consts;\n  if (placeholderConfigIndex != null) {\n    tDetails.placeholderBlockConfig = getConstant(tViewConsts, placeholderConfigIndex);\n  }\n  if (loadingConfigIndex != null) {\n    tDetails.loadingBlockConfig = getConstant(tViewConsts, loadingConfigIndex);\n  }\n  // Enable implementation that supports timer-based scheduling.\n  if (applyDeferBlockStateWithSchedulingImpl === null) {\n    applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;\n  }\n}\n\n/**\n * The name of a field that Angular monkey-patches onto a component\n * class to store a function that loads defer-loadable dependencies\n * and applies metadata to a class.\n */\nconst ASYNC_COMPONENT_METADATA_FN = '__ngAsyncComponentMetadataFn__';\n/**\n * If a given component has unresolved async metadata - returns a reference\n * to a function that applies component metadata after resolving defer-loadable\n * dependencies. Otherwise - this function returns `null`.\n */\nfunction getAsyncClassMetadataFn(type) {\n  const componentClass = type; // cast to `any`, so that we can read a monkey-patched field\n  return componentClass[ASYNC_COMPONENT_METADATA_FN] ?? null;\n}\n/**\n * Handles the process of applying metadata info to a component class in case\n * component template has defer blocks (thus some dependencies became deferrable).\n *\n * @param type Component class where metadata should be added\n * @param dependencyLoaderFn Function that loads dependencies\n * @param metadataSetterFn Function that forms a scope in which the `setClassMetadata` is invoked\n */\nfunction setClassMetadataAsync(type, dependencyLoaderFn, metadataSetterFn) {\n  const componentClass = type; // cast to `any`, so that we can monkey-patch it\n  componentClass[ASYNC_COMPONENT_METADATA_FN] = () => Promise.all(dependencyLoaderFn()).then(dependencies => {\n    metadataSetterFn(...dependencies);\n    // Metadata is now set, reset field value to indicate that this component\n    // can by used/compiled synchronously.\n    componentClass[ASYNC_COMPONENT_METADATA_FN] = null;\n    return dependencies;\n  });\n  return componentClass[ASYNC_COMPONENT_METADATA_FN];\n}\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n  return noSideEffects(() => {\n    const clazz = type;\n    if (decorators !== null) {\n      if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n        clazz.decorators.push(...decorators);\n      } else {\n        clazz.decorators = decorators;\n      }\n    }\n    if (ctorParameters !== null) {\n      // Rather than merging, clobber the existing parameters. If other projects exist which\n      // use tsickle-style annotations and reflect over them in the same way, this could\n      // cause issues, but that is vanishingly unlikely.\n      clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n      // The property decorator objects are merged as it is possible different fields have\n      // different decorator types. Decorators on individual fields are not merged, as it's\n      // also incredibly unlikely that a field will be decorated both with an Angular\n      // decorator and a non-Angular decorator that's also been downleveled.\n      if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n        clazz.propDecorators = {\n          ...clazz.propDecorators,\n          ...propDecorators\n        };\n      } else {\n        clazz.propDecorators = propDecorators;\n      }\n    }\n  });\n}\nlet Console = /*#__PURE__*/(() => {\n  class Console {\n    log(message) {\n      // tslint:disable-next-line:no-console\n      console.log(message);\n    }\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    warn(message) {\n      console.warn(message);\n    }\n    static ɵfac = function Console_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Console)();\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: Console,\n      factory: Console.ɵfac,\n      providedIn: 'platform'\n    });\n  }\n  return Console;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Console, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], null, null);\n})();\n\n/**\n * These are the data structures that our framework injector profiler will fill with data in order\n * to support DI debugging APIs.\n *\n * resolverToTokenToDependencies: Maps an injector to a Map of tokens to an Array of\n * dependencies. Injector -> Token -> Dependencies This is used to support the\n * getDependenciesFromInjectable API, which takes in an injector and a token and returns it's\n * dependencies.\n *\n * resolverToProviders: Maps a DI resolver (an Injector or a TNode) to the providers configured\n * within it This is used to support the getInjectorProviders API, which takes in an injector and\n * returns the providers that it was configured with. Note that for the element injector case we\n * use the TNode instead of the LView as the DI resolver. This is because the registration of\n * providers happens only once per type of TNode. If an injector is created with an identical TNode,\n * the providers for that injector will not be reconfigured.\n *\n * standaloneInjectorToComponent: Maps the injector of a standalone component to the standalone\n * component that it is associated with. Used in the getInjectorProviders API, specificially in the\n * discovery of import paths for each provider. This is necessary because the imports array of a\n * standalone component is processed and configured in its standalone injector, but exists within\n * the component's definition. Because getInjectorProviders takes in an injector, if that injector\n * is the injector of a standalone component, we need to be able to discover the place where the\n * imports array is located (the component) in order to flatten the imports array within it to\n * discover all of it's providers.\n *\n *\n * All of these data structures are instantiated with WeakMaps. This will ensure that the presence\n * of any object in the keys of these maps does not prevent the garbage collector from collecting\n * those objects. Because of this property of WeakMaps, these data structures will never be the\n * source of a memory leak.\n *\n * An example of this advantage: When components are destroyed, we don't need to do\n * any additional work to remove that component from our mappings.\n *\n */\nclass DIDebugData {\n  resolverToTokenToDependencies = /*#__PURE__*/new WeakMap();\n  resolverToProviders = /*#__PURE__*/new WeakMap();\n  resolverToEffects = /*#__PURE__*/new WeakMap();\n  standaloneInjectorToComponent = /*#__PURE__*/new WeakMap();\n  reset() {\n    this.resolverToTokenToDependencies = new WeakMap();\n    this.resolverToProviders = new WeakMap();\n    this.standaloneInjectorToComponent = new WeakMap();\n  }\n}\nlet frameworkDIDebugData = /*#__PURE__*/new DIDebugData();\nfunction getFrameworkDIDebugData() {\n  return frameworkDIDebugData;\n}\n/**\n * Initalize default handling of injector events. This handling parses events\n * as they are emitted and constructs the data structures necessary to support\n * some of debug APIs.\n *\n * See handleInjectEvent, handleCreateEvent and handleProviderConfiguredEvent\n * for descriptions of each handler\n *\n * Supported APIs:\n *               - getDependenciesFromInjectable\n *               - getInjectorProviders\n */\nfunction setupFrameworkInjectorProfiler() {\n  frameworkDIDebugData.reset();\n  setInjectorProfiler(injectorProfilerEventHandler);\n}\nfunction injectorProfilerEventHandler(injectorProfilerEvent) {\n  const {\n    context,\n    type\n  } = injectorProfilerEvent;\n  if (type === 0 /* InjectorProfilerEventType.Inject */) {\n    handleInjectEvent(context, injectorProfilerEvent.service);\n  } else if (type === 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */) {\n    handleInstanceCreatedByInjectorEvent(context, injectorProfilerEvent.instance);\n  } else if (type === 2 /* InjectorProfilerEventType.ProviderConfigured */) {\n    handleProviderConfiguredEvent(context, injectorProfilerEvent.providerRecord);\n  } else if (type === 3 /* InjectorProfilerEventType.EffectCreated */) {\n    handleEffectCreatedEvent(context, injectorProfilerEvent.effect);\n  }\n}\nfunction handleEffectCreatedEvent(context, effect) {\n  const diResolver = getDIResolver(context.injector);\n  if (diResolver === null) {\n    throwError('An EffectCreated event must be run within an injection context.');\n  }\n  const {\n    resolverToEffects\n  } = frameworkDIDebugData;\n  if (!resolverToEffects.has(diResolver)) {\n    resolverToEffects.set(diResolver, []);\n  }\n  resolverToEffects.get(diResolver).push(effect);\n}\n/**\n *\n * Stores the injected service in frameworkDIDebugData.resolverToTokenToDependencies\n * based on it's injector and token.\n *\n * @param context InjectorProfilerContext the injection context that this event occurred in.\n * @param data InjectedService the service associated with this inject event.\n *\n */\nfunction handleInjectEvent(context, data) {\n  const diResolver = getDIResolver(context.injector);\n  if (diResolver === null) {\n    throwError('An Inject event must be run within an injection context.');\n  }\n  const diResolverToInstantiatedToken = frameworkDIDebugData.resolverToTokenToDependencies;\n  if (!diResolverToInstantiatedToken.has(diResolver)) {\n    diResolverToInstantiatedToken.set(diResolver, new WeakMap());\n  }\n  // if token is a primitive type, ignore this event. We do this because we cannot keep track of\n  // non-primitive tokens in WeakMaps since they are not garbage collectable.\n  if (!canBeHeldWeakly(context.token)) {\n    return;\n  }\n  const instantiatedTokenToDependencies = diResolverToInstantiatedToken.get(diResolver);\n  if (!instantiatedTokenToDependencies.has(context.token)) {\n    instantiatedTokenToDependencies.set(context.token, []);\n  }\n  const {\n    token,\n    value,\n    flags\n  } = data;\n  assertDefined(context.token, 'Injector profiler context token is undefined.');\n  const dependencies = instantiatedTokenToDependencies.get(context.token);\n  assertDefined(dependencies, 'Could not resolve dependencies for token.');\n  if (context.injector instanceof NodeInjector) {\n    dependencies.push({\n      token,\n      value,\n      flags,\n      injectedIn: getNodeInjectorContext(context.injector)\n    });\n  } else {\n    dependencies.push({\n      token,\n      value,\n      flags\n    });\n  }\n}\n/**\n *\n * Returns the LView and TNode associated with a NodeInjector. Returns undefined if the injector\n * is not a NodeInjector.\n *\n * @param injector\n * @returns {lView: LView, tNode: TNode}|undefined\n */\nfunction getNodeInjectorContext(injector) {\n  if (!(injector instanceof NodeInjector)) {\n    throwError('getNodeInjectorContext must be called with a NodeInjector');\n  }\n  const lView = getNodeInjectorLView(injector);\n  const tNode = getNodeInjectorTNode(injector);\n  if (tNode === null) {\n    return;\n  }\n  assertTNodeForLView(tNode, lView);\n  return {\n    lView,\n    tNode\n  };\n}\n/**\n *\n * If the created instance is an instance of a standalone component, maps the injector to that\n * standalone component in frameworkDIDebugData.standaloneInjectorToComponent\n *\n * @param context InjectorProfilerContext the injection context that this event occurred in.\n * @param data InjectorCreatedInstance an object containing the instance that was just created\n *\n */\nfunction handleInstanceCreatedByInjectorEvent(context, data) {\n  const {\n    value\n  } = data;\n  // It might happen that a DI token is requested but there is no corresponding value.\n  // The InstanceCreatedByInjectorEvent will be still emitted in this case (to mirror the InjectorToCreateInstanceEvent) but we don't want to do any particular processing for those situations.\n  if (data.value == null) {\n    return;\n  }\n  if (getDIResolver(context.injector) === null) {\n    throwError('An InjectorCreatedInstance event must be run within an injection context.');\n  }\n  // if our value is an instance of a standalone component, map the injector of that standalone\n  // component to the component class. Otherwise, this event is a noop.\n  let standaloneComponent = undefined;\n  if (typeof value === 'object') {\n    standaloneComponent = value?.constructor;\n  }\n  // We want to also cover if `standaloneComponent === null` in addition to `undefined`\n  if (standaloneComponent == undefined || !isStandaloneComponent(standaloneComponent)) {\n    return;\n  }\n  const environmentInjector = context.injector.get(EnvironmentInjector, null, {\n    optional: true\n  });\n  // Standalone components should have an environment injector. If one cannot be\n  // found we may be in a test case for low level functionality that did not explicitly\n  // setup this injector. In those cases, we simply ignore this event.\n  if (environmentInjector === null) {\n    return;\n  }\n  const {\n    standaloneInjectorToComponent\n  } = frameworkDIDebugData;\n  // If our injector has already been mapped, as is the case\n  // when a standalone component imports another standalone component,\n  // we consider the original component (the component doing the importing)\n  // as the component connected to our injector.\n  if (standaloneInjectorToComponent.has(environmentInjector)) {\n    return;\n  }\n  // If our injector hasn't been mapped, then we map it to the standalone component\n  standaloneInjectorToComponent.set(environmentInjector, standaloneComponent);\n}\nfunction isStandaloneComponent(value) {\n  const def = getComponentDef(value);\n  return !!def?.standalone;\n}\n/**\n *\n * Stores the emitted ProviderRecords from the InjectorProfilerEventType.ProviderConfigured\n * event in frameworkDIDebugData.resolverToProviders\n *\n * @param context InjectorProfilerContext the injection context that this event occurred in.\n * @param data ProviderRecord an object containing the instance that was just created\n *\n */\nfunction handleProviderConfiguredEvent(context, data) {\n  const {\n    resolverToProviders\n  } = frameworkDIDebugData;\n  let diResolver;\n  if (context?.injector instanceof NodeInjector) {\n    diResolver = getNodeInjectorTNode(context.injector);\n  } else {\n    diResolver = context.injector;\n  }\n  if (diResolver === null) {\n    throwError('A ProviderConfigured event must be run within an injection context.');\n  }\n  if (!resolverToProviders.has(diResolver)) {\n    resolverToProviders.set(diResolver, []);\n  }\n  resolverToProviders.get(diResolver).push(data);\n}\nfunction getDIResolver(injector) {\n  let diResolver = null;\n  if (injector === undefined) {\n    return diResolver;\n  }\n  // We use the LView as the diResolver for NodeInjectors because they\n  // do not persist anywhere in the framework. They are simply wrappers around an LView and a TNode\n  // that do persist. Because of this, we rely on the LView of the NodeInjector in order to use\n  // as a concrete key to represent this injector. If we get the same LView back later, we know\n  // we're looking at the same injector.\n  if (injector instanceof NodeInjector) {\n    diResolver = getNodeInjectorLView(injector);\n  }\n  // Other injectors can be used a keys for a map because their instances\n  // persist\n  else {\n    diResolver = injector;\n  }\n  return diResolver;\n}\n// inspired by\n// https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-canbeheldweakly\nfunction canBeHeldWeakly(value) {\n  // we check for value !== null here because typeof null === 'object\n  return value !== null && (typeof value === 'object' || typeof value === 'function' || typeof value === 'symbol');\n}\n\n/**\n * Marks a component for check (in case of OnPush components) and synchronously\n * performs change detection on the application this component belongs to.\n *\n * @param component Component to {@link /api/core/ChangeDetectorRef#markForCheck mark for check}\n *\n * @publicApi\n */\nfunction applyChanges(component) {\n  ngDevMode && assertDefined(component, 'component');\n  markViewDirty(getComponentViewByInstance(component), 3 /* NotificationSource.DebugApplyChanges */);\n  getRootComponents(component).forEach(rootComponent => detectChanges(rootComponent));\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\nfunction detectChanges(component) {\n  const view = getComponentViewByInstance(component);\n  view[FLAGS] |= 1024 /* LViewFlags.RefreshView */;\n  detectChangesInternal(view);\n}\n\n/**\n * Retrieves all defer blocks in a given LView.\n *\n * @param lView lView with defer blocks\n * @param deferBlocks defer block aggregator array\n */\nfunction getDeferBlocks$1(lView, deferBlocks) {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (isLContainer(lView[i])) {\n      const lContainer = lView[i];\n      // An LContainer may represent an instance of a defer block, in which case\n      // we store it as a result. Otherwise, keep iterating over LContainer views and\n      // look for defer blocks.\n      const isLast = i === tView.bindingStartIndex - 1;\n      if (!isLast) {\n        const tNode = tView.data[i];\n        const tDetails = getTDeferBlockDetails(tView, tNode);\n        if (isTDeferBlockDetails(tDetails)) {\n          deferBlocks.push({\n            lContainer,\n            lView,\n            tNode,\n            tDetails\n          });\n          // This LContainer represents a defer block, so we exit\n          // this iteration and don't inspect views in this LContainer.\n          continue;\n        }\n      }\n      // The host can be an `LView` if this is the container\n      // for a component that injects `ViewContainerRef`.\n      if (isLView(lContainer[HOST])) {\n        getDeferBlocks$1(lContainer[HOST], deferBlocks);\n      }\n      for (let j = CONTAINER_HEADER_OFFSET; j < lContainer.length; j++) {\n        getDeferBlocks$1(lContainer[j], deferBlocks);\n      }\n    } else if (isLView(lView[i])) {\n      // This is a component, enter the `getDeferBlocks` recursively.\n      getDeferBlocks$1(lView[i], deferBlocks);\n    }\n  }\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Gets all of the `@defer` blocks that are present inside the specified DOM node.\n * @param node Node in which to look for `@defer` blocks.\n *\n * @publicApi\n */\nfunction getDeferBlocks(node) {\n  const results = [];\n  const lView = getLContext(node)?.lView;\n  if (lView) {\n    findDeferBlocks(node, lView, results);\n  }\n  return results;\n}\n/**\n * Finds all the `@defer` blocks inside a specific node and view.\n * @param node Node in which to search for blocks.\n * @param lView View within the node in which to search for blocks.\n * @param results Array to which to add blocks once they're found.\n */\nfunction findDeferBlocks(node, lView, results) {\n  const viewInjector = lView[INJECTOR];\n  const registry = viewInjector.get(DEHYDRATED_BLOCK_REGISTRY, null, {\n    optional: true\n  });\n  const blocks = [];\n  getDeferBlocks$1(lView, blocks);\n  const transferState = viewInjector.get(TransferState);\n  const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n  for (const details of blocks) {\n    const native = getNativeByTNode(details.tNode, details.lView);\n    const lDetails = getLDeferBlockDetails(details.lView, details.tNode);\n    // The LView from `getLContext` might be the view the element is placed in.\n    // Filter out defer blocks that aren't inside the specified root node.\n    if (!node.contains(native)) {\n      continue;\n    }\n    const tDetails = details.tDetails;\n    const renderedLView = getRendererLView(details);\n    const rootNodes = [];\n    const hydrationState = inferHydrationState(tDetails, lDetails, registry);\n    if (renderedLView !== null) {\n      collectNativeNodes(renderedLView[TVIEW], renderedLView, renderedLView[TVIEW].firstChild, rootNodes);\n    } else if (hydrationState === 'dehydrated') {\n      // We'll find the number of root nodes in the transfer state and\n      // collect that number of elements that precede the defer block comment node.\n      const deferId = lDetails[SSR_UNIQUE_ID];\n      const deferData = deferBlockParents[deferId];\n      const numberOfRootNodes = deferData[NUM_ROOT_NODES];\n      let collectedNodeCount = 0;\n      const deferBlockCommentNode = details.lContainer[NATIVE];\n      let currentNode = deferBlockCommentNode.previousSibling;\n      while (collectedNodeCount < numberOfRootNodes && currentNode) {\n        rootNodes.unshift(currentNode);\n        currentNode = currentNode.previousSibling;\n        collectedNodeCount++;\n      }\n    }\n    const data = {\n      state: stringifyState(lDetails[DEFER_BLOCK_STATE]),\n      incrementalHydrationState: hydrationState,\n      hasErrorBlock: tDetails.errorTmplIndex !== null,\n      loadingBlock: {\n        exists: tDetails.loadingTmplIndex !== null,\n        minimumTime: tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null,\n        afterTime: tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null\n      },\n      placeholderBlock: {\n        exists: tDetails.placeholderTmplIndex !== null,\n        minimumTime: tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null\n      },\n      triggers: tDetails.debug?.triggers ? Array.from(tDetails.debug.triggers).sort() : [],\n      rootNodes\n    };\n    results.push(data);\n    // `getDeferBlocks` does not resolve nested defer blocks so we have to recurse manually.\n    if (renderedLView !== null) {\n      findDeferBlocks(node, renderedLView, results);\n    }\n  }\n}\n/**\n * Turns the `DeferBlockState` into a string which is more readable than the enum form.\n *\n * @param lDetails Information about the\n * @returns\n */\nfunction stringifyState(state) {\n  switch (state) {\n    case DeferBlockState.Complete:\n      return 'complete';\n    case DeferBlockState.Loading:\n      return 'loading';\n    case DeferBlockState.Placeholder:\n      return 'placeholder';\n    case DeferBlockState.Error:\n      return 'error';\n    case DeferBlockInternalState.Initial:\n      return 'initial';\n    default:\n      throw new Error(`Unrecognized state ${state}`);\n  }\n}\n/**\n * Infers the hydration state of a specific defer block.\n * @param tDetails Static defer block information.\n * @param lDetails Instance defer block information.\n * @param registry Registry coordinating the hydration of defer blocks.\n */\nfunction inferHydrationState(tDetails, lDetails, registry) {\n  if (registry === null || lDetails[SSR_UNIQUE_ID] === null || tDetails.hydrateTriggers === null || tDetails.hydrateTriggers.has(7 /* DeferBlockTrigger.Never */)) {\n    return 'not-configured';\n  }\n  return registry.has(lDetails[SSR_UNIQUE_ID]) ? 'dehydrated' : 'hydrated';\n}\n/**\n * Gets the current LView that is rendered out in a defer block.\n * @param details Instance information about the block.\n */\nfunction getRendererLView(details) {\n  // Defer block containers can only ever contain one view.\n  // If they're empty, it means that nothing is rendered.\n  if (details.lContainer.length <= CONTAINER_HEADER_OFFSET) {\n    return null;\n  }\n  const lView = details.lContainer[CONTAINER_HEADER_OFFSET];\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n\n/**\n * Discovers the dependencies of an injectable instance. Provides DI information about each\n * dependency that the injectable was instantiated with, including where they were provided from.\n *\n * @param injector An injector instance\n * @param token a DI token that was constructed by the given injector instance\n * @returns an object that contains the created instance of token as well as all of the dependencies\n * that it was instantiated with OR undefined if the token was not created within the given\n * injector.\n */\nfunction getDependenciesFromInjectable(injector, token) {\n  // First we check to see if the token given maps to an actual instance in the injector given.\n  // We use `self: true` because we only want to look at the injector we were given.\n  // We use `optional: true` because it's possible that the token we were given was never\n  // constructed by the injector we were given.\n  const instance = injector.get(token, null, {\n    self: true,\n    optional: true\n  });\n  if (instance === null) {\n    throw new Error(`Unable to determine instance of ${token} in given injector`);\n  }\n  const unformattedDependencies = getDependenciesForTokenInInjector(token, injector);\n  const resolutionPath = getInjectorResolutionPath(injector);\n  const dependencies = unformattedDependencies.map(dep => {\n    // injectedIn contains private fields, so we omit it from the response\n    const formattedDependency = {\n      value: dep.value\n    };\n    // convert injection flags to booleans\n    const flags = dep.flags;\n    formattedDependency.flags = {\n      optional: (8 /* InternalInjectFlags.Optional */ & flags) === 8 /* InternalInjectFlags.Optional */,\n      host: (1 /* InternalInjectFlags.Host */ & flags) === 1 /* InternalInjectFlags.Host */,\n      self: (2 /* InternalInjectFlags.Self */ & flags) === 2 /* InternalInjectFlags.Self */,\n      skipSelf: (4 /* InternalInjectFlags.SkipSelf */ & flags) === 4 /* InternalInjectFlags.SkipSelf */\n    };\n    // find the injector that provided the dependency\n    for (let i = 0; i < resolutionPath.length; i++) {\n      const injectorToCheck = resolutionPath[i];\n      // if skipSelf is true we skip the first injector\n      if (i === 0 && formattedDependency.flags.skipSelf) {\n        continue;\n      }\n      // host only applies to NodeInjectors\n      if (formattedDependency.flags.host && injectorToCheck instanceof EnvironmentInjector) {\n        break;\n      }\n      const instance = injectorToCheck.get(dep.token, null, {\n        self: true,\n        optional: true\n      });\n      if (instance !== null) {\n        // if host flag is true we double check that we can get the service from the first element\n        // in the resolution path by using the host flag. This is done to make sure that we've found\n        // the correct providing injector, and not a node injector that is connected to our path via\n        // a router outlet.\n        if (formattedDependency.flags.host) {\n          const firstInjector = resolutionPath[0];\n          const lookupFromFirstInjector = firstInjector.get(dep.token, null, {\n            ...formattedDependency.flags,\n            optional: true\n          });\n          if (lookupFromFirstInjector !== null) {\n            formattedDependency.providedIn = injectorToCheck;\n          }\n          break;\n        }\n        formattedDependency.providedIn = injectorToCheck;\n        break;\n      }\n      // if self is true we stop after the first injector\n      if (i === 0 && formattedDependency.flags.self) {\n        break;\n      }\n    }\n    if (dep.token) formattedDependency.token = dep.token;\n    return formattedDependency;\n  });\n  return {\n    instance,\n    dependencies\n  };\n}\nfunction getDependenciesForTokenInInjector(token, injector) {\n  const {\n    resolverToTokenToDependencies\n  } = getFrameworkDIDebugData();\n  if (!(injector instanceof NodeInjector)) {\n    return resolverToTokenToDependencies.get(injector)?.get?.(token) ?? [];\n  }\n  const lView = getNodeInjectorLView(injector);\n  const tokenDependencyMap = resolverToTokenToDependencies.get(lView);\n  const dependencies = tokenDependencyMap?.get(token) ?? [];\n  // In the NodeInjector case, all injections for every node are stored in the same lView.\n  // We use the injectedIn field of the dependency to filter out the dependencies that\n  // do not come from the same node as the instance we're looking at.\n  return dependencies.filter(dependency => {\n    const dependencyNode = dependency.injectedIn?.tNode;\n    if (dependencyNode === undefined) {\n      return false;\n    }\n    const instanceNode = getNodeInjectorTNode(injector);\n    assertTNode(dependencyNode);\n    assertTNode(instanceNode);\n    return dependencyNode === instanceNode;\n  });\n}\n/**\n * Gets the class associated with an injector that contains a provider `imports` array in it's\n * definition\n *\n * For Module Injectors this returns the NgModule constructor.\n *\n * For Standalone injectors this returns the standalone component constructor.\n *\n * @param injector Injector an injector instance\n * @returns the constructor where the `imports` array that configures this injector is located\n */\nfunction getProviderImportsContainer(injector) {\n  const {\n    standaloneInjectorToComponent\n  } = getFrameworkDIDebugData();\n  // standalone components configure providers through a component def, so we have to\n  // use the standalone component associated with this injector if Injector represents\n  // a standalone components EnvironmentInjector\n  if (standaloneInjectorToComponent.has(injector)) {\n    return standaloneInjectorToComponent.get(injector);\n  }\n  // Module injectors configure providers through their NgModule def, so we use the\n  // injector to lookup its NgModuleRef and through that grab its instance\n  const defTypeRef = injector.get(NgModuleRef$1, null, {\n    self: true,\n    optional: true\n  });\n  // If we can't find an associated imports container, return null.\n  // This could be the case if this function is called with an R3Injector that does not represent\n  // a standalone component or NgModule.\n  if (defTypeRef === null) {\n    return null;\n  }\n  // In standalone applications, the root environment injector created by bootstrapApplication\n  // may have no associated \"instance\".\n  if (defTypeRef.instance === null) {\n    return null;\n  }\n  return defTypeRef.instance.constructor;\n}\n/**\n * Gets the providers configured on a NodeInjector\n *\n * @param injector A NodeInjector instance\n * @returns ProviderRecord[] an array of objects representing the providers configured on this\n *     injector\n */\nfunction getNodeInjectorProviders(injector) {\n  const diResolver = getNodeInjectorTNode(injector);\n  const {\n    resolverToProviders\n  } = getFrameworkDIDebugData();\n  return resolverToProviders.get(diResolver) ?? [];\n}\n/**\n * Gets a mapping of providers configured on an injector to their import paths\n *\n * ModuleA -> imports ModuleB\n * ModuleB -> imports ModuleC\n * ModuleB -> provides MyServiceA\n * ModuleC -> provides MyServiceB\n *\n * getProviderImportPaths(ModuleA)\n * > Map(2) {\n *   MyServiceA => [ModuleA, ModuleB]\n *   MyServiceB => [ModuleA, ModuleB, ModuleC]\n *  }\n *\n * @param providerImportsContainer constructor of class that contains an `imports` array in it's\n *     definition\n * @returns A Map object that maps providers to an array of constructors representing it's import\n *     path\n *\n */\nfunction getProviderImportPaths(providerImportsContainer) {\n  const providerToPath = new Map();\n  const visitedContainers = new Set();\n  const visitor = walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers);\n  walkProviderTree(providerImportsContainer, visitor, [], new Set());\n  return providerToPath;\n}\n/**\n *\n * Higher order function that returns a visitor for WalkProviderTree\n *\n * Takes in a Map and Set to keep track of the providers and containers\n * visited, so that we can discover the import paths of these providers\n * during the traversal.\n *\n * This visitor takes advantage of the fact that walkProviderTree performs a\n * postorder traversal of the provider tree for the passed in container. Because postorder\n * traversal recursively processes subtrees from leaf nodes until the traversal reaches the root,\n * we write a visitor that constructs provider import paths in reverse.\n *\n *\n * We use the visitedContainers set defined outside this visitor\n * because we want to run some logic only once for\n * each container in the tree. That logic can be described as:\n *\n *\n * 1. for each discovered_provider and discovered_path in the incomplete provider paths we've\n * already discovered\n * 2. get the first container in discovered_path\n * 3. if that first container is in the imports array of the container we're visiting\n *    Then the container we're visiting is also in the import path of discovered_provider, so we\n *    unshift discovered_path with the container we're currently visiting\n *\n *\n * Example Run:\n * ```\n *                 ┌──────────┐\n *                 │containerA│\n *      ┌─imports-─┤          ├──imports─┐\n *      │          │  provA   │          │\n *      │          │  provB   │          │\n *      │          └──────────┘          │\n *      │                                │\n *     ┌▼─────────┐             ┌────────▼─┐\n *     │containerB│             │containerC│\n *     │          │             │          │\n *     │  provD   │             │  provF   │\n *     │  provE   │             │  provG   │\n *     └──────────┘             └──────────┘\n * ```\n *\n * Each step of the traversal,\n *\n * ```\n * visitor(provD, containerB)\n * providerToPath === Map { provD => [containerB] }\n * visitedContainers === Set { containerB }\n *\n * visitor(provE, containerB)\n * providerToPath === Map { provD => [containerB], provE => [containerB] }\n * visitedContainers === Set { containerB }\n *\n * visitor(provF, containerC)\n * providerToPath === Map { provD => [containerB], provE => [containerB], provF => [containerC] }\n * visitedContainers === Set { containerB, containerC }\n *\n * visitor(provG, containerC)\n * providerToPath === Map {\n *   provD => [containerB], provE => [containerB], provF => [containerC], provG => [containerC]\n * }\n * visitedContainers === Set { containerB, containerC }\n *\n * visitor(provA, containerA)\n * providerToPath === Map {\n *   provD => [containerA, containerB],\n *   provE => [containerA, containerB],\n *   provF => [containerA, containerC],\n *   provG => [containerA, containerC],\n *   provA => [containerA]\n * }\n * visitedContainers === Set { containerB, containerC, containerA }\n *\n * visitor(provB, containerA)\n * providerToPath === Map {\n *   provD => [containerA, containerB],\n *   provE => [containerA, containerB],\n *   provF => [containerA, containerC],\n *   provG => [containerA, containerC],\n *   provA => [containerA]\n *   provB => [containerA]\n * }\n * visitedContainers === Set { containerB, containerC, containerA }\n * ```\n *\n * @param providerToPath Map map of providers to paths that this function fills\n * @param visitedContainers Set a set to keep track of the containers we've already visited\n * @return function(provider SingleProvider, container: Type<unknown> | InjectorType<unknown>) =>\n *     void\n */\nfunction walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers) {\n  return (provider, container) => {\n    // If the provider is not already in the providerToPath map,\n    // add an entry with the provider as the key and an array containing the current container as\n    // the value\n    if (!providerToPath.has(provider)) {\n      providerToPath.set(provider, [container]);\n    }\n    // This block will run exactly once for each container in the import tree.\n    // This is where we run the logic to check the imports array of the current\n    // container to see if it's the next container in the path for our currently\n    // discovered providers.\n    if (!visitedContainers.has(container)) {\n      // Iterate through the providers we've already seen\n      for (const prov of providerToPath.keys()) {\n        const existingImportPath = providerToPath.get(prov);\n        let containerDef = getInjectorDef(container);\n        if (!containerDef) {\n          const ngModule = container.ngModule;\n          containerDef = getInjectorDef(ngModule);\n        }\n        if (!containerDef) {\n          return;\n        }\n        const lastContainerAddedToPath = existingImportPath[0];\n        let isNextStepInPath = false;\n        deepForEach(containerDef.imports, moduleImport => {\n          if (isNextStepInPath) {\n            return;\n          }\n          isNextStepInPath = moduleImport.ngModule === lastContainerAddedToPath || moduleImport === lastContainerAddedToPath;\n          if (isNextStepInPath) {\n            providerToPath.get(prov)?.unshift(container);\n          }\n        });\n      }\n    }\n    visitedContainers.add(container);\n  };\n}\n/**\n * Gets the providers configured on an EnvironmentInjector\n *\n * @param injector EnvironmentInjector\n * @returns an array of objects representing the providers of the given injector\n */\nfunction getEnvironmentInjectorProviders(injector) {\n  const providerRecordsWithoutImportPaths = getFrameworkDIDebugData().resolverToProviders.get(injector) ?? [];\n  // platform injector has no provider imports container so can we skip trying to\n  // find import paths\n  if (isPlatformInjector(injector)) {\n    return providerRecordsWithoutImportPaths;\n  }\n  const providerImportsContainer = getProviderImportsContainer(injector);\n  if (providerImportsContainer === null) {\n    // We assume that if an environment injector exists without an associated provider imports\n    // container, it was created without such a container. Some examples cases where this could\n    // happen:\n    // - The root injector of a standalone application\n    // - A router injector created by using the providers array in a lazy loaded route\n    // - A manually created injector that is attached to the injector tree\n    // Since each of these cases has no provider container, there is no concept of import paths,\n    // so we can simply return the provider records.\n    return providerRecordsWithoutImportPaths;\n  }\n  const providerToPath = getProviderImportPaths(providerImportsContainer);\n  const providerRecords = [];\n  for (const providerRecord of providerRecordsWithoutImportPaths) {\n    const provider = providerRecord.provider;\n    // Ignore these special providers for now until we have a cleaner way of\n    // determing when they are provided by the framework vs provided by the user.\n    const token = provider.provide;\n    if (token === ENVIRONMENT_INITIALIZER || token === INJECTOR_DEF_TYPES) {\n      continue;\n    }\n    let importPath = providerToPath.get(provider) ?? [];\n    const def = getComponentDef(providerImportsContainer);\n    const isStandaloneComponent = !!def?.standalone;\n    // We prepend the component constructor in the standalone case\n    // because walkProviderTree does not visit this constructor during it's traversal\n    if (isStandaloneComponent) {\n      importPath = [providerImportsContainer, ...importPath];\n    }\n    providerRecords.push({\n      ...providerRecord,\n      importPath\n    });\n  }\n  return providerRecords;\n}\nfunction isPlatformInjector(injector) {\n  return injector instanceof R3Injector && injector.scopes.has('platform');\n}\n/**\n * Gets the providers configured on an injector.\n *\n * @param injector the injector to lookup the providers of\n * @returns ProviderRecord[] an array of objects representing the providers of the given injector\n */\nfunction getInjectorProviders(injector) {\n  if (injector instanceof NodeInjector) {\n    return getNodeInjectorProviders(injector);\n  } else if (injector instanceof EnvironmentInjector) {\n    return getEnvironmentInjectorProviders(injector);\n  }\n  throwError('getInjectorProviders only supports NodeInjector and EnvironmentInjector');\n}\n/**\n *\n * Given an injector, this function will return\n * an object containing the type and source of the injector.\n *\n * |              | type        | source                                                      |\n * |--------------|-------------|-------------------------------------------------------------|\n * | NodeInjector | element     | DOM element that created this injector                      |\n * | R3Injector   | environment | `injector.source`                                           |\n * | NullInjector | null        | null                                                        |\n *\n * @param injector the Injector to get metadata for\n * @returns an object containing the type and source of the given injector. If the injector metadata\n *     cannot be determined, returns null.\n */\nfunction getInjectorMetadata(injector) {\n  if (injector instanceof NodeInjector) {\n    const lView = getNodeInjectorLView(injector);\n    const tNode = getNodeInjectorTNode(injector);\n    assertTNodeForLView(tNode, lView);\n    return {\n      type: 'element',\n      source: getNativeByTNode(tNode, lView)\n    };\n  }\n  if (injector instanceof R3Injector) {\n    return {\n      type: 'environment',\n      source: injector.source ?? null\n    };\n  }\n  if (injector instanceof NullInjector) {\n    return {\n      type: 'null',\n      source: null\n    };\n  }\n  return null;\n}\nfunction getInjectorResolutionPath(injector) {\n  const resolutionPath = [injector];\n  getInjectorResolutionPathHelper(injector, resolutionPath);\n  return resolutionPath;\n}\nfunction getInjectorResolutionPathHelper(injector, resolutionPath) {\n  const parent = getInjectorParent(injector);\n  // if getInjectorParent can't find a parent, then we've either reached the end\n  // of the path, or we need to move from the Element Injector tree to the\n  // module injector tree using the first injector in our path as the connection point.\n  if (parent === null) {\n    if (injector instanceof NodeInjector) {\n      const firstInjector = resolutionPath[0];\n      if (firstInjector instanceof NodeInjector) {\n        const moduleInjector = getModuleInjectorOfNodeInjector(firstInjector);\n        if (moduleInjector === null) {\n          throwError('NodeInjector must have some connection to the module injector tree');\n        }\n        resolutionPath.push(moduleInjector);\n        getInjectorResolutionPathHelper(moduleInjector, resolutionPath);\n      }\n      return resolutionPath;\n    }\n  } else {\n    resolutionPath.push(parent);\n    getInjectorResolutionPathHelper(parent, resolutionPath);\n  }\n  return resolutionPath;\n}\n/**\n * Gets the parent of an injector.\n *\n * This function is not able to make the jump from the Element Injector Tree to the Module\n * injector tree. This is because the \"parent\" (the next step in the reoslution path)\n * of a root NodeInjector is dependent on which NodeInjector ancestor initiated\n * the DI lookup. See getInjectorResolutionPath for a function that can make this jump.\n *\n * In the below diagram:\n * ```ts\n * getInjectorParent(NodeInjectorB)\n *  > NodeInjectorA\n * getInjectorParent(NodeInjectorA) // or getInjectorParent(getInjectorParent(NodeInjectorB))\n *  > null // cannot jump to ModuleInjector tree\n * ```\n *\n * ```\n *                ┌───────┐                ┌───────────────────┐\n *    ┌───────────┤ModuleA├───Injector────►│EnvironmentInjector│\n *    │           └───┬───┘                └───────────────────┘\n *    │               │\n *    │           bootstraps\n *    │               │\n *    │               │\n *    │          ┌────▼─────┐                 ┌─────────────┐\n * declares      │ComponentA├────Injector────►│NodeInjectorA│\n *    │          └────┬─────┘                 └─────▲───────┘\n *    │               │                             │\n *    │            renders                        parent\n *    │               │                             │\n *    │          ┌────▼─────┐                 ┌─────┴───────┐\n *    └─────────►│ComponentB├────Injector────►│NodeInjectorB│\n *               └──────────┘                 └─────────────┘\n *```\n *\n * @param injector an Injector to get the parent of\n * @returns Injector the parent of the given injector\n */\nfunction getInjectorParent(injector) {\n  if (injector instanceof R3Injector) {\n    return injector.parent;\n  }\n  let tNode;\n  let lView;\n  if (injector instanceof NodeInjector) {\n    tNode = getNodeInjectorTNode(injector);\n    lView = getNodeInjectorLView(injector);\n  } else if (injector instanceof NullInjector) {\n    return null;\n  } else if (injector instanceof ChainedInjector) {\n    return injector.parentInjector;\n  } else {\n    throwError('getInjectorParent only support injectors of type R3Injector, NodeInjector, NullInjector');\n  }\n  const parentLocation = getParentInjectorLocation(tNode, lView);\n  if (hasParentInjector(parentLocation)) {\n    const parentInjectorIndex = getParentInjectorIndex(parentLocation);\n    const parentLView = getParentInjectorView(parentLocation, lView);\n    const parentTView = parentLView[TVIEW];\n    const parentTNode = parentTView.data[parentInjectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n    return new NodeInjector(parentTNode, parentLView);\n  } else {\n    const chainedInjector = lView[INJECTOR];\n    // Case where chainedInjector.injector is an OutletInjector and chainedInjector.injector.parent\n    // is a NodeInjector.\n    // todo(aleksanderbodurri): ideally nothing in packages/core should deal\n    // directly with router concerns. Refactor this so that we can make the jump from\n    // NodeInjector -> OutletInjector -> NodeInjector\n    // without explicitly relying on types contracts from packages/router\n    const injectorParent = chainedInjector.injector?.parent;\n    if (injectorParent instanceof NodeInjector) {\n      return injectorParent;\n    }\n  }\n  return null;\n}\n/**\n * Gets the module injector of a NodeInjector.\n *\n * @param injector NodeInjector to get module injector of\n * @returns Injector representing module injector of the given NodeInjector\n */\nfunction getModuleInjectorOfNodeInjector(injector) {\n  let lView;\n  if (injector instanceof NodeInjector) {\n    lView = getNodeInjectorLView(injector);\n  } else {\n    throwError('getModuleInjectorOfNodeInjector must be called with a NodeInjector');\n  }\n  const inj = lView[INJECTOR];\n  const moduleInjector = inj instanceof ChainedInjector ? inj.parentInjector : inj.parent;\n  if (!moduleInjector) {\n    throwError('NodeInjector must have some connection to the module injector tree');\n  }\n  return moduleInjector;\n}\nfunction isComputedNode(node) {\n  return node.kind === 'computed';\n}\nfunction isTemplateEffectNode(node) {\n  return node.kind === 'template';\n}\nfunction isSignalNode(node) {\n  return node.kind === 'signal';\n}\n/**\n *\n * @param injector\n * @returns Template consumer of given NodeInjector\n */\nfunction getTemplateConsumer(injector) {\n  const tNode = getNodeInjectorTNode(injector);\n  assertTNode(tNode);\n  const lView = getNodeInjectorLView(injector);\n  assertLView(lView);\n  const templateLView = lView[tNode.index];\n  if (isLView(templateLView)) {\n    return templateLView[REACTIVE_TEMPLATE_CONSUMER] ?? null;\n  }\n  return null;\n}\nconst signalDebugMap = /*#__PURE__*/new WeakMap();\nlet counter$1 = 0;\nfunction getNodesAndEdgesFromSignalMap(signalMap) {\n  const nodes = Array.from(signalMap.keys());\n  const debugSignalGraphNodes = [];\n  const edges = [];\n  for (const [consumer, producers] of signalMap.entries()) {\n    const consumerIndex = nodes.indexOf(consumer);\n    let id = signalDebugMap.get(consumer);\n    if (!id) {\n      counter$1++;\n      id = counter$1.toString();\n      signalDebugMap.set(consumer, id);\n    }\n    // collect node\n    if (isComputedNode(consumer)) {\n      debugSignalGraphNodes.push({\n        label: consumer.debugName,\n        value: consumer.value,\n        kind: consumer.kind,\n        epoch: consumer.version,\n        debuggableFn: consumer.computation,\n        id\n      });\n    } else if (isSignalNode(consumer)) {\n      debugSignalGraphNodes.push({\n        label: consumer.debugName,\n        value: consumer.value,\n        kind: consumer.kind,\n        epoch: consumer.version,\n        id\n      });\n    } else if (isTemplateEffectNode(consumer)) {\n      debugSignalGraphNodes.push({\n        label: consumer.debugName ?? consumer.lView?.[HOST]?.tagName?.toLowerCase?.(),\n        kind: consumer.kind,\n        epoch: consumer.version,\n        // The `lView[CONTEXT]` is a reference to an instance of the component's class.\n        // We get the constructor so that `inspect(.constructor)` shows the component class.\n        debuggableFn: consumer.lView?.[CONTEXT]?.constructor,\n        id\n      });\n    } else {\n      debugSignalGraphNodes.push({\n        label: consumer.debugName,\n        kind: consumer.kind,\n        epoch: consumer.version,\n        id\n      });\n    }\n    // collect edges for node\n    for (const producer of producers) {\n      edges.push({\n        consumer: consumerIndex,\n        producer: nodes.indexOf(producer)\n      });\n    }\n  }\n  return {\n    nodes: debugSignalGraphNodes,\n    edges\n  };\n}\nfunction extractEffectsFromInjector(injector) {\n  let diResolver = injector;\n  if (injector instanceof NodeInjector) {\n    const lView = getNodeInjectorLView(injector);\n    diResolver = lView;\n  }\n  const resolverToEffects = getFrameworkDIDebugData().resolverToEffects;\n  const effects = resolverToEffects.get(diResolver) ?? [];\n  return effects.map(effect => effect[SIGNAL]);\n}\nfunction extractSignalNodesAndEdgesFromRoots(nodes, signalDependenciesMap = new Map()) {\n  for (const node of nodes) {\n    if (signalDependenciesMap.has(node)) {\n      continue;\n    }\n    const producerNodes = [];\n    for (let link = node.producers; link !== undefined; link = link.nextProducer) {\n      const producer = link.producer;\n      producerNodes.push(producer);\n    }\n    signalDependenciesMap.set(node, producerNodes);\n    extractSignalNodesAndEdgesFromRoots(producerNodes, signalDependenciesMap);\n  }\n  return signalDependenciesMap;\n}\n/**\n * Returns a debug representation of the signal graph for the given injector.\n *\n * Currently only supports element injectors. Starts by discovering the consumer nodes\n * and then traverses their producer nodes to build the signal graph.\n *\n * @param injector The injector to get the signal graph for.\n * @returns A debug representation of the signal graph.\n * @throws If the injector is an environment injector.\n */\nfunction getSignalGraph(injector) {\n  let templateConsumer = null;\n  if (!(injector instanceof NodeInjector) && !(injector instanceof R3Injector)) {\n    return throwError('getSignalGraph must be called with a NodeInjector or R3Injector');\n  }\n  if (injector instanceof NodeInjector) {\n    templateConsumer = getTemplateConsumer(injector);\n  }\n  const nonTemplateEffectNodes = extractEffectsFromInjector(injector);\n  const signalNodes = templateConsumer ? [templateConsumer, ...nonTemplateEffectNodes] : nonTemplateEffectNodes;\n  const signalDependenciesMap = extractSignalNodesAndEdgesFromRoots(signalNodes);\n  return getNodesAndEdgesFromSignalMap(signalDependenciesMap);\n}\nlet changeDetectionRuns = 0;\nlet changeDetectionSyncRuns = 0;\nlet counter = 0;\nconst eventsStack = [];\nfunction measureStart(startEvent) {\n  eventsStack.push([startEvent, counter]);\n  console.timeStamp('Event_' + startEvent + '_' + counter++);\n}\nfunction measureEnd(startEvent, entryName, color) {\n  const top = eventsStack.pop();\n  assertDefined(top, 'Profiling error: could not find start event entry ' + startEvent);\n  assertEqual(top[0], startEvent, `Profiling error: expected to see ${startEvent} event but got ${top[0]}`);\n  console.timeStamp(entryName, 'Event_' + top[0] + '_' + top[1], undefined, '\\u{1F170}\\uFE0F Angular', undefined, color);\n}\nconst chromeDevToolsInjectorProfiler = event => {\n  const eventType = event.type;\n  if (eventType === 4 /* InjectorProfilerEventType.InjectorToCreateInstanceEvent */) {\n    measureStart(100 /* ProfilerDIEvent.InjectorToCreateInstanceEvent */);\n  } else if (eventType === 1 /* InjectorProfilerEventType.InstanceCreatedByInjector */) {\n    const token = event.context.token;\n    measureEnd(100 /* ProfilerDIEvent.InjectorToCreateInstanceEvent */, getProviderTokenMeasureName(token), 'tertiary-dark');\n  }\n};\nconst devToolsProfiler = (event, instance, eventFn) => {\n  switch (event) {\n    case 8 /* ProfilerEvent.BootstrapApplicationStart */:\n    case 10 /* ProfilerEvent.BootstrapComponentStart */:\n    case 12 /* ProfilerEvent.ChangeDetectionStart */:\n    case 14 /* ProfilerEvent.ChangeDetectionSyncStart */:\n    case 16 /* ProfilerEvent.AfterRenderHooksStart */:\n    case 18 /* ProfilerEvent.ComponentStart */:\n    case 20 /* ProfilerEvent.DeferBlockStateStart */:\n    case 22 /* ProfilerEvent.DynamicComponentStart */:\n    case 0 /* ProfilerEvent.TemplateCreateStart */:\n    case 4 /* ProfilerEvent.LifecycleHookStart */:\n    case 2 /* ProfilerEvent.TemplateUpdateStart */:\n    case 24 /* ProfilerEvent.HostBindingsUpdateStart */:\n    case 6 /* ProfilerEvent.OutputStart */:\n      {\n        measureStart(event);\n        break;\n      }\n    case 9 /* ProfilerEvent.BootstrapApplicationEnd */:\n      {\n        measureEnd(8 /* ProfilerEvent.BootstrapApplicationStart */, 'Bootstrap application', 'primary-dark');\n        break;\n      }\n    case 11 /* ProfilerEvent.BootstrapComponentEnd */:\n      {\n        measureEnd(10 /* ProfilerEvent.BootstrapComponentStart */, 'Bootstrap component', 'primary-dark');\n        break;\n      }\n    case 13 /* ProfilerEvent.ChangeDetectionEnd */:\n      {\n        changeDetectionSyncRuns = 0;\n        measureEnd(12 /* ProfilerEvent.ChangeDetectionStart */, 'Change detection ' + changeDetectionRuns++, 'primary-dark');\n        break;\n      }\n    case 15 /* ProfilerEvent.ChangeDetectionSyncEnd */:\n      {\n        measureEnd(14 /* ProfilerEvent.ChangeDetectionSyncStart */, 'Synchronization ' + changeDetectionSyncRuns++, 'primary');\n        break;\n      }\n    case 17 /* ProfilerEvent.AfterRenderHooksEnd */:\n      {\n        measureEnd(16 /* ProfilerEvent.AfterRenderHooksStart */, 'After render hooks', 'primary');\n        break;\n      }\n    case 19 /* ProfilerEvent.ComponentEnd */:\n      {\n        const typeName = getComponentMeasureName(instance);\n        measureEnd(18 /* ProfilerEvent.ComponentStart */, typeName, 'primary-light');\n        break;\n      }\n    case 21 /* ProfilerEvent.DeferBlockStateEnd */:\n      {\n        measureEnd(20 /* ProfilerEvent.DeferBlockStateStart */, 'Defer block', 'primary-dark');\n        break;\n      }\n    case 23 /* ProfilerEvent.DynamicComponentEnd */:\n      {\n        measureEnd(22 /* ProfilerEvent.DynamicComponentStart */, 'Dynamic component creation', 'primary-dark');\n        break;\n      }\n    case 3 /* ProfilerEvent.TemplateUpdateEnd */:\n      {\n        measureEnd(2 /* ProfilerEvent.TemplateUpdateStart */, stringifyForError(eventFn) + ' (update)', 'secondary-dark');\n        break;\n      }\n    case 1 /* ProfilerEvent.TemplateCreateEnd */:\n      {\n        measureEnd(0 /* ProfilerEvent.TemplateCreateStart */, stringifyForError(eventFn) + ' (create)', 'secondary');\n        break;\n      }\n    case 25 /* ProfilerEvent.HostBindingsUpdateEnd */:\n      {\n        measureEnd(24 /* ProfilerEvent.HostBindingsUpdateStart */, 'HostBindings', 'secondary-dark');\n        break;\n      }\n    case 5 /* ProfilerEvent.LifecycleHookEnd */:\n      {\n        const typeName = getComponentMeasureName(instance);\n        measureEnd(4 /* ProfilerEvent.LifecycleHookStart */, `${typeName}:${stringifyForError(eventFn)}`, 'tertiary');\n        break;\n      }\n    case 7 /* ProfilerEvent.OutputEnd */:\n      {\n        measureEnd(6 /* ProfilerEvent.OutputStart */, stringifyForError(eventFn), 'tertiary-light');\n        break;\n      }\n    default:\n      {\n        throw new Error('Unexpected profiling event type: ' + event);\n      }\n  }\n};\nfunction getComponentMeasureName(instance) {\n  return instance.constructor.name;\n}\nfunction getProviderTokenMeasureName(token) {\n  if (isTypeProvider(token)) {\n    return token.name;\n  } else if (token.provide != null) {\n    return getProviderTokenMeasureName(token.provide);\n  }\n  return token.toString();\n}\n/**\n * Start listening to the Angular's internal performance-related events and route those to the Chrome DevTools performance panel.\n * This enables Angular-specific data visualization when recording a performance profile directly in the Chrome DevTools.\n *\n * Note: integration is enabled in the development mode only, this operation is noop in the production mode.\n *\n * @experimental\n *\n * @returns a function that can be invoked to stop sending profiling data.\n */\nfunction enableProfiling() {\n  performanceMarkFeature('Chrome DevTools profiling');\n  if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    const removeInjectorProfiler = setInjectorProfiler(chromeDevToolsInjectorProfiler);\n    const removeProfiler = setProfiler(devToolsProfiler);\n    return () => {\n      removeInjectorProfiler();\n      removeProfiler();\n    };\n  }\n  return () => {};\n}\n\n/// <reference path=\"../../../../goog.d.ts\" />\n/**\n * This file introduces series of globally accessible debug tools\n * to allow for the Angular debugging story to function.\n *\n * To see this in action run the following command:\n *\n *   bazel run //packages/core/test/bundling/todo:devserver\n *\n *  Then load `localhost:5432` and start using the console tools.\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n * */\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\nconst globalUtilsFunctions = {\n  /**\n   * Warning: functions that start with `ɵ` are considered *INTERNAL* and should not be relied upon\n   * in application's code. The contract of those functions might be changed in any release and/or a\n   * function can be removed completely.\n   */\n  'ɵgetDependenciesFromInjectable': getDependenciesFromInjectable,\n  'ɵgetInjectorProviders': getInjectorProviders,\n  'ɵgetInjectorResolutionPath': getInjectorResolutionPath,\n  'ɵgetInjectorMetadata': getInjectorMetadata,\n  'ɵsetProfiler': setProfiler,\n  'ɵgetSignalGraph': getSignalGraph,\n  'ɵgetDeferBlocks': getDeferBlocks,\n  'getDirectiveMetadata': getDirectiveMetadata$1,\n  'getComponent': getComponent,\n  'getContext': getContext,\n  'getListeners': getListeners,\n  'getOwningComponent': getOwningComponent,\n  'getHostElement': getHostElement,\n  'getInjector': getInjector,\n  'getRootComponents': getRootComponents,\n  'getDirectives': getDirectives,\n  'applyChanges': applyChanges,\n  'isSignal': isSignal,\n  'enableProfiling': enableProfiling\n};\nlet _published = false;\n/**\n * Publishes a collection of default debug tools onto`window.ng`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\nfunction publishDefaultGlobalUtils$1() {\n  if (!_published) {\n    _published = true;\n    if (typeof window !== 'undefined') {\n      // Only configure the injector profiler when running in the browser.\n      setupFrameworkInjectorProfiler();\n    }\n    for (const [methodName, method] of Object.entries(globalUtilsFunctions)) {\n      publishGlobalUtil(methodName, method);\n    }\n  }\n}\n/**\n * Publishes the given function to `window.ng` so that it can be\n * used from the browser console when an application is not in production.\n */\nfunction publishGlobalUtil(name, fn) {\n  publishUtil(name, fn);\n}\n/**\n * Publishes the given function to `window.ng` from package other than @angular/core\n * So that it can be used from the browser console when an application is not in production.\n */\nfunction publishExternalGlobalUtil(name, fn) {\n  publishUtil(name, fn);\n}\nfunction publishUtil(name, fn) {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for AngularJS (via `goog.provide('ng....')`).\n    const w = _global;\n    ngDevMode && assertDefined(fn, 'function not defined');\n    w[GLOBAL_PUBLISH_EXPANDO_KEY] ??= {};\n    w[GLOBAL_PUBLISH_EXPANDO_KEY][name] = fn;\n  }\n}\n\n/**\n * Internal injection token that can used to access an instance of a Testability class.\n *\n * This token acts as a bridge between the core bootstrap code and the `Testability` class. This is\n * needed to ensure that there are no direct references to the `Testability` class, so it can be\n * tree-shaken away (if not referenced). For the environments/setups when the `Testability` class\n * should be available, this token is used to add a provider that references the `Testability`\n * class. Otherwise, only this token is retained in a bundle, but the `Testability` class is not.\n */\nconst TESTABILITY = /*#__PURE__*/new InjectionToken('');\n/**\n * Internal injection token to retrieve Testability getter class instance.\n */\nconst TESTABILITY_GETTER = /*#__PURE__*/new InjectionToken('');\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser.\n *\n * Angular applications bootstrapped using an NgModule (via `@NgModule.bootstrap` field) will also\n * instantiate Testability by default (in both development and production modes).\n *\n * For applications bootstrapped using the `bootstrapApplication` function, Testability is not\n * included by default. You can include it into your applications by getting the list of necessary\n * providers using the `provideProtractorTestingSupport()` function and adding them into the\n * `options.providers` array. Example:\n *\n * ```ts\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, providers: [provideProtractorTestingSupport()]);\n * ```\n *\n * @publicApi\n */\nlet Testability = /*#__PURE__*/(() => {\n  class Testability {\n    _ngZone;\n    registry;\n    _isZoneStable = true;\n    _callbacks = [];\n    _taskTrackingZone = null;\n    _destroyRef;\n    constructor(_ngZone, registry, testabilityGetter) {\n      this._ngZone = _ngZone;\n      this.registry = registry;\n      // Attempt to retrieve a `DestroyRef` optionally.\n      // For backwards compatibility reasons, this cannot be required.\n      if (isInInjectionContext()) {\n        this._destroyRef = inject(DestroyRef, {\n          optional: true\n        }) ?? undefined;\n      }\n      // If there was no Testability logic registered in the global scope\n      // before, register the current testability getter as a global one.\n      if (!_testabilityGetter) {\n        setTestabilityGetter(testabilityGetter);\n        testabilityGetter.addToWindow(registry);\n      }\n      this._watchAngularEvents();\n      _ngZone.run(() => {\n        this._taskTrackingZone = typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n      });\n    }\n    _watchAngularEvents() {\n      const onUnstableSubscription = this._ngZone.onUnstable.subscribe({\n        next: () => {\n          this._isZoneStable = false;\n        }\n      });\n      const onStableSubscription = this._ngZone.runOutsideAngular(() => this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          queueMicrotask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      }));\n      this._destroyRef?.onDestroy(() => {\n        onUnstableSubscription.unsubscribe();\n        onStableSubscription.unsubscribe();\n      });\n    }\n    /**\n     * Whether an associated application is stable\n     */\n    isStable() {\n      return this._isZoneStable && !this._ngZone.hasPendingMacrotasks;\n    }\n    _runCallbacksIfReady() {\n      if (this.isStable()) {\n        // Schedules the call backs in a new frame so that it is always async.\n        queueMicrotask(() => {\n          while (this._callbacks.length !== 0) {\n            let cb = this._callbacks.pop();\n            clearTimeout(cb.timeoutId);\n            cb.doneCb();\n          }\n        });\n      } else {\n        // Still not stable, send updates.\n        let pending = this.getPendingTasks();\n        this._callbacks = this._callbacks.filter(cb => {\n          if (cb.updateCb && cb.updateCb(pending)) {\n            clearTimeout(cb.timeoutId);\n            return false;\n          }\n          return true;\n        });\n      }\n    }\n    getPendingTasks() {\n      if (!this._taskTrackingZone) {\n        return [];\n      }\n      // Copy the tasks data so that we don't leak tasks.\n      return this._taskTrackingZone.macroTasks.map(t => {\n        return {\n          source: t.source,\n          // From TaskTrackingZone:\n          // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n          creationLocation: t.creationLocation,\n          data: t.data\n        };\n      });\n    }\n    addCallback(cb, timeout, updateCb) {\n      let timeoutId = -1;\n      if (timeout && timeout > 0) {\n        timeoutId = setTimeout(() => {\n          this._callbacks = this._callbacks.filter(cb => cb.timeoutId !== timeoutId);\n          cb();\n        }, timeout);\n      }\n      this._callbacks.push({\n        doneCb: cb,\n        timeoutId: timeoutId,\n        updateCb: updateCb\n      });\n    }\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    whenStable(doneCb, timeout, updateCb) {\n      if (updateCb && !this._taskTrackingZone) {\n        throw new Error('Task tracking zone is required when passing an update callback to ' + 'whenStable(). Is \"zone.js/plugins/task-tracking\" loaded?');\n      }\n      this.addCallback(doneCb, timeout, updateCb);\n      this._runCallbacksIfReady();\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked.\n     * @param token token of application, root element\n     *\n     * @internal\n     */\n    registerApplication(token) {\n      this.registry.registerApplication(token, this);\n    }\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     *\n     * @internal\n     */\n    unregisterApplication(token) {\n      this.registry.unregisterApplication(token);\n    }\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    findProviders(using, provider, exactMatch) {\n      // TODO(juliemr): implement.\n      return [];\n    }\n    static ɵfac = function Testability_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Testability)(__inject(NgZone), __inject(TestabilityRegistry), __inject(TESTABILITY_GETTER));\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: Testability,\n      factory: Testability.ɵfac\n    });\n  }\n  return Testability;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Testability, [{\n    type: Injectable\n  }], () => [{\n    type: NgZone\n  }, {\n    type: TestabilityRegistry\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [TESTABILITY_GETTER]\n    }]\n  }], null);\n})();\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\nlet TestabilityRegistry = /*#__PURE__*/(() => {\n  class TestabilityRegistry {\n    /** @internal */\n    _applications = new Map();\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    registerApplication(token, testability) {\n      this._applications.set(token, testability);\n    }\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    unregisterApplication(token) {\n      this._applications.delete(token);\n    }\n    /**\n     * Unregisters all applications\n     */\n    unregisterAllApplications() {\n      this._applications.clear();\n    }\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    getTestability(elem) {\n      return this._applications.get(elem) || null;\n    }\n    /**\n     * Get all registered testabilities\n     */\n    getAllTestabilities() {\n      return Array.from(this._applications.values());\n    }\n    /**\n     * Get all registered applications(root elements)\n     */\n    getAllRootElements() {\n      return Array.from(this._applications.keys());\n    }\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    findTestabilityInTree(elem, findInAncestors = true) {\n      return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;\n    }\n    static ɵfac = function TestabilityRegistry_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TestabilityRegistry)();\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: TestabilityRegistry,\n      factory: TestabilityRegistry.ɵfac,\n      providedIn: 'platform'\n    });\n  }\n  return TestabilityRegistry;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], null, null);\n})();\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nfunction setTestabilityGetter(getter) {\n  _testabilityGetter = getter;\n}\nlet _testabilityGetter;\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is a Subscribable\n */\nfunction isSubscribable(obj) {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * A DI token that you can use to provide\n * one or more initialization functions.\n *\n * The provided functions are injected at application startup and executed during\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a factory function that loads language data\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * Note that the provided initializer is run in the injection context.\n *\n * @deprecated from v19.0.0, use provideAppInitializer instead\n *\n * @see {@link ApplicationInitStatus}\n * @see {@link provideAppInitializer}\n *\n * @usageNotes\n *\n * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token\n * and a function returning a promise.\n * ### Example with NgModule-based application\n * ```ts\n *  function initializeApp(): Promise<any> {\n *    const http = inject(HttpClient);\n *    return firstValueFrom(\n *      http\n *        .get(\"https://someUrl.com/api/user\")\n *        .pipe(tap(user => { ... }))\n *    );\n *  }\n *\n *  @NgModule({\n *   imports: [BrowserModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useValue: initializeApp,\n *     multi: true,\n *    }]\n *   })\n *  export class AppModule {}\n * ```\n *\n * ### Example with standalone application\n * ```ts\n * function initializeApp() {\n *   const http = inject(HttpClient);\n *   return firstValueFrom(\n *     http\n *       .get(\"https://someUrl.com/api/user\")\n *       .pipe(tap(user => { ... }))\n *   );\n * }\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideHttpClient(),\n *     {\n *       provide: APP_INITIALIZER,\n *       useValue: initializeApp,\n *       multi: true,\n *     },\n *   ],\n * });\n\n * ```\n *\n *\n * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function\n * returning an observable, see an example below. Note: the `HttpClient` in this example is used for\n * demo purposes to illustrate how the factory function can work with other providers available\n * through DI.\n *\n * ### Example with NgModule-based application\n * ```ts\n * function initializeApp() {\n *   const http = inject(HttpClient);\n *   return firstValueFrom(\n *     http\n *       .get(\"https://someUrl.com/api/user\")\n *       .pipe(tap(user => { ... }))\n *   );\n * }\n *\n * @NgModule({\n *   imports: [BrowserModule, HttpClientModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useValue: initializeApp,\n *     multi: true,\n *   }]\n * })\n * export class AppModule {}\n * ```\n *\n * ### Example with standalone application\n * ```ts\n * function initializeApp() {\n *   const http = inject(HttpClient);\n *   return firstValueFrom(\n *     http\n *       .get(\"https://someUrl.com/api/user\")\n *       .pipe(tap(user => { ... }))\n *   );\n * }\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideHttpClient(),\n *     {\n *       provide: APP_INITIALIZER,\n *       useValue: initializeApp,\n *       multi: true,\n *     },\n *   ],\n * });\n * ```\n *\n * @publicApi\n */\nconst APP_INITIALIZER = /*#__PURE__*/new InjectionToken(ngDevMode ? 'Application Initializer' : '');\n/**\n * @description\n * The provided function is injected at application startup and executed during\n * app initialization. If the function returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a function that loads language data\n * or an external configuration, and provide that function using `provideAppInitializer()`.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * Note that the provided initializer is run in the injection context.\n *\n * Previously, this was achieved using the `APP_INITIALIZER` token which is now deprecated.\n *\n * @see {@link APP_INITIALIZER}\n *\n * @usageNotes\n * The following example illustrates how to configure an initialization function using\n * `provideAppInitializer()`\n * ```ts\n * bootstrapApplication(App, {\n *   providers: [\n *     provideAppInitializer(() => {\n *       const http = inject(HttpClient);\n *       return firstValueFrom(\n *         http\n *           .get(\"https://someUrl.com/api/user\")\n *           .pipe(tap(user => { ... }))\n *       );\n *     }),\n *     provideHttpClient(),\n *   ],\n * });\n * ```\n *\n * @publicApi\n */\nfunction provideAppInitializer(initializerFn) {\n  return makeEnvironmentProviders([{\n    provide: APP_INITIALIZER,\n    multi: true,\n    useValue: initializerFn\n  }]);\n}\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\n *\n * @publicApi\n */\nlet ApplicationInitStatus = /*#__PURE__*/(() => {\n  class ApplicationInitStatus {\n    // Using non null assertion, these fields are defined below\n    // within the `new Promise` callback (synchronously).\n    resolve;\n    reject;\n    initialized = false;\n    done = false;\n    donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n    appInits = inject(APP_INITIALIZER, {\n      optional: true\n    }) ?? [];\n    injector = inject(Injector);\n    constructor() {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !Array.isArray(this.appInits)) {\n        throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_INITIALIZER` token value ' + `(expected an array, but got ${typeof this.appInits}). ` + 'Please check that the `APP_INITIALIZER` token is configured as a ' + '`multi: true` provider.');\n      }\n    }\n    /** @internal */\n    runInitializers() {\n      if (this.initialized) {\n        return;\n      }\n      const asyncInitPromises = [];\n      for (const appInits of this.appInits) {\n        const initResult = runInInjectionContext(this.injector, appInits);\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        } else if (isSubscribable(initResult)) {\n          const observableAsPromise = new Promise((resolve, reject) => {\n            initResult.subscribe({\n              complete: resolve,\n              error: reject\n            });\n          });\n          asyncInitPromises.push(observableAsPromise);\n        }\n      }\n      const complete = () => {\n        // @ts-expect-error overwriting a readonly\n        this.done = true;\n        this.resolve();\n      };\n      Promise.all(asyncInitPromises).then(() => {\n        complete();\n      }).catch(e => {\n        this.reject(e);\n      });\n      if (asyncInitPromises.length === 0) {\n        complete();\n      }\n      this.initialized = true;\n    }\n    static ɵfac = function ApplicationInitStatus_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApplicationInitStatus)();\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: ApplicationInitStatus,\n      factory: ApplicationInitStatus.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApplicationInitStatus;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n\n/**\n * A DI token that provides a set of callbacks to\n * be called for every component that is bootstrapped.\n *\n * Each callback must take a `ComponentRef` instance and return nothing.\n *\n * `(componentRef: ComponentRef) => void`\n *\n * @publicApi\n */\nconst APP_BOOTSTRAP_LISTENER = /*#__PURE__*/new InjectionToken(ngDevMode ? 'appBootstrapListener' : '');\nfunction publishDefaultGlobalUtils() {\n  ngDevMode && publishDefaultGlobalUtils$1();\n}\n/**\n * Sets the error for an invalid write to a signal to be an Angular `RuntimeError`.\n */\nfunction publishSignalConfiguration() {\n  setThrowInvalidWriteToSignalError(() => {\n    let errorMessage = '';\n    if (ngDevMode) {\n      const activeConsumer = getActiveConsumer();\n      errorMessage = activeConsumer && isReactiveLViewConsumer(activeConsumer) ? 'Writing to signals is not allowed while Angular renders the template (eg. interpolations)' : 'Writing to signals is not allowed in a `computed`';\n    }\n    throw new RuntimeError(600 /* RuntimeErrorCode.SIGNAL_WRITE_FROM_ILLEGAL_CONTEXT */, errorMessage);\n  });\n}\nfunction isBoundToModule(cf) {\n  return cf.isBoundToModule;\n}\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @deprecated\n * @publicApi\n */\nclass NgProbeToken {\n  name;\n  token;\n  constructor(name, token) {\n    this.name = name;\n    this.token = token;\n  }\n}\n/** Maximum number of times ApplicationRef will refresh all attached views in a single tick. */\nconst MAXIMUM_REFRESH_RERUNS = 10;\nfunction optionsReducer(dst, objs) {\n  if (Array.isArray(objs)) {\n    return objs.reduce(optionsReducer, dst);\n  }\n  return {\n    ...dst,\n    ...objs\n  };\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```ts\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```ts\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```ts\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```ts\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```ts\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\nlet ApplicationRef = /*#__PURE__*/(() => {\n  class ApplicationRef {\n    /** @internal */\n    _runningTick = false;\n    _destroyed = false;\n    _destroyListeners = [];\n    /** @internal */\n    _views = [];\n    internalErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n    afterRenderManager = inject(AfterRenderManager);\n    zonelessEnabled = inject(ZONELESS_ENABLED);\n    rootEffectScheduler = inject(EffectScheduler);\n    /**\n     * Current dirty state of the application across a number of dimensions (views, afterRender hooks,\n     * etc).\n     *\n     * A flag set here means that `tick()` will attempt to resolve the dirtiness when executed.\n     *\n     * @internal\n     */\n    dirtyFlags = 0 /* ApplicationRefDirtyFlags.None */;\n    /**\n     * Most recent snapshot from the `TracingService`, if any.\n     *\n     * This snapshot attempts to capture the context when `tick()` was first\n     * scheduled. It then runs wrapped in this context.\n     *\n     * @internal\n     */\n    tracingSnapshot = null;\n    // Needed for ComponentFixture temporarily during migration of autoDetect behavior\n    // Eventually the hostView of the fixture should just attach to ApplicationRef.\n    allTestViews = new Set();\n    autoDetectTestViews = new Set();\n    includeAllTestViews = false;\n    /** @internal */\n    afterTick = new Subject();\n    /** @internal */\n    get allViews() {\n      return [...(this.includeAllTestViews ? this.allTestViews : this.autoDetectTestViews).keys(), ...this._views];\n    }\n    /**\n     * Indicates whether this instance was destroyed.\n     */\n    get destroyed() {\n      return this._destroyed;\n    }\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     */\n    componentTypes = [];\n    /**\n     * Get a list of components registered to this application.\n     */\n    components = [];\n    internalPendingTask = inject(PendingTasksInternal);\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     */\n    get isStable() {\n      // This is a getter because it might be invoked after the application has been destroyed.\n      return this.internalPendingTask.hasPendingTasksObservable.pipe(map(pending => !pending));\n    }\n    constructor() {\n      // Inject the tracing service to initialize it.\n      inject(TracingService, {\n        optional: true\n      });\n    }\n    /**\n     * @returns A promise that resolves when the application becomes stable\n     */\n    whenStable() {\n      let subscription;\n      return new Promise(resolve => {\n        subscription = this.isStable.subscribe({\n          next: stable => {\n            if (stable) {\n              resolve();\n            }\n          }\n        });\n      }).finally(() => {\n        subscription.unsubscribe();\n      });\n    }\n    _injector = inject(EnvironmentInjector);\n    _rendererFactory = null;\n    /**\n     * The `EnvironmentInjector` used to create this application.\n     */\n    get injector() {\n      return this._injector;\n    }\n    /**\n     * Bootstrap a component onto the element identified by its selector or, optionally, to a\n     * specified element.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a component, Angular mounts it onto a target DOM element\n     * and kicks off automatic change detection. The target DOM element can be\n     * provided using the `rootSelectorOrNode` argument.\n     *\n     * If the target DOM element is not provided, Angular tries to find one on a page\n     * using the `selector` of the component that is being bootstrapped\n     * (first matched element is used).\n     *\n     * ### Example\n     *\n     * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n     * but it requires us to know the component while writing the application code.\n     *\n     * Imagine a situation where we have to wait for an API call to decide about the component to\n     * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n     * dynamically bootstrap a component.\n     *\n     * {@example core/ts/platform/platform.ts region='componentSelector'}\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * selector of the bootstrapped component.\n     *\n     * In the following example, we are providing a CSS selector to match the target element.\n     *\n     * {@example core/ts/platform/platform.ts region='cssSelector'}\n     *\n     * While in this example, we are providing reference to a DOM node.\n     *\n     * {@example core/ts/platform/platform.ts region='domNode'}\n     */\n    bootstrap(componentOrFactory, rootSelectorOrNode) {\n      return this.bootstrapImpl(componentOrFactory, rootSelectorOrNode);\n    }\n    bootstrapImpl(componentOrFactory, rootSelectorOrNode, injector = Injector.NULL) {\n      const ngZone = this._injector.get(NgZone);\n      return ngZone.run(() => {\n        profiler(10 /* ProfilerEvent.BootstrapComponentStart */);\n        (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n        const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;\n        const initStatus = this._injector.get(ApplicationInitStatus);\n        if (!initStatus.done) {\n          let errorMessage = '';\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const standalone = !isComponentFactory && isStandalone(componentOrFactory);\n            errorMessage = 'Cannot bootstrap as there are still asynchronous initializers running.' + (standalone ? '' : ' Bootstrap components in the `ngDoBootstrap` method of the root module.');\n          }\n          throw new RuntimeError(405 /* RuntimeErrorCode.ASYNC_INITIALIZERS_STILL_RUNNING */, errorMessage);\n        }\n        let componentFactory;\n        if (isComponentFactory) {\n          componentFactory = componentOrFactory;\n        } else {\n          const resolver = this._injector.get(ComponentFactoryResolver$1);\n          componentFactory = resolver.resolveComponentFactory(componentOrFactory);\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        const ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef$1);\n        const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        const compRef = componentFactory.create(injector, [], selectorOrNode, ngModule);\n        const nativeElement = compRef.location.nativeElement;\n        const testability = compRef.injector.get(TESTABILITY, null);\n        testability?.registerApplication(nativeElement);\n        compRef.onDestroy(() => {\n          this.detachView(compRef.hostView);\n          remove(this.components, compRef);\n          testability?.unregisterApplication(nativeElement);\n        });\n        this._loadComponent(compRef);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          const _console = this._injector.get(Console);\n          _console.log(`Angular is running in development mode.`);\n        }\n        profiler(11 /* ProfilerEvent.BootstrapComponentEnd */, compRef);\n        return compRef;\n      });\n    }\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    tick() {\n      if (!this.zonelessEnabled) {\n        this.dirtyFlags |= 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */;\n      }\n      this._tick();\n    }\n    /** @internal */\n    _tick() {\n      profiler(12 /* ProfilerEvent.ChangeDetectionStart */);\n      if (this.tracingSnapshot !== null) {\n        // Ensure we always run `tickImpl()` in the context of the most recent snapshot,\n        // if one exists. Snapshots may be reference counted by the implementation so\n        // we want to ensure that if we request a snapshot that we use it.\n        this.tracingSnapshot.run(TracingAction.CHANGE_DETECTION, this.tickImpl);\n      } else {\n        this.tickImpl();\n      }\n    }\n    tickImpl = () => {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n      if (this._runningTick) {\n        throw new RuntimeError(101 /* RuntimeErrorCode.RECURSIVE_APPLICATION_REF_TICK */, ngDevMode && 'ApplicationRef.tick is called recursively');\n      }\n      const prevConsumer = setActiveConsumer(null);\n      try {\n        this._runningTick = true;\n        this.synchronize();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          for (let view of this.allViews) {\n            view.checkNoChanges();\n          }\n        }\n      } finally {\n        this._runningTick = false;\n        this.tracingSnapshot?.dispose();\n        this.tracingSnapshot = null;\n        setActiveConsumer(prevConsumer);\n        this.afterTick.next();\n        profiler(13 /* ProfilerEvent.ChangeDetectionEnd */);\n      }\n    };\n    /**\n     * Performs the core work of synchronizing the application state with the UI, resolving any\n     * pending dirtiness (potentially in a loop).\n     */\n    synchronize() {\n      if (this._rendererFactory === null && !this._injector.destroyed) {\n        this._rendererFactory = this._injector.get(RendererFactory2, null, {\n          optional: true\n        });\n      }\n      let runs = 0;\n      while (this.dirtyFlags !== 0 /* ApplicationRefDirtyFlags.None */ && runs++ < MAXIMUM_REFRESH_RERUNS) {\n        profiler(14 /* ProfilerEvent.ChangeDetectionSyncStart */);\n        this.synchronizeOnce();\n        profiler(15 /* ProfilerEvent.ChangeDetectionSyncEnd */);\n      }\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && runs >= MAXIMUM_REFRESH_RERUNS) {\n        throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, ngDevMode && 'Infinite change detection while refreshing application views. ' + 'Ensure views are not calling `markForCheck` on every template execution or ' + 'that afterRender hooks always mark views for check.');\n      }\n    }\n    /**\n     * Perform a single synchronization pass.\n     */\n    synchronizeOnce() {\n      // First, process any dirty root effects.\n      if (this.dirtyFlags & 16 /* ApplicationRefDirtyFlags.RootEffects */) {\n        this.dirtyFlags &= ~16 /* ApplicationRefDirtyFlags.RootEffects */;\n        this.rootEffectScheduler.flush();\n      }\n      // First check dirty views, if there are any.\n      let ranDetectChanges = false;\n      if (this.dirtyFlags & 7 /* ApplicationRefDirtyFlags.ViewTreeAny */) {\n        // Change detection on views starts in targeted mode (only check components if they're\n        // marked as dirty) unless global checking is specifically requested via APIs like\n        // `ApplicationRef.tick()` and the `NgZone` integration.\n        const useGlobalCheck = Boolean(this.dirtyFlags & 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */);\n        // Clear the view-related dirty flags.\n        this.dirtyFlags &= ~7 /* ApplicationRefDirtyFlags.ViewTreeAny */;\n        // Set the AfterRender bit, as we're checking views and will need to run afterRender hooks.\n        this.dirtyFlags |= 8 /* ApplicationRefDirtyFlags.AfterRender */;\n        // Check all potentially dirty views.\n        for (let {\n          _lView\n        } of this.allViews) {\n          // When re-checking, only check views which actually need it.\n          if (!useGlobalCheck && !requiresRefreshOrTraversal(_lView)) {\n            continue;\n          }\n          const mode = useGlobalCheck && !this.zonelessEnabled ?\n          // Global mode includes `CheckAlways` views.\n          0 /* ChangeDetectionMode.Global */ :\n          // Only refresh views with the `RefreshView` flag or views is a changed signal\n          1 /* ChangeDetectionMode.Targeted */;\n          detectChangesInternal(_lView, mode);\n          ranDetectChanges = true;\n        }\n        // If `markForCheck()` was called during view checking, it will have set the `ViewTreeCheck`\n        // flag. We clear the flag here because, for backwards compatibility, `markForCheck()`\n        // during view checking doesn't cause the view to be re-checked.\n        this.dirtyFlags &= ~4 /* ApplicationRefDirtyFlags.ViewTreeCheck */;\n        // Check if any views are still dirty after checking and we need to loop back.\n        this.syncDirtyFlagsWithViews();\n        if (this.dirtyFlags & (7 /* ApplicationRefDirtyFlags.ViewTreeAny */ | 16 /* ApplicationRefDirtyFlags.RootEffects */)) {\n          // If any views or effects are still dirty after checking, loop back before running render\n          // hooks.\n          return;\n        }\n      }\n      if (!ranDetectChanges) {\n        // If we skipped refreshing views above, there might still be unflushed animations\n        // because we never called `detectChangesInternal` on the views.\n        this._rendererFactory?.begin?.();\n        this._rendererFactory?.end?.();\n      }\n      // Even if there were no dirty views, afterRender hooks might still be dirty.\n      if (this.dirtyFlags & 8 /* ApplicationRefDirtyFlags.AfterRender */) {\n        this.dirtyFlags &= ~8 /* ApplicationRefDirtyFlags.AfterRender */;\n        this.afterRenderManager.execute();\n        // afterRender hooks might influence dirty flags.\n      }\n      this.syncDirtyFlagsWithViews();\n    }\n    /**\n     * Checks `allViews` for views which require refresh/traversal, and updates `dirtyFlags`\n     * accordingly, with two potential behaviors:\n     *\n     * 1. If any of our views require updating, then this adds the `ViewTreeTraversal` dirty flag.\n     *    This _should_ be a no-op, since the scheduler should've added the flag at the same time the\n     *    view was marked as needing updating.\n     *\n     *    TODO(alxhub): figure out if this behavior is still needed for edge cases.\n     *\n     * 2. If none of our views require updating, then clear the view-related `dirtyFlag`s. This\n     *    happens when the scheduler is notified of a view becoming dirty, but the view itself isn't\n     *    reachable through traversal from our roots (e.g. it's detached from the CD tree).\n     */\n    syncDirtyFlagsWithViews() {\n      if (this.allViews.some(({\n        _lView\n      }) => requiresRefreshOrTraversal(_lView))) {\n        // If after running all afterRender callbacks new views are dirty, ensure we loop back.\n        this.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\n        return;\n      } else {\n        // Even though this flag may be set, none of _our_ views require traversal, and so the\n        // `ApplicationRef` doesn't require any repeated checking.\n        this.dirtyFlags &= ~7 /* ApplicationRefDirtyFlags.ViewTreeAny */;\n      }\n    }\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    attachView(viewRef) {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n      const view = viewRef;\n      this._views.push(view);\n      view.attachToAppRef(this);\n    }\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    detachView(viewRef) {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n      const view = viewRef;\n      remove(this._views, view);\n      view.detachFromAppRef();\n    }\n    _loadComponent(componentRef) {\n      this.attachView(componentRef.hostView);\n      try {\n        this.tick();\n      } catch (e) {\n        this.internalErrorHandler(e);\n      }\n      this.components.push(componentRef);\n      // Get the listeners lazily to prevent DI cycles.\n      const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);\n      if (ngDevMode && !Array.isArray(listeners)) {\n        throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_BOOTSTRAP_LISTENER` token value ' + `(expected an array, but got ${typeof listeners}). ` + 'Please check that the `APP_BOOTSTRAP_LISTENER` token is configured as a ' + '`multi: true` provider.');\n      }\n      listeners.forEach(listener => listener(componentRef));\n    }\n    /** @internal */\n    ngOnDestroy() {\n      if (this._destroyed) return;\n      try {\n        // Call all the lifecycle hooks.\n        this._destroyListeners.forEach(listener => listener());\n        // Destroy all registered views.\n        this._views.slice().forEach(view => view.destroy());\n      } finally {\n        // Indicate that this instance is destroyed.\n        this._destroyed = true;\n        // Release all references.\n        this._views = [];\n        this._destroyListeners = [];\n      }\n    }\n    /**\n     * Registers a listener to be called when an instance is destroyed.\n     *\n     * @param callback A callback function to add as a listener.\n     * @returns A function which unregisters a listener.\n     */\n    onDestroy(callback) {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n      this._destroyListeners.push(callback);\n      return () => remove(this._destroyListeners, callback);\n    }\n    /**\n     * Destroys an Angular application represented by this `ApplicationRef`. Calling this function\n     * will destroy the associated environment injectors as well as all the bootstrapped components\n     * with their views.\n     */\n    destroy() {\n      if (this._destroyed) {\n        throw new RuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, ngDevMode && 'This instance of the `ApplicationRef` has already been destroyed.');\n      }\n      const injector = this._injector;\n      // Check that this injector instance supports destroy operation.\n      if (injector.destroy && !injector.destroyed) {\n        // Destroying an underlying injector will trigger the `ngOnDestroy` lifecycle\n        // hook, which invokes the remaining cleanup actions.\n        injector.destroy();\n      }\n    }\n    /**\n     * Returns the number of attached views.\n     */\n    get viewCount() {\n      return this._views.length;\n    }\n    static ɵfac = function ApplicationRef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApplicationRef)();\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: ApplicationRef,\n      factory: ApplicationRef.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApplicationRef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationRef, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\nfunction warnIfDestroyed(destroyed) {\n  if (destroyed) {\n    console.warn(formatRuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, 'This instance of the `ApplicationRef` has already been destroyed.'));\n  }\n}\nfunction remove(list, el) {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\n/**\n * Schedules triggering of a defer block for `on idle` and `on timer` conditions.\n */\nfunction scheduleDelayedTrigger(scheduleFn) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  renderPlaceholder(lView, tNode);\n  // Exit early to avoid invoking `scheduleFn`, which would\n  // add `setTimeout` call and potentially delay serialization\n  // on the server unnecessarily.\n  if (!shouldTriggerDeferBlock(0 /* TriggerType.Regular */, lView)) return;\n  const injector = lView[INJECTOR];\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const cleanupFn = scheduleFn(() => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), injector);\n  storeTriggerCleanupFn(0 /* TriggerType.Regular */, lDetails, cleanupFn);\n}\n/**\n * Schedules prefetching for `on idle` and `on timer` triggers.\n *\n * @param scheduleFn A function that does the scheduling.\n */\nfunction scheduleDelayedPrefetching(scheduleFn, trigger) {\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) return;\n  const lView = getLView();\n  const injector = lView[INJECTOR];\n  // Only trigger the scheduled trigger on the browser\n  // since we don't want to delay the server response.\n  const tNode = getCurrentTNode();\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    const prefetch = () => triggerPrefetching(tDetails, lView, tNode);\n    const cleanupFn = scheduleFn(prefetch, injector);\n    storeTriggerCleanupFn(1 /* TriggerType.Prefetch */, lDetails, cleanupFn);\n  }\n}\n/**\n * Schedules hydration triggering of a defer block for `on idle` and `on timer` conditions.\n */\nfunction scheduleDelayedHydrating(scheduleFn, lView, tNode) {\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) return;\n  // Only trigger the scheduled trigger on the browser\n  // since we don't want to delay the server response.\n  const injector = lView[INJECTOR];\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const ssrUniqueId = lDetails[SSR_UNIQUE_ID];\n  ngDevMode && assertSsrIdDefined(ssrUniqueId);\n  const cleanupFn = scheduleFn(() => triggerHydrationFromBlockName(injector, ssrUniqueId), injector);\n  storeTriggerCleanupFn(2 /* TriggerType.Hydrate */, lDetails, cleanupFn);\n}\n/**\n * Trigger prefetching of dependencies for a defer block.\n *\n * @param tDetails Static information about this defer block.\n * @param lView LView of a host view.\n * @param tNode TNode that represents a defer block.\n */\nfunction triggerPrefetching(tDetails, lView, tNode) {\n  triggerResourceLoading(tDetails, lView, tNode);\n}\n/**\n * Trigger loading of defer block dependencies if the process hasn't started yet.\n *\n * @param tDetails Static information about this defer block.\n * @param lView LView of a host view.\n */\nfunction triggerResourceLoading(tDetails, lView, tNode) {\n  const injector = lView[INJECTOR];\n  const tView = lView[TVIEW];\n  if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {\n    // If the loading status is different from initial one, it means that\n    // the loading of dependencies is in progress and there is nothing to do\n    // in this function. All details can be obtained from the `tDetails` object.\n    return tDetails.loadingPromise ?? Promise.resolve();\n  }\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);\n  // Switch from NOT_STARTED -> IN_PROGRESS state.\n  tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;\n  // Prefetching is triggered, cleanup all registered prefetch triggers.\n  invokeTriggerCleanupFns(1 /* TriggerType.Prefetch */, lDetails);\n  let dependenciesFn = tDetails.dependencyResolverFn;\n  if (ngDevMode) {\n    // Check if dependency function interceptor is configured.\n    const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, {\n      optional: true\n    });\n    if (deferDependencyInterceptor) {\n      dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);\n    }\n  }\n  // Indicate that an application is not stable and has a pending task.\n  const removeTask = injector.get(PendingTasks).add();\n  // The `dependenciesFn` might be `null` when all dependencies within\n  // a given defer block were eagerly referenced elsewhere in a file,\n  // thus no dynamic `import()`s were produced.\n  if (!dependenciesFn) {\n    tDetails.loadingPromise = Promise.resolve().then(() => {\n      tDetails.loadingPromise = null;\n      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\n      removeTask();\n    });\n    return tDetails.loadingPromise;\n  }\n  // Start downloading of defer block dependencies.\n  tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then(results => {\n    let failed = false;\n    const directiveDefs = [];\n    const pipeDefs = [];\n    for (const result of results) {\n      if (result.status === 'fulfilled') {\n        const dependency = result.value;\n        const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);\n        if (directiveDef) {\n          directiveDefs.push(directiveDef);\n        } else {\n          const pipeDef = getPipeDef$1(dependency);\n          if (pipeDef) {\n            pipeDefs.push(pipeDef);\n          }\n        }\n      } else {\n        failed = true;\n        break;\n      }\n    }\n    if (failed) {\n      tDetails.loadingState = DeferDependenciesLoadingState.FAILED;\n      if (tDetails.errorTmplIndex === null) {\n        const templateLocation = ngDevMode ? getTemplateLocationDetails(lView) : '';\n        const error = new RuntimeError(-750 /* RuntimeErrorCode.DEFER_LOADING_FAILED */, ngDevMode && 'Loading dependencies for `@defer` block failed, ' + `but no \\`@error\\` block was configured${templateLocation}. ` + 'Consider using the `@error` block to render an error state.');\n        handleUncaughtError(lView, error);\n      }\n    } else {\n      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\n      // Update directive and pipe registries to add newly downloaded dependencies.\n      const primaryBlockTView = primaryBlockTNode.tView;\n      if (directiveDefs.length > 0) {\n        primaryBlockTView.directiveRegistry = addDepsToRegistry(primaryBlockTView.directiveRegistry, directiveDefs);\n        // Extract providers from all NgModules imported by standalone components\n        // used within this defer block.\n        const directiveTypes = directiveDefs.map(def => def.type);\n        const providers = internalImportProvidersFrom(false, ...directiveTypes);\n        tDetails.providers = providers;\n      }\n      if (pipeDefs.length > 0) {\n        primaryBlockTView.pipeRegistry = addDepsToRegistry(primaryBlockTView.pipeRegistry, pipeDefs);\n      }\n    }\n  });\n  return tDetails.loadingPromise.finally(() => {\n    // Loading is completed, we no longer need the loading Promise\n    // and a pending task should also be removed.\n    tDetails.loadingPromise = null;\n    removeTask();\n  });\n}\n/**\n * Defines whether we should proceed with triggering a given defer block.\n */\nfunction shouldTriggerDeferBlock(triggerType, lView) {\n  // prevents triggering regular triggers when on the server.\n  if (triggerType === 0 /* TriggerType.Regular */ && typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return false;\n  }\n  // prevents triggering in the case of a test run with manual defer block configuration.\n  const injector = lView[INJECTOR];\n  const config = injector.get(DEFER_BLOCK_CONFIG, null, {\n    optional: true\n  });\n  if (config?.behavior === DeferBlockBehavior.Manual) {\n    return false;\n  }\n  return true;\n}\n/**\n * Attempts to trigger loading of defer block dependencies.\n * If the block is already in a loading, completed or an error state -\n * no additional actions are taken.\n */\nfunction triggerDeferBlock(triggerType, lView, tNode) {\n  const tView = lView[TVIEW];\n  const lContainer = lView[tNode.index];\n  ngDevMode && assertLContainer(lContainer);\n  if (!shouldTriggerDeferBlock(triggerType, lView)) return;\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  // Defer block is triggered, cleanup all registered trigger functions.\n  invokeAllTriggerCleanupFns(lDetails);\n  switch (tDetails.loadingState) {\n    case DeferDependenciesLoadingState.NOT_STARTED:\n      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\n      triggerResourceLoading(tDetails, lView, tNode);\n      // The `loadingState` might have changed to \"loading\".\n      if (tDetails.loadingState === DeferDependenciesLoadingState.IN_PROGRESS) {\n        renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\n      }\n      break;\n    case DeferDependenciesLoadingState.IN_PROGRESS:\n      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\n      renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\n      break;\n    case DeferDependenciesLoadingState.COMPLETE:\n      ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n      break;\n    case DeferDependenciesLoadingState.FAILED:\n      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n      break;\n    default:\n      if (ngDevMode) {\n        throwError('Unknown defer block state');\n      }\n  }\n}\n/**\n * The core mechanism for incremental hydration. This triggers or\n * queues hydration for all the blocks in the tree that need to be hydrated\n * and keeps track of all those blocks that were hydrated along the way.\n *\n * Note: the `replayQueuedEventsFn` is only provided when hydration is invoked\n * as a result of an event replay (via JsAction). When hydration is invoked from\n * an instruction set (e.g. `deferOnImmediate`) - there is no need to replay any\n * events.\n */\nasync function triggerHydrationFromBlockName(injector, blockName, replayQueuedEventsFn) {\n  const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n  const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\n  // Make sure we don't hydrate/trigger the same thing multiple times\n  if (blocksBeingHydrated.has(blockName)) {\n    return;\n  }\n  // Trigger resource loading and hydration for the blocks in the queue in the order of highest block\n  // to lowest block. Once a block has finished resource loading, after next render fires after hydration\n  // finishes. The new block will have its defer instruction called and will be in the registry.\n  // Due to timing related to potential nested control flow, this has to be scheduled after the next render.\n  const {\n    parentBlockPromise,\n    hydrationQueue\n  } = getParentBlockHydrationQueue(blockName, injector);\n  if (hydrationQueue.length === 0) return;\n  // It's possible that the hydrationQueue topmost item is actually in the process of hydrating and has\n  // a promise already. In that case, we don't want to destroy that promise and queue it again.\n  if (parentBlockPromise !== null) {\n    hydrationQueue.shift();\n  }\n  // The hydrating map in the registry prevents re-triggering hydration for a block that's already in\n  // the hydration queue. Here we generate promises for each of the blocks about to be hydrated\n  populateHydratingStateForQueue(dehydratedBlockRegistry, hydrationQueue);\n  // We await this after populating the hydration state so we can prevent re-triggering hydration for\n  // the same blocks while this promise is being awaited.\n  if (parentBlockPromise !== null) {\n    await parentBlockPromise;\n  }\n  const topmostParentBlock = hydrationQueue[0];\n  if (dehydratedBlockRegistry.has(topmostParentBlock)) {\n    // the topmost parent block is already in the registry and we can proceed\n    // with hydration.\n    await triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn);\n  } else {\n    // the topmost parent block is not yet in the registry, which may mean\n    // a lazy loaded route, a control flow branch was taken, a route has\n    // been navigated, etc. So we need to queue up the hydration process\n    // so that it can be finished after the top block has had its defer\n    // instruction executed.\n    dehydratedBlockRegistry.awaitParentBlock(topmostParentBlock, async () => await triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn));\n  }\n}\n/**\n * The core mechanism for incremental hydration. This triggers\n * hydration for all the blocks in the tree that need to be hydrated\n * and keeps track of all those blocks that were hydrated along the way.\n *\n * Note: the `replayQueuedEventsFn` is only provided when hydration is invoked\n * as a result of an event replay (via JsAction). When hydration is invoked from\n * an instruction set (e.g. `deferOnImmediate`) - there is no need to replay any\n * events.\n */\nasync function triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn) {\n  const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n  const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\n  // Indicate that we have some pending async work.\n  const pendingTasks = injector.get(PendingTasksInternal);\n  const taskId = pendingTasks.add();\n  // Actually do the triggering and hydration of the queue of blocks\n  for (let blockQueueIdx = 0; blockQueueIdx < hydrationQueue.length; blockQueueIdx++) {\n    const dehydratedBlockId = hydrationQueue[blockQueueIdx];\n    const dehydratedDeferBlock = dehydratedBlockRegistry.get(dehydratedBlockId);\n    if (dehydratedDeferBlock != null) {\n      // trigger the block resources and await next render for hydration. This should result\n      // in the next block ɵɵdefer instruction being called and that block being added to the dehydrated registry.\n      await triggerResourceLoadingForHydration(dehydratedDeferBlock);\n      await nextRender(injector);\n      // if the content has changed since server rendering, we need to check for the expected block\n      // being in the registry or if errors occurred. In that case, we need to clean up the remaining expected\n      // content that won't be rendered or fetched.\n      if (deferBlockHasErrored(dehydratedDeferBlock)) {\n        // Either the expected block has not yet had its ɵɵdefer instruction called or the block errored out when fetching\n        // resources. In the former case, either we're hydrating too soon or the client and server differ. In both cases,\n        // we need to clean up child content and promises.\n        removeDehydratedViewList(dehydratedDeferBlock);\n        cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);\n        break;\n      }\n      // The defer block has not errored and we've finished fetching resources and rendering.\n      // At this point it is safe to resolve the hydration promise.\n      blocksBeingHydrated.get(dehydratedBlockId).resolve();\n    } else {\n      // The expected block has not yet had its ɵɵdefer instruction called. This is likely due to content changing between\n      // client and server. We need to clean up the dehydrated DOM in the container since it no longer is valid.\n      cleanupParentContainer(blockQueueIdx, hydrationQueue, dehydratedBlockRegistry);\n      cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);\n      break;\n    }\n  }\n  const lastBlockName = hydrationQueue[hydrationQueue.length - 1];\n  // Await hydration completion for the last block.\n  await blocksBeingHydrated.get(lastBlockName)?.promise;\n  // All async work is done, remove the taskId from the registry.\n  pendingTasks.remove(taskId);\n  // Replay any queued events, if any exist and the replay operation was requested.\n  if (replayQueuedEventsFn) {\n    replayQueuedEventsFn(hydrationQueue);\n  }\n  // Cleanup after hydration of all affected defer blocks.\n  cleanupHydratedDeferBlocks(dehydratedBlockRegistry.get(lastBlockName), hydrationQueue, dehydratedBlockRegistry, injector.get(ApplicationRef));\n}\nfunction deferBlockHasErrored(deferBlock) {\n  return getLDeferBlockDetails(deferBlock.lView, deferBlock.tNode)[DEFER_BLOCK_STATE] === DeferBlockState.Error;\n}\n/**\n * Clean up the parent container of a block where content changed between server and client.\n * The parent of a block going through `triggerHydrationFromBlockName` will contain the\n * dehydrated content that needs to be cleaned up. So we have to do the clean up from that location\n * in the tree.\n */\nfunction cleanupParentContainer(currentBlockIdx, hydrationQueue, dehydratedBlockRegistry) {\n  // If a parent block exists, it's in the hydration queue in front of the current block.\n  const parentDeferBlockIdx = currentBlockIdx - 1;\n  const parentDeferBlock = parentDeferBlockIdx > -1 ? dehydratedBlockRegistry.get(hydrationQueue[parentDeferBlockIdx]) : null;\n  if (parentDeferBlock) {\n    cleanupLContainer(parentDeferBlock.lContainer);\n  }\n}\nfunction cleanupRemainingHydrationQueue(hydrationQueue, dehydratedBlockRegistry) {\n  const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\n  for (const dehydratedBlockId in hydrationQueue) {\n    blocksBeingHydrated.get(dehydratedBlockId)?.reject();\n  }\n  dehydratedBlockRegistry.cleanup(hydrationQueue);\n}\n/**\n * Generates a new promise for every defer block in the hydrating queue\n */\nfunction populateHydratingStateForQueue(registry, queue) {\n  for (let blockId of queue) {\n    registry.hydrating.set(blockId, Promise.withResolvers());\n  }\n}\n// Waits for the next render cycle to complete\nfunction nextRender(injector) {\n  return new Promise(resolveFn => afterNextRender(resolveFn, {\n    injector\n  }));\n}\nasync function triggerResourceLoadingForHydration(dehydratedBlock) {\n  const {\n    tNode,\n    lView\n  } = dehydratedBlock;\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  return new Promise(resolve => {\n    onDeferBlockCompletion(lDetails, resolve);\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  });\n}\n/**\n * Registers cleanup functions for a defer block when the block has finished\n * fetching and rendering\n */\nfunction onDeferBlockCompletion(lDetails, callback) {\n  if (!Array.isArray(lDetails[ON_COMPLETE_FNS])) {\n    lDetails[ON_COMPLETE_FNS] = [];\n  }\n  lDetails[ON_COMPLETE_FNS].push(callback);\n}\n/**\n * Determines whether specific trigger types should be attached during an instruction firing\n * to ensure the proper triggers for a given type are used.\n */\nfunction shouldAttachTrigger(triggerType, lView, tNode) {\n  if (triggerType === 0 /* TriggerType.Regular */) {\n    return shouldAttachRegularTrigger(lView, tNode);\n  } else if (triggerType === 2 /* TriggerType.Hydrate */) {\n    return !shouldAttachRegularTrigger(lView, tNode);\n  }\n  // TriggerType.Prefetch is active only on the client\n  return !(typeof ngServerMode !== 'undefined' && ngServerMode);\n}\n/** Whether a given defer block has `hydrate` triggers. */\nfunction hasHydrateTriggers(flags) {\n  return flags != null && (flags & 1 /* TDeferDetailsFlags.HasHydrateTriggers */) === 1 /* TDeferDetailsFlags.HasHydrateTriggers */;\n}\n/**\n * Defines whether a regular trigger logic (e.g. \"on viewport\") should be attached\n * to a defer block. This function defines a condition, which mutually excludes\n * `deferOn*` and `deferHydrateOn*` triggers, to make sure only one of the trigger\n * types is active for a block with the current state.\n */\nfunction shouldAttachRegularTrigger(lView, tNode) {\n  const injector = lView[INJECTOR];\n  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);\n  const incrementalHydrationEnabled = isIncrementalHydrationEnabled(injector);\n  const _hasHydrateTriggers = hasHydrateTriggers(tDetails.flags);\n  // On the server:\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // Regular triggers are activated on the server when:\n    //  - Either Incremental Hydration is *not* enabled\n    //  - Or Incremental Hydration is enabled, but a given block doesn't have \"hydrate\" triggers\n    return !incrementalHydrationEnabled || !_hasHydrateTriggers;\n  }\n  // On the client:\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const wasServerSideRendered = lDetails[SSR_UNIQUE_ID] !== null;\n  if (_hasHydrateTriggers && wasServerSideRendered && incrementalHydrationEnabled) {\n    return false;\n  }\n  return true;\n}\n/**\n * Retrives a Defer Block's list of hydration triggers\n */\nfunction getHydrateTriggers(tView, tNode) {\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  return tDetails.hydrateTriggers ??= new Map();\n}\n/**\n * Loops through all defer block summaries and ensures all the blocks triggers are\n * properly initialized\n */\nfunction processAndInitTriggers(injector, blockData, nodes) {\n  const idleElements = [];\n  const timerElements = [];\n  const viewportElements = [];\n  const immediateElements = [];\n  for (let [blockId, blockSummary] of blockData) {\n    const commentNode = nodes.get(blockId);\n    if (commentNode !== undefined) {\n      const numRootNodes = blockSummary.data[NUM_ROOT_NODES];\n      let currentNode = commentNode;\n      for (let i = 0; i < numRootNodes; i++) {\n        currentNode = currentNode.previousSibling;\n        if (currentNode.nodeType !== Node.ELEMENT_NODE) {\n          continue;\n        }\n        const elementTrigger = {\n          el: currentNode,\n          blockName: blockId\n        };\n        // hydrate\n        if (blockSummary.hydrate.idle) {\n          idleElements.push(elementTrigger);\n        }\n        if (blockSummary.hydrate.immediate) {\n          immediateElements.push(elementTrigger);\n        }\n        if (blockSummary.hydrate.timer !== null) {\n          elementTrigger.delay = blockSummary.hydrate.timer;\n          timerElements.push(elementTrigger);\n        }\n        if (blockSummary.hydrate.viewport) {\n          viewportElements.push(elementTrigger);\n        }\n      }\n    }\n  }\n  setIdleTriggers(injector, idleElements);\n  setImmediateTriggers(injector, immediateElements);\n  setViewportTriggers(injector, viewportElements);\n  setTimerTriggers(injector, timerElements);\n}\nfunction setIdleTriggers(injector, elementTriggers) {\n  for (const elementTrigger of elementTriggers) {\n    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    const onInvoke = () => triggerHydrationFromBlockName(injector, elementTrigger.blockName);\n    const cleanupFn = onIdle(onInvoke, injector);\n    registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\n  }\n}\nfunction setViewportTriggers(injector, elementTriggers) {\n  if (elementTriggers.length > 0) {\n    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    for (let elementTrigger of elementTriggers) {\n      const cleanupFn = onViewportWrapper(elementTrigger.el, () => triggerHydrationFromBlockName(injector, elementTrigger.blockName), injector);\n      registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\n    }\n  }\n}\nfunction setTimerTriggers(injector, elementTriggers) {\n  for (const elementTrigger of elementTriggers) {\n    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    const onInvoke = () => triggerHydrationFromBlockName(injector, elementTrigger.blockName);\n    const timerFn = onTimer(elementTrigger.delay);\n    const cleanupFn = timerFn(onInvoke, injector);\n    registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\n  }\n}\nfunction setImmediateTriggers(injector, elementTriggers) {\n  for (const elementTrigger of elementTriggers) {\n    // Note: we intentionally avoid awaiting each call and instead kick off\n    // the hydration process simultaneously for all defer blocks with this trigger;\n    triggerHydrationFromBlockName(injector, elementTrigger.blockName);\n  }\n}\n\n/**\n * Indicates whether we've already produced a warning,\n * prevents the logic from producing it multiple times.\n */\nlet _hmrWarningProduced = false;\n/**\n * Logs a message into the console to indicate that `@defer` block\n * dependencies are loaded eagerly when the HMR mode is enabled.\n */\nfunction logHmrWarning(injector) {\n  if (!_hmrWarningProduced) {\n    _hmrWarningProduced = true;\n    const console = injector.get(Console);\n    // tslint:disable-next-line:no-console\n    console.log(formatRuntimeError(-751 /* RuntimeErrorCode.DEFER_IN_HMR_MODE */, 'Angular has detected that this application contains `@defer` blocks ' + 'and the hot module replacement (HMR) mode is enabled. All `@defer` ' + 'block dependencies will be loaded eagerly.'));\n  }\n}\n/**\n * Creates runtime data structures for defer blocks.\n *\n * @param index Index of the `defer` instruction.\n * @param primaryTmplIndex Index of the template with the primary block content.\n * @param dependencyResolverFn Function that contains dependencies for this defer block.\n * @param loadingTmplIndex Index of the template with the loading block content.\n * @param placeholderTmplIndex Index of the template with the placeholder block content.\n * @param errorTmplIndex Index of the template with the error block content.\n * @param loadingConfigIndex Index in the constants array of the configuration of the loading.\n *     block.\n * @param placeholderConfigIndex Index in the constants array of the configuration of the\n *     placeholder block.\n * @param enableTimerScheduling Function that enables timer-related scheduling if `after`\n *     or `minimum` parameters are setup on the `@loading` or `@placeholder` blocks.\n * @param flags A set of flags to define a particular behavior (e.g. to indicate that\n *              hydrate triggers are present and regular triggers should be deactivated\n *              in certain scenarios).\n *\n * @codeGenApi\n */\nfunction ɵɵdefer(index, primaryTmplIndex, dependencyResolverFn, loadingTmplIndex, placeholderTmplIndex, errorTmplIndex, loadingConfigIndex, placeholderConfigIndex, enableTimerScheduling, flags) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = declareNoDirectiveHostTemplate(lView, tView, index, null, 0, 0);\n  const injector = lView[INJECTOR];\n  if (tView.firstCreatePass) {\n    performanceMarkFeature('NgDefer');\n    if (ngDevMode) {\n      if (typeof ngHmrMode !== 'undefined' && ngHmrMode) {\n        logHmrWarning(injector);\n      }\n      if (hasHydrateTriggers(flags)) {\n        assertIncrementalHydrationIsConfigured(injector);\n      }\n    }\n    const tDetails = {\n      primaryTmplIndex,\n      loadingTmplIndex: loadingTmplIndex ?? null,\n      placeholderTmplIndex: placeholderTmplIndex ?? null,\n      errorTmplIndex: errorTmplIndex ?? null,\n      placeholderBlockConfig: null,\n      loadingBlockConfig: null,\n      dependencyResolverFn: dependencyResolverFn ?? null,\n      loadingState: DeferDependenciesLoadingState.NOT_STARTED,\n      loadingPromise: null,\n      providers: null,\n      hydrateTriggers: null,\n      debug: null,\n      flags: flags ?? 0 /* TDeferDetailsFlags.Default */\n    };\n    enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);\n    setTDeferBlockDetails(tView, adjustedIndex, tDetails);\n  }\n  const lContainer = lView[adjustedIndex];\n  // If hydration is enabled, looks up dehydrated views in the DOM\n  // using hydration annotation info and stores those views on LContainer.\n  // In client-only mode, this function is a noop.\n  populateDehydratedViewsInLContainer(lContainer, tNode, lView);\n  let ssrBlockState = null;\n  let ssrUniqueId = null;\n  if (lContainer[DEHYDRATED_VIEWS]?.length > 0) {\n    const info = lContainer[DEHYDRATED_VIEWS][0].data;\n    ssrUniqueId = info[DEFER_BLOCK_ID] ?? null;\n    ssrBlockState = info[DEFER_BLOCK_STATE$1];\n  }\n  // Init instance-specific defer details and store it.\n  const lDetails = [null,\n  // NEXT_DEFER_BLOCK_STATE\n  DeferBlockInternalState.Initial,\n  // DEFER_BLOCK_STATE\n  null,\n  // STATE_IS_FROZEN_UNTIL\n  null,\n  // LOADING_AFTER_CLEANUP_FN\n  null,\n  // TRIGGER_CLEANUP_FNS\n  null,\n  // PREFETCH_TRIGGER_CLEANUP_FNS\n  ssrUniqueId,\n  // SSR_UNIQUE_ID\n  ssrBlockState,\n  // SSR_BLOCK_STATE\n  null,\n  // ON_COMPLETE_FNS\n  null // HYDRATE_TRIGGER_CLEANUP_FNS\n  ];\n  setLDeferBlockDetails(lView, adjustedIndex, lDetails);\n  let registry = null;\n  if (ssrUniqueId !== null) {\n    // Store this defer block in the registry, to have an access to\n    // internal data structures from hydration runtime code.\n    registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    registry.add(ssrUniqueId, {\n      lView,\n      tNode,\n      lContainer\n    });\n  }\n  const onLViewDestroy = () => {\n    invokeAllTriggerCleanupFns(lDetails);\n    if (ssrUniqueId !== null) {\n      registry?.cleanup([ssrUniqueId]);\n    }\n  };\n  // When defer block is triggered - unsubscribe from LView destroy cleanup.\n  storeTriggerCleanupFn(0 /* TriggerType.Regular */, lDetails, () => removeLViewOnDestroy(lView, onLViewDestroy));\n  storeLViewOnDestroy(lView, onLViewDestroy);\n}\n/**\n * Loads defer block dependencies when a trigger value becomes truthy.\n * @codeGenApi\n */\nfunction ɵɵdeferWhen(rawValue) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'when <expression>');\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const value = Boolean(rawValue); // handle truthy or falsy values\n      const lDetails = getLDeferBlockDetails(lView, tNode);\n      const renderedState = lDetails[DEFER_BLOCK_STATE];\n      if (value === false && renderedState === DeferBlockInternalState.Initial) {\n        // If nothing is rendered yet, render a placeholder (if defined).\n        renderPlaceholder(lView, tNode);\n      } else if (value === true && (renderedState === DeferBlockInternalState.Initial || renderedState === DeferBlockState.Placeholder)) {\n        triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode);\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n/**\n * Prefetches the deferred content when a value becomes truthy.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchWhen(rawValue) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch when <expression>');\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const value = Boolean(rawValue); // handle truthy or falsy values\n      const tView = lView[TVIEW];\n      const tNode = getSelectedTNode();\n      const tDetails = getTDeferBlockDetails(tView, tNode);\n      if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n        // If loading has not been started yet, trigger it now.\n        triggerPrefetching(tDetails, lView, tNode);\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n/**\n * Hydrates the deferred content when a value becomes truthy.\n * @codeGenApi\n */\nfunction ɵɵdeferHydrateWhen(rawValue) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate when <expression>');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  // TODO(incremental-hydration): audit all defer instructions to reduce unnecessary work by\n  // moving function calls inside their relevant control flow blocks\n  const bindingIndex = nextBindingIndex();\n  const tView = getTView();\n  const hydrateTriggers = getHydrateTriggers(tView, tNode);\n  hydrateTriggers.set(6 /* DeferBlockTrigger.When */, null);\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      // We are on the server and SSR for defer blocks is enabled.\n      triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n    } else {\n      const injector = lView[INJECTOR];\n      const prevConsumer = setActiveConsumer(null);\n      try {\n        const value = Boolean(rawValue); // handle truthy or falsy values\n        if (value === true) {\n          // The `when` condition has changed to `true`, trigger defer block loading\n          // if the block is either in initial (nothing is rendered) or a placeholder\n          // state.\n          const lDetails = getLDeferBlockDetails(lView, tNode);\n          const ssrUniqueId = lDetails[SSR_UNIQUE_ID];\n          ngDevMode && assertSsrIdDefined(ssrUniqueId);\n          triggerHydrationFromBlockName(injector, ssrUniqueId);\n        }\n      } finally {\n        setActiveConsumer(prevConsumer);\n      }\n    }\n  }\n}\n/**\n * Specifies that hydration never occurs.\n * @codeGenApi\n */\nfunction ɵɵdeferHydrateNever() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate never');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(7 /* DeferBlockTrigger.Never */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  }\n}\n/**\n * Sets up logic to handle the `on idle` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'on idle');\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  scheduleDelayedTrigger(onIdle);\n}\n/**\n * Sets up logic to handle the `prefetch on idle` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch on idle');\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  scheduleDelayedPrefetching(onIdle);\n}\n/**\n * Sets up logic to handle the `on idle` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferHydrateOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on idle');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(0 /* DeferBlockTrigger.Idle */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  } else {\n    scheduleDelayedHydrating(onIdle, lView, tNode);\n  }\n}\n/**\n * Sets up logic to handle the `on immediate` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'on immediate');\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  // Render placeholder block only if loading template is not present and we're on\n  // the client to avoid content flickering, since it would be immediately replaced\n  // by the loading block.\n  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);\n  if (tDetails.loadingTmplIndex === null) {\n    renderPlaceholder(lView, tNode);\n  }\n  triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode);\n}\n/**\n * Sets up logic to handle the `prefetch on immediate` deferred trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch on immediate');\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    triggerResourceLoading(tDetails, lView, tNode);\n  }\n}\n/**\n * Sets up logic to handle the `on immediate` hydrate trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferHydrateOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on immediate');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(1 /* DeferBlockTrigger.Immediate */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  } else {\n    const injector = lView[INJECTOR];\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    const ssrUniqueId = lDetails[SSR_UNIQUE_ID];\n    ngDevMode && assertSsrIdDefined(ssrUniqueId);\n    triggerHydrationFromBlockName(injector, ssrUniqueId);\n  }\n}\n/**\n * Creates runtime data structures for the `on timer` deferred trigger.\n * @param delay Amount of time to wait before loading the content.\n * @codeGenApi\n */\nfunction ɵɵdeferOnTimer(delay) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `on timer(${delay}ms)`);\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  scheduleDelayedTrigger(onTimer(delay));\n}\n/**\n * Creates runtime data structures for the `prefetch on timer` deferred trigger.\n * @param delay Amount of time to wait before prefetching the content.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnTimer(delay) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on timer(${delay}ms)`);\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  scheduleDelayedPrefetching(onTimer(delay));\n}\n/**\n * Creates runtime data structures for the `on timer` hydrate trigger.\n * @param delay Amount of time to wait before loading the content.\n * @codeGenApi\n */\nfunction ɵɵdeferHydrateOnTimer(delay) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `hydrate on timer(${delay}ms)`);\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(5 /* DeferBlockTrigger.Timer */, {\n    delay\n  });\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  } else {\n    scheduleDelayedHydrating(onTimer(delay), lView, tNode);\n  }\n}\n/**\n * Creates runtime data structures for the `on hover` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnHover(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `on hover${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  renderPlaceholder(lView, tNode);\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onHover, () => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), 0 /* TriggerType.Regular */);\n  }\n}\n/**\n * Creates runtime data structures for the `prefetch on hover` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnHover(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on hover${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onHover, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n  }\n}\n/**\n * Creates runtime data structures for the `on hover` hydrate trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferHydrateOnHover() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on hover');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(4 /* DeferBlockTrigger.Hover */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  }\n  // The actual triggering of hydration on hover is handled by JSAction in\n  // event_replay.ts.\n}\n/**\n * Creates runtime data structures for the `on interaction` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnInteraction(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `on interaction${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  renderPlaceholder(lView, tNode);\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onInteraction, () => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), 0 /* TriggerType.Regular */);\n  }\n}\n/**\n * Creates runtime data structures for the `prefetch on interaction` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnInteraction(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on interaction${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onInteraction, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n  }\n}\n/**\n * Creates runtime data structures for the `on interaction` hydrate trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferHydrateOnInteraction() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on interaction');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(3 /* DeferBlockTrigger.Interaction */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  }\n  // The actual triggering of hydration on interaction is handled by JSAction in\n  // event_replay.ts.\n}\n/**\n * Creates runtime data structures for the `on viewport` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferOnViewport(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `on viewport${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(0 /* TriggerType.Regular */, lView, tNode)) return;\n  renderPlaceholder(lView, tNode);\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onViewportWrapper, () => triggerDeferBlock(0 /* TriggerType.Regular */, lView, tNode), 0 /* TriggerType.Regular */);\n  }\n}\n/**\n * Creates runtime data structures for the `prefetch on viewport` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferPrefetchOnViewport(triggerIndex, walkUpTimes) {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on viewport${walkUpTimes === -1 ? '' : '(<target>)'}`);\n  }\n  if (!shouldAttachTrigger(1 /* TriggerType.Prefetch */, lView, tNode)) return;\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(lView, tNode, triggerIndex, walkUpTimes, onViewportWrapper, () => triggerPrefetching(tDetails, lView, tNode), 1 /* TriggerType.Prefetch */);\n  }\n}\n/**\n * Creates runtime data structures for the `on viewport` hydrate trigger.\n * @codeGenApi\n */\nfunction ɵɵdeferHydrateOnViewport() {\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on viewport');\n  }\n  if (!shouldAttachTrigger(2 /* TriggerType.Hydrate */, lView, tNode)) return;\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(2 /* DeferBlockTrigger.Viewport */, null);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(2 /* TriggerType.Hydrate */, lView, tNode);\n  }\n  // The actual triggering of hydration on viewport happens in triggering.ts,\n  // since these instructions won't exist for dehydrated content.\n}\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nfunction ɵɵattribute(name, value, sanitizer, namespace) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n  }\n  return ɵɵattribute;\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Instruction that returns the component instance in which the current instruction is executing.\n * This is a constant-time version of `nextContent` for the case where we know that we need the\n * component instance specifically, rather than the context of a particular template.\n *\n * @codeGenApi\n */\nfunction ɵɵcomponentInstance() {\n  const instance = getLView()[DECLARATION_COMPONENT_VIEW][CONTEXT];\n  ngDevMode && assertDefined(instance, 'Expected component instance to be defined');\n  return instance;\n}\n\n/**\n * A type representing the live collection to be reconciled with any new (incoming) collection. This\n * is an adapter class that makes it possible to work with different internal data structures,\n * regardless of the actual values of the incoming collection.\n */\nclass LiveCollection {\n  destroy(item) {\n    // noop by default\n  }\n  updateValue(index, value) {\n    // noop by default\n  }\n  // operations below could be implemented on top of the operations defined so far, but having\n  // them explicitly allow clear expression of intent and potentially more performant\n  // implementations\n  swap(index1, index2) {\n    const startIdx = Math.min(index1, index2);\n    const endIdx = Math.max(index1, index2);\n    const endItem = this.detach(endIdx);\n    if (endIdx - startIdx > 1) {\n      const startItem = this.detach(startIdx);\n      this.attach(startIdx, endItem);\n      this.attach(endIdx, startItem);\n    } else {\n      this.attach(startIdx, endItem);\n    }\n  }\n  move(prevIndex, newIdx) {\n    this.attach(newIdx, this.detach(prevIndex));\n  }\n}\nfunction valuesMatching(liveIdx, liveValue, newIdx, newValue, trackBy) {\n  if (liveIdx === newIdx && Object.is(liveValue, newValue)) {\n    // matching and no value identity to update\n    return 1;\n  } else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {\n    // matching but requires value identity update\n    return -1;\n  }\n  return 0;\n}\nfunction recordDuplicateKeys(keyToIdx, key, idx) {\n  const idxSoFar = keyToIdx.get(key);\n  if (idxSoFar !== undefined) {\n    idxSoFar.add(idx);\n  } else {\n    keyToIdx.set(key, new Set([idx]));\n  }\n}\n/**\n * The live collection reconciliation algorithm that perform various in-place operations, so it\n * reflects the content of the new (incoming) collection.\n *\n * The reconciliation algorithm has 2 code paths:\n * - \"fast\" path that don't require any memory allocation;\n * - \"slow\" path that requires additional memory allocation for intermediate data structures used to\n * collect additional information about the live collection.\n * It might happen that the algorithm switches between the two modes in question in a single\n * reconciliation path - generally it tries to stay on the \"fast\" path as much as possible.\n *\n * The overall complexity of the algorithm is O(n + m) for speed and O(n) for memory (where n is the\n * length of the live collection and m is the length of the incoming collection). Given the problem\n * at hand the complexity / performance constraints makes it impossible to perform the absolute\n * minimum of operation to reconcile the 2 collections. The algorithm makes different tradeoffs to\n * stay within reasonable performance bounds and may apply sub-optimal number of operations in\n * certain situations.\n *\n * @param liveCollection the current, live collection;\n * @param newCollection the new, incoming collection;\n * @param trackByFn key generation function that determines equality between items in the life and\n *     incoming collection;\n */\nfunction reconcile(liveCollection, newCollection, trackByFn) {\n  let detachedItems = undefined;\n  let liveKeysInTheFuture = undefined;\n  let liveStartIdx = 0;\n  let liveEndIdx = liveCollection.length - 1;\n  const duplicateKeys = ngDevMode ? new Map() : undefined;\n  if (Array.isArray(newCollection)) {\n    let newEndIdx = newCollection.length - 1;\n    while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {\n      // compare from the beginning\n      const liveStartValue = liveCollection.at(liveStartIdx);\n      const newStartValue = newCollection[liveStartIdx];\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newStartValue), liveStartIdx);\n      }\n      const isStartMatching = valuesMatching(liveStartIdx, liveStartValue, liveStartIdx, newStartValue, trackByFn);\n      if (isStartMatching !== 0) {\n        if (isStartMatching < 0) {\n          liveCollection.updateValue(liveStartIdx, newStartValue);\n        }\n        liveStartIdx++;\n        continue;\n      }\n      // compare from the end\n      // TODO(perf): do _all_ the matching from the end\n      const liveEndValue = liveCollection.at(liveEndIdx);\n      const newEndValue = newCollection[newEndIdx];\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys, trackByFn(newEndIdx, newEndValue), newEndIdx);\n      }\n      const isEndMatching = valuesMatching(liveEndIdx, liveEndValue, newEndIdx, newEndValue, trackByFn);\n      if (isEndMatching !== 0) {\n        if (isEndMatching < 0) {\n          liveCollection.updateValue(liveEndIdx, newEndValue);\n        }\n        liveEndIdx--;\n        newEndIdx--;\n        continue;\n      }\n      // Detect swap and moves:\n      const liveStartKey = trackByFn(liveStartIdx, liveStartValue);\n      const liveEndKey = trackByFn(liveEndIdx, liveEndValue);\n      const newStartKey = trackByFn(liveStartIdx, newStartValue);\n      if (Object.is(newStartKey, liveEndKey)) {\n        const newEndKey = trackByFn(newEndIdx, newEndValue);\n        // detect swap on both ends;\n        if (Object.is(newEndKey, liveStartKey)) {\n          liveCollection.swap(liveStartIdx, liveEndIdx);\n          liveCollection.updateValue(liveEndIdx, newEndValue);\n          newEndIdx--;\n          liveEndIdx--;\n        } else {\n          // the new item is the same as the live item with the end pointer - this is a move forward\n          // to an earlier index;\n          liveCollection.move(liveEndIdx, liveStartIdx);\n        }\n        liveCollection.updateValue(liveStartIdx, newStartValue);\n        liveStartIdx++;\n        continue;\n      }\n      // Fallback to the slow path: we need to learn more about the content of the live and new\n      // collections.\n      detachedItems ??= new UniqueValueMultiKeyMap();\n      liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);\n      // Check if I'm inserting a previously detached item: if so, attach it here\n      if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {\n        liveCollection.updateValue(liveStartIdx, newStartValue);\n        liveStartIdx++;\n        liveEndIdx++;\n      } else if (!liveKeysInTheFuture.has(newStartKey)) {\n        // Check if we seen a new item that doesn't exist in the old collection and must be INSERTED\n        const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);\n        liveCollection.attach(liveStartIdx, newItem);\n        liveStartIdx++;\n        liveEndIdx++;\n      } else {\n        // We know that the new item exists later on in old collection but we don't know its index\n        // and as the consequence can't move it (don't know where to find it). Detach the old item,\n        // hoping that it unlocks the fast path again.\n        detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));\n        liveEndIdx--;\n      }\n    }\n    // Final cleanup steps:\n    // - more items in the new collection => insert\n    while (liveStartIdx <= newEndIdx) {\n      createOrAttach(liveCollection, detachedItems, trackByFn, liveStartIdx, newCollection[liveStartIdx]);\n      liveStartIdx++;\n    }\n  } else if (newCollection != null) {\n    // iterable - immediately fallback to the slow path\n    const newCollectionIterator = newCollection[Symbol.iterator]();\n    let newIterationResult = newCollectionIterator.next();\n    while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {\n      const liveValue = liveCollection.at(liveStartIdx);\n      const newValue = newIterationResult.value;\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newValue), liveStartIdx);\n      }\n      const isStartMatching = valuesMatching(liveStartIdx, liveValue, liveStartIdx, newValue, trackByFn);\n      if (isStartMatching !== 0) {\n        // found a match - move on, but update value\n        if (isStartMatching < 0) {\n          liveCollection.updateValue(liveStartIdx, newValue);\n        }\n        liveStartIdx++;\n        newIterationResult = newCollectionIterator.next();\n      } else {\n        detachedItems ??= new UniqueValueMultiKeyMap();\n        liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);\n        // Check if I'm inserting a previously detached item: if so, attach it here\n        const newKey = trackByFn(liveStartIdx, newValue);\n        if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {\n          liveCollection.updateValue(liveStartIdx, newValue);\n          liveStartIdx++;\n          liveEndIdx++;\n          newIterationResult = newCollectionIterator.next();\n        } else if (!liveKeysInTheFuture.has(newKey)) {\n          liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));\n          liveStartIdx++;\n          liveEndIdx++;\n          newIterationResult = newCollectionIterator.next();\n        } else {\n          // it is a move forward - detach the current item without advancing in collections\n          const liveKey = trackByFn(liveStartIdx, liveValue);\n          detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));\n          liveEndIdx--;\n        }\n      }\n    }\n    // this is a new item as we run out of the items in the old collection - create or attach a\n    // previously detached one\n    while (!newIterationResult.done) {\n      createOrAttach(liveCollection, detachedItems, trackByFn, liveCollection.length, newIterationResult.value);\n      newIterationResult = newCollectionIterator.next();\n    }\n  }\n  // Cleanups common to the array and iterable:\n  // - more items in the live collection => delete starting from the end;\n  while (liveStartIdx <= liveEndIdx) {\n    liveCollection.destroy(liveCollection.detach(liveEndIdx--));\n  }\n  // - destroy items that were detached but never attached again.\n  detachedItems?.forEach(item => {\n    liveCollection.destroy(item);\n  });\n  // report duplicate keys (dev mode only)\n  if (ngDevMode) {\n    let duplicatedKeysMsg = [];\n    for (const [key, idxSet] of duplicateKeys) {\n      if (idxSet.size > 1) {\n        const idx = [...idxSet].sort((a, b) => a - b);\n        for (let i = 1; i < idx.length; i++) {\n          duplicatedKeysMsg.push(`key \"${stringifyForError(key)}\" at index \"${idx[i - 1]}\" and \"${idx[i]}\"`);\n        }\n      }\n    }\n    if (duplicatedKeysMsg.length > 0) {\n      const message = formatRuntimeError(-955 /* RuntimeErrorCode.LOOP_TRACK_DUPLICATE_KEYS */, 'The provided track expression resulted in duplicated keys for a given collection. ' + 'Adjust the tracking expression such that it uniquely identifies all the items in the collection. ' + 'Duplicated keys were: \\n' + duplicatedKeysMsg.join(', \\n') + '.');\n      console.warn(message);\n    }\n  }\n}\nfunction attachPreviouslyDetached(prevCollection, detachedItems, index, key) {\n  if (detachedItems !== undefined && detachedItems.has(key)) {\n    prevCollection.attach(index, detachedItems.get(key));\n    detachedItems.delete(key);\n    return true;\n  }\n  return false;\n}\nfunction createOrAttach(liveCollection, detachedItems, trackByFn, index, value) {\n  if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {\n    const newItem = liveCollection.create(index, value);\n    liveCollection.attach(index, newItem);\n  } else {\n    liveCollection.updateValue(index, value);\n  }\n}\nfunction initLiveItemsInTheFuture(liveCollection, start, end, trackByFn) {\n  const keys = new Set();\n  for (let i = start; i <= end; i++) {\n    keys.add(trackByFn(i, liveCollection.at(i)));\n  }\n  return keys;\n}\n/**\n * A specific, partial implementation of the Map interface with the following characteristics:\n * - allows multiple values for a given key;\n * - maintain FIFO order for multiple values corresponding to a given key;\n * - assumes that all values are unique.\n *\n * The implementation aims at having the minimal overhead for cases where keys are _not_ duplicated\n * (the most common case in the list reconciliation algorithm). To achieve this, the first value for\n * a given key is stored in a regular map. Then, when more values are set for a given key, we\n * maintain a form of linked list in a separate map. To maintain this linked list we assume that all\n * values (in the entire collection) are unique.\n */\nclass UniqueValueMultiKeyMap {\n  // A map from a key to the first value corresponding to this key.\n  kvMap = /*#__PURE__*/new Map();\n  // A map that acts as a linked list of values - each value maps to the next value in this \"linked\n  // list\" (this only works if values are unique). Allocated lazily to avoid memory consumption when\n  // there are no duplicated values.\n  _vMap = undefined;\n  has(key) {\n    return this.kvMap.has(key);\n  }\n  delete(key) {\n    if (!this.has(key)) return false;\n    const value = this.kvMap.get(key);\n    if (this._vMap !== undefined && this._vMap.has(value)) {\n      this.kvMap.set(key, this._vMap.get(value));\n      this._vMap.delete(value);\n    } else {\n      this.kvMap.delete(key);\n    }\n    return true;\n  }\n  get(key) {\n    return this.kvMap.get(key);\n  }\n  set(key, value) {\n    if (this.kvMap.has(key)) {\n      let prevValue = this.kvMap.get(key);\n      // Note: we don't use `assertNotSame`, because the value needs to be stringified even if\n      // there is no error which can freeze the browser for large values (see #58509).\n      if (ngDevMode && prevValue === value) {\n        throw new Error(`Detected a duplicated value ${value} for the key ${key}`);\n      }\n      if (this._vMap === undefined) {\n        this._vMap = new Map();\n      }\n      const vMap = this._vMap;\n      while (vMap.has(prevValue)) {\n        prevValue = vMap.get(prevValue);\n      }\n      vMap.set(prevValue, value);\n    } else {\n      this.kvMap.set(key, value);\n    }\n  }\n  forEach(cb) {\n    for (let [key, value] of this.kvMap) {\n      cb(value, key);\n      if (this._vMap !== undefined) {\n        const vMap = this._vMap;\n        while (vMap.has(value)) {\n          value = vMap.get(value);\n          cb(value, key);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Creates an LContainer for an ng-template representing a root node\n * of control flow (@if, @switch). We use this to explicitly set\n * flags on the TNode created to identify which nodes are in control\n * flow or starting control flow for hydration identification and\n * cleanup timing.\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n * @codeGenApi\n */\nfunction ɵɵconditionalCreate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  performanceMarkFeature('NgControlFlow');\n  const lView = getLView();\n  const tView = getTView();\n  const attrs = getConstant(tView.consts, attrsIndex);\n  declareNoDirectiveHostTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, 256 /* TNodeFlags.isControlFlowStart */, localRefsIndex, localRefExtractor);\n  return ɵɵconditionalBranchCreate;\n}\n/**\n * Creates an LContainer for an ng-template representing a branch\n * of control flow (@else, @case, @default). We use this to explicitly\n * set flags on the TNode created to identify which nodes are in\n * control flow or starting control flow for hydration identification\n * and cleanup timing.\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n * @codeGenApi\n */\nfunction ɵɵconditionalBranchCreate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  performanceMarkFeature('NgControlFlow');\n  const lView = getLView();\n  const tView = getTView();\n  const attrs = getConstant(tView.consts, attrsIndex);\n  declareNoDirectiveHostTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, 512 /* TNodeFlags.isInControlFlow */, localRefsIndex, localRefExtractor);\n  return ɵɵconditionalBranchCreate;\n}\n/**\n * The conditional instruction represents the basic building block on the runtime side to support\n * built-in \"if\" and \"switch\". On the high level this instruction is responsible for adding and\n * removing views selected by a conditional expression.\n *\n * @param matchingTemplateIndex Index of a template TNode representing a conditional view to be\n *     inserted; -1 represents a special case when there is no view to insert.\n * @param contextValue Value that should be exposed as the context of the conditional.\n * @codeGenApi\n */\nfunction ɵɵconditional(matchingTemplateIndex, contextValue) {\n  performanceMarkFeature('NgControlFlow');\n  const hostLView = getLView();\n  const bindingIndex = nextBindingIndex();\n  const prevMatchingTemplateIndex = hostLView[bindingIndex] !== NO_CHANGE ? hostLView[bindingIndex] : -1;\n  const prevContainer = prevMatchingTemplateIndex !== -1 ? getLContainer(hostLView, HEADER_OFFSET + prevMatchingTemplateIndex) : undefined;\n  const viewInContainerIdx = 0;\n  if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      // The index of the view to show changed - remove the previously displayed one\n      // (it is a noop if there are no active views in a container).\n      if (prevContainer !== undefined) {\n        removeLViewFromLContainer(prevContainer, viewInContainerIdx);\n      }\n      // Index -1 is a special case where none of the conditions evaluates to\n      // a truthy value and as the consequence we've got no view to show.\n      if (matchingTemplateIndex !== -1) {\n        const nextLContainerIndex = HEADER_OFFSET + matchingTemplateIndex;\n        const nextContainer = getLContainer(hostLView, nextLContainerIndex);\n        const templateTNode = getExistingTNode(hostLView[TVIEW], nextLContainerIndex);\n        const dehydratedView = findAndReconcileMatchingDehydratedViews(nextContainer, templateTNode, hostLView);\n        const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, contextValue, {\n          dehydratedView\n        });\n        addLViewToLContainer(nextContainer, embeddedLView, viewInContainerIdx, shouldAddViewToDom(templateTNode, dehydratedView));\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  } else if (prevContainer !== undefined) {\n    // We might keep displaying the same template but the actual value of the expression could have\n    // changed - re-bind in context.\n    const lView = getLViewFromLContainer(prevContainer, viewInContainerIdx);\n    if (lView !== undefined) {\n      lView[CONTEXT] = contextValue;\n    }\n  }\n}\nclass RepeaterContext {\n  lContainer;\n  $implicit;\n  $index;\n  constructor(lContainer, $implicit, $index) {\n    this.lContainer = lContainer;\n    this.$implicit = $implicit;\n    this.$index = $index;\n  }\n  get $count() {\n    return this.lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n}\n/**\n * A built-in trackBy function used for situations where users specified collection index as a\n * tracking expression. Having this function body in the runtime avoids unnecessary code generation.\n *\n * @param index\n * @returns\n */\nfunction ɵɵrepeaterTrackByIndex(index) {\n  return index;\n}\n/**\n * A built-in trackBy function used for situations where users specified collection item reference\n * as a tracking expression. Having this function body in the runtime avoids unnecessary code\n * generation.\n *\n * @param index\n * @returns\n */\nfunction ɵɵrepeaterTrackByIdentity(_, value) {\n  return value;\n}\nclass RepeaterMetadata {\n  hasEmptyBlock;\n  trackByFn;\n  liveCollection;\n  constructor(hasEmptyBlock, trackByFn, liveCollection) {\n    this.hasEmptyBlock = hasEmptyBlock;\n    this.trackByFn = trackByFn;\n    this.liveCollection = liveCollection;\n  }\n}\n/**\n * The repeaterCreate instruction runs in the creation part of the template pass and initializes\n * internal data structures required by the update pass of the built-in repeater logic. Repeater\n * metadata are allocated in the data part of LView with the following layout:\n * - LView[HEADER_OFFSET + index] - metadata\n * - LView[HEADER_OFFSET + index + 1] - reference to a template function rendering an item\n * - LView[HEADER_OFFSET + index + 2] - optional reference to a template function rendering an empty\n * block\n *\n * @param index Index at which to store the metadata of the repeater.\n * @param templateFn Reference to the template of the main repeater block.\n * @param decls The number of nodes, local refs, and pipes for the main block.\n * @param vars The number of bindings for the main block.\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param trackByFn Reference to the tracking function.\n * @param trackByUsesComponentInstance Whether the tracking function has any references to the\n *  component instance. If it doesn't, we can avoid rebinding it.\n * @param emptyTemplateFn Reference to the template function of the empty block.\n * @param emptyDecls The number of nodes, local refs, and pipes for the empty block.\n * @param emptyVars The number of bindings for the empty block.\n * @param emptyTagName The name of the empty block container element, if applicable\n * @param emptyAttrsIndex Index of the empty block template attributes in the `consts` array.\n *\n * @codeGenApi\n */\nfunction ɵɵrepeaterCreate(index, templateFn, decls, vars, tagName, attrsIndex, trackByFn, trackByUsesComponentInstance, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, emptyAttrsIndex) {\n  performanceMarkFeature('NgControlFlow');\n  ngDevMode && assertFunction(trackByFn, `A track expression must be a function, was ${typeof trackByFn} instead.`);\n  const lView = getLView();\n  const tView = getTView();\n  const hasEmptyBlock = emptyTemplateFn !== undefined;\n  const hostLView = getLView();\n  const boundTrackBy = trackByUsesComponentInstance ?\n  // We only want to bind when necessary, because it produces a\n  // new function. For pure functions it's not necessary.\n  trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT]) : trackByFn;\n  const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);\n  hostLView[HEADER_OFFSET + index] = metadata;\n  declareNoDirectiveHostTemplate(lView, tView, index + 1, templateFn, decls, vars, tagName, getConstant(tView.consts, attrsIndex), 256 /* TNodeFlags.isControlFlowStart */);\n  if (hasEmptyBlock) {\n    ngDevMode && assertDefined(emptyDecls, 'Missing number of declarations for the empty repeater block.');\n    ngDevMode && assertDefined(emptyVars, 'Missing number of bindings for the empty repeater block.');\n    declareNoDirectiveHostTemplate(lView, tView, index + 2, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, getConstant(tView.consts, emptyAttrsIndex), 512 /* TNodeFlags.isInControlFlow */);\n  }\n}\nfunction isViewExpensiveToRecreate(lView) {\n  // assumption: anything more than a text node with a binding is considered \"expensive\"\n  return lView.length - HEADER_OFFSET > 2;\n}\nclass OperationsCounter {\n  created = 0;\n  destroyed = 0;\n  reset() {\n    this.created = 0;\n    this.destroyed = 0;\n  }\n  recordCreate() {\n    this.created++;\n  }\n  recordDestroy() {\n    this.destroyed++;\n  }\n  /**\n   * A method indicating if the entire collection was re-created as part of the reconciliation pass.\n   * Used to warn developers about the usage of a tracking function that might result in excessive\n   * amount of view creation / destroy operations.\n   *\n   * @returns boolean value indicating if a live collection was re-created\n   */\n  wasReCreated(collectionLen) {\n    return collectionLen > 0 && this.created === this.destroyed && this.created === collectionLen;\n  }\n}\nclass LiveCollectionLContainerImpl extends LiveCollection {\n  lContainer;\n  hostLView;\n  templateTNode;\n  operationsCounter = ngDevMode ? /*#__PURE__*/new OperationsCounter() : undefined;\n  /**\n   Property indicating if indexes in the repeater context need to be updated following the live\n   collection changes. Index updates are necessary if and only if views are inserted / removed in\n   the middle of LContainer. Adds and removals at the end don't require index updates.\n  */\n  needsIndexUpdate = false;\n  constructor(lContainer, hostLView, templateTNode) {\n    super();\n    this.lContainer = lContainer;\n    this.hostLView = hostLView;\n    this.templateTNode = templateTNode;\n  }\n  get length() {\n    return this.lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n  at(index) {\n    return this.getLView(index)[CONTEXT].$implicit;\n  }\n  attach(index, lView) {\n    const dehydratedView = lView[HYDRATION];\n    this.needsIndexUpdate ||= index !== this.length;\n    addLViewToLContainer(this.lContainer, lView, index, shouldAddViewToDom(this.templateTNode, dehydratedView));\n  }\n  detach(index) {\n    this.needsIndexUpdate ||= index !== this.length - 1;\n    return detachExistingView(this.lContainer, index);\n  }\n  create(index, value) {\n    const dehydratedView = findMatchingDehydratedView(this.lContainer, this.templateTNode.tView.ssrId);\n    const embeddedLView = createAndRenderEmbeddedLView(this.hostLView, this.templateTNode, new RepeaterContext(this.lContainer, value, index), {\n      dehydratedView\n    });\n    this.operationsCounter?.recordCreate();\n    return embeddedLView;\n  }\n  destroy(lView) {\n    destroyLView(lView[TVIEW], lView);\n    this.operationsCounter?.recordDestroy();\n  }\n  updateValue(index, value) {\n    this.getLView(index)[CONTEXT].$implicit = value;\n  }\n  reset() {\n    this.needsIndexUpdate = false;\n    this.operationsCounter?.reset();\n  }\n  updateIndexes() {\n    if (this.needsIndexUpdate) {\n      for (let i = 0; i < this.length; i++) {\n        this.getLView(i)[CONTEXT].$index = i;\n      }\n    }\n  }\n  getLView(index) {\n    return getExistingLViewFromLContainer(this.lContainer, index);\n  }\n}\n/**\n * The repeater instruction does update-time diffing of a provided collection (against the\n * collection seen previously) and maps changes in the collection to views structure (by adding,\n * removing or moving views as needed).\n * @param collection - the collection instance to be checked for changes\n * @codeGenApi\n */\nfunction ɵɵrepeater(collection) {\n  const prevConsumer = setActiveConsumer(null);\n  const metadataSlotIdx = getSelectedIndex();\n  try {\n    const hostLView = getLView();\n    const hostTView = hostLView[TVIEW];\n    const metadata = hostLView[metadataSlotIdx];\n    const containerIndex = metadataSlotIdx + 1;\n    const lContainer = getLContainer(hostLView, containerIndex);\n    if (metadata.liveCollection === undefined) {\n      const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);\n      metadata.liveCollection = new LiveCollectionLContainerImpl(lContainer, hostLView, itemTemplateTNode);\n    } else {\n      metadata.liveCollection.reset();\n    }\n    const liveCollection = metadata.liveCollection;\n    reconcile(liveCollection, collection, metadata.trackByFn);\n    // Warn developers about situations where the entire collection was re-created as part of the\n    // reconciliation pass. Note that this warning might be \"overreacting\" and report cases where\n    // the collection re-creation is the intended behavior. Still, the assumption is that most of\n    // the time it is undesired.\n    if (ngDevMode && metadata.trackByFn === ɵɵrepeaterTrackByIdentity && liveCollection.operationsCounter?.wasReCreated(liveCollection.length) && isViewExpensiveToRecreate(getExistingLViewFromLContainer(lContainer, 0))) {\n      const message = formatRuntimeError(-956 /* RuntimeErrorCode.LOOP_TRACK_RECREATE */, `The configured tracking expression (track by identity) caused re-creation of the entire collection of size ${liveCollection.length}. ` + 'This is an expensive operation requiring destruction and subsequent creation of DOM nodes, directives, components etc. ' + 'Please review the \"track expression\" and make sure that it uniquely identifies items in a collection.');\n      console.warn(message);\n    }\n    // moves in the container might caused context's index to get out of order, re-adjust if needed\n    liveCollection.updateIndexes();\n    // handle empty blocks\n    if (metadata.hasEmptyBlock) {\n      const bindingIndex = nextBindingIndex();\n      const isCollectionEmpty = liveCollection.length === 0;\n      if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {\n        const emptyTemplateIndex = metadataSlotIdx + 2;\n        const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);\n        if (isCollectionEmpty) {\n          const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);\n          const dehydratedView = findAndReconcileMatchingDehydratedViews(lContainerForEmpty, emptyTemplateTNode, hostLView);\n          const embeddedLView = createAndRenderEmbeddedLView(hostLView, emptyTemplateTNode, undefined, {\n            dehydratedView\n          });\n          addLViewToLContainer(lContainerForEmpty, embeddedLView, 0, shouldAddViewToDom(emptyTemplateTNode, dehydratedView));\n        } else {\n          // we know that an ssrId was generated for the empty template, but\n          // we were unable to match it to a dehydrated view earlier, which\n          // means that we may have changed branches between server and client.\n          // We'll need to find and remove the stale empty template view.\n          if (hostTView.firstUpdatePass) {\n            removeDehydratedViews(lContainerForEmpty);\n          }\n          removeLViewFromLContainer(lContainerForEmpty, 0);\n        }\n      }\n    }\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\nfunction getLContainer(lView, index) {\n  const lContainer = lView[index];\n  ngDevMode && assertLContainer(lContainer);\n  return lContainer;\n}\nfunction detachExistingView(lContainer, index) {\n  const existingLView = detachView(lContainer, index);\n  ngDevMode && assertLView(existingLView);\n  return existingLView;\n}\nfunction getExistingLViewFromLContainer(lContainer, index) {\n  const existingLView = getLViewFromLContainer(lContainer, index);\n  ngDevMode && assertLView(existingLView);\n  return existingLView;\n}\nfunction getExistingTNode(tView, index) {\n  const tNode = getTNode(tView, index);\n  ngDevMode && assertTNode(tNode);\n  return tNode;\n}\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵproperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    setPropertyAndInputs(tNode, lView, propName, value, lView[RENDERER], sanitizer);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵproperty;\n}\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nfunction setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {\n  // We support both 'class' and `className` hence the fallback.\n  setAllInputsForProperty(tNode, tView, lView, isClassBased ? 'class' : 'style', value);\n}\n\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nfunction ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  ngDevMode && assertTNodeCreationIndex(lView, index);\n  const tView = lView[TVIEW];\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = tView.firstCreatePass ? directiveHostFirstCreatePass(adjustedIndex, lView, 2 /* TNodeType.Element */, name, findDirectiveDefMatches, getBindingsEnabled(), attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  elementLikeStartShared(tNode, lView, index, name, _locateOrCreateElementNode);\n  if (isDirectiveHost(tNode)) {\n    const tView = lView[TVIEW];\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  if (ngDevMode && lView[TVIEW].firstCreatePass) {\n    validateElementIsKnown(lView, tNode);\n  }\n  return ɵɵelementStart;\n}\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementEnd() {\n  const tView = getTView();\n  const initialTNode = getCurrentTNode();\n  ngDevMode && assertDefined(initialTNode, 'No parent node to close.');\n  const currentTNode = elementLikeEndShared(initialTNode);\n  ngDevMode && assertTNodeType(currentTNode, 3 /* TNodeType.AnyRNode */);\n  if (tView.firstCreatePass) {\n    directiveHostEndFirstCreatePass(tView, currentTNode);\n  }\n  if (isSkipHydrationRootTNode(currentTNode)) {\n    leaveSkipHydrationBlock();\n  }\n  decreaseElementDepthCount();\n  if (currentTNode.classesWithoutHost != null && hasClassInput(currentTNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, currentTNode, getLView(), currentTNode.classesWithoutHost, true);\n  }\n  if (currentTNode.stylesWithoutHost != null && hasStyleInput(currentTNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, currentTNode, getLView(), currentTNode.stylesWithoutHost, false);\n  }\n  return ɵɵelementEnd;\n}\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelement(index, name, attrsIndex, localRefsIndex) {\n  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵelementEnd();\n  return ɵɵelement;\n}\n/**\n * Create DOM element that cannot have any directives.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵdomElementStart(index, name, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  ngDevMode && assertTNodeCreationIndex(lView, index);\n  const tView = lView[TVIEW];\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = tView.firstCreatePass ? domOnlyFirstCreatePass(adjustedIndex, tView, 2 /* TNodeType.Element */, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  elementLikeStartShared(tNode, lView, index, name, _locateOrCreateElementNode);\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  if (ngDevMode && lView[TVIEW].firstCreatePass) {\n    validateElementIsKnown(lView, tNode);\n  }\n  return ɵɵdomElementStart;\n}\n/**\n * Mark the end of the directiveless element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵdomElementEnd() {\n  const initialTNode = getCurrentTNode();\n  ngDevMode && assertDefined(initialTNode, 'No parent node to close.');\n  const currentTNode = elementLikeEndShared(initialTNode);\n  ngDevMode && assertTNodeType(currentTNode, 3 /* TNodeType.AnyRNode */);\n  if (isSkipHydrationRootTNode(currentTNode)) {\n    leaveSkipHydrationBlock();\n  }\n  decreaseElementDepthCount();\n  return ɵɵdomElementEnd;\n}\n/**\n * Creates an empty element using {@link domElementStart} and {@link domElementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵdomElement(index, name, attrsIndex, localRefsIndex) {\n  ɵɵdomElementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵdomElementEnd();\n  return ɵɵdomElement;\n}\nlet _locateOrCreateElementNode = (tView, lView, tNode, name, index) => {\n  lastNodeWasCreated(true);\n  return createElementNode(lView[RENDERER], name, getNamespace());\n};\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of element nodes.\n */\nfunction locateOrCreateElementNodeImpl(tView, lView, tNode, name, index) {\n  const isNodeCreationMode = !canHydrateNode(lView, tNode);\n  lastNodeWasCreated(isNodeCreationMode);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createElementNode(lView[RENDERER], name, getNamespace());\n  }\n  // Hydration mode, looking up an existing element in DOM.\n  const hydrationInfo = lView[HYDRATION];\n  const native = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateMatchingNode(native, Node.ELEMENT_NODE, name, lView, tNode);\n  ngDevMode && markRNodeAsClaimedByHydration(native);\n  // This element might also be an anchor of a view container.\n  if (getSerializedContainerViews(hydrationInfo, index)) {\n    // Important note: this element acts as an anchor, but it's **not** a part\n    // of the embedded view, so we start the segment **after** this element, taking\n    // a reference to the next sibling. For example, the following template:\n    // `<div #vcrTarget>` is represented in the DOM as `<div></div>...<!--container-->`,\n    // so while processing a `<div>` instruction, point to the next sibling as a\n    // start of a segment.\n    ngDevMode && validateNodeExists(native.nextSibling, lView, tNode);\n    setSegmentHead(hydrationInfo, index, native.nextSibling);\n  }\n  // Checks if the skip hydration attribute is present during hydration so we know to\n  // skip attempting to hydrate this block. We check both TNode and RElement for an\n  // attribute: the RElement case is needed for i18n cases, when we add it to host\n  // elements during the annotation phase (after all internal data structures are setup).\n  if (hydrationInfo && (hasSkipHydrationAttrOnTNode(tNode) || hasSkipHydrationAttrOnRElement(native))) {\n    if (isComponentHost(tNode)) {\n      enterSkipHydrationBlock(tNode);\n      // Since this isn't hydratable, we need to empty the node\n      // so there's no duplicate content after render\n      clearElementContents(native);\n      ngDevMode && markRNodeAsSkippedByHydration(native);\n    } else if (ngDevMode) {\n      // If this is not a component host, throw an error.\n      // Hydration can be skipped on per-component basis only.\n      throw invalidSkipHydrationHost(native);\n    }\n  }\n  return native;\n}\nfunction enableLocateOrCreateElementNodeImpl() {\n  _locateOrCreateElementNode = locateOrCreateElementNodeImpl;\n}\n\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  ngDevMode && assertTNodeCreationIndex(lView, index);\n  const tView = lView[TVIEW];\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = tView.firstCreatePass ? directiveHostFirstCreatePass(adjustedIndex, lView, 8 /* TNodeType.ElementContainer */, 'ng-container', findDirectiveDefMatches, getBindingsEnabled(), attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  elementLikeStartShared(tNode, lView, index, 'ng-container', _locateOrCreateElementContainerNode);\n  if (isDirectiveHost(tNode)) {\n    const tView = lView[TVIEW];\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementContainerStart;\n}\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerEnd() {\n  const tView = getTView();\n  const initialTNode = getCurrentTNode();\n  ngDevMode && assertDefined(initialTNode, 'No parent node to close.');\n  const currentTNode = elementLikeEndShared(initialTNode);\n  if (tView.firstCreatePass) {\n    directiveHostEndFirstCreatePass(tView, currentTNode);\n  }\n  ngDevMode && assertTNodeType(currentTNode, 8 /* TNodeType.ElementContainer */);\n  return ɵɵelementContainerEnd;\n}\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\n  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n  ɵɵelementContainerEnd();\n  return ɵɵelementContainer;\n}\n/**\n * Creates a DOM-only logical container for other nodes (<ng-container>) backed by a comment node\n * in the DOM. The host node will *not* match any directives.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵdomElementContainerStart(index, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  ngDevMode && assertTNodeCreationIndex(lView, index);\n  const tView = lView[TVIEW];\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = tView.firstCreatePass ? domOnlyFirstCreatePass(adjustedIndex, tView, 8 /* TNodeType.ElementContainer */, 'ng-container', attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  elementLikeStartShared(tNode, lView, index, 'ng-container', _locateOrCreateElementContainerNode);\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵdomElementContainerStart;\n}\n/**\n * Mark the end of a directiveless <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵdomElementContainerEnd() {\n  const initialTNode = getCurrentTNode();\n  ngDevMode && assertDefined(initialTNode, 'No parent node to close.');\n  const currentTNode = elementLikeEndShared(initialTNode);\n  ngDevMode && assertTNodeType(currentTNode, 8 /* TNodeType.ElementContainer */);\n  return ɵɵelementContainerEnd;\n}\n/**\n * Creates an empty logical container using {@link domElementContainerStart}\n * and {@link domElementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵdomElementContainer(index, attrsIndex, localRefsIndex) {\n  ɵɵdomElementContainerStart(index, attrsIndex, localRefsIndex);\n  ɵɵdomElementContainerEnd();\n  return ɵɵdomElementContainer;\n}\nlet _locateOrCreateElementContainerNode = (tView, lView, tNode, commentText, index) => {\n  lastNodeWasCreated(true);\n  return createCommentNode(lView[RENDERER], ngDevMode ? commentText : '');\n};\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of comment nodes that\n * represent <ng-container>'s anchor.\n */\nfunction locateOrCreateElementContainerNode(tView, lView, tNode, commentText, index) {\n  let comment;\n  const isNodeCreationMode = !canHydrateNode(lView, tNode);\n  lastNodeWasCreated(isNodeCreationMode);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createCommentNode(lView[RENDERER], ngDevMode ? commentText : '');\n  }\n  // Hydration mode, looking up existing elements in DOM.\n  const hydrationInfo = lView[HYDRATION];\n  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n  const ngContainerSize = getNgContainerSize(hydrationInfo, index);\n  ngDevMode && assertNumber(ngContainerSize, 'Unexpected state: hydrating an <ng-container>, ' + 'but no hydration info is available.');\n  setSegmentHead(hydrationInfo, index, currentRNode);\n  comment = siblingAfter(ngContainerSize, currentRNode);\n  if (ngDevMode) {\n    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n    markRNodeAsClaimedByHydration(comment);\n  }\n  return comment;\n}\nfunction enableLocateOrCreateElementContainerNodeImpl() {\n  _locateOrCreateElementContainerNode = locateOrCreateElementContainerNode;\n}\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nfunction ɵɵgetCurrentView() {\n  return getLView();\n}\n\n/**\n * Update a DOM property on an element.\n *\n * @param propName Name of property..\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n *  (e.g. `domProperty('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵdomProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    setDomProperty(tNode, lView, propName, value, lView[RENDERER], sanitizer);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵdomProperty;\n}\n// TODO(crisbeto): try to fold this into `domProperty`. Main difference is the renderer.\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    setDomProperty(tNode, lView, propName, value, renderer, sanitizer);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵsyntheticHostProperty;\n}\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\nfunction plural(val) {\n  const i = Math.floor(Math.abs(val)),\n    v = val.toString().replace(/^[^.]*\\.?/, '').length;\n  if (i === 1 && v === 0) return 1;\n  return 5;\n}\nvar localeEn = [\"en\", [[\"a\", \"p\"], [\"AM\", \"PM\"], u], [[\"AM\", \"PM\"], u, u], [[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"], [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]], u, [[\"B\", \"A\"], [\"BC\", \"AD\"], [\"Before Christ\", \"Anno Domini\"]], 0, [6, 0], [\"M/d/yy\", \"MMM d, y\", \"MMMM d, y\", \"EEEE, MMMM d, y\"], [\"h:mm a\", \"h:mm:ss a\", \"h:mm:ss a z\", \"h:mm:ss a zzzz\"], [\"{1}, {0}\", u, \"{1} 'at' {0}\", u], [\".\", \",\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0%\", \"¤#,##0.00\", \"#E0\"], \"USD\", \"$\", \"US Dollar\", {}, \"ltr\", plural];\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA = {};\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n/format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nfunction registerLocaleData(data, localeId, extraData) {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n  LOCALE_DATA[localeId] = data;\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n */\nfunction findLocaleData(locale) {\n  const normalizedLocale = normalizeLocale(locale);\n  let match = getLocaleData(normalizedLocale);\n  if (match) {\n    return match;\n  }\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = getLocaleData(parentLocale);\n  if (match) {\n    return match;\n  }\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n  throw new RuntimeError(701 /* RuntimeErrorCode.MISSING_LOCALE_DATA */, ngDevMode && `Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nfunction getLocaleCurrencyCode(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyCode] || null;\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see {@link NgPlural}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n */\nfunction getLocalePluralCase(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nfunction getLocaleData(normalizedLocale) {\n  if (!(normalizedLocale in LOCALE_DATA)) {\n    LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];\n  }\n  return LOCALE_DATA[normalizedLocale];\n}\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nfunction unregisterAllLocaleData() {\n  LOCALE_DATA = {};\n}\n/**\n * Index of each type of locale data from the locale data array\n */\nvar LocaleDataIndex = /*#__PURE__*/function (LocaleDataIndex) {\n  LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n  LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n  LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n  LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\n  LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\n  LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\n  LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\n  LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\n  return LocaleDataIndex;\n}(LocaleDataIndex || {});\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale) {\n  return locale.toLowerCase().replace(/_/g, '-');\n}\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n/**\n * Returns the plural case based on the locale\n */\nfunction getPluralCase(value, locale) {\n  const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n  const result = pluralMapping[plural];\n  return result !== undefined ? result : 'other';\n}\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nconst DEFAULT_LOCALE_ID = 'en-US';\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nconst USD_CURRENCY_CODE = 'USD';\n\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ELEMENT_MARKER = {\n  marker: 'element'\n};\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ICU_MARKER = {\n  marker: 'ICU'\n};\n/**\n * See `I18nCreateOpCodes`\n */\nvar I18nCreateOpCode = /*#__PURE__*/function (I18nCreateOpCode) {\n  /**\n   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n   * `COMMENT`.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"SHIFT\"] = 2] = \"SHIFT\";\n  /**\n   * Should the node be appended to parent immediately after creation.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"APPEND_EAGERLY\"] = 1] = \"APPEND_EAGERLY\";\n  /**\n   * If set the node should be comment (rather than a text) node.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"COMMENT\"] = 2] = \"COMMENT\";\n  return I18nCreateOpCode;\n}(I18nCreateOpCode || {});\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID$1 = DEFAULT_LOCALE_ID;\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nfunction setLocaleId(localeId) {\n  ngDevMode && assertDefined(localeId, `Expected localeId to be defined`);\n  if (typeof localeId === 'string') {\n    LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, '-');\n  }\n}\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nfunction getLocaleId() {\n  return LOCALE_ID$1;\n}\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\nlet changeMask = 0b0;\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\nlet changeMaskCounter = 0;\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\nfunction setMaskBit(hasChange) {\n  if (hasChange) {\n    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);\n  }\n  changeMaskCounter++;\n}\nfunction applyI18n(tView, lView, index) {\n  if (changeMaskCounter > 0) {\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const tI18n = tView.data[index];\n    // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;\n    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n  }\n  // Reset changeMask & maskBit to default for the next update cycle\n  changeMask = 0b0;\n  changeMaskCounter = 0;\n}\nfunction createNodeWithoutHydration(lView, textOrName, nodeType) {\n  const renderer = lView[RENDERER];\n  switch (nodeType) {\n    case Node.COMMENT_NODE:\n      return createCommentNode(renderer, textOrName);\n    case Node.TEXT_NODE:\n      return createTextNode(renderer, textOrName);\n    case Node.ELEMENT_NODE:\n      return createElementNode(renderer, textOrName, null);\n  }\n}\nlet _locateOrCreateNode = (lView, index, textOrName, nodeType) => {\n  lastNodeWasCreated(true);\n  return createNodeWithoutHydration(lView, textOrName, nodeType);\n};\nfunction locateOrCreateNodeImpl(lView, index, textOrName, nodeType) {\n  const hydrationInfo = lView[HYDRATION];\n  const noOffsetIndex = index - HEADER_OFFSET;\n  const isNodeCreationMode = !isI18nHydrationSupportEnabled() || !hydrationInfo || isInSkipHydrationBlock$1() || isDisconnectedNode$1(hydrationInfo, noOffsetIndex);\n  lastNodeWasCreated(isNodeCreationMode);\n  if (isNodeCreationMode) {\n    return createNodeWithoutHydration(lView, textOrName, nodeType);\n  }\n  const native = locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex);\n  // TODO: Improve error handling\n  //\n  // Other hydration paths use validateMatchingNode() in order to provide\n  // detailed information in development mode about the expected DOM.\n  // However, not every node in an i18n block has a TNode. Instead, we\n  // need to be able to use the AST to generate a similar message.\n  ngDevMode && assertDefined(native, 'expected native element');\n  ngDevMode && assertEqual(native.nodeType, nodeType, 'expected matching nodeType');\n  ngDevMode && nodeType === Node.ELEMENT_NODE && assertEqual(native.tagName.toLowerCase(), textOrName.toLowerCase(), 'expecting matching tagName');\n  ngDevMode && markRNodeAsClaimedByHydration(native);\n  return native;\n}\nfunction enableLocateOrCreateI18nNodeImpl() {\n  _locateOrCreateNode = locateOrCreateNodeImpl;\n}\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\nfunction applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {\n  const renderer = lView[RENDERER];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    let rNode = lView[index];\n    let lastNodeWasCreated = false;\n    if (rNode === null) {\n      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n      // case which was already instantiated, no need to create new DOM nodes.\n      rNode = lView[index] = _locateOrCreateNode(lView, index, text, isComment ? Node.COMMENT_NODE : Node.TEXT_NODE);\n      lastNodeWasCreated = wasLastNodeCreated();\n    }\n    if (appendNow && parentRNode !== null && lastNodeWasCreated) {\n      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n    }\n  }\n}\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\nfunction applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {\n  ngDevMode && assertDomNode(anchorRNode);\n  const renderer = lView[RENDERER];\n  // `rootIdx` represents the node into which all inserts happen.\n  let rootIdx = null;\n  // `rootRNode` represents the real node into which we insert. This can be different from\n  // `lView[rootIdx]` if we have projection.\n  //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n  //    LView which has no parent.)\n  //  - `RElement` The element representing the root after taking projection into account.\n  let rootRNode;\n  for (let i = 0; i < mutableOpCodes.length; i++) {\n    const opCode = mutableOpCodes[i];\n    if (typeof opCode == 'string') {\n      const textNodeIndex = mutableOpCodes[++i];\n      if (lView[textNodeIndex] === null) {\n        ngDevMode && assertIndexInRange(lView, textNodeIndex);\n        lView[textNodeIndex] = _locateOrCreateNode(lView, textNodeIndex, opCode, Node.TEXT_NODE);\n      }\n    } else if (typeof opCode == 'number') {\n      switch (opCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */) {\n        case 0 /* IcuCreateOpCode.AppendChild */:\n          const parentIdx = getParentFromIcuCreateOpCode(opCode);\n          if (rootIdx === null) {\n            // The first operation should save the `rootIdx` because the first operation\n            // must insert into the root. (Only subsequent operations can insert into a dynamic\n            // parent)\n            rootIdx = parentIdx;\n            rootRNode = renderer.parentNode(anchorRNode);\n          }\n          let insertInFrontOf;\n          let parentRNode;\n          if (parentIdx === rootIdx) {\n            insertInFrontOf = anchorRNode;\n            parentRNode = rootRNode;\n          } else {\n            insertInFrontOf = null;\n            parentRNode = unwrapRNode(lView[parentIdx]);\n          }\n          // FIXME(misko): Refactor with `processI18nText`\n          if (parentRNode !== null) {\n            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n            // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n            // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n            // get picked up and added.\n            ngDevMode && assertDomNode(parentRNode);\n            const refIdx = getRefFromIcuCreateOpCode(opCode);\n            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n            // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n            // which can't have components.\n            const child = lView[refIdx];\n            ngDevMode && assertDomNode(child);\n            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n            const tIcu = getTIcu(tView, refIdx);\n            if (tIcu !== null && typeof tIcu === 'object') {\n              // If we just added a comment node which has ICU then that ICU may have already been\n              // rendered and therefore we need to re-add it here.\n              ngDevMode && assertTIcu(tIcu);\n              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n              if (caseIndex !== null) {\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n              }\n            }\n          }\n          break;\n        case 1 /* IcuCreateOpCode.Attr */:\n          const elementNodeIndex = opCode >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n          const attrName = mutableOpCodes[++i];\n          const attrValue = mutableOpCodes[++i];\n          // This code is used for ICU expressions only, since we don't support\n          // directives/components in ICUs, we don't need to worry about inputs here\n          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);\n          break;\n        default:\n          if (ngDevMode) {\n            throw new RuntimeError(700 /* RuntimeErrorCode.INVALID_I18N_STRUCTURE */, `Unable to determine the type of mutate operation for \"${opCode}\"`);\n          }\n      }\n    } else {\n      switch (opCode) {\n        case ICU_MARKER:\n          const commentValue = mutableOpCodes[++i];\n          const commentNodeIndex = mutableOpCodes[++i];\n          if (lView[commentNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n            const commentRNode = lView[commentNodeIndex] = _locateOrCreateNode(lView, commentNodeIndex, commentValue, Node.COMMENT_NODE);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(commentRNode, lView);\n          }\n          break;\n        case ELEMENT_MARKER:\n          const tagName = mutableOpCodes[++i];\n          const elementNodeIndex = mutableOpCodes[++i];\n          if (lView[elementNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof tagName, 'string', `Expected \"${tagName}\" to be an element node tag name`);\n            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n            const elementRNode = lView[elementNodeIndex] = _locateOrCreateNode(lView, elementNodeIndex, tagName, Node.ELEMENT_NODE);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(elementRNode, lView);\n          }\n          break;\n        default:\n          ngDevMode && throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n}\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\nfunction applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    const checkBit = updateOpCodes[i];\n    // Number of opCodes to skip until next set of update codes\n    const skipCodes = updateOpCodes[++i];\n    if (checkBit & changeMask) {\n      // The value has been updated since last checked\n      let value = '';\n      for (let j = i + 1; j <= i + skipCodes; j++) {\n        const opCode = updateOpCodes[j];\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // Negative opCode represent `i18nExp` values offset.\n            value += renderStringify(lView[bindingsStartIndex - opCode]);\n          } else {\n            const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n            switch (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) {\n              case 1 /* I18nUpdateOpCode.Attr */:\n                const propName = updateOpCodes[++j];\n                const sanitizeFn = updateOpCodes[++j];\n                const tNodeOrTagName = tView.data[nodeIndex];\n                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                if (typeof tNodeOrTagName === 'string') {\n                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                  // not have TNode), in which case we know that there are no directives, and hence\n                  // we use attribute setting.\n                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);\n                } else {\n                  setPropertyAndInputs(tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn);\n                }\n                break;\n              case 0 /* I18nUpdateOpCode.Text */:\n                const rText = lView[nodeIndex];\n                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                break;\n              case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);\n                break;\n              case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);\n                break;\n            }\n          }\n        }\n      }\n    } else {\n      const opCode = updateOpCodes[i + 1];\n      if (opCode > 0 && (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) === 3 /* I18nUpdateOpCode.IcuUpdate */) {\n        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n        // we still need to execute `icuUpdateCase` because the case has changed recently due to\n        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n        // pairs.)\n        const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n        const tIcu = getTIcu(tView, nodeIndex);\n        const currentIndex = lView[tIcu.currentCaseLViewIndex];\n        if (currentIndex < 0) {\n          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n        }\n      }\n    }\n    i += skipCodes;\n  }\n}\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\nfunction applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {\n  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n  if (activeCaseIndex !== null) {\n    let mask = changeMask;\n    if (activeCaseIndex < 0) {\n      // Clear the flag.\n      // Negative number means that the ICU was freshly created and we need to force the update.\n      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n      // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n      mask = -1;\n    }\n    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n  }\n}\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\nfunction applyIcuSwitchCase(tView, tIcu, lView, value) {\n  // Rebuild a new case for this ICU\n  const caseIndex = getCaseIndex(tIcu, value);\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== caseIndex) {\n    applyIcuSwitchCaseRemove(tView, tIcu, lView);\n    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n    if (caseIndex !== null) {\n      // Add the nodes for the new case\n      const anchorRNode = lView[tIcu.anchorIdx];\n      if (anchorRNode) {\n        ngDevMode && assertDomNode(anchorRNode);\n        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n      }\n      claimDehydratedIcuCase(lView, tIcu.anchorIdx, caseIndex);\n    }\n  }\n}\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\nfunction applyIcuSwitchCaseRemove(tView, tIcu, lView) {\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== null) {\n    const removeCodes = tIcu.remove[activeCaseIndex];\n    for (let i = 0; i < removeCodes.length; i++) {\n      const nodeOrIcuIndex = removeCodes[i];\n      if (nodeOrIcuIndex > 0) {\n        // Positive numbers are `RNode`s.\n        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n      } else {\n        // Negative numbers are ICUs\n        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);\n      }\n    }\n  }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n  let index = icuExpression.cases.indexOf(bindingValue);\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case 1 /* IcuType.plural */:\n        {\n          const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n          index = icuExpression.cases.indexOf(resolvedCase);\n          if (index === -1 && resolvedCase !== 'other') {\n            index = icuExpression.cases.indexOf('other');\n          }\n          break;\n        }\n      case 0 /* IcuType.select */:\n        {\n          index = icuExpression.cases.indexOf('other');\n          break;\n        }\n    }\n  }\n  return index === -1 ? null : index;\n}\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction i18nCreateOpCodesToString(opcodes) {\n  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);\n    if (appendNow) {\n      lines.push(`parent.appendChild(lView[${index}]);`);\n    }\n  }\n  return lines;\n}\n/**\n * Converts `I18nUpdateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nUpdateOpCodes` if attached as a method.\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\n */\nfunction i18nUpdateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n  function consumeOpCode(value) {\n    const ref = value >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n    const opCode = value & 3 /* I18nUpdateOpCode.MASK_OPCODE */;\n    switch (opCode) {\n      case 0 /* I18nUpdateOpCode.Text */:\n        return `(lView[${ref}] as Text).textContent = $$$`;\n      case 1 /* I18nUpdateOpCode.Attr */:\n        const attrName = parser.consumeString();\n        const sanitizationFn = parser.consumeFunction();\n        const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n      case 2 /* I18nUpdateOpCode.IcuSwitch */:\n        return `icuSwitchCase(${ref}, $$$)`;\n      case 3 /* I18nUpdateOpCode.IcuUpdate */:\n        return `icuUpdateCase(${ref})`;\n    }\n    throw new Error('unexpected OpCode');\n  }\n  while (parser.hasMore()) {\n    let mask = parser.consumeNumber();\n    let size = parser.consumeNumber();\n    const end = parser.i + size;\n    const statements = [];\n    let statement = '';\n    while (parser.i < end) {\n      let value = parser.consumeNumberOrString();\n      if (typeof value === 'string') {\n        statement += value;\n      } else if (value < 0) {\n        // Negative numbers are ref indexes\n        // Here `i` refers to current binding index. It is to signify that the value is relative,\n        // rather than absolute.\n        statement += '${lView[i' + value + ']}';\n      } else {\n        // Positive numbers are operations.\n        const opCodeText = consumeOpCode(value);\n        statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n        statement = '';\n      }\n    }\n    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n  }\n  return lines;\n}\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction icuCreateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n  function consumeOpCode(opCode) {\n    const parent = getParentFromIcuCreateOpCode(opCode);\n    const ref = getRefFromIcuCreateOpCode(opCode);\n    switch (getInstructionFromIcuCreateOpCode(opCode)) {\n      case 0 /* IcuCreateOpCode.AppendChild */:\n        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n      case 1 /* IcuCreateOpCode.Attr */:\n        return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\n    }\n    throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n  }\n  let lastRef = -1;\n  while (parser.hasMore()) {\n    let value = parser.consumeNumberStringOrMarker();\n    if (value === ICU_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n    } else if (value === ELEMENT_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n    } else if (typeof value === 'string') {\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n    } else if (typeof value === 'number') {\n      const line = consumeOpCode(value);\n      line && lines.push(line);\n    } else {\n      throw new Error('Unexpected value');\n    }\n  }\n  return lines;\n}\n/**\n * Converts `I18nRemoveOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nRemoveOpCodes` if attached as a method.\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\n */\nfunction i18nRemoveOpCodesToString(opcodes) {\n  const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n  for (let i = 0; i < removeCodes.length; i++) {\n    const nodeOrIcuIndex = removeCodes[i];\n    if (nodeOrIcuIndex > 0) {\n      // Positive numbers are `RNode`s.\n      lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n    } else {\n      // Negative numbers are ICUs\n      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n    }\n  }\n  return lines;\n}\nclass OpCodeParser {\n  i = 0;\n  codes;\n  constructor(codes) {\n    this.codes = codes;\n  }\n  hasMore() {\n    return this.i < this.codes.length;\n  }\n  consumeNumber() {\n    let value = this.codes[this.i++];\n    assertNumber(value, 'expecting number in OpCode');\n    return value;\n  }\n  consumeString() {\n    let value = this.codes[this.i++];\n    assertString(value, 'expecting string in OpCode');\n    return value;\n  }\n  consumeFunction() {\n    let value = this.codes[this.i++];\n    if (value === null || typeof value === 'function') {\n      return value;\n    }\n    throw new Error('expecting function in OpCode');\n  }\n  consumeNumberOrString() {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string') {\n      return value;\n    }\n    assertNumber(value, 'expecting number or string in OpCode');\n    return value;\n  }\n  consumeNumberStringOrMarker() {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER || value == ELEMENT_MARKER) {\n      return value;\n    }\n    assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n    return value;\n  }\n}\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/**\n * Angular uses the special entity &ngsp; as a placeholder for non-removable space.\n * It's replaced by the 0xE500 PUA (Private Use Areas) unicode character and later on replaced by a\n * space.\n * We are re-implementing the same idea since translations might contain this special character.\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value) {\n  return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n/**\n * Patch a `debug` property getter on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debugGetter Getter returning a value to patch\n */\nfunction attachDebugGetter(obj, debugGetter) {\n  if (ngDevMode) {\n    Object.defineProperty(obj, 'debug', {\n      get: debugGetter,\n      enumerable: false\n    });\n  } else {\n    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n  }\n}\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\nfunction i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {\n  const rootTNode = getCurrentParentTNode();\n  const createOpCodes = [];\n  const updateOpCodes = [];\n  const existingTNodeStack = [[]];\n  const astStack = [[]];\n  if (ngDevMode) {\n    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  message = getTranslationForTemplate(message, subTemplateIndex);\n  const msgParts = replaceNgsp(message).split(PH_REGEXP);\n  for (let i = 0; i < msgParts.length; i++) {\n    let value = msgParts[i];\n    if ((i & 1) === 0) {\n      // Even indexes are text (including bindings & ICU expressions)\n      const parts = i18nParseTextIntoPartsAndICU(value);\n      for (let j = 0; j < parts.length; j++) {\n        let part = parts[j];\n        if ((j & 1) === 0) {\n          // `j` is odd therefore `part` is string\n          const text = part;\n          ngDevMode && assertString(text, 'Parsed ICU part should be string');\n          if (text !== '') {\n            i18nStartFirstCreatePassProcessTextNode(astStack[0], tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n          }\n        } else {\n          // `j` is Even therefor `part` is an `ICUExpression`\n          const icuExpression = part;\n          // Verify that ICU expression has the right shape. Translations might contain invalid\n          // constructions (while original messages were correct), so ICU parsing at runtime may\n          // not succeed (thus `icuExpression` remains a string).\n          // Note: we intentionally retain the error here by not using `ngDevMode`, because\n          // the value can change based on the locale and users aren't guaranteed to hit\n          // an invalid string while they're developing.\n          if (typeof icuExpression !== 'object') {\n            throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n          }\n          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n          const icuNodeIndex = icuContainerTNode.index;\n          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n          icuStart(astStack[0], tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n        }\n      }\n    } else {\n      // Odd indexes are placeholders (elements and sub-templates)\n      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n      const isClosing = value.charCodeAt(0) === 47 /* CharCode.SLASH */;\n      const type = value.charCodeAt(isClosing ? 1 : 0);\n      ngDevMode && assertOneOf(type, 42 /* CharCode.STAR */, 35 /* CharCode.HASH */);\n      const index = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));\n      if (isClosing) {\n        existingTNodeStack.shift();\n        astStack.shift();\n        setCurrentTNode(getCurrentParentTNode(), false);\n      } else {\n        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n        existingTNodeStack.unshift([]);\n        setCurrentTNode(tNode, true);\n        const placeholderNode = {\n          kind: 2 /* I18nNodeKind.PLACEHOLDER */,\n          index,\n          children: [],\n          type: type === 35 /* CharCode.HASH */ ? 0 /* I18nPlaceholderType.ELEMENT */ : 1 /* I18nPlaceholderType.SUBTEMPLATE */\n        };\n        astStack[0].push(placeholderNode);\n        astStack.unshift(placeholderNode.children);\n      }\n    }\n  }\n  tView.data[index] = {\n    create: createOpCodes,\n    update: updateOpCodes,\n    ast: astStack[0],\n    parentTNodeIndex\n  };\n}\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\nfunction createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {\n  const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n  let parentTNode = getCurrentParentTNode();\n  if (rootTNode === parentTNode) {\n    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n    // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n    parentTNode = null;\n  }\n  if (parentTNode === null) {\n    // If we don't have a parent that means that we can eagerly add nodes.\n    // If we have a parent than these nodes can't be added now (as the parent has not been created\n    // yet) and instead the `parentTNode` is responsible for adding it. See\n    // `TNode.insertBeforeIndex`\n    opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n  }\n  if (isICU) {\n    opCode |= I18nCreateOpCode.COMMENT;\n    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n  }\n  createOpCodes.push(opCode, text === null ? '' : text);\n  // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n  // bindings are.\n  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 /* TNodeType.Icu */ : 1 /* TNodeType.Text */, text === null ? ngDevMode ? '{{?}}' : '' : text, null);\n  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n  const tNodeIdx = tNode.index;\n  setCurrentTNode(tNode, false /* Text nodes are self closing */);\n  if (parentTNode !== null && rootTNode !== parentTNode) {\n    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n    // We have to make sure to add ourselves to the parent.\n    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n  }\n  return tNode;\n}\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\nfunction i18nStartFirstCreatePassProcessTextNode(ast, tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {\n  const hasBinding = text.match(BINDING_REGEXP);\n  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n  const index = tNode.index;\n  if (hasBinding) {\n    generateBindingUpdateOpCodes(updateOpCodes, text, index, null, 0, null);\n  }\n  ast.push({\n    kind: 0 /* I18nNodeKind.TEXT */,\n    index\n  });\n}\n/**\n * See `i18nAttributes` above.\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n  const previousElement = getCurrentTNode();\n  const previousElementIndex = previousElement.index;\n  const updateOpCodes = [];\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  if (tView.firstCreatePass && tView.data[index] === null) {\n    for (let i = 0; i < values.length; i += 2) {\n      const attrName = values[i];\n      const message = values[i + 1];\n      if (message !== '') {\n        // Check if attribute value contains an ICU and throw an error if that's the case.\n        // ICUs in element attributes are not supported.\n        // Note: we intentionally retain the error here by not using `ngDevMode`, because\n        // the `value` can change based on the locale and users aren't guaranteed to hit\n        // an invalid string while they're developing.\n        if (ICU_REGEXP.test(message)) {\n          throw new Error(`ICU expressions are not supported in attributes. Message: \"${message}\".`);\n        }\n        // i18n attributes that hit this code path are guaranteed to have bindings, because\n        // the compiler treats static i18n attributes as regular attribute bindings.\n        // Since this may not be the first i18n attribute on this element we need to pass in how\n        // many previous bindings there have already been.\n        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);\n      }\n    }\n    tView.data[index] = updateOpCodes;\n  }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\nfunction generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {\n  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n  const maskIndex = updateOpCodes.length; // Location of mask\n  const sizeIndex = maskIndex + 1; // location of size for skipping\n  updateOpCodes.push(null, null); // Alloc space for mask and size\n  const startIndex = maskIndex + 2; // location of first allocation.\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  const textParts = str.split(BINDING_REGEXP);\n  let mask = 0;\n  for (let j = 0; j < textParts.length; j++) {\n    const textValue = textParts[j];\n    if (j & 1) {\n      // Odd indexes are bindings\n      const bindingIndex = bindingStart + parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n  updateOpCodes.push(destinationNode << 2 /* I18nUpdateOpCode.SHIFT_REF */ | (attrName ? 1 /* I18nUpdateOpCode.Attr */ : 0 /* I18nUpdateOpCode.Text */));\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n  updateOpCodes[maskIndex] = mask;\n  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n  return mask;\n}\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\nfunction countBindings(opCodes) {\n  let count = 0;\n  for (let i = 0; i < opCodes.length; i++) {\n    const opCode = opCodes[i];\n    // Bindings are negative numbers.\n    if (typeof opCode === 'number' && opCode < 0) {\n      count++;\n    }\n  }\n  return count;\n}\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex) {\n  return 1 << Math.min(bindingIndex, 31);\n}\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message) {\n  let match;\n  let res = '';\n  let index = 0;\n  let inTemplate = false;\n  let tagMatched;\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n  res += message.slice(index);\n  return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```html\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n  if (isRootTemplateMessage(subTemplateIndex)) {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\nfunction icuStart(ast, tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {\n  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n  let bindingMask = 0;\n  const tIcu = {\n    type: icuExpression.type,\n    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n    anchorIdx,\n    cases: [],\n    create: [],\n    remove: [],\n    update: []\n  };\n  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n  setTIcu(tView, anchorIdx, tIcu);\n  const values = icuExpression.values;\n  const cases = [];\n  for (let i = 0; i < values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    const valueArr = values[i];\n    const nestedIcus = [];\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        const icuIndex = nestedIcus.push(value) - 1;\n        // Replace nested ICU expression by a comment node\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n    const caseAst = [];\n    cases.push(caseAst);\n    bindingMask = parseIcuCase(caseAst, tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;\n  }\n  if (bindingMask) {\n    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n  }\n  ast.push({\n    kind: 3 /* I18nNodeKind.ICU */,\n    index: anchorIdx,\n    cases,\n    currentCaseLViewIndex: tIcu.currentCaseLViewIndex\n  });\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nfunction parseICUBlock(pattern) {\n  const cases = [];\n  const values = [];\n  let icuType = 1 /* IcuType.plural */;\n  let mainBinding = 0;\n  pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n    if (type === 'select') {\n      icuType = 0 /* IcuType.select */;\n    } else {\n      icuType = 1 /* IcuType.plural */;\n    }\n    mainBinding = parseInt(binding.slice(1), 10);\n    return '';\n  });\n  const parts = i18nParseTextIntoPartsAndICU(pattern);\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  for (let pos = 0; pos < parts.length;) {\n    let key = parts[pos++].trim();\n    if (icuType === 1 /* IcuType.plural */) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n    if (key.length) {\n      cases.push(key);\n    }\n    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);\n    if (cases.length > values.length) {\n      values.push(blocks);\n    }\n  }\n  // TODO(ocombe): support ICU expressions in attributes, see #21615\n  return {\n    type: icuType,\n    mainBinding: mainBinding,\n    cases,\n    values\n  };\n}\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\nfunction i18nParseTextIntoPartsAndICU(pattern) {\n  if (!pattern) {\n    return [];\n  }\n  let prevPos = 0;\n  const braceStack = [];\n  const results = [];\n  const braces = /[{}]/g;\n  // lastIndex doesn't get set to 0 so we have to.\n  braces.lastIndex = 0;\n  let match;\n  while (match = braces.exec(pattern)) {\n    const pos = match.index;\n    if (match[0] == '}') {\n      braceStack.pop();\n      if (braceStack.length == 0) {\n        // End of the block.\n        const block = pattern.substring(prevPos, pos);\n        if (ICU_BLOCK_REGEXP.test(block)) {\n          results.push(parseICUBlock(block));\n        } else {\n          results.push(block);\n        }\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n  const substring = pattern.substring(prevPos);\n  results.push(substring);\n  return results;\n}\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\nfunction parseIcuCase(ast, tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {\n  const create = [];\n  const remove = [];\n  const update = [];\n  if (ngDevMode) {\n    attachDebugGetter(create, icuCreateOpCodesToString);\n    attachDebugGetter(remove, i18nRemoveOpCodesToString);\n    attachDebugGetter(update, i18nUpdateOpCodesToString);\n  }\n  tIcu.cases.push(caseName);\n  tIcu.create.push(create);\n  tIcu.remove.push(remove);\n  tIcu.update.push(update);\n  const inertBodyHelper = getInertBodyHelper(getDocument());\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;\n  if (inertRootNode) {\n    return walkIcuTree(ast, tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);\n  } else {\n    return 0;\n  }\n}\nfunction walkIcuTree(ast, tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {\n  let bindingMask = 0;\n  let currentNode = parentNode.firstChild;\n  while (currentNode) {\n    const newIndex = allocExpando(tView, lView, 1, null);\n    switch (currentNode.nodeType) {\n      case Node.ELEMENT_NODE:\n        const element = currentNode;\n        const tagName = element.tagName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n          tView.data[newIndex] = tagName;\n          const elAttrs = element.attributes;\n          for (let i = 0; i < elAttrs.length; i++) {\n            const attr = elAttrs.item(i);\n            const lowerAttrName = attr.name.toLowerCase();\n            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n            // we assume the input string is safe, unless it's using a binding\n            if (hasBinding) {\n              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                if (URI_ATTRS[lowerAttrName]) {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                } else {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                }\n              } else {\n                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ` + `${lowerAttrName} on element ${tagName} ` + `(see ${XSS_SECURITY_URL})`);\n              }\n            } else {\n              addCreateAttribute(create, newIndex, attr);\n            }\n          }\n          const elementNode = {\n            kind: 1 /* I18nNodeKind.ELEMENT */,\n            index: newIndex,\n            children: []\n          };\n          ast.push(elementNode);\n          // Parse the children of this node (if any)\n          bindingMask = walkIcuTree(elementNode.children, tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;\n          addRemoveNode(remove, newIndex, depth);\n        }\n        break;\n      case Node.TEXT_NODE:\n        const value = currentNode.textContent || '';\n        const hasBinding = value.match(BINDING_REGEXP);\n        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n        addRemoveNode(remove, newIndex, depth);\n        if (hasBinding) {\n          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n        }\n        ast.push({\n          kind: 0 /* I18nNodeKind.TEXT */,\n          index: newIndex\n        });\n        break;\n      case Node.COMMENT_NODE:\n        // Check if the comment node is a placeholder for a nested ICU\n        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n        if (isNestedIcu) {\n          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n          const icuExpression = nestedIcus[nestedIcuIndex];\n          // Create the comment node that will anchor the ICU expression\n          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);\n          icuStart(ast, tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n          addRemoveNestedIcu(remove, newIndex, depth);\n        }\n        break;\n    }\n    currentNode = currentNode.nextSibling;\n  }\n  return bindingMask;\n}\nfunction addRemoveNode(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(index);\n  }\n}\nfunction addRemoveNestedIcu(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(~index); // remove ICU at `index`\n    remove.push(index); // remove ICU comment at `index`\n  }\n}\nfunction addUpdateIcuSwitch(update, icuExpression, index) {\n  update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 2 /* I18nUpdateOpCode.IcuSwitch */);\n}\nfunction addUpdateIcuUpdate(update, bindingMask, index) {\n  update.push(bindingMask, 1, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 3 /* I18nUpdateOpCode.IcuUpdate */);\n}\nfunction addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {\n  if (marker !== null) {\n    create.push(marker);\n  }\n  create.push(text, createAtIdx, icuCreateOpCode(0 /* IcuCreateOpCode.AppendChild */, appendToParentIdx, createAtIdx));\n}\nfunction addCreateAttribute(create, newIndex, attr) {\n  create.push(newIndex << 1 /* IcuCreateOpCode.SHIFT_REF */ | 1 /* IcuCreateOpCode.Attr */, attr.name, attr.value);\n}\n\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction i18nPostprocess(message, replacements = {}) {\n  /**\n   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n   *\n   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n   * front of �#6�. The post processing step restores the right order by keeping track of the\n   * template id stack and looks for placeholders that belong to the currently active template.\n   */\n  let result = message;\n  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n    const matches = {};\n    const templateIdsStack = [ROOT_TEMPLATE_ID];\n    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\n      const content = phs || tmpl;\n      const placeholders = matches[content] || [];\n      if (!placeholders.length) {\n        content.split('|').forEach(placeholder => {\n          const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n          const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n          const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n          placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n        });\n        matches[content] = placeholders;\n      }\n      if (!placeholders.length) {\n        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n      }\n      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n      let idx = 0;\n      // find placeholder index that matches current template id\n      for (let i = 0; i < placeholders.length; i++) {\n        if (placeholders[i][0] === currentTemplateId) {\n          idx = i;\n          break;\n        }\n      }\n      // update template id stack based on the current tag extracted\n      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n      if (isCloseTemplateTag) {\n        templateIdsStack.pop();\n      } else if (currentTemplateId !== templateId) {\n        templateIdsStack.push(templateId);\n      }\n      // remove processed tag from the list\n      placeholders.splice(idx, 1);\n      return placeholder;\n    });\n  }\n  // return current result if no replacements specified\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n  /**\n   * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n   */\n  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n  /**\n   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n   */\n  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {\n    return replacements.hasOwnProperty(key) ? replacements[key] : match;\n  });\n  /**\n   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n   * multiple ICUs have the same placeholder name\n   */\n  result = result.replace(PP_ICUS_REGEXP, (match, key) => {\n    if (replacements.hasOwnProperty(key)) {\n      const list = replacements[key];\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n      return list.shift();\n    }\n    return match;\n  });\n  return result;\n}\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const message = getConstant(tView.consts, messageIndex);\n  const parentTNode = getCurrentParentTNode();\n  if (tView.firstCreatePass) {\n    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);\n  }\n  // Set a flag that this LView has i18n blocks.\n  // The flag is later used to determine whether this component should\n  // be hydrated (currently hydration is not supported for i18n blocks).\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    // Annotate host component's LView (not embedded view's LView),\n    // since hydration can be skipped on per-component basis only.\n    const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n    componentLView[FLAGS] |= 32 /* LViewFlags.HasI18n */;\n  } else {\n    lView[FLAGS] |= 32 /* LViewFlags.HasI18n */;\n  }\n  const tI18n = tView.data[adjustedIndex];\n  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n  // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n  const insertInFrontOf = parentTNode && parentTNode.type & 8 /* TNodeType.ElementContainer */ ? lView[parentTNode.index] : null;\n  prepareI18nBlockForHydration(lView, adjustedIndex, parentTNode, subTemplateIndex);\n  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n  setInI18nBlock(true);\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nEnd() {\n  setInI18nBlock(false);\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18n(index, messageIndex, subTemplateIndex) {\n  ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n  ɵɵi18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nfunction ɵɵi18nAttributes(index, attrsIndex) {\n  const tView = getTView();\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const attrs = getConstant(tView.consts, attrsIndex);\n  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵi18nExp(value) {\n  const lView = getLView();\n  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n  return ɵɵi18nExp;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nApply(index) {\n  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\n  return i18nPostprocess(message, replacements);\n}\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵlistener(eventName, listenerFn, eventTargetResolver) {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode();\n  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);\n  return ɵɵlistener;\n}\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostListener(eventName, listenerFn) {\n  const tNode = getCurrentTNode();\n  const lView = getLView();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\n  return ɵɵsyntheticHostListener;\n}\n/**\n * Adds a listener for a DOM event on the current node.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵdomListener(eventName, listenerFn, eventTargetResolver) {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode();\n  if (tNode.type & 3 /* TNodeType.AnyRNode */ || eventTargetResolver) {\n    listenToDomEvent(tNode, tView, lView, eventTargetResolver, lView[RENDERER], eventName, listenerFn, wrapListener(tNode, lView, listenerFn));\n  }\n  return ɵɵdomListener;\n}\nfunction listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n  let processOutputs = true;\n  let wrappedListener = null;\n  // Adding a native event listener is applicable when:\n  // - The corresponding TNode represents a DOM element.\n  // - The event target has a resolver (usually resulting in a global object,\n  //   such as `window` or `document`).\n  if (tNode.type & 3 /* TNodeType.AnyRNode */ || eventTargetResolver) {\n    wrappedListener ??= wrapListener(tNode, lView, listenerFn);\n    const hasCoalescedDomEvent = listenToDomEvent(tNode, tView, lView, eventTargetResolver, renderer, eventName, listenerFn, wrappedListener);\n    // Context: https://github.com/angular/angular/pull/30144\n    if (hasCoalescedDomEvent) {\n      processOutputs = false;\n    }\n  }\n  if (processOutputs) {\n    const outputConfig = tNode.outputs?.[eventName];\n    const hostDirectiveOutputConfig = tNode.hostDirectiveOutputs?.[eventName];\n    if (hostDirectiveOutputConfig && hostDirectiveOutputConfig.length) {\n      for (let i = 0; i < hostDirectiveOutputConfig.length; i += 2) {\n        const index = hostDirectiveOutputConfig[i];\n        const lookupName = hostDirectiveOutputConfig[i + 1];\n        wrappedListener ??= wrapListener(tNode, lView, listenerFn);\n        listenToOutput(tNode, lView, index, lookupName, eventName, wrappedListener);\n      }\n    }\n    if (outputConfig && outputConfig.length) {\n      for (const index of outputConfig) {\n        wrappedListener ??= wrapListener(tNode, lView, listenerFn);\n        listenToOutput(tNode, lView, index, eventName, eventName, wrappedListener);\n      }\n    }\n  }\n}\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nfunction ɵɵnextContext(level = 1) {\n  return nextContextImpl(level);\n}\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\n  let wildcardNgContentIndex = null;\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n  for (let i = 0; i < projectionSlots.length; i++) {\n    const slotValue = projectionSlots[i];\n    // The last wildcard projection slot should match all nodes which aren't matching\n    // any selector. This is necessary to be backwards compatible with view engine.\n    if (slotValue === '*') {\n      wildcardNgContentIndex = i;\n      continue;\n    }\n    // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n    // to the list of selectors, otherwise we fall back to matching against the node.\n    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n      return i; // first matching selector \"captures\" a given node\n    }\n  }\n  return wildcardNgContentIndex;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nfunction ɵɵprojectionDef(projectionSlots) {\n  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\n  if (!componentNode.projection) {\n    // If no explicit projection slots are defined, fall back to a single\n    // projection slot with the wildcard selector.\n    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);\n    const tails = projectionHeads.slice();\n    let componentChild = componentNode.child;\n    while (componentChild !== null) {\n      // Do not project let declarations so they don't occupy a slot.\n      if (componentChild.type !== 128 /* TNodeType.LetDeclaration */) {\n        const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n        if (slotIndex !== null) {\n          if (tails[slotIndex]) {\n            tails[slotIndex].projectionNext = componentChild;\n          } else {\n            projectionHeads[slotIndex] = componentChild;\n          }\n          tails[slotIndex] = componentChild;\n        }\n      }\n      componentChild = componentChild.next;\n    }\n  }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex Index of the projection node.\n * @param selectorIndex Index of the slot selector.\n *  - 0 when the selector is `*` (or unspecified as this is the default value),\n *  - 1 based index of the selector from the {@link projectionDef}\n * @param attrs Static attributes set on the `ng-content` node.\n * @param fallbackTemplateFn Template function with fallback content.\n *   Will be rendered if the slot is empty at runtime.\n * @param fallbackDecls Number of declarations in the fallback template.\n * @param fallbackVars Number of variables in the fallback template.\n *\n * @codeGenApi\n */\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs, fallbackTemplateFn, fallbackDecls, fallbackVars) {\n  const lView = getLView();\n  const tView = getTView();\n  const fallbackIndex = fallbackTemplateFn ? nodeIndex + 1 : null;\n  // Fallback content needs to be declared no matter whether the slot is empty since different\n  // instances of the component may or may not insert it. Also it needs to be declare *before*\n  // the projection node in order to work correctly with hydration.\n  if (fallbackIndex !== null) {\n    declareNoDirectiveHostTemplate(lView, tView, fallbackIndex, fallbackTemplateFn, fallbackDecls, fallbackVars, null, attrs);\n  }\n  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16 /* TNodeType.Projection */, null, attrs || null);\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) {\n    tProjectionNode.projection = selectorIndex;\n  }\n  // `<ng-content>` has no content. Even if there's fallback\n  // content, the fallback is shown next to it.\n  setCurrentTNodeAsNotParent();\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();\n  const componentHostNode = lView[DECLARATION_COMPONENT_VIEW][T_HOST];\n  const isEmpty = componentHostNode.projection[tProjectionNode.projection] === null;\n  if (isEmpty && fallbackIndex !== null) {\n    insertFallbackContent(lView, tView, fallbackIndex);\n  } else if (isNodeCreationMode && !isDetachedByI18n(tProjectionNode)) {\n    // re-distribution of projectable nodes is stored on a component's view level\n    applyProjection(tView, lView, tProjectionNode);\n  }\n}\n/** Inserts the fallback content of a projection slot. Assumes there's no projected content. */\nfunction insertFallbackContent(lView, tView, fallbackIndex) {\n  const adjustedIndex = HEADER_OFFSET + fallbackIndex;\n  const fallbackTNode = tView.data[adjustedIndex];\n  const fallbackLContainer = lView[adjustedIndex];\n  ngDevMode && assertTNode(fallbackTNode);\n  ngDevMode && assertLContainer(fallbackLContainer);\n  const dehydratedView = findMatchingDehydratedView(fallbackLContainer, fallbackTNode.tView.ssrId);\n  const fallbackLView = createAndRenderEmbeddedLView(lView, fallbackTNode, undefined, {\n    dehydratedView\n  });\n  addLViewToLContainer(fallbackLContainer, fallbackLView, 0, shouldAddViewToDom(fallbackTNode, dehydratedView));\n}\n\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nfunction ɵɵcontentQuery(directiveIndex, predicate, flags, read) {\n  createContentQuery(directiveIndex, predicate, flags, read);\n}\n/**\n * Creates a new view query by initializing internal data structures.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nfunction ɵɵviewQuery(predicate, flags, read) {\n  createViewQuery(predicate, flags, read);\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nfunction ɵɵqueryRefresh(queryList) {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n  setCurrentQueryIndex(queryIndex + 1);\n  const tQuery = getTQuery(tView, queryIndex);\n  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */)) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = getQueryResults(lView, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nfunction ɵɵloadQuery() {\n  return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\n\n/**\n * Creates a new content query and binds it to a signal created by an authoring function.\n *\n * @param directiveIndex Current directive index\n * @param target The target signal to which the query should be bound\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nfunction ɵɵcontentQuerySignal(directiveIndex, target, predicate, flags, read) {\n  bindQueryToSignal(target, createContentQuery(directiveIndex, predicate, flags, read));\n}\n/**\n * Creates a new view query by initializing internal data structures and binding a new query to the\n * target signal.\n *\n * @param target The target signal to assign the query results to.\n * @param predicate The type or label that should match a given query\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nfunction ɵɵviewQuerySignal(target, predicate, flags, read) {\n  bindQueryToSignal(target, createViewQuery(predicate, flags, read));\n}\n/**\n * Advances the current query index by a specified offset.\n *\n * Adjusting the current query index is necessary in cases where a given directive has a mix of\n * zone-based and signal-based queries. The signal-based queries don't require tracking of the\n * current index (those are refreshed on demand and not during change detection) so this instruction\n * is only necessary for backward-compatibility.\n *\n * @param index offset to apply to the current query index (defaults to 1)\n *\n * @codeGenApi\n */\nfunction ɵɵqueryAdvance(indexOffset = 1) {\n  setCurrentQueryIndex(getCurrentQueryIndex() + indexOffset);\n}\n\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nfunction ɵɵreference(index) {\n  const contextLView = getContextLView();\n  return load(contextLView, HEADER_OFFSET + index);\n}\nfunction toTStylingRange(prev, next) {\n  ngDevMode && assertNumberInRange(prev, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return prev << 17 /* StylingRange.PREV_SHIFT */ | next << 2 /* StylingRange.NEXT_SHIFT */;\n}\nfunction getTStylingRangePrev(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange >> 17 /* StylingRange.PREV_SHIFT */ & 32767 /* StylingRange.UNSIGNED_MASK */;\n}\nfunction getTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 2 /* StylingRange.PREV_DUPLICATE */) == 2 /* StylingRange.PREV_DUPLICATE */;\n}\nfunction setTStylingRangePrev(tStylingRange, previous) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(previous, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return tStylingRange & ~4294836224 /* StylingRange.PREV_MASK */ | previous << 17 /* StylingRange.PREV_SHIFT */;\n}\nfunction setTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 2 /* StylingRange.PREV_DUPLICATE */;\n}\nfunction getTStylingRangeNext(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 131068 /* StylingRange.NEXT_MASK */) >> 2 /* StylingRange.NEXT_SHIFT */;\n}\nfunction setTStylingRangeNext(tStylingRange, next) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return tStylingRange & ~131068 /* StylingRange.NEXT_MASK */ |\n  //\n  next << 2 /* StylingRange.NEXT_SHIFT */;\n}\nfunction getTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 1 /* StylingRange.NEXT_DUPLICATE */) === 1 /* StylingRange.NEXT_DUPLICATE */;\n}\nfunction setTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 1 /* StylingRange.NEXT_DUPLICATE */;\n}\n\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {\n  ngDevMode && assertFirstUpdatePass(getTView());\n  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n  let tmplHead = getTStylingRangePrev(tBindings);\n  let tmplTail = getTStylingRangeNext(tBindings);\n  tData[index] = tStylingKeyWithStatic;\n  let isKeyDuplicateOfStatic = false;\n  let tStylingKey;\n  if (Array.isArray(tStylingKeyWithStatic)) {\n    // We are case when the `TStylingKey` contains static fields as well.\n    const staticKeyValueArray = tStylingKeyWithStatic;\n    tStylingKey = staticKeyValueArray[1]; // unwrap.\n    // We need to check if our key is present in the static so that we can mark it as duplicate.\n    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {\n      // tStylingKey is present in the statics, need to mark it as duplicate.\n      isKeyDuplicateOfStatic = true;\n    }\n  } else {\n    tStylingKey = tStylingKeyWithStatic;\n  }\n  if (isHostBinding) {\n    // We are inserting host bindings\n    // If we don't have template bindings then `tail` is 0.\n    const hasTemplateBindings = tmplTail !== 0;\n    // This is important to know because that means that the `head` can't point to the first\n    // template bindings (there are none.) Instead the head points to the tail of the template.\n    if (hasTemplateBindings) {\n      // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);\n      tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (previousNode !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);\n      }\n      // The \"previous\" of the template binding head should point to this host binding\n      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);\n    } else {\n      tData[index + 1] = toTStylingRange(tmplHead, 0);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (tmplHead !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);\n      }\n      // if we don't have template, the head points to template-tail, and needs to be advanced.\n      tmplHead = index;\n    }\n  } else {\n    // We are inserting in template section.\n    // We need to set this binding's \"previous\" to the current template tail\n    tData[index + 1] = toTStylingRange(tmplTail, 0);\n    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');\n    if (tmplHead === 0) {\n      tmplHead = index;\n    } else {\n      // We need to update the previous value \"next\" to point to this binding\n      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);\n    }\n    tmplTail = index;\n  }\n  // Now we need to update / compute the duplicates.\n  // Starting with our location search towards head (least priority)\n  if (isKeyDuplicateOfStatic) {\n    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);\n  }\n  markDuplicates(tData, tStylingKey, index, true);\n  markDuplicates(tData, tStylingKey, index, false);\n  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n  tBindings = toTStylingRange(tmplHead, tmplTail);\n  if (isClassBinding) {\n    tNode.classBindings = tBindings;\n  } else {\n    tNode.styleBindings = tBindings;\n  }\n}\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {\n  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n  if (residual != null /* or undefined */ && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n    // We have duplicate in the residual so mark ourselves as duplicate.\n    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);\n  }\n}\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(tData, tStylingKey, index, isPrevDir) {\n  const tStylingAtIndex = tData[index + 1];\n  const isMap = tStylingKey === null;\n  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n  let foundDuplicate = false;\n  // We keep iterating as long as we have a cursor\n  // AND either:\n  // - we found what we are looking for, OR\n  // - we are a map in which case we have to continue searching even after we find what we were\n  //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n  while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n    ngDevMode && assertIndexInRange(tData, cursor);\n    const tStylingValueAtCursor = tData[cursor];\n    const tStyleRangeAtCursor = tData[cursor + 1];\n    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n      foundDuplicate = true;\n      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n    }\n    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);\n  }\n  if (foundDuplicate) {\n    // if we found a duplicate, than mark ourselves.\n    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);\n  }\n}\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor, tStylingKey) {\n  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, \"Expected that 'tStylingKey' has been unwrapped\");\n  if (tStylingKeyCursor === null ||\n  // If the cursor is `null` it means that we have map at that\n  // location so we must assume that we have a match.\n  tStylingKey == null ||\n  // If `tStylingKey` is `null` then it is a map therefor assume that it\n  // contains a match.\n  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.\n  ) {\n    return true;\n  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n    // statics and we need to check those as well.\n    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key\n  }\n  return false;\n}\n\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState = {\n  textEnd: 0,\n  key: 0,\n  keyEnd: 0,\n  value: 0,\n  valueEnd: 0\n};\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedKey(text) {\n  return text.substring(parserState.key, parserState.keyEnd);\n}\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedValue(text) {\n  return text.substring(parserState.value, parserState.valueEnd);\n}\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```ts\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassName(text) {\n  resetParserState(text);\n  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```ts\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassNameNext(text, index) {\n  const end = parserState.textEnd;\n  if (end === index) {\n    return -1;\n  }\n  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n  return consumeWhitespace(text, index, end);\n}\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```ts\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyle(text) {\n  resetParserState(text);\n  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```ts\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyleNext(text, startIndex) {\n  const end = parserState.textEnd;\n  let index = parserState.key = consumeWhitespace(text, startIndex, end);\n  if (end === index) {\n    // we reached an end so just quit\n    return -1;\n  }\n  index = parserState.keyEnd = consumeStyleKey(text, index, end);\n  index = consumeSeparator(text, index, end, 58 /* CharCode.COLON */);\n  index = parserState.value = consumeWhitespace(text, index, end);\n  index = parserState.valueEnd = consumeStyleValue(text, index, end);\n  return consumeSeparator(text, index, end, 59 /* CharCode.SEMI_COLON */);\n}\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\nfunction resetParserState(text) {\n  parserState.key = 0;\n  parserState.keyEnd = 0;\n  parserState.value = 0;\n  parserState.valueEnd = 0;\n  parserState.textEnd = text.length;\n}\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\nfunction consumeWhitespace(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* CharCode.SPACE */) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\nfunction consumeClassToken(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* CharCode.SPACE */) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\nfunction consumeStyleKey(text, startIndex, endIndex) {\n  let ch;\n  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45 /* CharCode.DASH */ || ch === 95 /* CharCode.UNDERSCORE */ || (ch & -33 /* CharCode.UPPER_CASE */) >= 65 /* CharCode.A */ && (ch & -33 /* CharCode.UPPER_CASE */) <= 90 /* CharCode.Z */ || ch >= 48 /* CharCode.ZERO */ && ch <= 57 /* CharCode.NINE */)) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\nfunction consumeSeparator(text, startIndex, endIndex, separator) {\n  startIndex = consumeWhitespace(text, startIndex, endIndex);\n  if (startIndex < endIndex) {\n    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n      malformedStyleError(text, String.fromCharCode(separator), startIndex);\n    }\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\nfunction consumeStyleValue(text, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n  let ch2 = -1; // 2nd previous character\n  let ch3 = -1; // 3rd previous character\n  let i = startIndex;\n  let lastChIndex = i;\n  while (i < endIndex) {\n    const ch = text.charCodeAt(i++);\n    if (ch === 59 /* CharCode.SEMI_COLON */) {\n      return lastChIndex;\n    } else if (ch === 34 /* CharCode.DOUBLE_QUOTE */ || ch === 39 /* CharCode.SINGLE_QUOTE */) {\n      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n    } else if (startIndex === i - 4 &&\n    // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n    ch3 === 85 /* CharCode.U */ && ch2 === 82 /* CharCode.R */ && ch1 === 76 /* CharCode.L */ && ch === 40 /* CharCode.OPEN_PAREN */) {\n      lastChIndex = i = consumeQuotedText(text, 41 /* CharCode.CLOSE_PAREN */, i, endIndex);\n    } else if (ch > 32 /* CharCode.SPACE */) {\n      // if we have a non-whitespace character then capture its location\n      lastChIndex = i;\n    }\n    ch3 = ch2;\n    ch2 = ch1;\n    ch1 = ch & -33 /* CharCode.UPPER_CASE */;\n  }\n  return lastChIndex;\n}\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\nfunction consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n  let index = startIndex;\n  while (index < endIndex) {\n    const ch = text.charCodeAt(index++);\n    if (ch == quoteCharCode && ch1 !== 92 /* CharCode.BACK_SLASH */) {\n      return index;\n    }\n    if (ch == 92 /* CharCode.BACK_SLASH */ && ch1 === 92 /* CharCode.BACK_SLASH */) {\n      // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n      // quotation. (It should not assume that the last `\"` is escaped.)\n      ch1 = 0;\n    } else {\n      ch1 = ch;\n    }\n  }\n  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();\n}\nfunction malformedStyleError(text, expecting, index) {\n  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n  throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.slice(index + 1) + `'. Expecting '${expecting}'.`);\n}\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleProp(prop, value, suffix) {\n  checkStylingProperty(prop, value, suffix, false);\n  return ɵɵstyleProp;\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵclassProp(className, value) {\n  checkStylingProperty(className, value, null, true);\n  return ɵɵclassProp;\n}\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleMap(styles) {\n  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction styleStringParser(keyValueArray, text) {\n  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n  }\n}\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nfunction ɵɵclassMap(classes) {\n  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);\n}\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction classStringParser(keyValueArray, text) {\n  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n  }\n}\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingProperty(prop, value, suffix, isClassBased) {\n  const lView = getLView();\n  const tView = getTView();\n  // Styling instructions use 2 slots per binding.\n  // 1. one for the value / TStylingKey\n  // 2. one for the intermittent-value / TStylingRange\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n  }\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    const tNode = tView.data[getSelectedIndex()];\n    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n  }\n}\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {\n  const tView = getTView();\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n  }\n  const lView = getLView();\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tView.data[getSelectedIndex()];\n    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n      if (ngDevMode) {\n        // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n        // processing this binding in styling resolution.\n        const tStylingKey = tView.data[bindingIndex];\n        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, \"Styling linked list shadow input should be marked as 'false'\");\n      }\n      // VE does not concatenate the static portion like we are doing here.\n      // Instead VE just ignores the static completely if dynamic binding is present.\n      // Because of locality we have already set the static portion because we don't know if there\n      // is a dynamic portion until later. If we would ignore the static portion it would look like\n      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n      // thing as it would think that the static portion was removed. For this reason we\n      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, \"Expecting static portion to end with ';'\");\n      if (staticPrefix !== null) {\n        // We want to make sure that falsy values of `value` become empty strings.\n        value = concatStringsWithSpace(staticPrefix, value ? value : '');\n      }\n      // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n      // This takes over the `[style]` binding. (Same for `[class]`)\n      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n    } else {\n      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);\n    }\n  }\n}\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView, bindingIndex) {\n  // All host bindings are placed after the expando section.\n  return bindingIndex >= tView.expandoStartIndex;\n}\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {\n  ngDevMode && assertFirstUpdatePass(tView);\n  const tData = tView.data;\n  if (tData[bindingIndex + 1] === null) {\n    // The above check is necessary because we don't clear first update pass until first successful\n    // (no exception) template execution. This prevents the styling instruction from double adding\n    // itself to the list.\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tData[getSelectedIndex()];\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    const isHostBindings = isInHostBindings(tView, bindingIndex);\n    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n      // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n      // we need to neutralize this binding since that directive is shadowing it.\n      // We turn this into a noop by setting the key to `false`\n      tStylingKey = false;\n    }\n    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n  }\n}\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {\n  const hostDirectiveDef = getCurrentDirectiveDef(tData);\n  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n  if (hostDirectiveDef === null) {\n    // We are in template node.\n    // If template node already had styling instruction then it has already collected the static\n    // styling and there is no need to collect them again. We know that we are the first styling\n    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;\n    if (isFirstStylingInstructionInTemplate) {\n      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n      // they are already merged and it would not be possible to figure which property belongs where\n      // in the priority.\n      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n      // We know that if we have styling binding in template we can't have residual.\n      residual = null;\n    }\n  } else {\n    // We are in host binding node and there was no binding instruction in template node.\n    // This means that we need to compute the residual.\n    const directiveStylingLast = tNode.directiveStylingLast;\n    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n    if (isFirstStylingInstructionInHostBinding) {\n      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n      if (residual === null) {\n        // - If `null` than either:\n        //    - Template styling instruction already ran and it has consumed the static\n        //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n        //      we need to update the `TStylingKey` associated with the first template node\n        //      instruction. OR\n        //    - Some other styling instruction ran and determined that there are no residuals\n        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n          // Only recompute if `templateStylingKey` had static values. (If no static value found\n          // then there is nothing to do since this operation can only produce less static keys, not\n          // more.)\n          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);\n          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n        }\n      } else {\n        // We only need to recompute residual if it is not `null`.\n        // - If existing residual (implies there was no template styling). This means that some of\n        //   the statics may have moved from the residual to the `stylingKey` and so we have to\n        //   recompute.\n        // - If `undefined` this is the first time we are running.\n        residual = collectResidual(tData, tNode, isClassBased);\n      }\n    }\n  }\n  if (residual !== undefined) {\n    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;\n  }\n  return stylingKey;\n}\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(tData, tNode, isClassBased) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  if (getTStylingRangeNext(bindings) === 0) {\n    // There does not seem to be a styling instruction in the `template`.\n    return undefined;\n  }\n  return tData[getTStylingRangePrev(bindings)];\n}\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```angular-ts\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```ts\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```ts\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```ts\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');\n  tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(tData, tNode, isClassBased) {\n  let residual = undefined;\n  const directiveEnd = tNode.directiveEnd;\n  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n  // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n  // collecting things after the last `hostBindings` directive which had a styling instruction.)\n  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n    const attrs = tData[i].hostAttrs;\n    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);\n  }\n  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);\n}\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {\n  // We need to loop because there can be directives which have `hostAttrs` but don't have\n  // `hostBindings` so this loop catches up to the current directive..\n  let currentDirective = null;\n  const directiveEnd = tNode.directiveEnd;\n  let directiveStylingLast = tNode.directiveStylingLast;\n  if (directiveStylingLast === -1) {\n    directiveStylingLast = tNode.directiveStart;\n  } else {\n    directiveStylingLast++;\n  }\n  while (directiveStylingLast < directiveEnd) {\n    currentDirective = tData[directiveStylingLast];\n    ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n    if (currentDirective === hostDirectiveDef) break;\n    directiveStylingLast++;\n  }\n  if (hostDirectiveDef !== null) {\n    // we only advance the styling cursor if we are collecting data from host bindings.\n    // Template executes before host bindings and so if we would update the index,\n    // host bindings would not get their statics.\n    tNode.directiveStylingLast = directiveStylingLast;\n  }\n  return stylingKey;\n}\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {\n  const desiredMarker = isClassBased ? 1 /* AttributeMarker.Classes */ : 2 /* AttributeMarker.Styles */;\n  let currentMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const item = attrs[i];\n      if (typeof item === 'number') {\n        currentMarker = item;\n      } else {\n        if (currentMarker === desiredMarker) {\n          if (!Array.isArray(stylingKey)) {\n            stylingKey = stylingKey === undefined ? [] : ['', stylingKey];\n          }\n          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);\n        }\n      }\n    }\n  }\n  return stylingKey === undefined ? null : stylingKey;\n}\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nfunction toStylingKeyValueArray(keyValueArraySet, stringParser, value) {\n  if (value == null /*|| value === undefined */ || value === '') return EMPTY_ARRAY;\n  const styleKeyValueArray = [];\n  const unwrappedValue = unwrapSafeValue(value);\n  if (Array.isArray(unwrappedValue)) {\n    for (let i = 0; i < unwrappedValue.length; i++) {\n      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n    }\n  } else if (typeof unwrappedValue === 'object') {\n    for (const key in unwrappedValue) {\n      if (unwrappedValue.hasOwnProperty(key)) {\n        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n      }\n    }\n  } else if (typeof unwrappedValue === 'string') {\n    stringParser(styleKeyValueArray, unwrappedValue);\n  } else {\n    ngDevMode && throwError('Unsupported styling type: ' + typeof unwrappedValue + ' (' + unwrappedValue + ')');\n  }\n  return styleKeyValueArray;\n}\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction styleKeyValueArraySet(keyValueArray, key, value) {\n  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n/**\n * Class-binding-specific function for setting the `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction classKeyValueArraySet(keyValueArray, key, value) {\n  // We use `classList.add` to eventually add the CSS classes to the DOM node. Any value passed into\n  // `add` is stringified and added to the `class` attribute, e.g. even null, undefined or numbers\n  // will be added. Stringify the key here so that our internal data structure matches the value in\n  // the DOM. The only exceptions are empty strings and strings that contain spaces for which\n  // the browser throws an error. We ignore such values, because the error is somewhat cryptic.\n  const stringKey = String(key);\n  if (stringKey !== '' && !stringKey.includes(' ')) {\n    keyValueArraySet(keyValueArray, stringKey, value);\n  }\n}\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {\n  if (oldKeyValueArray === NO_CHANGE) {\n    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n    oldKeyValueArray = EMPTY_ARRAY;\n  }\n  let oldIndex = 0;\n  let newIndex = 0;\n  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n  while (oldKey !== null || newKey !== null) {\n    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n    let setKey = null;\n    let setValue = undefined;\n    if (oldKey === newKey) {\n      // UPDATE: Keys are equal => new value is overwriting old value.\n      oldIndex += 2;\n      newIndex += 2;\n      if (oldValue !== newValue) {\n        setKey = newKey;\n        setValue = newValue;\n      }\n    } else if (newKey === null || oldKey !== null && oldKey < newKey) {\n      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n      // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n      // new array.\n      oldIndex += 2;\n      setKey = oldKey;\n    } else {\n      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n      // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n      // old array.\n      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n      newIndex += 2;\n      setKey = newKey;\n      setValue = newValue;\n    }\n    if (setKey !== null) {\n      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n    }\n    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n  }\n}\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {\n  if (!(tNode.type & 3 /* TNodeType.AnyRNode */)) {\n    // It is possible to have styling on non-elements (such as ng-container).\n    // This is rare, but it does happen. In such a case, just ignore the binding.\n    return;\n  }\n  const tData = tView.data;\n  const tRange = tData[bindingIndex + 1];\n  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;\n  if (!isStylingValuePresent(higherPriorityValue)) {\n    // We don't have a next duplicate, or we did not find a duplicate value.\n    if (!isStylingValuePresent(value)) {\n      // We should delete current value or restore to lower priority value.\n      if (getTStylingRangePrevDuplicate(tRange)) {\n        // We have a possible prev duplicate, let's retrieve it.\n        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n      }\n    }\n    const rNode = getNativeByIndex(getSelectedIndex(), lView);\n    applyStyling(renderer, isClassBased, rNode, prop, value);\n  }\n}\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(tData, tNode, lView, prop, index, isClassBased) {\n  // `TNode` to use for resolving static styling. Also controls search direction.\n  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n  //   - `null` search prev and go all the way to end. Return last value where\n  //     `isStylingValuePresent(value)` is true.\n  const isPrevDirection = tNode === null;\n  let value = undefined;\n  while (index > 0) {\n    const rawKey = tData[index];\n    const containsStatics = Array.isArray(rawKey);\n    // Unwrap the key if we contain static values.\n    const key = containsStatics ? rawKey[1] : rawKey;\n    const isStylingMap = key === null;\n    let valueAtLViewIndex = lView[index + 1];\n    if (valueAtLViewIndex === NO_CHANGE) {\n      // In firstUpdatePass the styling instructions create a linked list of styling.\n      // On subsequent passes it is possible for a styling instruction to try to read a binding\n      // which\n      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n      // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n      // allows the resolution to apply the value (which may later be overwritten when the\n      // binding actually executes.)\n      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n    }\n    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;\n    if (containsStatics && !isStylingValuePresent(currentValue)) {\n      currentValue = keyValueArrayGet(rawKey, prop);\n    }\n    if (isStylingValuePresent(currentValue)) {\n      value = currentValue;\n      if (isPrevDirection) {\n        return value;\n      }\n    }\n    const tRange = tData[index + 1];\n    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n  }\n  if (tNode !== null) {\n    // in case where we are going in next direction AND we did not find anything, we need to\n    // consult residual styling\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /** OR residual !=== undefined */) {\n      value = keyValueArrayGet(residual, prop);\n    }\n  }\n  return value;\n}\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value) {\n  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n  // have an opinion as to what this binding should be and you should consult other bindings by\n  // priority to determine the valid value.\n  // This is extracted into a single function so that we have a single place to control this.\n  return value !== undefined;\n}\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(value, suffix) {\n  if (value == null || value === '') ;else if (typeof suffix === 'string') {\n    value = value + suffix;\n  } else if (typeof value === 'object') {\n    value = stringify(unwrapSafeValue(value));\n  }\n  return value;\n}\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction hasStylingInputShadow(tNode, isClassBased) {\n  return (tNode.flags & (isClassBased ? 8 /* TNodeFlags.hasClassInput */ : 16 /* TNodeFlags.hasStyleInput */)) !== 0;\n}\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nfunction ɵɵtext(index, value = '') {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertTNodeCreationIndex(lView, index);\n  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1 /* TNodeType.Text */, value, null) : tView.data[adjustedIndex];\n  const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);\n  lView[adjustedIndex] = textNative;\n  if (wasLastNodeCreated()) {\n    appendChild(tView, lView, textNative, tNode);\n  }\n  // Text nodes are self closing.\n  setCurrentTNode(tNode, false);\n}\nlet _locateOrCreateTextNode = (tView, lView, tNode, value, index) => {\n  lastNodeWasCreated(true);\n  return createTextNode(lView[RENDERER], value);\n};\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of text nodes.\n */\nfunction locateOrCreateTextNodeImpl(tView, lView, tNode, value, index) {\n  const isNodeCreationMode = !canHydrateNode(lView, tNode);\n  lastNodeWasCreated(isNodeCreationMode);\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createTextNode(lView[RENDERER], value);\n  }\n  // Hydration mode, looking up an existing element in DOM.\n  const hydrationInfo = lView[HYDRATION];\n  const textNative = locateNextRNode(hydrationInfo, tView, lView, tNode);\n  ngDevMode && validateMatchingNode(textNative, Node.TEXT_NODE, null, lView, tNode);\n  ngDevMode && markRNodeAsClaimedByHydration(textNative);\n  return textNative;\n}\nfunction enableLocateOrCreateTextNodeImpl() {\n  _locateOrCreateTextNode = locateOrCreateTextNodeImpl;\n}\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nfunction interpolationV(lView, values) {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  let isBindingUpdated = false;\n  let bindingIndex = getBindingIndex();\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n  }\n  setBindingIndex(bindingIndex);\n  if (!isBindingUpdated) {\n    return NO_CHANGE;\n  }\n  // Build the updated content\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    // The condition is to prevent an out-of-bound read\n    content += renderStringify(values[i]) + (i + 1 !== values.length ? values[i + 1] : '');\n  }\n  return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nfunction interpolation1(lView, prefix, v0, suffix = '') {\n  const different = bindingUpdated(lView, nextBindingIndex(), v0);\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n  incrementBindingIndex(2);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n  incrementBindingIndex(3);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n */\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  incrementBindingIndex(4);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  incrementBindingIndex(5);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  incrementBindingIndex(6);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  incrementBindingIndex(7);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix = '') {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  incrementBindingIndex(8);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;\n}\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate(v0) {\n  ɵɵtextInterpolate1('', v0);\n  return ɵɵtextInterpolate;\n}\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation1(lView, prefix, v0, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate1;\n}\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate2;\n}\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate3;\n}\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate4;\n}\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate5;\n}\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate6;\n}\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate7;\n}\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate8;\n}\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵtextInterpolateV(values) {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolateV;\n}\n/**\n * Updates a text binding at a given index in a given LView.\n */\nfunction textBindingInternal(lView, index, value) {\n  ngDevMode && assertString(value, 'Value should be a string');\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n  ngDevMode && assertIndexInRange(lView, index);\n  const element = getNativeByIndex(index, lView);\n  ngDevMode && assertDefined(element, 'native element should exist');\n  updateTextNode(lView[RENDERER], element, value);\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Update a two-way bound property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `twoWayProperty('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵtwoWayProperty(propName, value, sanitizer) {\n  // TODO(crisbeto): perf impact of re-evaluating this on each change detection?\n  if (isWritableSignal(value)) {\n    value = value();\n  }\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    setPropertyAndInputs(tNode, lView, propName, value, lView[RENDERER], sanitizer);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵtwoWayProperty;\n}\n/**\n * Function used inside two-way listeners to conditionally set the value of the bound expression.\n *\n * @param target Field on which to set the value.\n * @param value Value to be set to the field.\n *\n * @codeGenApi\n */\nfunction ɵɵtwoWayBindingSet(target, value) {\n  const canWrite = isWritableSignal(target);\n  canWrite && target.set(value);\n  return canWrite;\n}\n/**\n * Adds an event listener that updates a two-way binding to the current node.\n *\n * @param eventName Name of the event.\n * @param listenerFn The function to be called when event emits.\n *\n * @codeGenApi\n */\nfunction ɵɵtwoWayListener(eventName, listenerFn) {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode();\n  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn);\n  return ɵɵtwoWayListener;\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/** Object that indicates the value of a `@let` declaration that hasn't been initialized yet. */\nconst UNINITIALIZED_LET = {};\n/**\n * Declares an `@let` at a specific data slot. Returns itself to allow chaining.\n *\n * @param index Index at which to declare the `@let`.\n *\n * @codeGenApi\n */\nfunction ɵɵdeclareLet(index) {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = getOrCreateTNode(tView, adjustedIndex, 128 /* TNodeType.LetDeclaration */, null, null);\n  setCurrentTNode(tNode, false);\n  store(tView, lView, adjustedIndex, UNINITIALIZED_LET);\n  return ɵɵdeclareLet;\n}\n/**\n * Instruction that stores the value of a `@let` declaration on the current view.\n * Returns the value to allow usage inside variable initializers.\n *\n * @codeGenApi\n */\nfunction ɵɵstoreLet(value) {\n  performanceMarkFeature('NgLet');\n  const tView = getTView();\n  const lView = getLView();\n  const index = getSelectedIndex();\n  store(tView, lView, index, value);\n  return value;\n}\n/**\n * Retrieves the value of a `@let` declaration defined in a parent view.\n *\n * @param index Index of the declaration within the view.\n *\n * @codeGenApi\n */\nfunction ɵɵreadContextLet(index) {\n  const contextLView = getContextLView();\n  const value = load(contextLView, HEADER_OFFSET + index);\n  if (value === UNINITIALIZED_LET) {\n    throw new RuntimeError(314 /* RuntimeErrorCode.UNINITIALIZED_LET_ACCESS */, ngDevMode && 'Attempting to access a @let declaration whose value is not available yet');\n  }\n  return value;\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Sets the location within the source template at which\n * each element in the current view was defined.\n *\n * @param index Index at which the DOM node was created.\n * @param templatePath Path to the template at which the node was defined.\n * @param locations Element locations to which to attach the source location.\n *\n * @codeGenApi\n */\nfunction ɵɵattachSourceLocations(templatePath, locations) {\n  const tView = getTView();\n  const lView = getLView();\n  const renderer = lView[RENDERER];\n  const attributeName = 'data-ng-source-location';\n  for (const [index, offset, line, column] of locations) {\n    const tNode = getTNode(tView, index + HEADER_OFFSET);\n    // The compiler shouldn't generate the instruction for non-element nodes, but assert just in case.\n    ngDevMode && assertTNodeType(tNode, 2 /* TNodeType.Element */);\n    const node = getNativeByIndex(index + HEADER_OFFSET, lView);\n    // Set the attribute directly in the DOM so it doesn't participate in directive matching.\n    if (!node.hasAttribute(attributeName)) {\n      const attributeValue = `${templatePath}@o:${offset},l:${line},c:${column}`;\n      renderer.setAttribute(node, attributeName, attributeValue);\n    }\n  }\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Interpolate a value with a single bound value and no prefixes or suffixes.\n *\n * @param v0 Value checked for change.\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\n * @codeGenApi\n */\nfunction ɵɵinterpolate(v0) {\n  // Avoid calling into the `interpolate` functions since\n  // we know that we don't have a prefix or suffix.\n  return bindingUpdated(getLView(), nextBindingIndex(), v0) ? renderStringify(v0) : NO_CHANGE;\n}\n/**\n * Interpolate a value with a single bound value.\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\n * @codeGenApi\n */\nfunction ɵɵinterpolate1(prefix, v0, suffix = '') {\n  return interpolation1(getLView(), prefix, v0, suffix);\n}\n/**\n * Interpolate a value with two bound values.\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\n * @codeGenApi\n */\nfunction ɵɵinterpolate2(prefix, v0, i0, v1, suffix = '') {\n  return interpolation2(getLView(), prefix, v0, i0, v1, suffix);\n}\n/**\n * Interpolate a value with three bound values.\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\n * @codeGenApi\n */\nfunction ɵɵinterpolate3(prefix, v0, i0, v1, i1, v2, suffix = '') {\n  return interpolation3(getLView(), prefix, v0, i0, v1, i1, v2, suffix);\n}\n/**\n * Interpolate a value with four bound values.\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\n * @codeGenApi\n */\nfunction ɵɵinterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix = '') {\n  return interpolation4(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n}\n/**\n * Interpolate a value with five bound values.\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\n * @codeGenApi\n */\nfunction ɵɵinterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix = '') {\n  return interpolation5(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n}\n/**\n * Interpolate a value with six bound values.\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\n * @codeGenApi\n */\nfunction ɵɵinterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix = '') {\n  return interpolation6(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n}\n/**\n * Interpolate a value with seven bound values.\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\n * @codeGenApi\n */\nfunction ɵɵinterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix = '') {\n  return interpolation7(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n}\n/**\n * Interpolate a value with eight bound values.\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\n * @codeGenApi\n */\nfunction ɵɵinterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix = '') {\n  return interpolation8(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n}\n/**\n * Interpolate a value with nine or more bound values.\n *\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @returns Interpolated string or NO_CHANGE if none of the bound values have changed.\n * @codeGenApi\n */\nfunction ɵɵinterpolateV(values) {\n  return interpolationV(getLView(), values);\n}\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nfunction providersResolver(def, providers, viewProviders) {\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const isComponent = isComponentDef(def);\n    // The list of view providers is processed first, and the flags are updated\n    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n    // Then, the list of providers is processed, and the flags are updated\n    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n  }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n  provider = resolveForwardRef(provider);\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n    }\n  } else {\n    const tView = getTView();\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n    const providerFactory = providerToFactory(provider);\n    if (ngDevMode) {\n      const injector = new NodeInjector(tNode, lView);\n      runInInjectorProfilerContext(injector, token, () => {\n        emitProviderConfiguredEvent(provider, isViewProvider);\n      });\n    }\n    const beginIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const endIndex = tNode.directiveStart;\n    const cptViewProvidersCount = tNode.providerIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n    if (isTypeProvider(provider) || !provider.multi) {\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject, ngDevMode ? providerName(provider) : null);\n      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n      if (existingFactoryIndex === -1) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];\n      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory, provider);\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);\n      }\n      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n      }\n    }\n  }\n}\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {\n  const providerIsTypeProvider = isTypeProvider(provider);\n  const providerIsClassProvider = isClassProvider(provider);\n  if (providerIsTypeProvider || providerIsClassProvider) {\n    // Resolve forward references as `useClass` can hold a forward reference.\n    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n    const prototype = classToken.prototype;\n    const ngOnDestroy = prototype.ngOnDestroy;\n    if (ngOnDestroy) {\n      const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n      if (!providerIsTypeProvider && provider.multi) {\n        ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n        const existingCallbacksIndex = hooks.indexOf(contextIndex);\n        if (existingCallbacksIndex === -1) {\n          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n        } else {\n          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);\n        }\n      } else {\n        hooks.push(contextIndex, ngOnDestroy);\n      }\n    }\n  }\n}\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n  if (isComponentProvider) {\n    multiFactory.componentProviders++;\n  }\n  return multiFactory.multi.push(factory) - 1;\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item, arr, begin, end) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n  return -1;\n}\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(_, flags, tData, lData, tNode) {\n  return multiResolve(this.multi, []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(_, _flags, _tData, lView, tNode) {\n  const factories = this.multi;\n  let result;\n  if (this.providerFactory) {\n    const componentCount = this.providerFactory.componentProviders;\n    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);\n    // Copy the section of the array which contains `multi` `providers` from the component\n    result = multiProviders.slice(0, componentCount);\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n    // Copy the section of the array which contains `multi` `providers` from other directives\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = [];\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n  }\n  return result;\n}\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories, result) {\n  for (let i = 0; i < factories.length; i++) {\n    const factory = factories[i];\n    result.push(factory());\n  }\n  return result;\n}\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f, provider) {\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject, ngDevMode ? providerName(provider) : null);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n  return factory;\n}\nfunction providerName(provider) {\n  if (Array.isArray(provider)) {\n    return null;\n  }\n  if (isTypeProvider(provider)) {\n    return provider.name;\n  } else if (isClassProvider(provider)) {\n    if (provider.provide instanceof InjectionToken) {\n      return `('${provider.provide.toString()}':${provider.useClass.name})`;\n    }\n    return provider.useClass.name;\n  } else if (provider.provide instanceof InjectionToken) {\n    return provider.provide.toString();\n  } else if (typeof provider.provide === 'string') {\n    return provider.provide;\n  } else {\n    return null;\n  }\n}\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\n  return definition => {\n    definition.providersResolver = (def, processProvidersFn) => {\n      return providersResolver(def,\n      //\n      processProvidersFn ? processProvidersFn(providers) : providers,\n      //\n      viewProviders);\n    };\n  };\n}\n\n/**\n * A feature that adds support for external runtime styles for a component.\n * An external runtime style is a URL to a CSS stylesheet that contains the styles\n * for a given component. For browsers, this URL will be used in an appended `link` element\n * when the component is rendered. This feature is typically used for Hot Module Replacement\n * (HMR) of component stylesheets by leveraging preexisting global stylesheet HMR available\n * in most development servers.\n *\n * @codeGenApi\n */\nfunction ɵɵExternalStylesFeature(styleUrls) {\n  return definition => {\n    if (styleUrls.length < 1) {\n      return;\n    }\n    definition.getExternalStyles = encapsulationId => {\n      // Add encapsulation ID search parameter `ngcomp` to support external style encapsulation as well as the encapsulation mode\n      // for usage tracking.\n      const urls = styleUrls.map(value => value + '?ngcomp' + (encapsulationId ? '=' + encodeURIComponent(encapsulationId) : '') + '&e=' + definition.encapsulation);\n      return urls;\n    };\n  };\n}\n\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nfunction ɵɵsetComponentScope(type, directives, pipes) {\n  const def = type.ɵcmp;\n  def.directiveDefs = extractDefListOrFactory(directives, extractDirectiveDef);\n  def.pipeDefs = extractDefListOrFactory(pipes, getPipeDef$1);\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nfunction ɵɵsetNgModuleScope(type, scope) {\n  return noSideEffects(() => {\n    const ngModuleDef = getNgModuleDefOrThrow(type);\n    ngModuleDef.declarations = convertToTypeArray(scope.declarations || EMPTY_ARRAY);\n    ngModuleDef.imports = convertToTypeArray(scope.imports || EMPTY_ARRAY);\n    ngModuleDef.exports = convertToTypeArray(scope.exports || EMPTY_ARRAY);\n    if (scope.bootstrap) {\n      // This only happens in local compilation mode.\n      ngModuleDef.bootstrap = convertToTypeArray(scope.bootstrap);\n    }\n    depsTracker.registerNgModule(type, scope);\n  });\n}\nfunction convertToTypeArray(values) {\n  if (typeof values === 'function') {\n    return values;\n  }\n  const flattenValues = flatten(values);\n  if (flattenValues.some(isForwardRef)) {\n    return () => flattenValues.map(resolveForwardRef).map(maybeUnwrapModuleWithProviders);\n  } else {\n    return flattenValues.map(maybeUnwrapModuleWithProviders);\n  }\n}\nfunction maybeUnwrapModuleWithProviders(value) {\n  return isModuleWithProviders(value) ? value.ngModule : value;\n}\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView, returnValueIndex) {\n  ngDevMode && assertIndexInRange(lView, returnValueIndex);\n  const lastReturnValue = lView[returnValueIndex];\n  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nfunction pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\n  let bindingIndex = bindingRoot + slotOffset;\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);\n}\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nfunction ɵɵpipe(index, pipeName) {\n  const tView = getTView();\n  let pipeDef;\n  const adjustedIndex = index + HEADER_OFFSET;\n  if (tView.firstCreatePass) {\n    // The `getPipeDef` throws if a pipe with a given name is not found\n    // (so we use non-null assertion below).\n    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n    tView.data[adjustedIndex] = pipeDef;\n    if (pipeDef.onDestroy) {\n      (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = tView.data[adjustedIndex];\n  }\n  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n  let previousInjectorProfilerContext;\n  if (ngDevMode) {\n    previousInjectorProfilerContext = setInjectorProfilerContext({\n      injector: new NodeInjector(getCurrentTNode(), getLView()),\n      token: pipeDef.type\n    });\n  }\n  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n  try {\n    // DI for pipes is supposed to behave like directives when placed on a component\n    // host node, which means that we have to disable access to `viewProviders`.\n    const previousIncludeViewProviders = setIncludeViewProviders(false);\n    const pipeInstance = pipeFactory();\n    setIncludeViewProviders(previousIncludeViewProviders);\n    store(tView, getLView(), adjustedIndex, pipeInstance);\n    return pipeInstance;\n  } finally {\n    // we have to restore the injector implementation in finally, just in case the creation of the\n    // pipe throws an error.\n    setInjectImplementation(previousInjectImplementation);\n    ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext);\n  }\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n  if (registry) {\n    if (ngDevMode) {\n      const pipes = registry.filter(pipe => pipe.name === name);\n      // TODO: Throw an error in the next major\n      if (pipes.length > 1) {\n        console.warn(formatRuntimeError(313 /* RuntimeErrorCode.MULTIPLE_MATCHING_PIPES */, getMultipleMatchingPipesMessage(name)));\n      }\n    }\n    for (let i = registry.length - 1; i >= 0; i--) {\n      const pipeDef = registry[i];\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n  if (ngDevMode) {\n    throw new RuntimeError(-302 /* RuntimeErrorCode.PIPE_NOT_FOUND */, getPipeNotFoundErrorMessage(name));\n  }\n  return;\n}\n/**\n * Generates a helpful error message for the user when multiple pipes match the name.\n *\n * @param name Name of the pipe\n * @returns The error message\n */\nfunction getMultipleMatchingPipesMessage(name) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `check ${hostIsStandalone ? \"'@Component.imports' of this component\" : 'the imports of this module'}`;\n  const errorMessage = `Multiple pipes match the name \\`${name}\\`${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n/**\n * Generates a helpful error message for the user when a pipe is not found.\n *\n * @param name Name of the missing pipe\n * @returns The error message\n */\nfunction getPipeNotFoundErrorMessage(name) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `Verify that it is ${hostIsStandalone ? \"included in the '@Component.imports' of this component\" : 'declared or imported in this module'}`;\n  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param offset the binding offset\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind1(index, offset, v1) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), offset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBindV(index, slotOffset, values) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);\n}\nfunction isPure(lView, index) {\n  return lView[TVIEW].data[index].pure;\n}\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplateRefExtractor(tNode, lView) {\n  return createTemplateRef(tNode, lView);\n}\nfunction ɵɵgetComponentDepsFactory(type, rawImports) {\n  return () => {\n    try {\n      return depsTracker.getComponentDependencies(type, rawImports).dependencies;\n    } catch (e) {\n      console.error(`Computing dependencies in local compilation mode for the component \"${type.name}\" failed with the exception:`, e);\n      throw e;\n    }\n  };\n}\n\n/**\n * Sets the debug info for an Angular class.\n *\n * This runtime is guarded by ngDevMode flag.\n */\nfunction ɵsetClassDebugInfo(type, debugInfo) {\n  const def = getComponentDef(type);\n  if (def !== null) {\n    def.debugInfo = debugInfo;\n  }\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Gets the URL from which the client will fetch a new version of a component's metadata so it\n * can be replaced during hot module reloading.\n * @param id Unique ID for the component, generated during compile time.\n * @param timestamp Time at which the request happened.\n * @param base Base URL against which to resolve relative paths.\n * @codeGenApi\n */\nfunction ɵɵgetReplaceMetadataURL(id, timestamp, base) {\n  const url = `./@ng/component?c=${id}&t=${encodeURIComponent(timestamp)}`;\n  return new URL(url, base).href;\n}\n/**\n * Replaces the metadata of a component type and re-renders all live instances of the component.\n * @param type Class whose metadata will be replaced.\n * @param applyMetadata Callback that will apply a new set of metadata on the `type` when invoked.\n * @param environment Syntehtic namespace imports that need to be passed along to the callback.\n * @param locals Local symbols from the source location that have to be exposed to the callback.\n * @param importMeta `import.meta` from the call site of the replacement function. Optional since\n *   it isn't used internally.\n * @param id ID to the class being replaced. **Not** the same as the component definition ID.\n *   Optional since the ID might not be available internally.\n * @codeGenApi\n */\nfunction ɵɵreplaceMetadata(type, applyMetadata, namespaces, locals, importMeta = null, id = null) {\n  ngDevMode && assertComponentDef(type);\n  const currentDef = getComponentDef(type);\n  // The reason `applyMetadata` is a callback that is invoked (almost) immediately is because\n  // the compiler usually produces more code than just the component definition, e.g. there\n  // can be functions for embedded views, the variables for the constant pool and `setClassMetadata`\n  // calls. The callback allows us to keep them isolate from the rest of the app and to invoke\n  // them at the right time.\n  applyMetadata.apply(null, [type, namespaces, ...locals]);\n  const {\n    newDef,\n    oldDef\n  } = mergeWithExistingDefinition(currentDef, getComponentDef(type));\n  // TODO(crisbeto): the `applyMetadata` call above will replace the definition on the type.\n  // Ideally we should adjust the compiler output so the metadata is returned, however that'll\n  // require some internal changes. We re-add the metadata here manually.\n  type[NG_COMP_DEF] = newDef;\n  // If a `tView` hasn't been created yet, it means that this component hasn't been instantianted\n  // before. In this case there's nothing left for us to do aside from patching it in.\n  if (oldDef.tView) {\n    const trackedViews = getTrackedLViews().values();\n    for (const root of trackedViews) {\n      // Note: we have the additional check, because `IsRoot` can also indicate\n      // a component created through something like `createComponent`.\n      if (isRootView(root) && root[PARENT] === null) {\n        recreateMatchingLViews(importMeta, id, newDef, oldDef, root);\n      }\n    }\n  }\n}\n/**\n * Merges two component definitions while preseving the original one in place.\n * @param currentDef Definition that should receive the new metadata.\n * @param newDef Source of the new metadata.\n */\nfunction mergeWithExistingDefinition(currentDef, newDef) {\n  // Clone the current definition since we reference its original data further\n  // down in the replacement process (e.g. when destroying the renderer).\n  const clone = {\n    ...currentDef\n  };\n  // Assign the new metadata in place while preserving the object literal. It's important to\n  // Keep the object in place, because there can be references to it, for example in the\n  // `directiveDefs` of another definition.\n  const replacement = Object.assign(currentDef, newDef, {\n    // We need to keep the existing directive and pipe defs, because they can get patched on\n    // by a call to `setComponentScope` from a module file. That call won't make it into the\n    // HMR replacement function, because it lives in an entirely different file.\n    directiveDefs: clone.directiveDefs,\n    pipeDefs: clone.pipeDefs,\n    // Preserve the old `setInput` function, because it has some state.\n    // This is fine, because the component instance is preserved as well.\n    setInput: clone.setInput,\n    // Externally this is redundant since we redeclare the definition using the original type.\n    // Internally we may receive a definition with an alternate, but identical, type so we have\n    // to ensure that the original one is preserved.\n    type: clone.type\n  });\n  ngDevMode && assertEqual(replacement, currentDef, 'Expected definition to be merged in place');\n  return {\n    newDef: replacement,\n    oldDef: clone\n  };\n}\n/**\n * Finds all LViews matching a specific component definition and recreates them.\n * @param importMeta `import.meta` information.\n * @param id HMR ID of the component.\n * @param oldDef Component definition to search for.\n * @param rootLView View from which to start the search.\n */\nfunction recreateMatchingLViews(importMeta, id, newDef, oldDef, rootLView) {\n  ngDevMode && assertDefined(oldDef.tView, 'Expected a component definition that has been instantiated at least once');\n  const tView = rootLView[TVIEW];\n  // Use `tView` to match the LView since `instanceof` can\n  // produce false positives when using inheritance.\n  if (tView === oldDef.tView) {\n    ngDevMode && assertComponentDef(oldDef.type);\n    recreateLView(importMeta, id, newDef, oldDef, rootLView);\n    return;\n  }\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    const current = rootLView[i];\n    if (isLContainer(current)) {\n      // The host can be an LView if a component is injecting `ViewContainerRef`.\n      if (isLView(current[HOST])) {\n        recreateMatchingLViews(importMeta, id, newDef, oldDef, current[HOST]);\n      }\n      for (let j = CONTAINER_HEADER_OFFSET; j < current.length; j++) {\n        recreateMatchingLViews(importMeta, id, newDef, oldDef, current[j]);\n      }\n    } else if (isLView(current)) {\n      recreateMatchingLViews(importMeta, id, newDef, oldDef, current);\n    }\n  }\n}\n/**\n * Removes any cached renderers from the factory for the provided type.\n * This is currently used by the HMR logic to ensure Renderers are kept\n * synchronized with any definition metadata updates.\n * @param factory A RendererFactory2 instance.\n * @param def A ComponentDef instance.\n */\nfunction clearRendererCache(factory, def) {\n  // Cast to read a private field.\n  // NOTE: This must be kept synchronized with the renderer factory implementation in\n  // platform-browser and platform-browser/animations.\n  factory.componentReplaced?.(def.id);\n}\n/**\n * Recreates an LView in-place from a new component definition.\n * @param importMeta `import.meta` information.\n * @param id HMR ID for the component.\n * @param newDef Definition from which to recreate the view.\n * @param oldDef Previous component definition being swapped out.\n * @param lView View to be recreated.\n */\nfunction recreateLView(importMeta, id, newDef, oldDef, lView) {\n  const instance = lView[CONTEXT];\n  let host = lView[HOST];\n  // In theory the parent can also be an LContainer, but it appears like that's\n  // only the case for embedded views which we won't be replacing here.\n  const parentLView = lView[PARENT];\n  ngDevMode && assertLView(parentLView);\n  const tNode = lView[T_HOST];\n  ngDevMode && assertTNodeType(tNode, 2 /* TNodeType.Element */);\n  ngDevMode && assertNotEqual(newDef, oldDef, 'Expected different component definition');\n  const zone = lView[INJECTOR].get(NgZone, null);\n  const recreate = () => {\n    // If we're recreating a component with shadow DOM encapsulation, it will have attached a\n    // shadow root. The browser will throw if we attempt to attach another one and there's no way\n    // to detach it. Our only option is to make a clone only of the root node, replace the node\n    // with the clone and use it for the newly-created LView.\n    if (oldDef.encapsulation === ViewEncapsulation.ShadowDom) {\n      const newHost = host.cloneNode(false);\n      host.replaceWith(newHost);\n      host = newHost;\n    }\n    // Recreate the TView since the template might've changed.\n    const newTView = getOrCreateComponentTView(newDef);\n    // Create a new LView from the new TView, but reusing the existing TNode and DOM node.\n    const newLView = createLView(parentLView, newTView, instance, getInitialLViewFlagsFromDef(newDef), host, tNode, null, null,\n    // The renderer will be created a bit further down once the old one is destroyed.\n    null, null, null);\n    // Detach the LView from its current place in the tree so we don't\n    // start traversing any siblings and modifying their structure.\n    replaceLViewInTree(parentLView, lView, newLView, tNode.index);\n    // Destroy the detached LView.\n    destroyLView(lView[TVIEW], lView);\n    // Always force the creation of a new renderer to ensure state captured during construction\n    // stays consistent with the new component definition by clearing any old ached factories.\n    const rendererFactory = lView[ENVIRONMENT].rendererFactory;\n    clearRendererCache(rendererFactory, oldDef);\n    // Patch a brand-new renderer onto the new view only after the old\n    // view is destroyed so that the runtime doesn't try to reuse it.\n    newLView[RENDERER] = rendererFactory.createRenderer(host, newDef);\n    // Remove the nodes associated with the destroyed LView. This removes the\n    // descendants, but not the host which we want to stay in place.\n    removeViewFromDOM(lView[TVIEW], lView);\n    // Reset the content projection state of the TNode before the first render.\n    // Note that this has to happen after the LView has been destroyed or we\n    // risk some projected nodes not being removed correctly.\n    resetProjectionState(tNode);\n    // Creation pass for the new view.\n    renderView(newTView, newLView, instance);\n    // Update pass for the new view.\n    refreshView(newTView, newLView, newTView.template, instance);\n  };\n  // The callback isn't guaranteed to be inside the Zone so we need to bring it in ourselves.\n  if (zone === null) {\n    executeWithInvalidateFallback(importMeta, id, recreate);\n  } else {\n    zone.run(() => executeWithInvalidateFallback(importMeta, id, recreate));\n  }\n}\n/**\n * Runs an HMR-related function and falls back to\n * invalidating the HMR data if it throws an error.\n */\nfunction executeWithInvalidateFallback(importMeta, id, callback) {\n  try {\n    callback();\n  } catch (e) {\n    const error = e;\n    // If we have all the necessary information and APIs to send off the invalidation\n    // request, send it before rethrowing so the dev server can decide what to do.\n    if (id !== null && error.message) {\n      const toLog = error.message + (error.stack ? '\\n' + error.stack : '');\n      importMeta?.hot?.send?.('angular:invalidate', {\n        id,\n        message: toLog,\n        error: true\n      });\n    }\n    // Throw the error in case the page doesn't get refreshed.\n    throw e;\n  }\n}\n/**\n * Replaces one LView in the tree with another one.\n * @param parentLView Parent of the LView being replaced.\n * @param oldLView LView being replaced.\n * @param newLView Replacement LView to be inserted.\n * @param index Index at which the LView should be inserted.\n */\nfunction replaceLViewInTree(parentLView, oldLView, newLView, index) {\n  // Update the sibling whose `NEXT` pointer refers to the old view.\n  for (let i = HEADER_OFFSET; i < parentLView[TVIEW].bindingStartIndex; i++) {\n    const current = parentLView[i];\n    if ((isLView(current) || isLContainer(current)) && current[NEXT] === oldLView) {\n      current[NEXT] = newLView;\n      break;\n    }\n  }\n  // Set the new view as the head, if the old view was first.\n  if (parentLView[CHILD_HEAD] === oldLView) {\n    parentLView[CHILD_HEAD] = newLView;\n  }\n  // Set the new view as the tail, if the old view was last.\n  if (parentLView[CHILD_TAIL] === oldLView) {\n    parentLView[CHILD_TAIL] = newLView;\n  }\n  // Update the `NEXT` pointer to the same as the old view.\n  newLView[NEXT] = oldLView[NEXT];\n  // Clear out the `NEXT` of the old view.\n  oldLView[NEXT] = null;\n  // Insert the new LView at the correct index.\n  parentLView[index] = newLView;\n}\n/**\n * Child nodes mutate the `projection` state of their parent node as they're being projected.\n * This function resets the `project` back to its initial state.\n * @param tNode\n */\nfunction resetProjectionState(tNode) {\n  // The `projection` is mutated by child nodes as they're being projected. We need to\n  // reset it to the initial state so projection works after the template is swapped out.\n  if (tNode.projection !== null) {\n    for (const current of tNode.projection) {\n      if (isTNodeShape(current)) {\n        // Reset `projectionNext` since it can affect the traversal order during projection.\n        current.projectionNext = null;\n        current.flags &= ~2 /* TNodeFlags.isProjected */;\n      }\n    }\n    tNode.projection = null;\n  }\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreEnv = /*#__PURE__*/(() => ({\n  'ɵɵattribute': ɵɵattribute,\n  'ɵɵdefineComponent': ɵɵdefineComponent,\n  'ɵɵdefineDirective': ɵɵdefineDirective,\n  'ɵɵdefineInjectable': __defineInjectable,\n  'ɵɵdefineInjector': __defineInjector,\n  'ɵɵdefineNgModule': ɵɵdefineNgModule,\n  'ɵɵdefinePipe': ɵɵdefinePipe,\n  'ɵɵdirectiveInject': ɵɵdirectiveInject,\n  'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n  'ɵɵinject': __inject,\n  'ɵɵinjectAttribute': ɵɵinjectAttribute,\n  'ɵɵinvalidFactory': ɵɵinvalidFactory,\n  'ɵɵinvalidFactoryDep': __invalidFactoryDep,\n  'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n  'ɵɵresetView': __resetView,\n  'ɵɵHostDirectivesFeature': ɵɵHostDirectivesFeature,\n  'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n  'ɵɵProvidersFeature': ɵɵProvidersFeature,\n  'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\n  'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n  'ɵɵExternalStylesFeature': ɵɵExternalStylesFeature,\n  'ɵɵnextContext': ɵɵnextContext,\n  'ɵɵnamespaceHTML': __namespaceHTML,\n  'ɵɵnamespaceMathML': __namespaceMathML,\n  'ɵɵnamespaceSVG': __namespaceSVG,\n  'ɵɵenableBindings': __enableBindings,\n  'ɵɵdisableBindings': __disableBindings,\n  'ɵɵelementStart': ɵɵelementStart,\n  'ɵɵelementEnd': ɵɵelementEnd,\n  'ɵɵelement': ɵɵelement,\n  'ɵɵelementContainerStart': ɵɵelementContainerStart,\n  'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n  'ɵɵdomElement': ɵɵdomElement,\n  'ɵɵdomElementStart': ɵɵdomElementStart,\n  'ɵɵdomElementEnd': ɵɵdomElementEnd,\n  'ɵɵdomElementContainer': ɵɵdomElementContainer,\n  'ɵɵdomElementContainerStart': ɵɵdomElementContainerStart,\n  'ɵɵdomElementContainerEnd': ɵɵdomElementContainerEnd,\n  'ɵɵdomTemplate': ɵɵdomTemplate,\n  'ɵɵdomListener': ɵɵdomListener,\n  'ɵɵelementContainer': ɵɵelementContainer,\n  'ɵɵpureFunction0': ɵɵpureFunction0,\n  'ɵɵpureFunction1': ɵɵpureFunction1,\n  'ɵɵpureFunction2': ɵɵpureFunction2,\n  'ɵɵpureFunction3': ɵɵpureFunction3,\n  'ɵɵpureFunction4': ɵɵpureFunction4,\n  'ɵɵpureFunction5': ɵɵpureFunction5,\n  'ɵɵpureFunction6': ɵɵpureFunction6,\n  'ɵɵpureFunction7': ɵɵpureFunction7,\n  'ɵɵpureFunction8': ɵɵpureFunction8,\n  'ɵɵpureFunctionV': ɵɵpureFunctionV,\n  'ɵɵgetCurrentView': ɵɵgetCurrentView,\n  'ɵɵrestoreView': __restoreView,\n  'ɵɵlistener': ɵɵlistener,\n  'ɵɵprojection': ɵɵprojection,\n  'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,\n  'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,\n  'ɵɵpipeBind1': ɵɵpipeBind1,\n  'ɵɵpipeBind2': ɵɵpipeBind2,\n  'ɵɵpipeBind3': ɵɵpipeBind3,\n  'ɵɵpipeBind4': ɵɵpipeBind4,\n  'ɵɵpipeBindV': ɵɵpipeBindV,\n  'ɵɵprojectionDef': ɵɵprojectionDef,\n  'ɵɵdomProperty': ɵɵdomProperty,\n  'ɵɵproperty': ɵɵproperty,\n  'ɵɵpipe': ɵɵpipe,\n  'ɵɵqueryRefresh': ɵɵqueryRefresh,\n  'ɵɵqueryAdvance': ɵɵqueryAdvance,\n  'ɵɵviewQuery': ɵɵviewQuery,\n  'ɵɵviewQuerySignal': ɵɵviewQuerySignal,\n  'ɵɵloadQuery': ɵɵloadQuery,\n  'ɵɵcontentQuery': ɵɵcontentQuery,\n  'ɵɵcontentQuerySignal': ɵɵcontentQuerySignal,\n  'ɵɵreference': ɵɵreference,\n  'ɵɵclassMap': ɵɵclassMap,\n  'ɵɵstyleMap': ɵɵstyleMap,\n  'ɵɵstyleProp': ɵɵstyleProp,\n  'ɵɵclassProp': ɵɵclassProp,\n  'ɵɵadvance': ɵɵadvance,\n  'ɵɵtemplate': ɵɵtemplate,\n  'ɵɵconditional': ɵɵconditional,\n  'ɵɵconditionalCreate': ɵɵconditionalCreate,\n  'ɵɵconditionalBranchCreate': ɵɵconditionalBranchCreate,\n  'ɵɵdefer': ɵɵdefer,\n  'ɵɵdeferWhen': ɵɵdeferWhen,\n  'ɵɵdeferOnIdle': ɵɵdeferOnIdle,\n  'ɵɵdeferOnImmediate': ɵɵdeferOnImmediate,\n  'ɵɵdeferOnTimer': ɵɵdeferOnTimer,\n  'ɵɵdeferOnHover': ɵɵdeferOnHover,\n  'ɵɵdeferOnInteraction': ɵɵdeferOnInteraction,\n  'ɵɵdeferOnViewport': ɵɵdeferOnViewport,\n  'ɵɵdeferPrefetchWhen': ɵɵdeferPrefetchWhen,\n  'ɵɵdeferPrefetchOnIdle': ɵɵdeferPrefetchOnIdle,\n  'ɵɵdeferPrefetchOnImmediate': ɵɵdeferPrefetchOnImmediate,\n  'ɵɵdeferPrefetchOnTimer': ɵɵdeferPrefetchOnTimer,\n  'ɵɵdeferPrefetchOnHover': ɵɵdeferPrefetchOnHover,\n  'ɵɵdeferPrefetchOnInteraction': ɵɵdeferPrefetchOnInteraction,\n  'ɵɵdeferPrefetchOnViewport': ɵɵdeferPrefetchOnViewport,\n  'ɵɵdeferHydrateWhen': ɵɵdeferHydrateWhen,\n  'ɵɵdeferHydrateNever': ɵɵdeferHydrateNever,\n  'ɵɵdeferHydrateOnIdle': ɵɵdeferHydrateOnIdle,\n  'ɵɵdeferHydrateOnImmediate': ɵɵdeferHydrateOnImmediate,\n  'ɵɵdeferHydrateOnTimer': ɵɵdeferHydrateOnTimer,\n  'ɵɵdeferHydrateOnHover': ɵɵdeferHydrateOnHover,\n  'ɵɵdeferHydrateOnInteraction': ɵɵdeferHydrateOnInteraction,\n  'ɵɵdeferHydrateOnViewport': ɵɵdeferHydrateOnViewport,\n  'ɵɵdeferEnableTimerScheduling': ɵɵdeferEnableTimerScheduling,\n  'ɵɵrepeater': ɵɵrepeater,\n  'ɵɵrepeaterCreate': ɵɵrepeaterCreate,\n  'ɵɵrepeaterTrackByIndex': ɵɵrepeaterTrackByIndex,\n  'ɵɵrepeaterTrackByIdentity': ɵɵrepeaterTrackByIdentity,\n  'ɵɵcomponentInstance': ɵɵcomponentInstance,\n  'ɵɵtext': ɵɵtext,\n  'ɵɵtextInterpolate': ɵɵtextInterpolate,\n  'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n  'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n  'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n  'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n  'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n  'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n  'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n  'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n  'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n  'ɵɵi18n': ɵɵi18n,\n  'ɵɵi18nAttributes': ɵɵi18nAttributes,\n  'ɵɵi18nExp': ɵɵi18nExp,\n  'ɵɵi18nStart': ɵɵi18nStart,\n  'ɵɵi18nEnd': ɵɵi18nEnd,\n  'ɵɵi18nApply': ɵɵi18nApply,\n  'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n  'ɵɵresolveWindow': ɵɵresolveWindow,\n  'ɵɵresolveDocument': ɵɵresolveDocument,\n  'ɵɵresolveBody': ɵɵresolveBody,\n  'ɵɵsetComponentScope': ɵɵsetComponentScope,\n  'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n  'ɵɵregisterNgModuleType': registerNgModuleType,\n  'ɵɵgetComponentDepsFactory': ɵɵgetComponentDepsFactory,\n  'ɵsetClassDebugInfo': ɵsetClassDebugInfo,\n  'ɵɵdeclareLet': ɵɵdeclareLet,\n  'ɵɵstoreLet': ɵɵstoreLet,\n  'ɵɵreadContextLet': ɵɵreadContextLet,\n  'ɵɵattachSourceLocations': ɵɵattachSourceLocations,\n  'ɵɵinterpolate': ɵɵinterpolate,\n  'ɵɵinterpolate1': ɵɵinterpolate1,\n  'ɵɵinterpolate2': ɵɵinterpolate2,\n  'ɵɵinterpolate3': ɵɵinterpolate3,\n  'ɵɵinterpolate4': ɵɵinterpolate4,\n  'ɵɵinterpolate5': ɵɵinterpolate5,\n  'ɵɵinterpolate6': ɵɵinterpolate6,\n  'ɵɵinterpolate7': ɵɵinterpolate7,\n  'ɵɵinterpolate8': ɵɵinterpolate8,\n  'ɵɵinterpolateV': ɵɵinterpolateV,\n  'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n  'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n  'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n  'ɵɵsanitizeScript': ɵɵsanitizeScript,\n  'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n  'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n  'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,\n  'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,\n  'ɵɵvalidateIframeAttribute': ɵɵvalidateIframeAttribute,\n  'forwardRef': forwardRef,\n  'resolveForwardRef': resolveForwardRef,\n  'ɵɵtwoWayProperty': ɵɵtwoWayProperty,\n  'ɵɵtwoWayBindingSet': ɵɵtwoWayBindingSet,\n  'ɵɵtwoWayListener': ɵɵtwoWayListener,\n  'ɵɵreplaceMetadata': ɵɵreplaceMetadata,\n  'ɵɵgetReplaceMetadataURL': ɵɵgetReplaceMetadataURL\n}))();\nlet jitOptions = null;\nfunction setJitOptions(options) {\n  if (jitOptions !== null) {\n    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {\n      ngDevMode && console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');\n      return;\n    }\n    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {\n      ngDevMode && console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');\n      return;\n    }\n  }\n  jitOptions = options;\n}\nfunction getJitOptions() {\n  return jitOptions;\n}\nfunction resetJitOptions() {\n  jitOptions = null;\n}\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n  moduleQueue.push({\n    moduleType,\n    ngModule\n  });\n}\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n  if (!flushingModuleQueue) {\n    flushingModuleQueue = true;\n    try {\n      for (let i = moduleQueue.length - 1; i >= 0; i--) {\n        const {\n          moduleType,\n          ngModule\n        } = moduleQueue[i];\n        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n          // dequeue\n          moduleQueue.splice(i, 1);\n          setScopeOnDeclaredComponents(moduleType, ngModule);\n        }\n      }\n    } finally {\n      flushingModuleQueue = false;\n    }\n  }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\nfunction isResolvedDeclaration(declaration) {\n  if (Array.isArray(declaration)) {\n    return declaration.every(isResolvedDeclaration);\n  }\n  return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n  compileNgModuleDefs(moduleType, ngModule);\n  if (ngModule.id !== undefined) {\n    registerNgModuleType(moduleType, ngModule.id);\n  }\n  // Because we don't know if all declarations have resolved yet at the moment the\n  // NgModule decorator is executing, we're enqueueing the setting of module scope\n  // on its declarations to be run at a later time when all declarations for the module,\n  // including forward refs, have resolved.\n  enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\n  ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n  ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n  let ngModuleDef = null;\n  Object.defineProperty(moduleType, NG_MOD_DEF, {\n    configurable: true,\n    get: () => {\n      if (ngModuleDef === null) {\n        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n          // We need to assert this immediately, because allowing it to continue will cause it to\n          // go into an infinite loop before we've reached the point where we throw all the errors.\n          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n        }\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n          type: moduleType,\n          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n          declarations: declarations.map(resolveForwardRef),\n          imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n          id: ngModule.id || null\n        });\n        // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n        // should verify that there are no unknown elements in a template. In AOT mode, that check\n        // happens at compile time and `schemas` information is not present on Component and Module\n        // defs after compilation (so the check doesn't happen the second time at runtime).\n        if (!ngModuleDef.schemas) {\n          ngModuleDef.schemas = [];\n        }\n      }\n      return ngModuleDef;\n    }\n  });\n  let ngFactoryDef = null;\n  Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n          name: moduleType.name,\n          type: moduleType,\n          deps: reflectDependencies(moduleType),\n          target: compiler.FactoryTarget.NgModule,\n          typeArgumentCount: 0\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n  let ngInjectorDef = null;\n  Object.defineProperty(moduleType, NG_INJ_DEF, {\n    get: () => {\n      if (ngInjectorDef === null) {\n        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n        const meta = {\n          name: moduleType.name,\n          type: moduleType,\n          providers: ngModule.providers || EMPTY_ARRAY,\n          imports: [(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)]\n        };\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n      }\n      return ngInjectorDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction generateStandaloneInDeclarationsError(type, location) {\n  const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\n  const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` + 'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\n  return `${prefix} ${location}, ${suffix}`;\n}\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n  if (verifiedNgModule.get(moduleType)) return;\n  // skip verifications of standalone components, directives, and pipes\n  if (isStandalone(moduleType)) return;\n  verifiedNgModule.set(moduleType, true);\n  moduleType = resolveForwardRef(moduleType);\n  let ngModuleDef;\n  if (importingModule) {\n    ngModuleDef = getNgModuleDef(moduleType);\n    if (!ngModuleDef) {\n      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  } else {\n    ngModuleDef = getNgModuleDefOrThrow(moduleType);\n  }\n  const errors = [];\n  const declarations = maybeUnwrapFn(ngModuleDef.declarations);\n  const imports = maybeUnwrapFn(ngModuleDef.imports);\n  flatten(imports).map(unwrapModuleWithProvidersImports).forEach(modOrStandaloneCmpt => {\n    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\n    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\n  });\n  const exports = maybeUnwrapFn(ngModuleDef.exports);\n  declarations.forEach(verifyDeclarationsHaveDefinitions);\n  declarations.forEach(verifyDirectivesHaveSelector);\n  declarations.forEach(declarationType => verifyNotStandalone(declarationType, moduleType));\n  const combinedDeclarations = [...declarations.map(resolveForwardRef), ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)];\n  exports.forEach(verifyExportsAreDeclaredOrReExported);\n  declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n  const ngModule = getAnnotation(moduleType, 'NgModule');\n  if (ngModule) {\n    ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n      verifySemanticsOfNgModuleImport(mod, moduleType);\n      verifySemanticsOfNgModuleDef(mod, false, moduleType);\n    });\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n  }\n  // Throw Error if any errors were detected.\n  if (errors.length) {\n    throw new Error(errors.join('\\n'));\n  }\n  ////////////////////////////////////////////////////////////////////////////////////////////////\n  function verifyDeclarationsHaveDefinitions(type) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    if (!def) {\n      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n    }\n  }\n  function verifyDirectivesHaveSelector(type) {\n    type = resolveForwardRef(type);\n    const def = getDirectiveDef(type);\n    if (!getComponentDef(type) && def && def.selectors.length == 0) {\n      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n    }\n  }\n  function verifyNotStandalone(type, moduleType) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    if (def?.standalone) {\n      const location = `\"${stringifyForError(moduleType)}\" NgModule`;\n      errors.push(generateStandaloneInDeclarationsError(type, location));\n    }\n  }\n  function verifyExportsAreDeclaredOrReExported(type) {\n    type = resolveForwardRef(type);\n    const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef$1(type) && 'pipe';\n    if (kind) {\n      // only checked if we are declared as Component, Directive, or Pipe\n      // Modules don't need to be declared or imported.\n      if (combinedDeclarations.lastIndexOf(type) === -1) {\n        // We are exporting something which we don't explicitly declare or import.\n        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n      }\n    }\n  }\n  function verifyDeclarationIsUnique(type, suppressErrors) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (existingModule && existingModule !== moduleType) {\n      if (!suppressErrors) {\n        const modules = [existingModule, moduleType].map(stringifyForError).sort();\n        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` + `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` + `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n      }\n    } else {\n      // Mark type as having owner.\n      ownerNgModule.set(type, moduleType);\n    }\n  }\n  function verifyComponentIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (!existingModule && !isStandalone(type)) {\n      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n  }\n  function verifyCorrectBootstrapType(type) {\n    type = resolveForwardRef(type);\n    if (!getComponentDef(type)) {\n      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n    }\n    if (isStandalone(type)) {\n      // Note: this error should be the same as the\n      // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\n      errors.push(`The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` + `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` + `function for bootstrap instead.`);\n    }\n  }\n  function verifySemanticsOfNgModuleImport(type, importingModule) {\n    type = resolveForwardRef(type);\n    const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n    if (directiveDef !== null && !directiveDef.standalone) {\n      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n    const pipeDef = getPipeDef$1(type);\n    if (pipeDef !== null && !pipeDef.standalone) {\n      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  }\n}\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n  return typeOrWithProviders.ngModule || typeOrWithProviders;\n}\nfunction getAnnotation(type, name) {\n  let annotation = null;\n  collect(type.__annotations__);\n  collect(type.decorators);\n  return annotation;\n  function collect(annotations) {\n    if (annotations) {\n      annotations.forEach(readAnnotation);\n    }\n  }\n  function readAnnotation(decorator) {\n    if (!annotation) {\n      const proto = Object.getPrototypeOf(decorator);\n      if (proto.ngMetadataName == name) {\n        annotation = decorator;\n      } else if (decorator.type) {\n        const proto = Object.getPrototypeOf(decorator.type);\n        if (proto.ngMetadataName == name) {\n          annotation = decorator.args[0];\n        }\n      }\n    }\n  }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\nlet ownerNgModule = /*#__PURE__*/new WeakMap();\nlet verifiedNgModule = /*#__PURE__*/new WeakMap();\nfunction resetCompiledComponents() {\n  ownerNgModule = new WeakMap();\n  verifiedNgModule = new WeakMap();\n  moduleQueue.length = 0;\n  GENERATED_COMP_IDS.clear();\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\nfunction computeCombinedExports(type) {\n  type = resolveForwardRef(type);\n  const ngModuleDef = getNgModuleDef(type);\n  // a standalone component, directive or pipe\n  if (ngModuleDef === null) {\n    return [type];\n  }\n  return flatten(maybeUnwrapFn(ngModuleDef.exports).map(type => {\n    const ngModuleDef = getNgModuleDef(type);\n    if (ngModuleDef) {\n      verifySemanticsOfNgModuleDef(type, false);\n      return computeCombinedExports(type);\n    } else {\n      return type;\n    }\n  }));\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n  const transitiveScopes = transitiveScopesFor(moduleType);\n  declarations.forEach(declaration => {\n    declaration = resolveForwardRef(declaration);\n    if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n      // A `ɵcmp` field exists - go ahead and patch the component directly.\n      const component = declaration;\n      const componentDef = getComponentDef(component);\n      patchComponentDefWithScope(componentDef, transitiveScopes);\n    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n      // Set `ngSelectorScope` for future reference when the component compilation finishes.\n      declaration.ngSelectorScope = moduleType;\n    }\n  });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir)).filter(def => !!def);\n  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));\n  componentDef.schemas = transitiveScopes.schemas;\n  // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n  // may face a problem where previously compiled defs available to a given Component/Directive\n  // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n  // order to avoid this problem, we force fresh TView to be created.\n  componentDef.tView = null;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\n * (either a NgModule or a standalone component / directive / pipe).\n */\nfunction transitiveScopesFor(type) {\n  if (isNgModule(type)) {\n    const scope = depsTracker.getNgModuleScope(type);\n    const def = getNgModuleDefOrThrow(type);\n    return {\n      schemas: def.schemas || null,\n      ...scope\n    };\n  } else if (isStandalone(type)) {\n    const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n    if (directiveDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set([type]),\n          pipes: new Set()\n        }\n      };\n    }\n    const pipeDef = getPipeDef$1(type);\n    if (pipeDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set(),\n          pipes: new Set([type])\n        }\n      };\n    }\n  }\n  // TODO: change the error message to be more user-facing and take standalone into account\n  throw new Error(`${type.name} does not have a module def (ɵmod property)`);\n}\nfunction expandModuleWithProviders(value) {\n  if (isModuleWithProviders(value)) {\n    return value.ngModule;\n  }\n  return value;\n}\n\n/**\n * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This\n * matters in the following scenario:\n *\n * Consider a component 'A' that extends component 'B', both declared in module 'M'. During\n * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,\n * potentially triggering compilation of 'B'. If this nested compilation were to trigger\n * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the\n * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of\n * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid\n * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure\n * all compilations have finished.\n */\nlet compilationDepth = 0;\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * component def (ɵcmp) onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n */\nfunction compileComponent(type, metadata) {\n  // Initialize ngDevMode. This must be the first statement in compileComponent.\n  // See the `initNgDevMode` docstring for more information.\n  (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n  let ngComponentDef = null;\n  // Metadata may have resources which need to be resolved.\n  maybeQueueResolutionOfComponentResources(type, metadata);\n  // Note that we're using the same function as `Directive`, because that's only subset of metadata\n  // that we need to create the ngFactoryDef. We're avoiding using the component metadata\n  // because we'd have to resolve the asynchronous templates.\n  addDirectiveFactoryDef(type, metadata);\n  Object.defineProperty(type, NG_COMP_DEF, {\n    get: () => {\n      if (ngComponentDef === null) {\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'component',\n          type: type\n        });\n        if (componentNeedsResolution(metadata)) {\n          const error = [`Component '${type.name}' is not resolved:`];\n          if (metadata.templateUrl) {\n            error.push(` - templateUrl: ${metadata.templateUrl}`);\n          }\n          if (metadata.styleUrls && metadata.styleUrls.length) {\n            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n          }\n          if (metadata.styleUrl) {\n            error.push(` - styleUrl: ${metadata.styleUrl}`);\n          }\n          error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n          throw new Error(error.join('\\n'));\n        }\n        // This const was called `jitOptions` previously but had to be renamed to `options` because\n        // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.\n        // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.\n        // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.\n        const options = getJitOptions();\n        let preserveWhitespaces = metadata.preserveWhitespaces;\n        if (preserveWhitespaces === undefined) {\n          if (options !== null && options.preserveWhitespaces !== undefined) {\n            preserveWhitespaces = options.preserveWhitespaces;\n          } else {\n            preserveWhitespaces = false;\n          }\n        }\n        let encapsulation = metadata.encapsulation;\n        if (encapsulation === undefined) {\n          if (options !== null && options.defaultEncapsulation !== undefined) {\n            encapsulation = options.defaultEncapsulation;\n          } else {\n            encapsulation = ViewEncapsulation.Emulated;\n          }\n        }\n        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;\n        const baseMeta = directiveMetadata(type, metadata);\n        const meta = {\n          ...baseMeta,\n          typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),\n          template: metadata.template || '',\n          preserveWhitespaces,\n          styles: typeof metadata.styles === 'string' ? [metadata.styles] : metadata.styles || EMPTY_ARRAY,\n          animations: metadata.animations,\n          // JIT components are always compiled against an empty set of `declarations`. Instead, the\n          // `directiveDefs` and `pipeDefs` are updated at a later point:\n          //  * for NgModule-based components, they're set when the NgModule which declares the\n          //    component resolves in the module scoping queue\n          //  * for standalone components, they're set just below, after `compileComponent`.\n          declarations: [],\n          changeDetection: metadata.changeDetection,\n          encapsulation,\n          interpolation: metadata.interpolation,\n          viewProviders: metadata.viewProviders || null,\n          // We can't inspect whether any of the dependencies are actually directives, because they\n          // get patched on after compilation. That's why in JIT mode we consider that any\n          // dependency might be a directive dependency.\n          hasDirectiveDependencies: !baseMeta.isStandalone || metadata.imports != null && metadata.imports.length > 0\n        };\n        compilationDepth++;\n        try {\n          if (meta.usesInheritance) {\n            addDirectiveDefToUndecoratedParents(type);\n          }\n          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n          if (meta.isStandalone) {\n            // Patch the component definition for standalone components with `directiveDefs` and\n            // `pipeDefs` functions which lazily compute the directives/pipes available in the\n            // standalone component. Also set `dependencies` to the lazily resolved list of imports.\n            const imports = flatten(metadata.imports || EMPTY_ARRAY);\n            const {\n              directiveDefs,\n              pipeDefs\n            } = getStandaloneDefFunctions(type, imports);\n            ngComponentDef.directiveDefs = directiveDefs;\n            ngComponentDef.pipeDefs = pipeDefs;\n            ngComponentDef.dependencies = () => imports.map(resolveForwardRef);\n          }\n        } finally {\n          // Ensure that the compilation depth is decremented even when the compilation failed.\n          compilationDepth--;\n        }\n        if (compilationDepth === 0) {\n          // When NgModule decorator executed, we enqueued the module definition such that\n          // it would only dequeue and add itself as module scope to all of its declarations,\n          // but only if  if all of its declarations had resolved. This call runs the check\n          // to see if any modules that are in the queue can be dequeued and add scope to\n          // their declarations.\n          flushModuleScopingQueueAsMuchAsPossible();\n        }\n        // If component compilation is async, then the @NgModule annotation which declares the\n        // component may execute and set an ngSelectorScope property on the component type. This\n        // allows the component to patch itself with directiveDefs from the module after it\n        // finishes compiling.\n        if (hasSelectorScope(type)) {\n          const scopes = transitiveScopesFor(type.ngSelectorScope);\n          patchComponentDefWithScope(ngComponentDef, scopes);\n        }\n        if (metadata.schemas) {\n          if (meta.isStandalone) {\n            ngComponentDef.schemas = metadata.schemas;\n          } else {\n            throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);\n          }\n        } else if (meta.isStandalone) {\n          ngComponentDef.schemas = [];\n        }\n      }\n      return ngComponentDef;\n    },\n    set: def => {\n      ngComponentDef = def;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\n/**\n * Build memoized `directiveDefs` and `pipeDefs` functions for the component definition of a\n * standalone component, which process `imports` and filter out directives and pipes. The use of\n * memoized functions here allows for the delayed resolution of any `forwardRef`s present in the\n * component's `imports`.\n */\nfunction getStandaloneDefFunctions(type, imports) {\n  const directiveDefs = () => {\n    if (ngDevMode) {\n      for (const rawDep of imports) {\n        verifyStandaloneImport(rawDep, type);\n      }\n    }\n    if (!isComponent(type)) {\n      return [];\n    }\n    const scope = depsTracker.getStandaloneComponentScope(type, imports);\n    return [...scope.compilation.directives].map(p => getComponentDef(p) || getDirectiveDef(p)).filter(d => d !== null);\n  };\n  const pipeDefs = () => {\n    if (ngDevMode) {\n      for (const rawDep of imports) {\n        verifyStandaloneImport(rawDep, type);\n      }\n    }\n    if (!isComponent(type)) {\n      return [];\n    }\n    const scope = depsTracker.getStandaloneComponentScope(type, imports);\n    return [...scope.compilation.pipes].map(p => getPipeDef$1(p)).filter(d => d !== null);\n  };\n  return {\n    directiveDefs,\n    pipeDefs\n  };\n}\nfunction hasSelectorScope(component) {\n  return component.ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * directive def onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nfunction compileDirective(type, directive) {\n  let ngDirectiveDef = null;\n  addDirectiveFactoryDef(type, directive || {});\n  Object.defineProperty(type, NG_DIR_DEF, {\n    get: () => {\n      if (ngDirectiveDef === null) {\n        // `directive` can be null in the case of abstract directives as a base class\n        // that use `@Directive()` with no selector. In that case, pass empty object to the\n        // `directiveMetadata` function instead of null.\n        const meta = getDirectiveMetadata(type, directive || {});\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'directive',\n          type\n        });\n        ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);\n      }\n      return ngDirectiveDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction getDirectiveMetadata(type, metadata) {\n  const name = type && type.name;\n  const sourceMapUrl = `ng:///${name}/ɵdir.js`;\n  const compiler = getCompilerFacade({\n    usage: 0 /* JitCompilerUsage.Decorator */,\n    kind: 'directive',\n    type\n  });\n  const facade = directiveMetadata(type, metadata);\n  facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\n  if (facade.usesInheritance) {\n    addDirectiveDefToUndecoratedParents(type);\n  }\n  return {\n    metadata: facade,\n    sourceMapUrl\n  };\n}\nfunction addDirectiveFactoryDef(type, metadata) {\n  let ngFactoryDef = null;\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const meta = getDirectiveMetadata(type, metadata);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'directive',\n          type\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/ɵfac.js`, {\n          name: meta.metadata.name,\n          type: meta.metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Directive\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction extendsDirectlyFromObject(type) {\n  return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n */\nfunction directiveMetadata(type, metadata) {\n  // Reflect inputs and outputs.\n  const reflect = getReflect();\n  const propMetadata = reflect.ownPropMetadata(type);\n  return {\n    name: type.name,\n    type: type,\n    selector: metadata.selector !== undefined ? metadata.selector : null,\n    host: metadata.host || EMPTY_OBJ,\n    propMetadata: propMetadata,\n    inputs: metadata.inputs || EMPTY_ARRAY,\n    outputs: metadata.outputs || EMPTY_ARRAY,\n    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n    lifecycle: {\n      usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')\n    },\n    typeSourceSpan: null,\n    usesInheritance: !extendsDirectlyFromObject(type),\n    exportAs: extractExportAs(metadata.exportAs),\n    providers: metadata.providers || null,\n    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n    isStandalone: metadata.standalone === undefined ? true : !!metadata.standalone,\n    isSignal: !!metadata.signals,\n    hostDirectives: metadata.hostDirectives?.map(directive => typeof directive === 'function' ? {\n      directive\n    } : directive) || null\n  };\n}\n/**\n * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.\n */\nfunction addDirectiveDefToUndecoratedParents(type) {\n  const objPrototype = Object.prototype;\n  let parent = Object.getPrototypeOf(type.prototype).constructor;\n  // Go up the prototype until we hit `Object`.\n  while (parent && parent !== objPrototype) {\n    // Since inheritance works if the class was annotated already, we only need to add\n    // the def if there are no annotations and the def hasn't been created already.\n    if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {\n      compileDirective(parent, null);\n    }\n    parent = Object.getPrototypeOf(parent);\n  }\n}\nfunction convertToR3QueryPredicate(selector) {\n  return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\nfunction convertToR3QueryMetadata(propertyName, ann) {\n  return {\n    propertyName: propertyName,\n    predicate: convertToR3QueryPredicate(ann.selector),\n    descendants: ann.descendants,\n    first: ann.first,\n    read: ann.read ? ann.read : null,\n    static: !!ann.static,\n    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,\n    isSignal: !!ann.isSignal\n  };\n}\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n  const queriesMeta = [];\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      const annotations = propMetadata[field];\n      annotations.forEach(ann => {\n        if (isQueryAnn(ann)) {\n          if (!ann.selector) {\n            throw new Error(`Can't construct a query for the property \"${field}\" of ` + `\"${stringifyForError(type)}\" since the query selector wasn't defined.`);\n          }\n          if (annotations.some(isInputAnnotation)) {\n            throw new Error(`Cannot combine @Input decorators with query decorators`);\n          }\n          queriesMeta.push(convertToR3QueryMetadata(field, ann));\n        }\n      });\n    }\n  }\n  return queriesMeta;\n}\nfunction extractExportAs(exportAs) {\n  return exportAs === undefined ? null : splitByComma(exportAs);\n}\nfunction isContentQuery(value) {\n  const name = value.ngMetadataName;\n  return name === 'ContentChild' || name === 'ContentChildren';\n}\nfunction isViewQuery(value) {\n  const name = value.ngMetadataName;\n  return name === 'ViewChild' || name === 'ViewChildren';\n}\nfunction isInputAnnotation(value) {\n  return value.ngMetadataName === 'Input';\n}\nfunction splitByComma(value) {\n  return value.split(',').map(piece => piece.trim());\n}\nconst LIFECYCLE_HOOKS = ['ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked', 'ngAfterContentInit', 'ngAfterContentChecked'];\nfunction shouldAddAbstractDirective(type) {\n  const reflect = getReflect();\n  if (LIFECYCLE_HOOKS.some(hookName => reflect.hasLifecycleHook(type, hookName))) {\n    return true;\n  }\n  const propMetadata = reflect.propMetadata(type);\n  for (const field in propMetadata) {\n    const annotations = propMetadata[field];\n    for (let i = 0; i < annotations.length; i++) {\n      const current = annotations[i];\n      const metadataName = current.ngMetadataName;\n      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === 'Output' || metadataName === 'HostBinding' || metadataName === 'HostListener') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction compilePipe(type, meta) {\n  let ngPipeDef = null;\n  let ngFactoryDef = null;\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'pipe',\n          type: metadata.type\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/ɵfac.js`, {\n          name: metadata.name,\n          type: metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Pipe\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n  Object.defineProperty(type, NG_PIPE_DEF, {\n    get: () => {\n      if (ngPipeDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'pipe',\n          type: metadata.type\n        });\n        ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/ɵpipe.js`, metadata);\n      }\n      return ngPipeDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction getPipeMetadata(type, meta) {\n  return {\n    type: type,\n    name: type.name,\n    pipeName: meta.name,\n    pure: meta.pure !== undefined ? meta.pure : true,\n    isStandalone: meta.standalone === undefined ? true : !!meta.standalone\n  };\n}\n\n/**\n * Type of the Directive metadata.\n *\n * @publicApi\n */\nconst Directive = /*#__PURE__*/makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => compileDirective(type, meta));\n/**\n * Component decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Component = /*#__PURE__*/makeDecorator('Component', (c = {}) => ({\n  changeDetection: ChangeDetectionStrategy.Default,\n  ...c\n}), Directive, undefined, (type, meta) => compileComponent(type, meta));\n/**\n * @Annotation\n * @publicApi\n */\nconst Pipe = /*#__PURE__*/makeDecorator('Pipe', p => ({\n  pure: true,\n  ...p\n}), undefined, undefined, (type, meta) => compilePipe(type, meta));\n/**\n * @Annotation\n * @publicApi\n */\nconst Input = /*#__PURE__*/makePropDecorator('Input', arg => {\n  if (!arg) {\n    return {};\n  }\n  return typeof arg === 'string' ? {\n    alias: arg\n  } : arg;\n});\n/**\n * @Annotation\n * @publicApi\n */\nconst Output = /*#__PURE__*/makePropDecorator('Output', alias => ({\n  alias\n}));\n/**\n * @Annotation\n * @publicApi\n */\nconst HostBinding = /*#__PURE__*/makePropDecorator('HostBinding', hostPropertyName => ({\n  hostPropertyName\n}));\n/**\n * @Annotation\n * @publicApi\n */\nconst HostListener = /*#__PURE__*/makePropDecorator('HostListener', (eventName, args) => ({\n  eventName,\n  args\n}));\n\n/**\n * @Annotation\n */\nconst NgModule = /*#__PURE__*/makeDecorator('NgModule', ngModule => ngModule, undefined, undefined,\n/**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` option configures the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n */\n(type, meta) => compileNgModule(type, meta));\n\n/**\n * Combination of NgModuleFactory and ComponentFactories.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n */\nclass ModuleWithComponentFactories {\n  ngModuleFactory;\n  componentFactories;\n  constructor(ngModuleFactory, componentFactories) {\n    this.ngModuleFactory = ngModuleFactory;\n    this.componentFactories = componentFactories;\n  }\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n */\nlet Compiler = /*#__PURE__*/(() => {\n  class Compiler {\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components\n     * have to be inlined.\n     */\n    compileModuleSync(moduleType) {\n      return new NgModuleFactory(moduleType);\n    }\n    /**\n     * Compiles the given NgModule and all of its components\n     */\n    compileModuleAsync(moduleType) {\n      return Promise.resolve(this.compileModuleSync(moduleType));\n    }\n    /**\n     * Same as {@link Compiler#compileModuleSync compileModuleSync} but also creates ComponentFactories for all components.\n     */\n    compileModuleAndAllComponentsSync(moduleType) {\n      const ngModuleFactory = this.compileModuleSync(moduleType);\n      const moduleDef = getNgModuleDef(moduleType);\n      const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {\n        const componentDef = getComponentDef(declaration);\n        componentDef && factories.push(new ComponentFactory(componentDef));\n        return factories;\n      }, []);\n      return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    }\n    /**\n     * Same as {@link Compiler#compileModuleAsync compileModuleAsync} but also creates ComponentFactories for all components.\n     */\n    compileModuleAndAllComponentsAsync(moduleType) {\n      return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\n    }\n    /**\n     * Clears all caches.\n     */\n    clearCache() {}\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    clearCacheFor(type) {}\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    getModuleId(moduleType) {\n      return undefined;\n    }\n    static ɵfac = function Compiler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Compiler)();\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: Compiler,\n      factory: Compiler.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Compiler;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Compiler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nconst COMPILER_OPTIONS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'compilerOptions' : '');\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n */\nclass CompilerFactory {}\nlet NgZoneChangeDetectionScheduler = /*#__PURE__*/(() => {\n  class NgZoneChangeDetectionScheduler {\n    zone = inject(NgZone);\n    changeDetectionScheduler = inject(ChangeDetectionScheduler);\n    applicationRef = inject(ApplicationRef);\n    applicationErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n    _onMicrotaskEmptySubscription;\n    initialize() {\n      if (this._onMicrotaskEmptySubscription) {\n        return;\n      }\n      this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({\n        next: () => {\n          // `onMicroTaskEmpty` can happen _during_ the zoneless scheduler change detection because\n          // zone.run(() => {}) will result in `checkStable` at the end of the `zone.run` closure\n          // and emit `onMicrotaskEmpty` synchronously if run coalsecing is false.\n          if (this.changeDetectionScheduler.runningTick) {\n            return;\n          }\n          this.zone.run(() => {\n            try {\n              this.applicationRef.dirtyFlags |= 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */;\n              this.applicationRef._tick();\n            } catch (e) {\n              this.applicationErrorHandler(e);\n            }\n          });\n        }\n      });\n    }\n    ngOnDestroy() {\n      this._onMicrotaskEmptySubscription?.unsubscribe();\n    }\n    static ɵfac = function NgZoneChangeDetectionScheduler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgZoneChangeDetectionScheduler)();\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: NgZoneChangeDetectionScheduler,\n      factory: NgZoneChangeDetectionScheduler.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NgZoneChangeDetectionScheduler;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(NgZoneChangeDetectionScheduler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Internal token used to verify that `provideZoneChangeDetection` is not used\n * with the bootstrapModule API.\n */\nconst PROVIDED_NG_ZONE = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'provideZoneChangeDetection token' : '', {\n  factory: () => false\n});\nfunction internalProvideZoneChangeDetection({\n  ngZoneFactory,\n  ignoreChangesOutsideZone,\n  scheduleInRootZone\n}) {\n  ngZoneFactory ??= () => new NgZone({\n    ...getNgZoneOptions(),\n    scheduleInRootZone\n  });\n  return [{\n    provide: NgZone,\n    useFactory: ngZoneFactory\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory: () => {\n      const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, {\n        optional: true\n      });\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && ngZoneChangeDetectionScheduler === null) {\n        throw new RuntimeError(402 /* RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP */, `A required Injectable was not found in the dependency injection tree. ` + 'If you are bootstrapping an NgModule, make sure that the `BrowserModule` is imported.');\n      }\n      return () => ngZoneChangeDetectionScheduler.initialize();\n    }\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory: () => {\n      const service = inject(ZoneStablePendingTask);\n      return () => {\n        service.initialize();\n      };\n    }\n  },\n  // Always disable scheduler whenever explicitly disabled, even if another place called\n  // `provideZoneChangeDetection` without the 'ignore' option.\n  ignoreChangesOutsideZone === true ? {\n    provide: ZONELESS_SCHEDULER_DISABLED,\n    useValue: true\n  } : [], {\n    provide: SCHEDULE_IN_ROOT_ZONE,\n    useValue: scheduleInRootZone ?? SCHEDULE_IN_ROOT_ZONE_DEFAULT\n  }, {\n    provide: INTERNAL_APPLICATION_ERROR_HANDLER,\n    useFactory: () => {\n      const zone = inject(NgZone);\n      const injector = inject(EnvironmentInjector);\n      let userErrorHandler;\n      return e => {\n        zone.runOutsideAngular(() => {\n          if (injector.destroyed && !userErrorHandler) {\n            setTimeout(() => {\n              throw e;\n            });\n          } else {\n            userErrorHandler ??= injector.get(ErrorHandler);\n            userErrorHandler.handleError(e);\n          }\n        });\n      };\n    }\n  }];\n}\n/**\n * Provides `NgZone`-based change detection for the application bootstrapped using\n * `bootstrapApplication`.\n *\n * `NgZone` is already provided in applications by default. This provider allows you to configure\n * options like `eventCoalescing` in the `NgZone`.\n * This provider is not available for `platformBrowser().bootstrapModule`, which uses\n * `BootstrapOptions` instead.\n *\n * @usageNotes\n * ```ts\n * bootstrapApplication(MyApp, {providers: [\n *   provideZoneChangeDetection({eventCoalescing: true}),\n * ]});\n * ```\n *\n * @publicApi\n * @see {@link /api/platform-browser/bootstrapApplication bootstrapApplication}\n * @see {@link NgZoneOptions}\n */\nfunction provideZoneChangeDetection(options) {\n  const ignoreChangesOutsideZone = options?.ignoreChangesOutsideZone;\n  const scheduleInRootZone = options?.scheduleInRootZone;\n  const zoneProviders = internalProvideZoneChangeDetection({\n    ngZoneFactory: () => {\n      const ngZoneOptions = getNgZoneOptions(options);\n      ngZoneOptions.scheduleInRootZone = scheduleInRootZone;\n      if (ngZoneOptions.shouldCoalesceEventChangeDetection) {\n        performanceMarkFeature('NgZone_CoalesceEvent');\n      }\n      return new NgZone(ngZoneOptions);\n    },\n    ignoreChangesOutsideZone,\n    scheduleInRootZone\n  });\n  return makeEnvironmentProviders([{\n    provide: PROVIDED_NG_ZONE,\n    useValue: true\n  }, {\n    provide: ZONELESS_ENABLED,\n    useValue: false\n  }, zoneProviders]);\n}\n// Transforms a set of `BootstrapOptions` (supported by the NgModule-based bootstrap APIs) ->\n// `NgZoneOptions` that are recognized by the NgZone constructor. Passing no options will result in\n// a set of default options returned.\nfunction getNgZoneOptions(options) {\n  return {\n    enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,\n    shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,\n    shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false\n  };\n}\nlet ZoneStablePendingTask = /*#__PURE__*/(() => {\n  class ZoneStablePendingTask {\n    subscription = new Subscription();\n    initialized = false;\n    zone = inject(NgZone);\n    pendingTasks = inject(PendingTasksInternal);\n    initialize() {\n      if (this.initialized) {\n        return;\n      }\n      this.initialized = true;\n      let task = null;\n      if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\n        task = this.pendingTasks.add();\n      }\n      this.zone.runOutsideAngular(() => {\n        this.subscription.add(this.zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          queueMicrotask(() => {\n            if (task !== null && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\n              this.pendingTasks.remove(task);\n              task = null;\n            }\n          });\n        }));\n      });\n      this.subscription.add(this.zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        task ??= this.pendingTasks.add();\n      }));\n    }\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n    static ɵfac = function ZoneStablePendingTask_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ZoneStablePendingTask)();\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: ZoneStablePendingTask,\n      factory: ZoneStablePendingTask.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ZoneStablePendingTask;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ZoneStablePendingTask, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT = 100;\nlet consecutiveMicrotaskNotifications = 0;\nlet stackFromLastFewNotifications = [];\nfunction trackMicrotaskNotificationForDebugging() {\n  consecutiveMicrotaskNotifications++;\n  if (CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT - consecutiveMicrotaskNotifications < 5) {\n    const stack = new Error().stack;\n    if (stack) {\n      stackFromLastFewNotifications.push(stack);\n    }\n  }\n  if (consecutiveMicrotaskNotifications === CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT) {\n    throw new RuntimeError(103 /* RuntimeErrorCode.INFINITE_CHANGE_DETECTION */, 'Angular could not stabilize because there were endless change notifications within the browser event loop. ' + 'The stack from the last several notifications: \\n' + stackFromLastFewNotifications.join('\\n'));\n  }\n}\nlet ChangeDetectionSchedulerImpl = /*#__PURE__*/(() => {\n  class ChangeDetectionSchedulerImpl {\n    applicationErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n    appRef = inject(ApplicationRef);\n    taskService = inject(PendingTasksInternal);\n    ngZone = inject(NgZone);\n    zonelessEnabled = inject(ZONELESS_ENABLED);\n    tracing = inject(TracingService, {\n      optional: true\n    });\n    disableScheduling = inject(ZONELESS_SCHEDULER_DISABLED, {\n      optional: true\n    }) ?? false;\n    zoneIsDefined = typeof Zone !== 'undefined' && !!Zone.root.run;\n    schedulerTickApplyArgs = [{\n      data: {\n        '__scheduler_tick__': true\n      }\n    }];\n    subscriptions = new Subscription();\n    angularZoneId = this.zoneIsDefined ? this.ngZone._inner?.get(angularZoneInstanceIdProperty) : null;\n    scheduleInRootZone = !this.zonelessEnabled && this.zoneIsDefined && (inject(SCHEDULE_IN_ROOT_ZONE, {\n      optional: true\n    }) ?? false);\n    cancelScheduledCallback = null;\n    useMicrotaskScheduler = false;\n    runningTick = false;\n    pendingRenderTaskId = null;\n    constructor() {\n      this.subscriptions.add(this.appRef.afterTick.subscribe(() => {\n        // If the scheduler isn't running a tick but the application ticked, that means\n        // someone called ApplicationRef.tick manually. In this case, we should cancel\n        // any change detections that had been scheduled so we don't run an extra one.\n        if (!this.runningTick) {\n          this.cleanup();\n        }\n      }));\n      this.subscriptions.add(this.ngZone.onUnstable.subscribe(() => {\n        // If the zone becomes unstable when we're not running tick (this happens from the zone.run),\n        // we should cancel any scheduled change detection here because at this point we\n        // know that the zone will stabilize at some point and run change detection itself.\n        if (!this.runningTick) {\n          this.cleanup();\n        }\n      }));\n      // TODO(atscott): These conditions will need to change when zoneless is the default\n      // Instead, they should flip to checking if ZoneJS scheduling is provided\n      this.disableScheduling ||= !this.zonelessEnabled && (\n      // NoopNgZone without enabling zoneless means no scheduling whatsoever\n      this.ngZone instanceof NoopNgZone ||\n      // The same goes for the lack of Zone without enabling zoneless scheduling\n      !this.zoneIsDefined);\n    }\n    notify(source) {\n      if (!this.zonelessEnabled && source === 5 /* NotificationSource.Listener */) {\n        // When the notification comes from a listener, we skip the notification unless the\n        // application has enabled zoneless. Ideally, listeners wouldn't notify the scheduler at all\n        // automatically. We do not know that a developer made a change in the listener callback that\n        // requires an `ApplicationRef.tick` (synchronize templates / run render hooks). We do this\n        // only for an easier migration from OnPush components to zoneless. Because listeners are\n        // usually executed inside the Angular zone and listeners automatically call `markViewDirty`,\n        // developers never needed to manually use `ChangeDetectorRef.markForCheck` or some other API\n        // to make listener callbacks work correctly with `OnPush` components.\n        return;\n      }\n      let force = false;\n      switch (source) {\n        case 0 /* NotificationSource.MarkAncestorsForTraversal */:\n          {\n            this.appRef.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\n            break;\n          }\n        case 3 /* NotificationSource.DebugApplyChanges */:\n        case 2 /* NotificationSource.DeferBlockStateUpdate */:\n        case 4 /* NotificationSource.MarkForCheck */:\n        case 5 /* NotificationSource.Listener */:\n        case 1 /* NotificationSource.SetInput */:\n          {\n            this.appRef.dirtyFlags |= 4 /* ApplicationRefDirtyFlags.ViewTreeCheck */;\n            break;\n          }\n        case 6 /* NotificationSource.CustomElement */:\n          {\n            // We use `ViewTreeTraversal` to ensure we refresh the element even if this is triggered\n            // during CD. In practice this is a no-op since the elements code also calls via a\n            // `markForRefresh()` API which sends `NotificationSource.MarkAncestorsForTraversal` anyway.\n            this.appRef.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\n            force = true;\n            break;\n          }\n        case 12 /* NotificationSource.RootEffect */:\n          {\n            this.appRef.dirtyFlags |= 16 /* ApplicationRefDirtyFlags.RootEffects */;\n            // Root effects still force a CD, even if the scheduler is disabled. This ensures that\n            // effects always run, even when triggered from outside the zone when the scheduler is\n            // otherwise disabled.\n            force = true;\n            break;\n          }\n        case 13 /* NotificationSource.ViewEffect */:\n          {\n            // This is technically a no-op, since view effects will also send a\n            // `MarkAncestorsForTraversal` notification. Still, we set this for logical consistency.\n            this.appRef.dirtyFlags |= 2 /* ApplicationRefDirtyFlags.ViewTreeTraversal */;\n            // View effects still force a CD, even if the scheduler is disabled. This ensures that\n            // effects always run, even when triggered from outside the zone when the scheduler is\n            // otherwise disabled.\n            force = true;\n            break;\n          }\n        case 11 /* NotificationSource.PendingTaskRemoved */:\n          {\n            // Removing a pending task via the public API forces a scheduled tick, ensuring that\n            // stability is async and delayed until there was at least an opportunity to run\n            // application synchronization. This prevents some footguns when working with the\n            // public API for pending tasks where developers attempt to update application state\n            // immediately after removing the last task.\n            force = true;\n            break;\n          }\n        case 9 /* NotificationSource.ViewDetachedFromDOM */:\n        case 8 /* NotificationSource.ViewAttached */:\n        case 7 /* NotificationSource.RenderHook */:\n        case 10 /* NotificationSource.AsyncAnimationsLoaded */:\n        default:\n          {\n            // These notifications only schedule a tick but do not change whether we should refresh\n            // views. Instead, we only need to run render hooks unless another notification from the\n            // other set is also received before `tick` happens.\n            this.appRef.dirtyFlags |= 8 /* ApplicationRefDirtyFlags.AfterRender */;\n          }\n      }\n      // If not already defined, attempt to capture a tracing snapshot of this\n      // notification so that the resulting CD run can be attributed to the\n      // context which produced the notification.\n      this.appRef.tracingSnapshot = this.tracing?.snapshot(this.appRef.tracingSnapshot) ?? null;\n      if (!this.shouldScheduleTick(force)) {\n        return;\n      }\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (this.useMicrotaskScheduler) {\n          trackMicrotaskNotificationForDebugging();\n        } else {\n          consecutiveMicrotaskNotifications = 0;\n          stackFromLastFewNotifications.length = 0;\n        }\n      }\n      const scheduleCallback = this.useMicrotaskScheduler ? scheduleCallbackWithMicrotask : scheduleCallbackWithRafRace;\n      this.pendingRenderTaskId = this.taskService.add();\n      if (this.scheduleInRootZone) {\n        this.cancelScheduledCallback = Zone.root.run(() => scheduleCallback(() => this.tick()));\n      } else {\n        this.cancelScheduledCallback = this.ngZone.runOutsideAngular(() => scheduleCallback(() => this.tick()));\n      }\n    }\n    shouldScheduleTick(force) {\n      if (this.disableScheduling && !force || this.appRef.destroyed) {\n        return false;\n      }\n      // already scheduled or running\n      if (this.pendingRenderTaskId !== null || this.runningTick || this.appRef._runningTick) {\n        return false;\n      }\n      // If we're inside the zone don't bother with scheduler. Zone will stabilize\n      // eventually and run change detection.\n      if (!this.zonelessEnabled && this.zoneIsDefined && Zone.current.get(angularZoneInstanceIdProperty + this.angularZoneId)) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Calls ApplicationRef._tick inside the `NgZone`.\n     *\n     * Calling `tick` directly runs change detection and cancels any change detection that had been\n     * scheduled previously.\n     *\n     * @param shouldRefreshViews Passed directly to `ApplicationRef._tick` and skips straight to\n     *     render hooks when `false`.\n     */\n    tick() {\n      // When ngZone.run below exits, onMicrotaskEmpty may emit if the zone is\n      // stable. We want to prevent double ticking so we track whether the tick is\n      // already running and skip it if so.\n      if (this.runningTick || this.appRef.destroyed) {\n        return;\n      }\n      // If we reach the tick and there is no work to be done in ApplicationRef.tick,\n      // skip it altogether and clean up. There may be no work if, for example, the only\n      // event that notified the scheduler was the removal of a pending task.\n      if (this.appRef.dirtyFlags === 0 /* ApplicationRefDirtyFlags.None */) {\n        this.cleanup();\n        return;\n      }\n      // The scheduler used to pass \"whether to check views\" as a boolean flag instead of setting\n      // fine-grained dirtiness flags, and global checking was always used on the first pass. This\n      // created an interesting edge case: if a notification made a view dirty and then ticked via the\n      // scheduler (and not the zone) a global check was still performed.\n      //\n      // Ideally, this would not be the case, and only zone-based ticks would do global passes.\n      // However this is a breaking change and requires fixes in g3. Until this cleanup can be done,\n      // we add the `ViewTreeGlobal` flag to request a global check if any views are dirty in a\n      // scheduled tick (unless zoneless is enabled, in which case global checks aren't really a\n      // thing).\n      //\n      // TODO(alxhub): clean up and remove this workaround as a breaking change.\n      if (!this.zonelessEnabled && this.appRef.dirtyFlags & 7 /* ApplicationRefDirtyFlags.ViewTreeAny */) {\n        this.appRef.dirtyFlags |= 1 /* ApplicationRefDirtyFlags.ViewTreeGlobal */;\n      }\n      const task = this.taskService.add();\n      try {\n        this.ngZone.run(() => {\n          this.runningTick = true;\n          this.appRef._tick();\n        }, undefined, this.schedulerTickApplyArgs);\n      } catch (e) {\n        this.taskService.remove(task);\n        this.applicationErrorHandler(e);\n      } finally {\n        this.cleanup();\n      }\n      // If we're notified of a change within 1 microtask of running change\n      // detection, run another round in the same event loop. This allows code\n      // which uses Promise.resolve (see NgModel) to avoid\n      // ExpressionChanged...Error to still be reflected in a single browser\n      // paint, even if that spans multiple rounds of change detection.\n      this.useMicrotaskScheduler = true;\n      scheduleCallbackWithMicrotask(() => {\n        this.useMicrotaskScheduler = false;\n        this.taskService.remove(task);\n      });\n    }\n    ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n      this.cleanup();\n    }\n    cleanup() {\n      this.runningTick = false;\n      this.cancelScheduledCallback?.();\n      this.cancelScheduledCallback = null;\n      // If this is the last task, the service will synchronously emit a stable\n      // notification. If there is a subscriber that then acts in a way that\n      // tries to notify the scheduler again, we need to be able to respond to\n      // schedule a new change detection. Therefore, we should clear the task ID\n      // before removing it from the pending tasks (or the tasks service should\n      // not synchronously emit stable, similar to how Zone stableness only\n      // happens if it's still stable after a microtask).\n      if (this.pendingRenderTaskId !== null) {\n        const taskId = this.pendingRenderTaskId;\n        this.pendingRenderTaskId = null;\n        this.taskService.remove(taskId);\n      }\n    }\n    static ɵfac = function ChangeDetectionSchedulerImpl_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ChangeDetectionSchedulerImpl)();\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: ChangeDetectionSchedulerImpl,\n      factory: ChangeDetectionSchedulerImpl.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ChangeDetectionSchedulerImpl;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ChangeDetectionSchedulerImpl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n/**\n * Provides change detection without ZoneJS for the application bootstrapped using\n * `bootstrapApplication`.\n *\n * This function allows you to configure the application to not use the state/state changes of\n * ZoneJS to schedule change detection in the application. This will work when ZoneJS is not present\n * on the page at all or if it exists because something else is using it (either another Angular\n * application which uses ZoneJS for scheduling or some other library that relies on ZoneJS).\n *\n * This can also be added to the `TestBed` providers to configure the test environment to more\n * closely match production behavior. This will help give higher confidence that components are\n * compatible with zoneless change detection.\n *\n * ZoneJS uses browser events to trigger change detection. When using this provider, Angular will\n * instead use Angular APIs to schedule change detection. These APIs include:\n *\n * - `ChangeDetectorRef.markForCheck`\n * - `ComponentRef.setInput`\n * - updating a signal that is read in a template\n * - when bound host or template listeners are triggered\n * - attaching a view that was marked dirty by one of the above\n * - removing a view\n * - registering a render hook (templates are only refreshed if render hooks do one of the above)\n *\n * @usageNotes\n * ```ts\n * bootstrapApplication(MyApp, {providers: [\n *   provideZonelessChangeDetection(),\n * ]});\n * ```\n *\n * This API is experimental. Neither the shape, nor the underlying behavior is stable and can change\n * in patch versions. There are known feature gaps and API ergonomic considerations. We will iterate\n * on the exact API based on the feedback and our understanding of the problem and solution space.\n *\n * @developerPreview 20.0\n * @see {@link /api/platform-browser/bootstrapApplication bootstrapApplication}\n */\nfunction provideZonelessChangeDetection() {\n  performanceMarkFeature('NgZoneless');\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof Zone !== 'undefined' && Zone) {\n    const message = formatRuntimeError(914 /* RuntimeErrorCode.UNEXPECTED_ZONEJS_PRESENT_IN_ZONELESS_MODE */, `The application is using zoneless change detection, but is still loading Zone.js. ` + `Consider removing Zone.js to get the full benefits of zoneless. ` + `In applications using the Angular CLI, Zone.js is typically included in the \"polyfills\" section of the angular.json file.`);\n    console.warn(message);\n  }\n  return makeEnvironmentProviders([{\n    provide: ChangeDetectionScheduler,\n    useExisting: ChangeDetectionSchedulerImpl\n  }, {\n    provide: NgZone,\n    useClass: NoopNgZone\n  }, {\n    provide: ZONELESS_ENABLED,\n    useValue: true\n  }, {\n    provide: SCHEDULE_IN_ROOT_ZONE,\n    useValue: false\n  }, typeof ngDevMode === 'undefined' || ngDevMode ? [{\n    provide: PROVIDED_ZONELESS,\n    useValue: true\n  }] : []]);\n}\n\n/// <reference path=\"../../../goog.d.ts\" />\n/**\n * Work out the locale from the potential global properties.\n *\n * * Closure Compiler: use `goog.LOCALE`.\n * * Ivy enabled: use `$localize.locale`\n */\nfunction getGlobalLocale() {\n  if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode && typeof goog !== 'undefined' && goog.LOCALE !== 'en') {\n    // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\n    // * In order to preserve backwards compatibility, we use Angular default value over\n    //   Closure Compiler's one.\n    return goog.LOCALE;\n  } else {\n    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n    // COMPILE-TIME INLINER.\n    //\n    // * During compile time inlining of translations the expression will be replaced\n    //   with a string literal that is the current locale. Other forms of this expression are not\n    //   guaranteed to be replaced.\n    //\n    // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n    //   if required, or just to provide their own `LOCALE_ID` provider.\n    return typeof $localize !== 'undefined' && $localize.locale || DEFAULT_LOCALE_ID;\n  }\n}\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n/locale-id) for more information.\n *\n * @usageNotes\n * ### Example\n * In standalone apps:\n * ```ts\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\n * import { AppModule } from './app/app.module';\n *\n * const appConfig: ApplicationConfig = {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * };\n * ```\n *\n * In module based apps:\n * ```ts\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowser } from '@angular/platform-browser';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowser().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst LOCALE_ID = /*#__PURE__*/new InjectionToken(ngDevMode ? 'LocaleId' : '', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID, {\n    optional: true,\n    skipSelf: true\n  }) || getGlobalLocale()\n});\n/**\n * Provide this token to set the default currency code your application uses for\n * CurrencyPipe when there is no currency code passed into it. This is only used by\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n *\n * See the [i18n guide](guide/i18n/locale-id) for more information.\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n * The default currency code is currently always `USD`.\n *\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\n * your application `NgModule`:\n *\n * ```ts\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n * ```\n *\n * </div>\n *\n * @usageNotes\n * ### Example\n * In standalone apps:\n * ```ts\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\n *\n * const appConfig: ApplicationConfig = {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * };\n * ```\n *\n * In module based apps:\n * ```ts\n * import { platformBrowser } from '@angular/platform-browser';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowser().bootstrapModule(AppModule, {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst DEFAULT_CURRENCY_CODE = /*#__PURE__*/new InjectionToken(ngDevMode ? 'DefaultCurrencyCode' : '', {\n  providedIn: 'root',\n  factory: () => USD_CURRENCY_CODE\n});\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n/merge) for more information.\n *\n * @usageNotes\n * ### Example\n * In standalone apps:\n * ```ts\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\n *\n * const appConfig: ApplicationConfig = {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * };\n * ```\n *\n * In module based apps:\n * ```ts\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowser } from '@angular/platform-browser';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowser().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nconst TRANSLATIONS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'Translations' : '');\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n/merge) for more information.\n *\n * @usageNotes\n * ### Example\n * In standalone apps:\n * ```ts\n * import { LOCALE_ID, ApplicationConfig } from '@angular/core';\n *\n * const appConfig: ApplicationConfig = {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * };\n * ```\n *\n * In module based apps: *\n * ```ts\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowser } from '@angular/platform-browser';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowser().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst TRANSLATIONS_FORMAT = /*#__PURE__*/new InjectionToken(ngDevMode ? 'TranslationsFormat' : '');\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n/merge#report-missing-translations) for more information.\n *\n * @usageNotes\n * ### Example\n * ```ts\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowser } from '@angular/platform-browser';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowser().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nvar MissingTranslationStrategy = /*#__PURE__*/function (MissingTranslationStrategy) {\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n  return MissingTranslationStrategy;\n}(MissingTranslationStrategy || {});\n/**\n * @publicApi\n */\nclass DebugEventListener {\n  name;\n  callback;\n  constructor(name, callback) {\n    this.name = name;\n    this.callback = callback;\n  }\n}\n/**\n * @publicApi\n */\nfunction asNativeElements(debugEls) {\n  return debugEls.map(el => el.nativeElement);\n}\n/**\n * @publicApi\n */\nclass DebugNode {\n  /**\n   * The underlying DOM node.\n   */\n  nativeNode;\n  constructor(nativeNode) {\n    this.nativeNode = nativeNode;\n  }\n  /**\n   * The `DebugElement` parent. Will be `null` if this is the root element.\n   */\n  get parent() {\n    const parent = this.nativeNode.parentNode;\n    return parent ? new DebugElement(parent) : null;\n  }\n  /**\n   * The host dependency injector. For example, the root element's component instance injector.\n   */\n  get injector() {\n    return getInjector(this.nativeNode);\n  }\n  /**\n   * The element's own component instance, if it has one.\n   */\n  get componentInstance() {\n    const nativeElement = this.nativeNode;\n    return nativeElement && (getComponent(nativeElement) || getOwningComponent(nativeElement));\n  }\n  /**\n   * An object that provides parent context for this element. Often an ancestor component instance\n   * that governs this element.\n   *\n   * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`\n   * property is the value of the row instance value. For example, the `hero` in `*ngFor=\"let hero\n   * of heroes\"`.\n   */\n  get context() {\n    return getComponent(this.nativeNode) || getContext(this.nativeNode);\n  }\n  /**\n   * The callbacks attached to the component's @Output properties and/or the element's event\n   * properties.\n   */\n  get listeners() {\n    return getListeners(this.nativeNode).filter(listener => listener.type === 'dom');\n  }\n  /**\n   * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local\n   * variable name.\n   */\n  get references() {\n    return getLocalRefs(this.nativeNode);\n  }\n  /**\n   * This component's injector lookup tokens. Includes the component itself plus the tokens that the\n   * component lists in its providers metadata.\n   */\n  get providerTokens() {\n    return getInjectionTokens(this.nativeNode);\n  }\n}\n/**\n * @publicApi\n *\n * @see [Component testing scenarios](guide/testing/components-scenarios)\n * @see [Basics of testing components](guide/testing/components-basics)\n * @see [Testing utility APIs](guide/testing/utility-apis)\n */\nclass DebugElement extends DebugNode {\n  constructor(nativeNode) {\n    ngDevMode && assertDomNode(nativeNode);\n    super(nativeNode);\n  }\n  /**\n   * The underlying DOM element at the root of the component.\n   */\n  get nativeElement() {\n    return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n  }\n  /**\n   * The element tag name, if it is an element.\n   */\n  get name() {\n    const context = getLContext(this.nativeNode);\n    const lView = context ? context.lView : null;\n    if (lView !== null) {\n      const tData = lView[TVIEW].data;\n      const tNode = tData[context.nodeIndex];\n      return tNode.value;\n    } else {\n      return this.nativeNode.nodeName;\n    }\n  }\n  /**\n   *  Gets a map of property names to property values for an element.\n   *\n   *  This map includes:\n   *  - Regular property bindings (e.g. `[id]=\"id\"`)\n   *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n   *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n   *\n   *  It does not include:\n   *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n   *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n   */\n  get properties() {\n    const context = getLContext(this.nativeNode);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n      return {};\n    }\n    const tData = lView[TVIEW].data;\n    const tNode = tData[context.nodeIndex];\n    const properties = {};\n    // Collect properties from the DOM.\n    copyDomProperties(this.nativeElement, properties);\n    // Collect properties from the bindings. This is needed for animation renderer which has\n    // synthetic properties which don't get reflected into the DOM.\n    collectPropertyBindings(properties, tNode, lView, tData);\n    return properties;\n  }\n  /**\n   *  A map of attribute names to attribute values for an element.\n   */\n  // TODO: replace null by undefined in the return type\n  get attributes() {\n    const attributes = {};\n    const element = this.nativeElement;\n    if (!element) {\n      return attributes;\n    }\n    const context = getLContext(element);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n      return {};\n    }\n    const tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;\n    const lowercaseTNodeAttrs = [];\n    // For debug nodes we take the element's attribute directly from the DOM since it allows us\n    // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n    // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n    // however since we have the attributes already on the TNode, we can preserve the case by going\n    // through them once, adding them to the `attributes` map and putting their lower-cased name\n    // into an array. Afterwards when we're going through the native DOM attributes, we can check\n    // whether we haven't run into an attribute already through the TNode.\n    if (tNodeAttrs) {\n      let i = 0;\n      while (i < tNodeAttrs.length) {\n        const attrName = tNodeAttrs[i];\n        // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n        // else will be handled below when we read the final attributes off the DOM.\n        if (typeof attrName !== 'string') break;\n        const attrValue = tNodeAttrs[i + 1];\n        attributes[attrName] = attrValue;\n        lowercaseTNodeAttrs.push(attrName.toLowerCase());\n        i += 2;\n      }\n    }\n    for (const attr of element.attributes) {\n      // Make sure that we don't assign the same attribute both in its\n      // case-sensitive form and the lower-cased one from the browser.\n      if (!lowercaseTNodeAttrs.includes(attr.name)) {\n        attributes[attr.name] = attr.value;\n      }\n    }\n    return attributes;\n  }\n  /**\n   * The inline styles of the DOM element.\n   */\n  // TODO: replace null by undefined in the return type\n  get styles() {\n    const element = this.nativeElement;\n    return element?.style ?? {};\n  }\n  /**\n   * A map containing the class names on the element as keys.\n   *\n   * This map is derived from the `className` property of the DOM element.\n   *\n   * Note: The values of this object will always be `true`. The class key will not appear in the KV\n   * object if it does not exist on the element.\n   *\n   * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n   */\n  get classes() {\n    const result = {};\n    const element = this.nativeElement;\n    // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.\n    const className = element.className;\n    const classes = typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');\n    classes.forEach(value => result[value] = true);\n    return result;\n  }\n  /**\n   * The `childNodes` of the DOM element as a `DebugNode` array.\n   *\n   * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)\n   */\n  get childNodes() {\n    const childNodes = this.nativeNode.childNodes;\n    const children = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode(element));\n    }\n    return children;\n  }\n  /**\n   * The immediate `DebugElement` children. Walk the tree by descending through `children`.\n   */\n  get children() {\n    const nativeElement = this.nativeElement;\n    if (!nativeElement) return [];\n    const childNodes = nativeElement.children;\n    const children = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode(element));\n    }\n    return children;\n  }\n  /**\n   * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.\n   */\n  query(predicate) {\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n  /**\n   * @returns All `DebugElement` matches for the predicate at any depth in the subtree.\n   */\n  queryAll(predicate) {\n    const matches = [];\n    _queryAll(this, predicate, matches, true);\n    return matches;\n  }\n  /**\n   * @returns All `DebugNode` matches for the predicate at any depth in the subtree.\n   */\n  queryAllNodes(predicate) {\n    const matches = [];\n    _queryAll(this, predicate, matches, false);\n    return matches;\n  }\n  /**\n   * Triggers the event by its name if there is a corresponding listener in the element's\n   * `listeners` collection.\n   *\n   * If the event lacks a listener or there's some other problem, consider\n   * calling `nativeElement.dispatchEvent(eventObject)`.\n   *\n   * @param eventName The name of the event to trigger\n   * @param eventObj The _event object_ expected by the handler\n   *\n   * @see [Testing components scenarios](guide/testing/components-scenarios#trigger-event-handler)\n   */\n  triggerEventHandler(eventName, eventObj) {\n    const node = this.nativeNode;\n    const invokedListeners = [];\n    this.listeners.forEach(listener => {\n      if (listener.name === eventName) {\n        const callback = listener.callback;\n        callback.call(node, eventObj);\n        invokedListeners.push(callback);\n      }\n    });\n    // We need to check whether `eventListeners` exists, because it's something\n    // that Zone.js only adds to `EventTarget` in browser environments.\n    if (typeof node.eventListeners === 'function') {\n      // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some\n      // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event\n      // listener.\n      node.eventListeners(eventName).forEach(listener => {\n        // In order to ensure that we can detect the special __ngUnwrap__ token described above, we\n        // use `toString` on the listener and see if it contains the token. We use this approach to\n        // ensure that it still worked with compiled code since it cannot remove or rename string\n        // literals. We also considered using a special function name (i.e. if(listener.name ===\n        // special)) but that was more cumbersome and we were also concerned the compiled code could\n        // strip the name, turning the condition in to (\"\" === \"\") and always returning true.\n        if (listener.toString().indexOf('__ngUnwrap__') !== -1) {\n          const unwrappedListener = listener('__ngUnwrap__');\n          return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);\n        }\n      });\n    }\n  }\n}\nfunction copyDomProperties(element, properties) {\n  if (element) {\n    // Skip own properties (as those are patched)\n    let obj = Object.getPrototypeOf(element);\n    const NodePrototype = Node.prototype;\n    while (obj !== null && obj !== NodePrototype) {\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      for (let key in descriptors) {\n        if (!key.startsWith('__') && !key.startsWith('on')) {\n          // don't include properties starting with `__` and `on`.\n          // `__` are patched values which should not be included.\n          // `on` are listeners which also should not be included.\n          const value = element[key];\n          if (isPrimitiveValue(value)) {\n            properties[key] = value;\n          }\n        }\n      }\n      obj = Object.getPrototypeOf(obj);\n    }\n  }\n}\nfunction isPrimitiveValue(value) {\n  return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' || value === null;\n}\nfunction _queryAll(parentElement, predicate, matches, elementsOnly) {\n  const context = getLContext(parentElement.nativeNode);\n  const lView = context ? context.lView : null;\n  if (lView !== null) {\n    const parentTNode = lView[TVIEW].data[context.nodeIndex];\n    _queryNodeChildren(parentTNode, lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n  } else {\n    // If the context is null, then `parentElement` was either created with Renderer2 or native DOM\n    // APIs.\n    _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);\n  }\n}\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param tNode the current TNode\n * @param lView the LView of this TNode\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildren(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const nativeNode = getNativeByTNodeOrNull(tNode, lView);\n  // For each type of TNode, specific logic is executed.\n  if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n    // Case 1: the TNode is an element\n    // The native node has to be checked.\n    _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n    if (isComponentHost(tNode)) {\n      // If the element is the host of a component, then all nodes in its view have to be processed.\n      // Note: the component's content (tNode.child) will be processed from the insertion points.\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      if (componentView && componentView[TVIEW].firstChild) {\n        _queryNodeChildren(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n      }\n    } else {\n      if (tNode.child) {\n        // Otherwise, its children have to be processed.\n        _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n      }\n      // We also have to query the DOM directly in order to catch elements inserted through\n      // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple\n      // times. ViewEngine could do it more efficiently, because all the insertions go through\n      // Renderer2, however that's not the case in Ivy. This approach is being used because:\n      // 1. Matching the ViewEngine behavior would mean potentially introducing a dependency\n      //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.\n      // 2. It allows us to capture nodes that were inserted directly via the DOM.\n      nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);\n    }\n    // In all cases, if a dynamic container exists for this node, each view inside it has to be\n    // processed.\n    const nodeOrContainer = lView[tNode.index];\n    if (isLContainer(nodeOrContainer)) {\n      _queryNodeChildrenInContainer(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.type & 4 /* TNodeType.Container */) {\n    // Case 2: the TNode is a container\n    // The native node has to be checked.\n    const lContainer = lView[tNode.index];\n    _addQueryMatch(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n    // Each view inside the container has to be processed.\n    _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n  } else if (tNode.type & 16 /* TNodeType.Projection */) {\n    // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n    // The nodes projected at this location all need to be processed.\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST];\n    const head = componentHost.projection[tNode.projection];\n    if (Array.isArray(head)) {\n      for (let nativeNode of head) {\n        _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n      }\n    } else if (head) {\n      const nextLView = componentView[PARENT];\n      const nextTNode = nextLView[TVIEW].data[head.index];\n      _queryNodeChildren(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.child) {\n    // Case 4: the TNode is a view.\n    _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n  }\n  // We don't want to go to the next sibling of the root node.\n  if (rootNativeNode !== nativeNode) {\n    // To determine the next node to be processed, we need to use the next or the projectionNext\n    // link, depending on whether the current node has been projected.\n    const nextTNode = tNode.flags & 2 /* TNodeFlags.isProjected */ ? tNode.projectionNext : tNode.next;\n    if (nextTNode) {\n      _queryNodeChildren(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n/**\n * Process all TNodes in a given container.\n *\n * @param lContainer the container to be processed\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const childView = lContainer[i];\n    const firstChild = childView[TVIEW].firstChild;\n    if (firstChild) {\n      _queryNodeChildren(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n/**\n * Match the current native node against the predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n  if (rootNativeNode !== nativeNode) {\n    const debugNode = getDebugNode(nativeNode);\n    if (!debugNode) {\n      return;\n    }\n    // Type of the \"predicate and \"matches\" array are set based on the value of\n    // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\n    // types with generics, so we manually cast the parameters accordingly.\n    if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n      matches.push(debugNode);\n    } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n      matches.push(debugNode);\n    }\n  }\n}\n/**\n * Match all the descendants of a DOM node against a predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list where matches are stored\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {\n  const nodes = parentNode.childNodes;\n  const length = nodes.length;\n  for (let i = 0; i < length; i++) {\n    const node = nodes[i];\n    const debugNode = getDebugNode(node);\n    if (debugNode) {\n      if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n        matches.push(debugNode);\n      } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n        matches.push(debugNode);\n      }\n      _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);\n    }\n  }\n}\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n */\nfunction collectPropertyBindings(properties, tNode, lView, tData) {\n  let bindingIndexes = tNode.propertyBindings;\n  if (bindingIndexes !== null) {\n    for (let i = 0; i < bindingIndexes.length; i++) {\n      const bindingIndex = bindingIndexes[i];\n      const propMetadata = tData[bindingIndex];\n      const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n      const propertyName = metadataParts[0];\n      if (metadataParts.length > 1) {\n        let value = metadataParts[1];\n        for (let j = 1; j < metadataParts.length - 1; j++) {\n          value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];\n        }\n        properties[propertyName] = value;\n      } else {\n        properties[propertyName] = lView[bindingIndex];\n      }\n    }\n  }\n}\nconst NG_DEBUG_PROPERTY = '__ng_debug__';\n/**\n * @publicApi\n */\nfunction getDebugNode(nativeNode) {\n  if (nativeNode instanceof Node) {\n    if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {\n      nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement(nativeNode) : new DebugNode(nativeNode);\n    }\n    return nativeNode[NG_DEBUG_PROPERTY];\n  }\n  return null;\n}\nexport { AFTER_RENDER_PHASES, ANIMATION_MODULE_TYPE, APP_BOOTSTRAP_LISTENER, APP_ID, APP_INITIALIZER, AcxChangeDetectionStrategy, AcxViewEncapsulation, AfterRenderImpl, AfterRenderManager, AfterRenderSequence, ApplicationInitStatus, ApplicationRef, Attribute, COMPILER_OPTIONS, CONTAINERS, CSP_NONCE, CUSTOM_ELEMENTS_SCHEMA, ChangeDetectionSchedulerImpl, ChangeDetectionStrategy, Compiler, CompilerFactory, Component, ComponentFactory, ComponentFactory$1, ComponentFactoryResolver$1 as ComponentFactoryResolver, ComponentRef$1 as ComponentRef, ComponentRef as ComponentRef$1, Console, DEFAULT_CURRENCY_CODE, DEFAULT_LOCALE_ID, DEFER_BLOCK_CONFIG, DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, DEFER_BLOCK_ID, DEFER_BLOCK_SSR_ID_ATTRIBUTE, DEFER_BLOCK_STATE$1 as DEFER_BLOCK_STATE, DEFER_BLOCK_STATE as DEFER_BLOCK_STATE$1, DEFER_HYDRATE_TRIGGERS, DEFER_PARENT_BLOCK_ID, DEHYDRATED_BLOCK_REGISTRY, DISCONNECTED_NODES, DebugElement, DebugEventListener, DebugNode, DeferBlockBehavior, DeferBlockState, DehydratedBlockRegistry, Directive, ELEMENT_CONTAINERS, EVENT_REPLAY_ENABLED_DEFAULT, ElementRef, EnvironmentNgModuleRefAdapter, EventEmitter, Framework, Host, HostBinding, HostListener, HydrationStatus, I18N_DATA, IMAGE_CONFIG, IMAGE_CONFIG_DEFAULTS, IS_EVENT_REPLAY_ENABLED, IS_HYDRATION_DOM_REUSE_ENABLED, IS_I18N_HYDRATION_ENABLED, IS_INCREMENTAL_HYDRATION_ENABLED, Inject, Injectable, Input, JSACTION_BLOCK_ELEMENT_MAP, JSACTION_EVENT_CONTRACT, LContext, LOCALE_ID, LocaleDataIndex, MULTIPLIER, MissingTranslationStrategy, ModuleWithComponentFactories, NGH_ATTR_NAME, NGH_DATA_KEY, NGH_DEFER_BLOCKS_KEY, NODES, NOOP_AFTER_RENDER_REF, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, NO_CHANGE, NO_ERRORS_SCHEMA, NUM_ROOT_NODES, NgModule, NgModuleFactory, NgModuleFactory$1, NgModuleRef, NgModuleRef$1, NgProbeToken, NgZone, NoopNgZone, Optional, Output, PACKAGE_ROOT_URL, PLATFORM_ID, PLATFORM_INITIALIZER, PRESERVE_HOST_CONTENT, PROVIDED_NG_ZONE, Pipe, QueryList, ReflectionCapabilities, Renderer2, RendererFactory2, RendererStyleFlags2, SKIP_HYDRATION_ATTR_NAME, SSR_CONTENT_INTEGRITY_MARKER, Sanitizer, SecurityContext, Self, SimpleChange, SkipSelf, TEMPLATES, TEMPLATE_ID, TESTABILITY, TESTABILITY_GETTER, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Testability, TestabilityRegistry, TimerScheduler, TracingAction, TracingService, TransferState, Type, UseExhaustiveCheckNoChanges, ViewContainerRef, ViewEncapsulation, ViewRef, _sanitizeHtml, _sanitizeUrl, afterEveryRender, afterNextRender, allowSanitizationBypassAndThrow, angularCoreEnv, appendDeferBlocksToJSActionMap, asNativeElements, assertComponentDef, assertStandaloneComponentType, bypassSanitizationTrustHtml, bypassSanitizationTrustResourceUrl, bypassSanitizationTrustScript, bypassSanitizationTrustStyle, bypassSanitizationTrustUrl, calcPathForNode, checkNoChangesInternal, cleanupDehydratedViews, clearResolutionOfComponentResourcesQueue, collectNativeNodes, collectNativeNodesInLContainer, compileComponent, compileDirective, compileNgModule, compileNgModuleDefs, compilePipe, convertHydrateTriggersToJsAction, countBlocksSkippedByHydration, createEnvironmentInjector, createMultiResultQuerySignalFn, createNgModule, createNgModuleRef, createNgModuleRefWithProviders, createSingleResultOptionalQuerySignalFn, createSingleResultRequiredQuerySignalFn, depsTracker, devModeEqual, enableApplyRootElementTransformImpl, enableClaimDehydratedIcuCaseImpl, enableFindMatchingDehydratedViewImpl, enableLocateOrCreateContainerAnchorImpl, enableLocateOrCreateContainerRefImpl, enableLocateOrCreateElementContainerNodeImpl, enableLocateOrCreateElementNodeImpl, enableLocateOrCreateI18nNodeImpl, enableLocateOrCreateTextNodeImpl, enablePrepareI18nBlockForHydrationImpl, enableProfiling, enableRetrieveDeferBlockDataImpl, enableRetrieveHydrationInfoImpl, enableStashEventListenerImpl, findLocaleData, flushModuleScopingQueueAsMuchAsPossible, gatherDeferBlocksCommentNodes, generateStandaloneInDeclarationsError, getAsyncClassMetadataFn, getCompilerFacade, getDebugNode, getDeferBlocks$1 as getDeferBlocks, getDirectives, getDocument, getHostElement, getLContext, getLDeferBlockDetails, getLNodeForHydration, getLocaleCurrencyCode, getLocalePluralCase, getNgZone, getNgZoneOptions, getOrComputeI18nChildren, getRegisteredNgModuleType, getSanitizationBypassType, getTDeferBlockDetails, inputBinding, internalProvideZoneChangeDetection, invokeListeners, isBoundToModule, isComponentDefPendingResolution, isComponentResourceResolutionQueueEmpty, isDeferBlock, isDetachedByI18n, isDisconnectedNode, isI18nHydrationEnabled, isI18nHydrationSupportEnabled, isInSkipHydrationBlock, isIncrementalHydrationEnabled, isInternalHydrationTransferStateKey, isJsObject, isLetDeclaration, isListLikeIterable, isNgModule, isPromise, isSubscribable, isTNodeShape, isViewDirty, iterateListLike, makePropDecorator, makeStateKey, markForRefresh, noSideEffects, optionsReducer, outputBinding, patchComponentDefWithScope, performanceMarkFeature, processAndInitTriggers, processBlockData, processTextNodeBeforeSerialization, profiler, provideAppInitializer, provideNgReflectAttributes, provideZoneChangeDetection, provideZonelessChangeDetection, publishDefaultGlobalUtils, publishExternalGlobalUtil, publishSignalConfiguration, readHydrationInfo, readPatchedLView, registerLocaleData, registerNgModuleType, remove, removeListeners, renderDeferBlockState, resetCompiledComponents, resetJitOptions, resolveComponentResources, restoreComponentResolutionQueue, retrieveTransferredState, setAllowDuplicateNgModuleIdsForTest, setClassMetadata, setClassMetadataAsync, setDocument, setIsI18nHydrationSupportEnabled, setJSActionAttributes, setJitOptions, setLocaleId, setStashFn, setTestabilityGetter, sharedMapFunction, sharedStashFunction, transitiveScopesFor, triggerHydrationFromBlockName, triggerResourceLoading, trySerializeI18nBlock, twoWayBinding, unregisterAllLocaleData, unsupportedProjectionOfDomNodes, unwrapSafeValue, validateMatchingNode, validateNodeExists, verifySsrContentsIntegrity, ɵgetUnknownElementStrictMode, ɵgetUnknownPropertyStrictMode, ɵsetClassDebugInfo, ɵsetUnknownElementStrictMode, ɵsetUnknownPropertyStrictMode, ɵɵCopyDefinitionFeature, ɵɵExternalStylesFeature, ɵɵHostDirectivesFeature, ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature, ɵɵProvidersFeature, ɵɵadvance, ɵɵattachSourceLocations, ɵɵattribute, ɵɵclassMap, ɵɵclassProp, ɵɵcomponentInstance, ɵɵconditional, ɵɵconditionalBranchCreate, ɵɵconditionalCreate, ɵɵcontentQuery, ɵɵcontentQuerySignal, ɵɵdeclareLet, ɵɵdefer, ɵɵdeferEnableTimerScheduling, ɵɵdeferHydrateNever, ɵɵdeferHydrateOnHover, ɵɵdeferHydrateOnIdle, ɵɵdeferHydrateOnImmediate, ɵɵdeferHydrateOnInteraction, ɵɵdeferHydrateOnTimer, ɵɵdeferHydrateOnViewport, ɵɵdeferHydrateWhen, ɵɵdeferOnHover, ɵɵdeferOnIdle, ɵɵdeferOnImmediate, ɵɵdeferOnInteraction, ɵɵdeferOnTimer, ɵɵdeferOnViewport, ɵɵdeferPrefetchOnHover, ɵɵdeferPrefetchOnIdle, ɵɵdeferPrefetchOnImmediate, ɵɵdeferPrefetchOnInteraction, ɵɵdeferPrefetchOnTimer, ɵɵdeferPrefetchOnViewport, ɵɵdeferPrefetchWhen, ɵɵdeferWhen, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefineNgModule, ɵɵdefinePipe, ɵɵdirectiveInject, ɵɵdomElement, ɵɵdomElementContainer, ɵɵdomElementContainerEnd, ɵɵdomElementContainerStart, ɵɵdomElementEnd, ɵɵdomElementStart, ɵɵdomListener, ɵɵdomProperty, ɵɵdomTemplate, ɵɵelement, ɵɵelementContainer, ɵɵelementContainerEnd, ɵɵelementContainerStart, ɵɵelementEnd, ɵɵelementStart, ɵɵgetComponentDepsFactory, ɵɵgetCurrentView, ɵɵgetInheritedFactory, ɵɵgetReplaceMetadataURL, ɵɵi18n, ɵɵi18nApply, ɵɵi18nAttributes, ɵɵi18nEnd, ɵɵi18nExp, ɵɵi18nPostprocess, ɵɵi18nStart, ɵɵinjectAttribute, ɵɵinterpolate, ɵɵinterpolate1, ɵɵinterpolate2, ɵɵinterpolate3, ɵɵinterpolate4, ɵɵinterpolate5, ɵɵinterpolate6, ɵɵinterpolate7, ɵɵinterpolate8, ɵɵinterpolateV, ɵɵinvalidFactory, ɵɵlistener, ɵɵloadQuery, ɵɵnextContext, ɵɵpipe, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵprojection, ɵɵprojectionDef, ɵɵproperty, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵqueryAdvance, ɵɵqueryRefresh, ɵɵreadContextLet, ɵɵreference, ɵɵrepeater, ɵɵrepeaterCreate, ɵɵrepeaterTrackByIdentity, ɵɵrepeaterTrackByIndex, ɵɵreplaceMetadata, ɵɵresolveBody, ɵɵresolveDocument, ɵɵresolveWindow, ɵɵsanitizeHtml, ɵɵsanitizeResourceUrl, ɵɵsanitizeScript, ɵɵsanitizeStyle, ɵɵsanitizeUrl, ɵɵsanitizeUrlOrResourceUrl, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵstoreLet, ɵɵstyleMap, ɵɵstyleProp, ɵɵsyntheticHostListener, ɵɵsyntheticHostProperty, ɵɵtemplate, ɵɵtemplateRefExtractor, ɵɵtext, ɵɵtextInterpolate, ɵɵtextInterpolate1, ɵɵtextInterpolate2, ɵɵtextInterpolate3, ɵɵtextInterpolate4, ɵɵtextInterpolate5, ɵɵtextInterpolate6, ɵɵtextInterpolate7, ɵɵtextInterpolate8, ɵɵtextInterpolateV, ɵɵtrustConstantHtml, ɵɵtrustConstantResourceUrl, ɵɵtwoWayBindingSet, ɵɵtwoWayListener, ɵɵtwoWayProperty, ɵɵvalidateIframeAttribute, ɵɵviewQuery, ɵɵviewQuerySignal };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { inject, ErrorHandler, DestroyRef, RuntimeError, formatRuntimeError, assertNotInReactiveContext, assertInInjectionContext, Injector, ViewContext, ChangeDetectionScheduler, EffectScheduler, setInjectorProfilerContext, emitEffectCreatedEvent, EFFECTS, NodeInjectorDestroyRef, FLAGS, markAncestorsForTraversal, noop, setIsRefreshingViews, signalAsReadonlyFn, PendingTasks, signal } from './root_effect_scheduler.mjs';\nimport { setActiveConsumer, createComputed, SIGNAL, consumerDestroy, REACTIVE_NODE, isInNotificationPhase, consumerPollProducersForChange, consumerBeforeComputation, consumerAfterComputation } from './signal.mjs';\nimport { untracked as untracked$1, createLinkedSignal, linkedSignalSetFn, linkedSignalUpdateFn } from './untracked.mjs';\n\n/**\n * An `OutputEmitterRef` is created by the `output()` function and can be\n * used to emit values to consumers of your directive or component.\n *\n * Consumers of your directive/component can bind to the output and\n * subscribe to changes via the bound event syntax. For example:\n *\n * ```html\n * <my-comp (valueChange)=\"processNewValue($event)\" />\n * ```\n *\n * @publicAPI\n */\nclass OutputEmitterRef {\n  destroyed = false;\n  listeners = null;\n  errorHandler = /*#__PURE__*/inject(ErrorHandler, {\n    optional: true\n  });\n  /** @internal */\n  destroyRef = /*#__PURE__*/inject(DestroyRef);\n  constructor() {\n    // Clean-up all listeners and mark as destroyed upon destroy.\n    this.destroyRef.onDestroy(() => {\n      this.destroyed = true;\n      this.listeners = null;\n    });\n  }\n  subscribe(callback) {\n    if (this.destroyed) {\n      throw new RuntimeError(953 /* RuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode && 'Unexpected subscription to destroyed `OutputRef`. ' + 'The owning directive/component is destroyed.');\n    }\n    (this.listeners ??= []).push(callback);\n    return {\n      unsubscribe: () => {\n        const idx = this.listeners?.indexOf(callback);\n        if (idx !== undefined && idx !== -1) {\n          this.listeners?.splice(idx, 1);\n        }\n      }\n    };\n  }\n  /** Emits a new value to the output. */\n  emit(value) {\n    if (this.destroyed) {\n      console.warn(formatRuntimeError(953 /* RuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode && 'Unexpected emit for destroyed `OutputRef`. ' + 'The owning directive/component is destroyed.'));\n      return;\n    }\n    if (this.listeners === null) {\n      return;\n    }\n    const previousConsumer = setActiveConsumer(null);\n    try {\n      for (const listenerFn of this.listeners) {\n        try {\n          listenerFn(value);\n        } catch (err) {\n          this.errorHandler?.handleError(err);\n        }\n      }\n    } finally {\n      setActiveConsumer(previousConsumer);\n    }\n  }\n}\n/** Gets the owning `DestroyRef` for the given output. */\nfunction getOutputDestroyRef(ref) {\n  return ref.destroyRef;\n}\n\n/**\n * Execute an arbitrary function in a non-reactive (non-tracking) context. The executed function\n * can, optionally, return a value.\n */\nfunction untracked(nonReactiveReadsFn) {\n  return untracked$1(nonReactiveReadsFn);\n}\n\n/**\n * Create a computed `Signal` which derives a reactive value from an expression.\n */\nfunction computed(computation, options) {\n  const getter = createComputed(computation, options?.equal);\n  if (ngDevMode) {\n    getter.toString = () => `[Computed: ${getter()}]`;\n    getter[SIGNAL].debugName = options?.debugName;\n  }\n  return getter;\n}\nclass EffectRefImpl {\n  [SIGNAL];\n  constructor(node) {\n    this[SIGNAL] = node;\n  }\n  destroy() {\n    this[SIGNAL].destroy();\n  }\n}\n/**\n * Registers an \"effect\" that will be scheduled & executed whenever the signals that it reads\n * changes.\n *\n * Angular has two different kinds of effect: component effects and root effects. Component effects\n * are created when `effect()` is called from a component, directive, or within a service of a\n * component/directive. Root effects are created when `effect()` is called from outside the\n * component tree, such as in a root service.\n *\n * The two effect types differ in their timing. Component effects run as a component lifecycle\n * event during Angular's synchronization (change detection) process, and can safely read input\n * signals or create/destroy views that depend on component state. Root effects run as microtasks\n * and have no connection to the component tree or change detection.\n *\n * `effect()` must be run in injection context, unless the `injector` option is manually specified.\n *\n * @publicApi 20.0\n */\nfunction effect(effectFn, options) {\n  ngDevMode && assertNotInReactiveContext(effect, 'Call `effect` outside of a reactive context. For example, schedule the ' + 'effect inside the component constructor.');\n  if (ngDevMode && !options?.injector) {\n    assertInInjectionContext(effect);\n  }\n  if (ngDevMode && options?.allowSignalWrites !== undefined) {\n    console.warn(`The 'allowSignalWrites' flag is deprecated and no longer impacts effect() (writes are always allowed)`);\n  }\n  const injector = options?.injector ?? inject(Injector);\n  let destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;\n  let node;\n  const viewContext = injector.get(ViewContext, null, {\n    optional: true\n  });\n  const notifier = injector.get(ChangeDetectionScheduler);\n  if (viewContext !== null) {\n    // This effect was created in the context of a view, and will be associated with the view.\n    node = createViewEffect(viewContext.view, notifier, effectFn);\n    if (destroyRef instanceof NodeInjectorDestroyRef && destroyRef._lView === viewContext.view) {\n      // The effect is being created in the same view as the `DestroyRef` references, so it will be\n      // automatically destroyed without the need for an explicit `DestroyRef` registration.\n      destroyRef = null;\n    }\n  } else {\n    // This effect was created outside the context of a view, and will be scheduled independently.\n    node = createRootEffect(effectFn, injector.get(EffectScheduler), notifier);\n  }\n  node.injector = injector;\n  if (destroyRef !== null) {\n    // If we need to register for cleanup, do that here.\n    node.onDestroyFn = destroyRef.onDestroy(() => node.destroy());\n  }\n  const effectRef = new EffectRefImpl(node);\n  if (ngDevMode) {\n    node.debugName = options?.debugName ?? '';\n    const prevInjectorProfilerContext = setInjectorProfilerContext({\n      injector,\n      token: null\n    });\n    try {\n      emitEffectCreatedEvent(effectRef);\n    } finally {\n      setInjectorProfilerContext(prevInjectorProfilerContext);\n    }\n  }\n  return effectRef;\n}\nconst BASE_EFFECT_NODE = /* @__PURE__ */(() => ({\n  ...REACTIVE_NODE,\n  consumerIsAlwaysLive: true,\n  consumerAllowSignalWrites: true,\n  dirty: true,\n  hasRun: false,\n  cleanupFns: undefined,\n  zone: null,\n  kind: 'effect',\n  onDestroyFn: noop,\n  run() {\n    this.dirty = false;\n    if (ngDevMode && isInNotificationPhase()) {\n      throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);\n    }\n    if (this.hasRun && !consumerPollProducersForChange(this)) {\n      return;\n    }\n    this.hasRun = true;\n    const registerCleanupFn = cleanupFn => (this.cleanupFns ??= []).push(cleanupFn);\n    const prevNode = consumerBeforeComputation(this);\n    // We clear `setIsRefreshingViews` so that `markForCheck()` within the body of an effect will\n    // cause CD to reach the component in question.\n    const prevRefreshingViews = setIsRefreshingViews(false);\n    try {\n      this.maybeCleanup();\n      this.fn(registerCleanupFn);\n    } finally {\n      setIsRefreshingViews(prevRefreshingViews);\n      consumerAfterComputation(this, prevNode);\n    }\n  },\n  maybeCleanup() {\n    if (!this.cleanupFns?.length) {\n      return;\n    }\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      // Attempt to run the cleanup functions. Regardless of failure or success, we consider\n      // cleanup \"completed\" and clear the list for the next run of the effect. Note that an error\n      // from the cleanup function will still crash the current run of the effect.\n      while (this.cleanupFns.length) {\n        this.cleanupFns.pop()();\n      }\n    } finally {\n      this.cleanupFns = [];\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}))();\nconst ROOT_EFFECT_NODE = /* @__PURE__ */(() => ({\n  ...BASE_EFFECT_NODE,\n  consumerMarkedDirty() {\n    this.scheduler.schedule(this);\n    this.notifier.notify(12 /* NotificationSource.RootEffect */);\n  },\n  destroy() {\n    consumerDestroy(this);\n    this.onDestroyFn();\n    this.maybeCleanup();\n    this.scheduler.remove(this);\n  }\n}))();\nconst VIEW_EFFECT_NODE = /* @__PURE__ */(() => ({\n  ...BASE_EFFECT_NODE,\n  consumerMarkedDirty() {\n    this.view[FLAGS] |= 8192 /* LViewFlags.HasChildViewsToRefresh */;\n    markAncestorsForTraversal(this.view);\n    this.notifier.notify(13 /* NotificationSource.ViewEffect */);\n  },\n  destroy() {\n    consumerDestroy(this);\n    this.onDestroyFn();\n    this.maybeCleanup();\n    this.view[EFFECTS]?.delete(this);\n  }\n}))();\nfunction createViewEffect(view, notifier, fn) {\n  const node = Object.create(VIEW_EFFECT_NODE);\n  node.view = view;\n  node.zone = typeof Zone !== 'undefined' ? Zone.current : null;\n  node.notifier = notifier;\n  node.fn = fn;\n  view[EFFECTS] ??= new Set();\n  view[EFFECTS].add(node);\n  node.consumerMarkedDirty(node);\n  return node;\n}\nfunction createRootEffect(fn, scheduler, notifier) {\n  const node = Object.create(ROOT_EFFECT_NODE);\n  node.fn = fn;\n  node.scheduler = scheduler;\n  node.notifier = notifier;\n  node.zone = typeof Zone !== 'undefined' ? Zone.current : null;\n  node.scheduler.add(node);\n  node.notifier.notify(12 /* NotificationSource.RootEffect */);\n  return node;\n}\nconst identityFn = v => v;\nfunction linkedSignal(optionsOrComputation, options) {\n  if (typeof optionsOrComputation === 'function') {\n    const getter = createLinkedSignal(optionsOrComputation, identityFn, options?.equal);\n    return upgradeLinkedSignalGetter(getter);\n  } else {\n    const getter = createLinkedSignal(optionsOrComputation.source, optionsOrComputation.computation, optionsOrComputation.equal);\n    return upgradeLinkedSignalGetter(getter);\n  }\n}\nfunction upgradeLinkedSignalGetter(getter) {\n  if (ngDevMode) {\n    getter.toString = () => `[LinkedSignal: ${getter()}]`;\n  }\n  const node = getter[SIGNAL];\n  const upgradedGetter = getter;\n  upgradedGetter.set = newValue => linkedSignalSetFn(node, newValue);\n  upgradedGetter.update = updateFn => linkedSignalUpdateFn(node, updateFn);\n  upgradedGetter.asReadonly = signalAsReadonlyFn.bind(getter);\n  return upgradedGetter;\n}\n\n/**\n * Whether a `Resource.value()` should throw an error when the resource is in the error state.\n *\n * This internal flag is being used to gradually roll out this behavior.\n */\nlet RESOURCE_VALUE_THROWS_ERRORS_DEFAULT = true;\nfunction resource(options) {\n  if (ngDevMode && !options?.injector) {\n    assertInInjectionContext(resource);\n  }\n  const oldNameForParams = options.request;\n  const params = options.params ?? oldNameForParams ?? (() => null);\n  return new ResourceImpl(params, getLoader(options), options.defaultValue, options.equal ? wrapEqualityFn(options.equal) : undefined, options.injector ?? inject(Injector), RESOURCE_VALUE_THROWS_ERRORS_DEFAULT);\n}\n/**\n * Private helper function to set the default behavior of `Resource.value()` when the resource is\n * in the error state.\n *\n * This function is intented to be temporary to help migrate G3 code to the new throwing behavior.\n */\nfunction setResourceValueThrowsErrors(value) {\n  RESOURCE_VALUE_THROWS_ERRORS_DEFAULT = value;\n}\n/**\n * Base class which implements `.value` as a `WritableSignal` by delegating `.set` and `.update`.\n */\nclass BaseWritableResource {\n  value;\n  constructor(value) {\n    this.value = value;\n    this.value.set = this.set.bind(this);\n    this.value.update = this.update.bind(this);\n    this.value.asReadonly = signalAsReadonlyFn;\n  }\n  isError = /*#__PURE__*/computed(() => this.status() === 'error');\n  update(updateFn) {\n    this.set(updateFn(untracked(this.value)));\n  }\n  isLoading = /*#__PURE__*/computed(() => this.status() === 'loading' || this.status() === 'reloading');\n  // Use a computed here to avoid triggering reactive consumers if the value changes while staying\n  // either defined or undefined.\n  isValueDefined = /*#__PURE__*/computed(() => {\n    // Check if it's in an error state first to prevent the error from bubbling up.\n    if (this.isError()) {\n      return false;\n    }\n    return this.value() !== undefined;\n  });\n  hasValue() {\n    return this.isValueDefined();\n  }\n  asReadonly() {\n    return this;\n  }\n}\n/**\n * Implementation for `resource()` which uses a `linkedSignal` to manage the resource's state.\n */\nclass ResourceImpl extends BaseWritableResource {\n  loaderFn;\n  equal;\n  pendingTasks;\n  /**\n   * The current state of the resource. Status, value, and error are derived from this.\n   */\n  state;\n  /**\n   * Combines the current request with a reload counter which allows the resource to be reloaded on\n   * imperative command.\n   */\n  extRequest;\n  effectRef;\n  pendingController;\n  resolvePendingTask = undefined;\n  destroyed = false;\n  unregisterOnDestroy;\n  constructor(request, loaderFn, defaultValue, equal, injector, throwErrorsFromValue = RESOURCE_VALUE_THROWS_ERRORS_DEFAULT) {\n    super(\n    // Feed a computed signal for the value to `BaseWritableResource`, which will upgrade it to a\n    // `WritableSignal` that delegates to `ResourceImpl.set`.\n    computed(() => {\n      const streamValue = this.state().stream?.();\n      if (!streamValue) {\n        return defaultValue;\n      }\n      // Prevents `hasValue()` from throwing an error when a reload happened in the error state\n      if (this.state().status === 'loading' && this.error()) {\n        return defaultValue;\n      }\n      if (!isResolved(streamValue)) {\n        if (throwErrorsFromValue) {\n          throw new ResourceValueError(this.error());\n        } else {\n          return defaultValue;\n        }\n      }\n      return streamValue.value;\n    }, {\n      equal\n    }));\n    this.loaderFn = loaderFn;\n    this.equal = equal;\n    // Extend `request()` to include a writable reload signal.\n    this.extRequest = linkedSignal({\n      source: request,\n      computation: request => ({\n        request,\n        reload: 0\n      })\n    });\n    // The main resource state is managed in a `linkedSignal`, which allows the resource to change\n    // state instantaneously when the request signal changes.\n    this.state = linkedSignal({\n      // Whenever the request changes,\n      source: this.extRequest,\n      // Compute the state of the resource given a change in status.\n      computation: (extRequest, previous) => {\n        const status = extRequest.request === undefined ? 'idle' : 'loading';\n        if (!previous) {\n          return {\n            extRequest,\n            status,\n            previousStatus: 'idle',\n            stream: undefined\n          };\n        } else {\n          return {\n            extRequest,\n            status,\n            previousStatus: projectStatusOfState(previous.value),\n            // If the request hasn't changed, keep the previous stream.\n            stream: previous.value.extRequest.request === extRequest.request ? previous.value.stream : undefined\n          };\n        }\n      }\n    });\n    this.effectRef = effect(this.loadEffect.bind(this), {\n      injector,\n      manualCleanup: true\n    });\n    this.pendingTasks = injector.get(PendingTasks);\n    // Cancel any pending request when the resource itself is destroyed.\n    this.unregisterOnDestroy = injector.get(DestroyRef).onDestroy(() => this.destroy());\n  }\n  status = /*#__PURE__*/computed(() => projectStatusOfState(this.state()));\n  error = /*#__PURE__*/computed(() => {\n    const stream = this.state().stream?.();\n    return stream && !isResolved(stream) ? stream.error : undefined;\n  });\n  /**\n   * Called either directly via `WritableResource.set` or via `.value.set()`.\n   */\n  set(value) {\n    if (this.destroyed) {\n      return;\n    }\n    const error = untracked(this.error);\n    const state = untracked(this.state);\n    if (!error) {\n      const current = untracked(this.value);\n      if (state.status === 'local' && (this.equal ? this.equal(current, value) : current === value)) {\n        return;\n      }\n    }\n    // Enter Local state with the user-defined value.\n    this.state.set({\n      extRequest: state.extRequest,\n      status: 'local',\n      previousStatus: 'local',\n      stream: signal({\n        value\n      })\n    });\n    // We're departing from whatever state the resource was in previously, so cancel any in-progress\n    // loading operations.\n    this.abortInProgressLoad();\n  }\n  reload() {\n    // We don't want to restart in-progress loads.\n    const {\n      status\n    } = untracked(this.state);\n    if (status === 'idle' || status === 'loading') {\n      return false;\n    }\n    // Increment the request reload to trigger the `state` linked signal to switch us to `Reload`\n    this.extRequest.update(({\n      request,\n      reload\n    }) => ({\n      request,\n      reload: reload + 1\n    }));\n    return true;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.unregisterOnDestroy();\n    this.effectRef.destroy();\n    this.abortInProgressLoad();\n    // Destroyed resources enter Idle state.\n    this.state.set({\n      extRequest: {\n        request: undefined,\n        reload: 0\n      },\n      status: 'idle',\n      previousStatus: 'idle',\n      stream: undefined\n    });\n  }\n  async loadEffect() {\n    const extRequest = this.extRequest();\n    // Capture the previous status before any state transitions. Note that this is `untracked` since\n    // we do not want the effect to depend on the state of the resource, only on the request.\n    const {\n      status: currentStatus,\n      previousStatus\n    } = untracked(this.state);\n    if (extRequest.request === undefined) {\n      // Nothing to load (and we should already be in a non-loading state).\n      return;\n    } else if (currentStatus !== 'loading') {\n      // We're not in a loading or reloading state, so this loading request is stale.\n      return;\n    }\n    // Cancel any previous loading attempts.\n    this.abortInProgressLoad();\n    // Capturing _this_ load's pending task in a local variable is important here. We may attempt to\n    // resolve it twice:\n    //\n    //  1. when the loading function promise resolves/rejects\n    //  2. when cancelling the loading operation\n    //\n    // After the loading operation is cancelled, `this.resolvePendingTask` no longer represents this\n    // particular task, but this `await` may eventually resolve/reject. Thus, when we cancel in\n    // response to (1) below, we need to cancel the locally saved task.\n    let resolvePendingTask = this.resolvePendingTask = this.pendingTasks.add();\n    const {\n      signal: abortSignal\n    } = this.pendingController = new AbortController();\n    try {\n      // The actual loading is run through `untracked` - only the request side of `resource` is\n      // reactive. This avoids any confusion with signals tracking or not tracking depending on\n      // which side of the `await` they are.\n      const stream = await untracked(() => {\n        return this.loaderFn({\n          params: extRequest.request,\n          // TODO(alxhub): cleanup after g3 removal of `request` alias.\n          request: extRequest.request,\n          abortSignal,\n          previous: {\n            status: previousStatus\n          }\n        });\n      });\n      // If this request has been aborted, or the current request no longer\n      // matches this load, then we should ignore this resolution.\n      if (abortSignal.aborted || untracked(this.extRequest) !== extRequest) {\n        return;\n      }\n      this.state.set({\n        extRequest,\n        status: 'resolved',\n        previousStatus: 'resolved',\n        stream\n      });\n    } catch (err) {\n      if (abortSignal.aborted || untracked(this.extRequest) !== extRequest) {\n        return;\n      }\n      this.state.set({\n        extRequest,\n        status: 'resolved',\n        previousStatus: 'error',\n        stream: signal({\n          error: encapsulateResourceError(err)\n        })\n      });\n    } finally {\n      // Resolve the pending task now that the resource has a value.\n      resolvePendingTask?.();\n      resolvePendingTask = undefined;\n    }\n  }\n  abortInProgressLoad() {\n    untracked(() => this.pendingController?.abort());\n    this.pendingController = undefined;\n    // Once the load is aborted, we no longer want to block stability on its resolution.\n    this.resolvePendingTask?.();\n    this.resolvePendingTask = undefined;\n  }\n}\n/**\n * Wraps an equality function to handle either value being `undefined`.\n */\nfunction wrapEqualityFn(equal) {\n  return (a, b) => a === undefined || b === undefined ? a === b : equal(a, b);\n}\nfunction getLoader(options) {\n  if (isStreamingResourceOptions(options)) {\n    return options.stream;\n  }\n  return async params => {\n    try {\n      return signal({\n        value: await options.loader(params)\n      });\n    } catch (err) {\n      return signal({\n        error: encapsulateResourceError(err)\n      });\n    }\n  };\n}\nfunction isStreamingResourceOptions(options) {\n  return !!options.stream;\n}\n/**\n * Project from a state with `ResourceInternalStatus` to the user-facing `ResourceStatus`\n */\nfunction projectStatusOfState(state) {\n  switch (state.status) {\n    case 'loading':\n      return state.extRequest.reload === 0 ? 'loading' : 'reloading';\n    case 'resolved':\n      return isResolved(state.stream()) ? 'resolved' : 'error';\n    default:\n      return state.status;\n  }\n}\nfunction isResolved(state) {\n  return state.error === undefined;\n}\nfunction encapsulateResourceError(error) {\n  if (error instanceof Error) {\n    return error;\n  }\n  return new ResourceWrappedError(error);\n}\nclass ResourceValueError extends Error {\n  constructor(error) {\n    super(ngDevMode ? `Resource is currently in an error state (see Error.cause for details): ${error.message}` : error.message, {\n      cause: error\n    });\n  }\n}\nclass ResourceWrappedError extends Error {\n  constructor(error) {\n    super(ngDevMode ? `Resource returned an error that's not an Error instance: ${String(error)}. Check this error's .cause for the actual error.` : String(error), {\n      cause: error\n    });\n  }\n}\nexport { OutputEmitterRef, ResourceImpl, computed, effect, encapsulateResourceError, getOutputDestroyRef, linkedSignal, resource, setResourceValueThrowsErrors, untracked };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Attribute } from '../attribute.mjs';\n\n/** All properties that are used by jsaction. */\nconst Property = {\n  /**\n   * The parsed value of the jsaction attribute is stored in this\n   * property on the DOM node. The parsed value is an Object. The\n   * property names of the object are the events; the values are the\n   * names of the actions. This property is attached even on nodes\n   * that don't have a jsaction attribute as an optimization, because\n   * property lookup is faster than attribute access.\n   */\n  JSACTION: '__jsaction',\n  /**\n   * The owner property references an a logical owner for a DOM node. JSAction\n   * will follow this reference instead of parentNode when traversing the DOM\n   * to find jsaction attributes. This allows overlaying a logical structure\n   * over a document where the DOM structure can't reflect that structure.\n   */\n  OWNER: '__owner'\n};\n\n/**\n * Map from jsaction annotation to a parsed map from event name to action name.\n */\nconst parseCache = {};\n/**\n * Reads the jsaction parser cache from the given DOM Element.\n */\nfunction get(element) {\n  return element[Property.JSACTION];\n}\n/**\n * Reads the jsaction parser cache for the given DOM element. If no cache is yet present,\n * creates an empty one.\n */\nfunction getDefaulted(element) {\n  const cache = get(element) ?? {};\n  set(element, cache);\n  return cache;\n}\n/**\n * Writes the jsaction parser cache to the given DOM Element.\n */\nfunction set(element, actionMap) {\n  element[Property.JSACTION] = actionMap;\n}\n/**\n * Looks up the parsed action map from the source jsaction attribute value.\n *\n * @param text Unparsed jsaction attribute value.\n * @return Parsed jsaction attribute value, if already present in the cache.\n */\nfunction getParsed(text) {\n  return parseCache[text];\n}\n/**\n * Inserts the parse result for the given source jsaction value into the cache.\n *\n * @param text Unparsed jsaction attribute value.\n * @param parsed Attribute value parsed into the action map.\n */\nfunction setParsed(text, parsed) {\n  parseCache[text] = parsed;\n}\n\n/*\n * Names of events that are special to jsaction. These are not all\n * event types that are legal to use in either HTML or the addEvent()\n * API, but these are the ones that are treated specially. All other\n * DOM events can be used in either addEvent() or in the value of the\n * jsaction attribute. Beware of browser specific events or events\n * that don't bubble though: If they are not mentioned here, then\n * event contract doesn't work around their peculiarities.\n */\nconst EventType = {\n  /**\n   * Mouse middle click, introduced in Chrome 55 and not yet supported on\n   * other browsers.\n   */\n  AUXCLICK: 'auxclick',\n  /**\n   * The change event fired by browsers when the `value` attribute of input,\n   * select, and textarea elements are changed.\n   */\n  CHANGE: 'change',\n  /**\n   * The click event. In addEvent() refers to all click events, in the\n   * jsaction attribute it refers to the unmodified click and Enter/Space\n   * keypress events.  In the latter case, a jsaction click will be triggered,\n   * for accessibility reasons.  See clickmod and clickonly, below.\n   */\n  CLICK: 'click',\n  /**\n   * Specifies the jsaction for a modified click event (i.e. a mouse\n   * click with the modifier key Cmd/Ctrl pressed). This event isn't\n   * separately enabled in addEvent(), because in the DOM, it's just a\n   * click event.\n   */\n  CLICKMOD: 'clickmod',\n  /**\n   * Specifies the jsaction for a click-only event.  Click-only doesn't take\n   * into account the case where an element with focus receives an Enter/Space\n   * keypress.  This event isn't separately enabled in addEvent().\n   */\n  CLICKONLY: 'clickonly',\n  /**\n   * The dblclick event.\n   */\n  DBLCLICK: 'dblclick',\n  /**\n   * Focus doesn't bubble, but you can use it in addEvent() and\n   * jsaction anyway. EventContract does the right thing under the\n   * hood.\n   */\n  FOCUS: 'focus',\n  /**\n   * This event only exists in IE. For addEvent() and jsaction, use\n   * focus instead; EventContract does the right thing even though\n   * focus doesn't bubble.\n   */\n  FOCUSIN: 'focusin',\n  /**\n   * Analog to focus.\n   */\n  BLUR: 'blur',\n  /**\n   * Analog to focusin.\n   */\n  FOCUSOUT: 'focusout',\n  /**\n   * Submit doesn't bubble, so it cannot be used with event\n   * contract. However, the browser helpfully fires a click event on\n   * the submit button of a form (even if the form is not submitted by\n   * a click on the submit button). So you should handle click on the\n   * submit button instead.\n   */\n  SUBMIT: 'submit',\n  /**\n   * The keydown event. In addEvent() and non-click jsaction it represents the\n   * regular DOM keydown event. It represents click actions in non-Gecko\n   * browsers.\n   */\n  KEYDOWN: 'keydown',\n  /**\n   * The keypress event. In addEvent() and non-click jsaction it represents the\n   * regular DOM keypress event. It represents click actions in Gecko browsers.\n   */\n  KEYPRESS: 'keypress',\n  /**\n   * The keyup event. In addEvent() and non-click jsaction it represents the\n   * regular DOM keyup event. It represents click actions in non-Gecko\n   * browsers.\n   */\n  KEYUP: 'keyup',\n  /**\n   * The mouseup event. Can either be used directly or used implicitly to\n   * capture mouseup events. In addEvent(), it represents a regular DOM\n   * mouseup event.\n   */\n  MOUSEUP: 'mouseup',\n  /**\n   * The mousedown event. Can either be used directly or used implicitly to\n   * capture mouseenter events. In addEvent(), it represents a regular DOM\n   * mouseover event.\n   */\n  MOUSEDOWN: 'mousedown',\n  /**\n   * The mouseover event. Can either be used directly or used implicitly to\n   * capture mouseenter events. In addEvent(), it represents a regular DOM\n   * mouseover event.\n   */\n  MOUSEOVER: 'mouseover',\n  /**\n   * The mouseout event. Can either be used directly or used implicitly to\n   * capture mouseover events. In addEvent(), it represents a regular DOM\n   * mouseout event.\n   */\n  MOUSEOUT: 'mouseout',\n  /**\n   * The mouseenter event. Does not bubble and fires individually on each\n   * element being entered within a DOM tree.\n   */\n  MOUSEENTER: 'mouseenter',\n  /**\n   * The mouseleave event. Does not bubble and fires individually on each\n   * element being entered within a DOM tree.\n   */\n  MOUSELEAVE: 'mouseleave',\n  /**\n   * The mousemove event.\n   */\n  MOUSEMOVE: 'mousemove',\n  /**\n   * The pointerup event. Can either be used directly or used implicitly to\n   * capture pointerup events. In addEvent(), it represents a regular DOM\n   * pointerup event.\n   */\n  POINTERUP: 'pointerup',\n  /**\n   * The pointerdown event. Can either be used directly or used implicitly to\n   * capture pointerenter events. In addEvent(), it represents a regular DOM\n   * mouseover event.\n   */\n  POINTERDOWN: 'pointerdown',\n  /**\n   * The pointerover event. Can either be used directly or used implicitly to\n   * capture pointerenter events. In addEvent(), it represents a regular DOM\n   * pointerover event.\n   */\n  POINTEROVER: 'pointerover',\n  /**\n   * The pointerout event. Can either be used directly or used implicitly to\n   * capture pointerover events. In addEvent(), it represents a regular DOM\n   * pointerout event.\n   */\n  POINTEROUT: 'pointerout',\n  /**\n   * The pointerenter event. Does not bubble and fires individually on each\n   * element being entered within a DOM tree.\n   */\n  POINTERENTER: 'pointerenter',\n  /**\n   * The pointerleave event. Does not bubble and fires individually on each\n   * element being entered within a DOM tree.\n   */\n  POINTERLEAVE: 'pointerleave',\n  /**\n   * The pointermove event.\n   */\n  POINTERMOVE: 'pointermove',\n  /**\n   * The pointercancel event.\n   */\n  POINTERCANCEL: 'pointercancel',\n  /**\n   * The gotpointercapture event is fired when\n   * Element.setPointerCapture(pointerId) is called on a mouse input, or\n   * implicitly when a touch input begins.\n   */\n  GOTPOINTERCAPTURE: 'gotpointercapture',\n  /**\n   * The lostpointercapture event is fired when\n   * Element.releasePointerCapture(pointerId) is called, or implicitly after a\n   * touch input ends.\n   */\n  LOSTPOINTERCAPTURE: 'lostpointercapture',\n  /**\n   * The error event. The error event doesn't bubble, but you can use it in\n   * addEvent() and jsaction anyway. EventContract does the right thing under\n   * the hood (except in IE8 which does not use error events).\n   */\n  ERROR: 'error',\n  /**\n   * The load event. The load event doesn't bubble, but you can use it in\n   * addEvent() and jsaction anyway. EventContract does the right thing\n   * under the hood.\n   */\n  LOAD: 'load',\n  /**\n   * The unload event.\n   */\n  UNLOAD: 'unload',\n  /**\n   * The touchstart event. Bubbles, will only ever fire in browsers with\n   * touch support.\n   */\n  TOUCHSTART: 'touchstart',\n  /**\n   * The touchend event. Bubbles, will only ever fire in browsers with\n   * touch support.\n   */\n  TOUCHEND: 'touchend',\n  /**\n   * The touchmove event. Bubbles, will only ever fire in browsers with\n   * touch support.\n   */\n  TOUCHMOVE: 'touchmove',\n  /**\n   * The input event.\n   */\n  INPUT: 'input',\n  /**\n   * The scroll event.\n   */\n  SCROLL: 'scroll',\n  /**\n   * The toggle event. The toggle event doesn't bubble, but you can use it in\n   * addEvent() and jsaction anyway. EventContract does the right thing\n   * under the hood.\n   */\n  TOGGLE: 'toggle',\n  /**\n   * A custom event. The actual custom event type is declared as the 'type'\n   * field in the event details. Supported in Firefox 6+, IE 9+, and all Chrome\n   * versions.\n   *\n   * This is an internal name. Users should use jsaction's fireCustomEvent to\n   * fire custom events instead of relying on this type to create them.\n   */\n  CUSTOM: '_custom'\n};\n/** All event types that do not bubble or capture and need a polyfill. */\nconst MOUSE_SPECIAL_EVENT_TYPES = [EventType.MOUSEENTER, EventType.MOUSELEAVE, 'pointerenter', 'pointerleave'];\n/** All event types that are registered in the bubble phase. */\nconst BUBBLE_EVENT_TYPES = [EventType.CLICK, EventType.DBLCLICK, EventType.FOCUSIN, EventType.FOCUSOUT, EventType.KEYDOWN, EventType.KEYUP, EventType.KEYPRESS, EventType.MOUSEOVER, EventType.MOUSEOUT, EventType.SUBMIT, EventType.TOUCHSTART, EventType.TOUCHEND, EventType.TOUCHMOVE, 'touchcancel', 'auxclick', 'change', 'compositionstart', 'compositionupdate', 'compositionend', 'beforeinput', 'input', 'select', 'copy', 'cut', 'paste', 'mousedown', 'mouseup', 'wheel', 'contextmenu', 'dragover', 'dragenter', 'dragleave', 'drop', 'dragstart', 'dragend', 'pointerdown', 'pointermove', 'pointerup', 'pointercancel', 'pointerover', 'pointerout', 'gotpointercapture', 'lostpointercapture',\n// Video events.\n'ended', 'loadedmetadata',\n// Page visibility events.\n'pagehide', 'pageshow', 'visibilitychange',\n// Content visibility events.\n'beforematch'];\n/** All event types that are registered in the capture phase. */\nconst CAPTURE_EVENT_TYPES = [EventType.FOCUS, EventType.BLUR, EventType.ERROR, EventType.LOAD, EventType.TOGGLE];\n/**\n * Whether or not an event type should be registered in the capture phase.\n * @param eventType\n * @returns bool\n */\nconst isCaptureEventType = eventType => CAPTURE_EVENT_TYPES.indexOf(eventType) >= 0;\n/** All event types that are registered early.  */\nconst EARLY_EVENT_TYPES = /*#__PURE__*/BUBBLE_EVENT_TYPES.concat(CAPTURE_EVENT_TYPES);\n/**\n * Whether or not an event type is registered in the early contract.\n */\nconst isEarlyEventType = eventType => EARLY_EVENT_TYPES.indexOf(eventType) >= 0;\n\n/**\n * Gets a browser event type, if it would differ from the JSAction event type.\n */\nfunction getBrowserEventType(eventType) {\n  // Mouseenter and mouseleave events are not handled directly because they\n  // are not available everywhere. In browsers where they are available, they\n  // don't bubble and aren't visible at the container boundary. Instead, we\n  // synthesize the mouseenter and mouseleave events from mouseover and\n  // mouseout events, respectively. Cf. eventcontract.js.\n  if (eventType === EventType.MOUSEENTER) {\n    return EventType.MOUSEOVER;\n  } else if (eventType === EventType.MOUSELEAVE) {\n    return EventType.MOUSEOUT;\n  } else if (eventType === EventType.POINTERENTER) {\n    return EventType.POINTEROVER;\n  } else if (eventType === EventType.POINTERLEAVE) {\n    return EventType.POINTEROUT;\n  }\n  return eventType;\n}\n/**\n * Registers the event handler function with the given DOM element for\n * the given event type.\n *\n * @param element The element.\n * @param eventType The event type.\n * @param handler The handler function to install.\n * @param passive A boolean value that, if `true`, indicates that the function\n *     specified by `handler` will never call `preventDefault()`.\n * @return Information needed to uninstall the event handler eventually.\n */\nfunction addEventListener(element, eventType, handler, passive) {\n  // All event handlers are registered in the bubbling\n  // phase.\n  //\n  // All browsers support focus and blur, but these events only are propagated\n  // in the capture phase. Very legacy browsers do not support focusin or\n  // focusout.\n  //\n  // It would be a bad idea to register all event handlers in the\n  // capture phase because then regular onclick handlers would not be\n  // executed at all on events that trigger a jsaction. That's not\n  // entirely what we want, at least for now.\n  //\n  // Error and load events (i.e. on images) do not bubble so they are also\n  // handled in the capture phase.\n  let capture = false;\n  if (isCaptureEventType(eventType)) {\n    capture = true;\n  }\n  const options = typeof passive === 'boolean' ? {\n    capture,\n    passive\n  } : capture;\n  element.addEventListener(eventType, handler, options);\n  return {\n    eventType,\n    handler,\n    capture,\n    passive\n  };\n}\n/**\n * Removes the event handler for the given event from the element.\n * the given event type.\n *\n * @param element The element.\n * @param info The information needed to deregister the handler, as returned by\n *     addEventListener(), above.\n */\nfunction removeEventListener(element, info) {\n  if (element.removeEventListener) {\n    // It's worth noting that some browser releases have been inconsistent on this, and unless\n    // you have specific reasons otherwise, it's probably wise to use the same values used for\n    // the call to addEventListener() when calling removeEventListener().\n    const options = typeof info.passive === 'boolean' ? {\n      capture: info.capture\n    } : info.capture;\n    element.removeEventListener(info.eventType, info.handler, options);\n    // `detachEvent` is an old DOM API.\n  } else if (element.detachEvent) {\n    // `detachEvent` is an old DOM API.\n    element.detachEvent(`on${info.eventType}`, info.handler);\n  }\n}\n/**\n * Prevents the default action of an event.\n * @param e The event to prevent the default action for.\n */\nfunction preventDefault(e) {\n  e.preventDefault ? e.preventDefault() : e.returnValue = false;\n}\n/**\n * Whether we are on a Mac. Not pulling in useragent just for this.\n */\nlet isMac = typeof navigator !== 'undefined' && /*#__PURE__*//Macintosh/.test(navigator.userAgent);\n/**\n * Determines and returns whether the given event (which is assumed to be a\n * click event) is a middle click.\n * NOTE: There is not a consistent way to identify middle click\n * http://www.unixpapa.com/js/mouse.html\n */\nfunction isMiddleClick(e) {\n  return (\n    // `which` is an old DOM API.\n    e.which === 2 ||\n    // `which` is an old DOM API.\n    e.which == null &&\n    // `button` is an old DOM API.\n    e.button === 4 // middle click for IE\n  );\n}\n/**\n * Determines and returns whether the given event (which is assumed\n * to be a click event) is modified. A middle click is considered a modified\n * click to retain the default browser action, which opens a link in a new tab.\n * @param e The event.\n * @return Whether the given event is modified.\n */\nfunction isModifiedClickEvent(e) {\n  return (\n    // `metaKey` is an old DOM API.\n    isMac && e.metaKey ||\n    // `ctrlKey` is an old DOM API.\n    !isMac && e.ctrlKey || isMiddleClick(e) ||\n    // `shiftKey` is an old DOM API.\n    e.shiftKey\n  );\n}\n/**\n * Determines whether the event corresponds to a non-bubbling mouse\n * event type (mouseenter, mouseleave, pointerenter, and pointerleave).\n *\n * During mouseover (mouseenter) and pointerover (pointerenter), the\n * relatedTarget is the element being entered from. During mouseout (mouseleave)\n * and pointerout (pointerleave), the relatedTarget is the element being exited\n * to.\n *\n * In both cases, if relatedTarget is outside target, then the corresponding\n * special event has occurred, otherwise it hasn't.\n *\n * @param e The mouseover/mouseout event.\n * @param type The type of the mouse special event.\n * @param element The element on which the jsaction for the\n *     mouseenter/mouseleave event is defined.\n * @return True if the event is a mouseenter/mouseleave event.\n */\nfunction isMouseSpecialEvent(e, type, element) {\n  // `relatedTarget` is an old DOM API.\n  const related = e.relatedTarget;\n  return (e.type === EventType.MOUSEOVER && type === EventType.MOUSEENTER || e.type === EventType.MOUSEOUT && type === EventType.MOUSELEAVE || e.type === EventType.POINTEROVER && type === EventType.POINTERENTER || e.type === EventType.POINTEROUT && type === EventType.POINTERLEAVE) && (!related || related !== element && !element.contains(related));\n}\n/**\n * Creates a new EventLike object for a mouseenter/mouseleave event that's\n * derived from the original corresponding mouseover/mouseout event.\n * @param e The event.\n * @param target The element on which the jsaction for the mouseenter/mouseleave\n *     event is defined.\n * @return A modified event-like object copied from the event object passed into\n *     this function.\n */\nfunction createMouseSpecialEvent(e, target) {\n  // We have to create a copy of the event object because we need to mutate\n  // its fields. We do this for the special mouse events because the event\n  // target needs to be retargeted to the action element rather than the real\n  // element (since we are simulating the special mouse events with mouseover/\n  // mouseout).\n  //\n  // Since we're making a copy anyways, we might as well attempt to convert\n  // this event into a pseudo-real mouseenter/mouseleave event by adjusting\n  // its type.\n  //\n  const copy = {};\n  for (const property in e) {\n    if (property === 'srcElement' || property === 'target') {\n      continue;\n    }\n    const key = property;\n    // Making a copy requires iterating through all properties of `Event`.\n    const value = e[key];\n    if (typeof value === 'function') {\n      continue;\n    }\n    // Value should be the expected type, but the value of `key` is not known\n    // statically.\n    copy[key] = value;\n  }\n  if (e.type === EventType.MOUSEOVER) {\n    copy['type'] = EventType.MOUSEENTER;\n  } else if (e.type === EventType.MOUSEOUT) {\n    copy['type'] = EventType.MOUSELEAVE;\n  } else if (e.type === EventType.POINTEROVER) {\n    copy['type'] = EventType.POINTERENTER;\n  } else {\n    copy['type'] = EventType.POINTERLEAVE;\n  }\n  copy['target'] = copy['srcElement'] = target;\n  copy['bubbles'] = false;\n  copy['_originalEvent'] = e;\n  return copy;\n}\n\n/**\n * Whether the user agent is running on iOS.\n */\nconst isIos = typeof navigator !== 'undefined' && /*#__PURE__*//iPhone|iPad|iPod/.test(navigator.userAgent);\n/**\n * A class representing a container node and all the event handlers\n * installed on it. Used so that handlers can be cleaned up if the\n * container is removed from the contract.\n */\nclass EventContractContainer {\n  element;\n  /**\n   * Array of event handlers and their corresponding event types that are\n   * installed on this container.\n   *\n   */\n  handlerInfos = [];\n  /**\n   * @param element The container Element.\n   */\n  constructor(element) {\n    this.element = element;\n  }\n  /**\n   * Installs the provided installer on the element owned by this container,\n   * and maintains a reference to resulting handler in order to remove it\n   * later if desired.\n   */\n  addEventListener(eventType, getHandler, passive) {\n    // In iOS, event bubbling doesn't happen automatically in any DOM element,\n    // unless it has an onclick attribute or DOM event handler attached to it.\n    // This breaks JsAction in some cases. See \"Making Elements Clickable\"\n    // section at http://goo.gl/2VoGnB.\n    //\n    // A workaround for this issue is to change the CSS cursor style to 'pointer'\n    // for the container element, which magically turns on event bubbling. This\n    // solution is described in the comments section at http://goo.gl/6pEO1z.\n    //\n    // We use a navigator.userAgent check here as this problem is present both\n    // on Mobile Safari and thin WebKit wrappers, such as Chrome for iOS.\n    if (isIos) {\n      this.element.style.cursor = 'pointer';\n    }\n    this.handlerInfos.push(addEventListener(this.element, eventType, getHandler(this.element), passive));\n  }\n  /**\n   * Removes all the handlers installed on this container.\n   */\n  cleanUp() {\n    for (let i = 0; i < this.handlerInfos.length; i++) {\n      removeEventListener(this.element, this.handlerInfos[i]);\n    }\n    this.handlerInfos = [];\n  }\n}\nconst Char = {\n  /**\n   * The separator between the namespace and the action name in the\n   * jsaction attribute value.\n   */\n  NAMESPACE_ACTION_SEPARATOR: '.',\n  /**\n   * The separator between the event name and action in the jsaction\n   * attribute value.\n   */\n  EVENT_ACTION_SEPARATOR: ':'\n};\n\n/** Added for readability when accessing stable property names. */\nfunction getEventType(eventInfo) {\n  return eventInfo.eventType;\n}\n/** Added for readability when accessing stable property names. */\nfunction setEventType(eventInfo, eventType) {\n  eventInfo.eventType = eventType;\n}\n/** Added for readability when accessing stable property names. */\nfunction getEvent(eventInfo) {\n  return eventInfo.event;\n}\n/** Added for readability when accessing stable property names. */\nfunction setEvent(eventInfo, event) {\n  eventInfo.event = event;\n}\n/** Added for readability when accessing stable property names. */\nfunction getTargetElement(eventInfo) {\n  return eventInfo.targetElement;\n}\n/** Added for readability when accessing stable property names. */\nfunction setTargetElement(eventInfo, targetElement) {\n  eventInfo.targetElement = targetElement;\n}\n/** Added for readability when accessing stable property names. */\nfunction getContainer(eventInfo) {\n  return eventInfo.eic;\n}\n/** Added for readability when accessing stable property names. */\nfunction setContainer(eventInfo, container) {\n  eventInfo.eic = container;\n}\n/** Added for readability when accessing stable property names. */\nfunction getTimestamp(eventInfo) {\n  return eventInfo.timeStamp;\n}\n/** Added for readability when accessing stable property names. */\nfunction setTimestamp(eventInfo, timestamp) {\n  eventInfo.timeStamp = timestamp;\n}\n/** Added for readability when accessing stable property names. */\nfunction getAction(eventInfo) {\n  return eventInfo.eia;\n}\n/** Added for readability when accessing stable property names. */\nfunction setAction(eventInfo, actionName, actionElement) {\n  eventInfo.eia = [actionName, actionElement];\n}\n/** Added for readability when accessing stable property names. */\nfunction unsetAction(eventInfo) {\n  eventInfo.eia = undefined;\n}\n/** Added for readability when accessing stable property names. */\nfunction getActionElement(actionInfo) {\n  return actionInfo[1];\n}\n/** Added for readability when accessing stable property names. */\nfunction getIsReplay(eventInfo) {\n  return eventInfo.eirp;\n}\n/** Added for readability when accessing stable property names. */\nfunction setIsReplay(eventInfo, replay) {\n  eventInfo.eirp = replay;\n}\n/** Added for readability when accessing stable property names. */\nfunction getResolved(eventInfo) {\n  return eventInfo.eir;\n}\n/** Added for readability when accessing stable property names. */\nfunction setResolved(eventInfo, resolved) {\n  eventInfo.eir = resolved;\n}\n/** Clones an `EventInfo` */\nfunction cloneEventInfo(eventInfo) {\n  return {\n    eventType: eventInfo.eventType,\n    event: eventInfo.event,\n    targetElement: eventInfo.targetElement,\n    eic: eventInfo.eic,\n    eia: eventInfo.eia,\n    timeStamp: eventInfo.timeStamp,\n    eirp: eventInfo.eirp,\n    eiack: eventInfo.eiack,\n    eir: eventInfo.eir\n  };\n}\n/**\n * Utility function for creating an `EventInfo`.\n *\n * This can be used from code-size sensitive compilation units, as taking\n * parameters vs. an `Object` literal reduces code size.\n */\nfunction createEventInfoFromParameters(eventType, event, targetElement, container, timestamp, action, isReplay, a11yClickKey) {\n  return {\n    eventType,\n    event,\n    targetElement,\n    eic: container,\n    timeStamp: timestamp,\n    eia: action,\n    eirp: isReplay,\n    eiack: a11yClickKey\n  };\n}\n/**\n * Utility class around an `EventInfo`.\n *\n * This should be used in compilation units that are less sensitive to code\n * size.\n */\nclass EventInfoWrapper {\n  eventInfo;\n  constructor(eventInfo) {\n    this.eventInfo = eventInfo;\n  }\n  getEventType() {\n    return getEventType(this.eventInfo);\n  }\n  setEventType(eventType) {\n    setEventType(this.eventInfo, eventType);\n  }\n  getEvent() {\n    return getEvent(this.eventInfo);\n  }\n  setEvent(event) {\n    setEvent(this.eventInfo, event);\n  }\n  getTargetElement() {\n    return getTargetElement(this.eventInfo);\n  }\n  setTargetElement(targetElement) {\n    setTargetElement(this.eventInfo, targetElement);\n  }\n  getContainer() {\n    return getContainer(this.eventInfo);\n  }\n  setContainer(container) {\n    setContainer(this.eventInfo, container);\n  }\n  getTimestamp() {\n    return getTimestamp(this.eventInfo);\n  }\n  setTimestamp(timestamp) {\n    setTimestamp(this.eventInfo, timestamp);\n  }\n  getAction() {\n    const action = getAction(this.eventInfo);\n    if (!action) return undefined;\n    return {\n      name: action[0],\n      element: action[1]\n    };\n  }\n  setAction(action) {\n    if (!action) {\n      unsetAction(this.eventInfo);\n      return;\n    }\n    setAction(this.eventInfo, action.name, action.element);\n  }\n  getIsReplay() {\n    return getIsReplay(this.eventInfo);\n  }\n  setIsReplay(replay) {\n    setIsReplay(this.eventInfo, replay);\n  }\n  getResolved() {\n    return getResolved(this.eventInfo);\n  }\n  setResolved(resolved) {\n    setResolved(this.eventInfo, resolved);\n  }\n  clone() {\n    return new EventInfoWrapper(cloneEventInfo(this.eventInfo));\n  }\n}\n\n/**\n * Since maps from event to action are immutable we can use a single map\n * to represent the empty map.\n */\nconst EMPTY_ACTION_MAP = {};\n/**\n * This regular expression matches a semicolon.\n */\nconst REGEXP_SEMICOLON = /\\s*;\\s*/;\n/** If no event type is defined, defaults to `click`. */\nconst DEFAULT_EVENT_TYPE = EventType.CLICK;\n/** Resolves actions for Events. */\nclass ActionResolver {\n  a11yClickSupport = false;\n  clickModSupport = true;\n  syntheticMouseEventSupport;\n  updateEventInfoForA11yClick = undefined;\n  preventDefaultForA11yClick = undefined;\n  populateClickOnlyAction = undefined;\n  constructor({\n    syntheticMouseEventSupport = false,\n    clickModSupport = true\n  } = {}) {\n    this.syntheticMouseEventSupport = syntheticMouseEventSupport;\n    this.clickModSupport = clickModSupport;\n  }\n  resolveEventType(eventInfo) {\n    // We distinguish modified and plain clicks in order to support the\n    // default browser behavior of modified clicks on links; usually to\n    // open the URL of the link in new tab or new window on ctrl/cmd\n    // click. A DOM 'click' event is mapped to the jsaction 'click'\n    // event iff there is no modifier present on the event. If there is\n    // a modifier, it's mapped to 'clickmod' instead.\n    //\n    // It's allowed to omit the event in the jsaction attribute. In that\n    // case, 'click' is assumed. Thus the following two are equivalent:\n    //\n    //   <a href=\"someurl\" jsaction=\"gna.fu\">\n    //   <a href=\"someurl\" jsaction=\"click:gna.fu\">\n    //\n    // For unmodified clicks, EventContract invokes the jsaction\n    // 'gna.fu'. For modified clicks, EventContract won't find a\n    // suitable action and leave the event to be handled by the\n    // browser.\n    //\n    // In order to also invoke a jsaction handler for a modifier click,\n    // 'clickmod' needs to be used:\n    //\n    //   <a href=\"someurl\" jsaction=\"clickmod:gna.fu\">\n    //\n    // EventContract invokes the jsaction 'gna.fu' for modified\n    // clicks. Unmodified clicks are left to the browser.\n    //\n    // In order to set up the event contract to handle both clickonly and\n    // clickmod, only addEvent(EventType.CLICK) is necessary.\n    //\n    // In order to set up the event contract to handle click,\n    // addEvent() is necessary for CLICK, KEYDOWN, and KEYPRESS event types.  If\n    // a11y click support is enabled, addEvent() will set up the appropriate key\n    // event handler automatically.\n    if (this.clickModSupport && getEventType(eventInfo) === EventType.CLICK && isModifiedClickEvent(getEvent(eventInfo))) {\n      setEventType(eventInfo, EventType.CLICKMOD);\n    } else if (this.a11yClickSupport) {\n      this.updateEventInfoForA11yClick(eventInfo);\n    }\n  }\n  resolveAction(eventInfo) {\n    if (getResolved(eventInfo)) {\n      return;\n    }\n    this.populateAction(eventInfo, getTargetElement(eventInfo));\n    setResolved(eventInfo, true);\n  }\n  resolveParentAction(eventInfo) {\n    const action = getAction(eventInfo);\n    const actionElement = action && getActionElement(action);\n    unsetAction(eventInfo);\n    const parentNode = actionElement && this.getParentNode(actionElement);\n    if (!parentNode) {\n      return;\n    }\n    this.populateAction(eventInfo, parentNode);\n  }\n  /**\n   * Searches for a jsaction that the DOM event maps to and creates an\n   * object containing event information used for dispatching by\n   * jsaction.Dispatcher. This method populates the `action` and `actionElement`\n   * fields of the EventInfo object passed in by finding the first\n   * jsaction attribute above the target Node of the event, and below\n   * the container Node, that specifies a jsaction for the event\n   * type. If no such jsaction is found, then action is undefined.\n   *\n   * @param eventInfo `EventInfo` to set `action` and `actionElement` if an\n   *    action is found on any `Element` in the path of the `Event`.\n   */\n  populateAction(eventInfo, currentTarget) {\n    let actionElement = currentTarget;\n    while (actionElement && actionElement !== getContainer(eventInfo)) {\n      if (actionElement.nodeType === Node.ELEMENT_NODE) {\n        this.populateActionOnElement(actionElement, eventInfo);\n      }\n      if (getAction(eventInfo)) {\n        // An event is handled by at most one jsaction. Thus we stop at the\n        // first matching jsaction specified in a jsaction attribute up the\n        // ancestor chain of the event target node.\n        break;\n      }\n      actionElement = this.getParentNode(actionElement);\n    }\n    const action = getAction(eventInfo);\n    if (!action) {\n      // No action found.\n      return;\n    }\n    if (this.a11yClickSupport) {\n      this.preventDefaultForA11yClick(eventInfo);\n    }\n    // We attempt to handle the mouseenter/mouseleave events here by\n    // detecting whether the mouseover/mouseout events correspond to\n    // entering/leaving an element.\n    if (this.syntheticMouseEventSupport) {\n      if (getEventType(eventInfo) === EventType.MOUSEENTER || getEventType(eventInfo) === EventType.MOUSELEAVE || getEventType(eventInfo) === EventType.POINTERENTER || getEventType(eventInfo) === EventType.POINTERLEAVE) {\n        // We attempt to handle the mouseenter/mouseleave events here by\n        // detecting whether the mouseover/mouseout events correspond to\n        // entering/leaving an element.\n        if (isMouseSpecialEvent(getEvent(eventInfo), getEventType(eventInfo), getActionElement(action))) {\n          // If both mouseover/mouseout and mouseenter/mouseleave events are\n          // enabled, two separate handlers for mouseover/mouseout are\n          // registered. Both handlers will see the same event instance\n          // so we create a copy to avoid interfering with the dispatching of\n          // the mouseover/mouseout event.\n          const copiedEvent = createMouseSpecialEvent(getEvent(eventInfo), getActionElement(action));\n          setEvent(eventInfo, copiedEvent);\n          // Since the mouseenter/mouseleave events do not bubble, the target\n          // of the event is technically the `actionElement` (the node with the\n          // `jsaction` attribute)\n          setTargetElement(eventInfo, getActionElement(action));\n        } else {\n          unsetAction(eventInfo);\n        }\n      }\n    }\n  }\n  /**\n   * Walk to the parent node, unless the node has a different owner in\n   * which case we walk to the owner. Attempt to walk to host of a\n   * shadow root if needed.\n   */\n  getParentNode(element) {\n    const owner = element[Property.OWNER];\n    if (owner) {\n      return owner;\n    }\n    const parentNode = element.parentNode;\n    if (parentNode?.nodeName === '#document-fragment') {\n      return parentNode?.host ?? null;\n    }\n    return parentNode;\n  }\n  /**\n   * Accesses the jsaction map on a node and retrieves the name of the\n   * action the given event is mapped to, if any. It parses the\n   * attribute value and stores it in a property on the node for\n   * subsequent retrieval without re-parsing and re-accessing the\n   * attribute.\n   *\n   * @param actionElement The DOM node to retrieve the jsaction map from.\n   * @param eventInfo `EventInfo` to set `action` and `actionElement` if an\n   *    action is found on the `actionElement`.\n   */\n  populateActionOnElement(actionElement, eventInfo) {\n    const actionMap = this.parseActions(actionElement);\n    const actionName = actionMap[getEventType(eventInfo)];\n    if (actionName !== undefined) {\n      setAction(eventInfo, actionName, actionElement);\n    }\n    if (this.a11yClickSupport) {\n      this.populateClickOnlyAction(actionElement, eventInfo, actionMap);\n    }\n  }\n  /**\n   * Parses and caches an element's jsaction element into a map.\n   *\n   * This is primarily for internal use.\n   *\n   * @param actionElement The DOM node to retrieve the jsaction map from.\n   * @return Map from event to qualified name of the jsaction bound to it.\n   */\n  parseActions(actionElement) {\n    let actionMap = get(actionElement);\n    if (!actionMap) {\n      const jsactionAttribute = actionElement.getAttribute(Attribute.JSACTION);\n      if (!jsactionAttribute) {\n        actionMap = EMPTY_ACTION_MAP;\n        set(actionElement, actionMap);\n      } else {\n        actionMap = getParsed(jsactionAttribute);\n        if (!actionMap) {\n          actionMap = {};\n          const values = jsactionAttribute.split(REGEXP_SEMICOLON);\n          for (let idx = 0; idx < values.length; idx++) {\n            const value = values[idx];\n            if (!value) {\n              continue;\n            }\n            const colon = value.indexOf(Char.EVENT_ACTION_SEPARATOR);\n            const hasColon = colon !== -1;\n            const type = hasColon ? value.substr(0, colon).trim() : DEFAULT_EVENT_TYPE;\n            const action = hasColon ? value.substr(colon + 1).trim() : value;\n            actionMap[type] = action;\n          }\n          setParsed(jsactionAttribute, actionMap);\n        }\n        set(actionElement, actionMap);\n      }\n    }\n    return actionMap;\n  }\n  addA11yClickSupport(updateEventInfoForA11yClick, preventDefaultForA11yClick, populateClickOnlyAction) {\n    this.a11yClickSupport = true;\n    this.updateEventInfoForA11yClick = updateEventInfoForA11yClick;\n    this.preventDefaultForA11yClick = preventDefaultForA11yClick;\n    this.populateClickOnlyAction = populateClickOnlyAction;\n  }\n}\n\n/**\n * @fileoverview An enum to control who can call certain jsaction APIs.\n */\nvar Restriction = /*#__PURE__*/function (Restriction) {\n  Restriction[Restriction[\"I_AM_THE_JSACTION_FRAMEWORK\"] = 0] = \"I_AM_THE_JSACTION_FRAMEWORK\";\n  return Restriction;\n}(Restriction || {});\n/**\n * Receives a DOM event, determines the jsaction associated with the source\n * element of the DOM event, and invokes the handler associated with the\n * jsaction.\n */\nclass Dispatcher {\n  dispatchDelegate;\n  // The ActionResolver to use to resolve actions.\n  actionResolver;\n  /** The replayer function to be called when there are queued events. */\n  eventReplayer;\n  /** Whether the event replay is scheduled. */\n  eventReplayScheduled = false;\n  /** The queue of events. */\n  replayEventInfoWrappers = [];\n  /**\n   * Options are:\n   *   - `eventReplayer`: When the event contract dispatches replay events\n   *      to the Dispatcher, the Dispatcher collects them and in the next tick\n   *      dispatches them to the `eventReplayer`. Defaults to dispatching to `dispatchDelegate`.\n   * @param dispatchDelegate A function that should handle dispatching an `EventInfoWrapper` to handlers.\n   */\n  constructor(dispatchDelegate, {\n    actionResolver,\n    eventReplayer\n  } = {}) {\n    this.dispatchDelegate = dispatchDelegate;\n    this.actionResolver = actionResolver;\n    this.eventReplayer = eventReplayer;\n  }\n  /**\n   * Receives an event or the event queue from the EventContract. The event\n   * queue is copied and it attempts to replay.\n   * If event info is passed in it looks for an action handler that can handle\n   * the given event.  If there is no handler registered queues the event and\n   * checks if a loader is registered for the given namespace. If so, calls it.\n   *\n   * Alternatively, if in global dispatch mode, calls all registered global\n   * handlers for the appropriate event type.\n   *\n   * The three functionalities of this call are deliberately not split into\n   * three methods (and then declared as an abstract interface), because the\n   * interface is used by EventContract, which lives in a different jsbinary.\n   * Therefore the interface between the three is defined entirely in terms that\n   * are invariant under jscompiler processing (Function and Array, as opposed\n   * to a custom type with method names).\n   *\n   * @param eventInfo The info for the event that triggered this call or the\n   *     queue of events from EventContract.\n   */\n  dispatch(eventInfo) {\n    const eventInfoWrapper = new EventInfoWrapper(eventInfo);\n    this.actionResolver?.resolveEventType(eventInfo);\n    this.actionResolver?.resolveAction(eventInfo);\n    const action = eventInfoWrapper.getAction();\n    if (action && shouldPreventDefaultBeforeDispatching(action.element, eventInfoWrapper)) {\n      preventDefault(eventInfoWrapper.getEvent());\n    }\n    if (this.eventReplayer && eventInfoWrapper.getIsReplay()) {\n      this.scheduleEventInfoWrapperReplay(eventInfoWrapper);\n      return;\n    }\n    this.dispatchDelegate(eventInfoWrapper);\n  }\n  /**\n   * Schedules an `EventInfoWrapper` for replay. The replaying will happen in its own\n   * stack once the current flow cedes control. This is done to mimic\n   * browser event handling.\n   */\n  scheduleEventInfoWrapperReplay(eventInfoWrapper) {\n    this.replayEventInfoWrappers.push(eventInfoWrapper);\n    if (this.eventReplayScheduled) {\n      return;\n    }\n    this.eventReplayScheduled = true;\n    Promise.resolve().then(() => {\n      this.eventReplayScheduled = false;\n      this.eventReplayer(this.replayEventInfoWrappers);\n    });\n  }\n}\n/**\n * Returns true if the default action of this event should be prevented before\n * this event is dispatched.\n */\nfunction shouldPreventDefaultBeforeDispatching(actionElement, eventInfoWrapper) {\n  // Prevent browser from following <a> node links if a jsaction is present\n  // and we are dispatching the action now. Note that the targetElement may be\n  // a child of an anchor that has a jsaction attached. For that reason, we\n  // need to check the actionElement rather than the targetElement.\n  return actionElement.tagName === 'A' && (eventInfoWrapper.getEventType() === EventType.CLICK || eventInfoWrapper.getEventType() === EventType.CLICKMOD);\n}\n\n/** An internal symbol used to indicate whether propagation should be stopped or not. */\nconst PROPAGATION_STOPPED_SYMBOL = /* @__PURE__ */Symbol.for('propagationStopped');\n/** Extra event phases beyond what the browser provides. */\nconst EventPhase = {\n  REPLAY: 101\n};\nconst PREVENT_DEFAULT_ERROR_MESSAGE_DETAILS = ' Because event replay occurs after browser dispatch, `preventDefault` would have no ' + 'effect. You can check whether an event is being replayed by accessing the event phase: ' + '`event.eventPhase === EventPhase.REPLAY`.';\nconst PREVENT_DEFAULT_ERROR_MESSAGE = `\\`preventDefault\\` called during event replay.`;\nconst COMPOSED_PATH_ERROR_MESSAGE_DETAILS = ' Because event replay occurs after browser ' + 'dispatch, `composedPath()` will be empty. Iterate parent nodes from `event.target` or ' + '`event.currentTarget` if you need to check elements in the event path.';\nconst COMPOSED_PATH_ERROR_MESSAGE = `\\`composedPath\\` called during event replay.`;\n/**\n * A dispatcher that uses browser-based `Event` semantics, for example bubbling, `stopPropagation`,\n * `currentTarget`, etc.\n */\nclass EventDispatcher {\n  dispatchDelegate;\n  clickModSupport;\n  actionResolver;\n  dispatcher;\n  constructor(dispatchDelegate, clickModSupport = true) {\n    this.dispatchDelegate = dispatchDelegate;\n    this.clickModSupport = clickModSupport;\n    this.actionResolver = new ActionResolver({\n      clickModSupport\n    });\n    this.dispatcher = new Dispatcher(eventInfoWrapper => {\n      this.dispatchToDelegate(eventInfoWrapper);\n    }, {\n      actionResolver: this.actionResolver\n    });\n  }\n  /**\n   * The entrypoint for the `EventContract` dispatch.\n   */\n  dispatch(eventInfo) {\n    this.dispatcher.dispatch(eventInfo);\n  }\n  /** Internal method that does basic disaptching. */\n  dispatchToDelegate(eventInfoWrapper) {\n    if (eventInfoWrapper.getIsReplay()) {\n      prepareEventForReplay(eventInfoWrapper);\n    }\n    prepareEventForBubbling(eventInfoWrapper);\n    while (eventInfoWrapper.getAction()) {\n      prepareEventForDispatch(eventInfoWrapper);\n      // If this is a capture event, ONLY dispatch if the action element is the target.\n      if (isCaptureEventType(eventInfoWrapper.getEventType()) && eventInfoWrapper.getAction().element !== eventInfoWrapper.getTargetElement()) {\n        return;\n      }\n      this.dispatchDelegate(eventInfoWrapper.getEvent(), eventInfoWrapper.getAction().name);\n      if (propagationStopped(eventInfoWrapper)) {\n        return;\n      }\n      this.actionResolver.resolveParentAction(eventInfoWrapper.eventInfo);\n    }\n  }\n}\nfunction prepareEventForBubbling(eventInfoWrapper) {\n  const event = eventInfoWrapper.getEvent();\n  const originalStopPropagation = eventInfoWrapper.getEvent().stopPropagation.bind(event);\n  const stopPropagation = () => {\n    event[PROPAGATION_STOPPED_SYMBOL] = true;\n    originalStopPropagation();\n  };\n  patchEventInstance(event, 'stopPropagation', stopPropagation);\n  patchEventInstance(event, 'stopImmediatePropagation', stopPropagation);\n}\nfunction propagationStopped(eventInfoWrapper) {\n  const event = eventInfoWrapper.getEvent();\n  return !!event[PROPAGATION_STOPPED_SYMBOL];\n}\nfunction prepareEventForReplay(eventInfoWrapper) {\n  const event = eventInfoWrapper.getEvent();\n  const target = eventInfoWrapper.getTargetElement();\n  const originalPreventDefault = event.preventDefault.bind(event);\n  patchEventInstance(event, 'target', target);\n  patchEventInstance(event, 'eventPhase', EventPhase.REPLAY);\n  patchEventInstance(event, 'preventDefault', () => {\n    originalPreventDefault();\n    throw new Error(PREVENT_DEFAULT_ERROR_MESSAGE + (ngDevMode ? PREVENT_DEFAULT_ERROR_MESSAGE_DETAILS : ''));\n  });\n  patchEventInstance(event, 'composedPath', () => {\n    throw new Error(COMPOSED_PATH_ERROR_MESSAGE + (ngDevMode ? COMPOSED_PATH_ERROR_MESSAGE_DETAILS : ''));\n  });\n}\nfunction prepareEventForDispatch(eventInfoWrapper) {\n  const event = eventInfoWrapper.getEvent();\n  const currentTarget = eventInfoWrapper.getAction()?.element;\n  if (currentTarget) {\n    patchEventInstance(event, 'currentTarget', currentTarget, {\n      // `currentTarget` is going to get reassigned every dispatch.\n      configurable: true\n    });\n  }\n}\n/**\n * Patch `Event` instance during non-standard `Event` dispatch. This patches just the `Event`\n * instance that the browser created, it does not patch global properties or methods.\n *\n * This is necessary because dispatching an `Event` outside of browser dispatch results in\n * incorrect properties and methods that need to be polyfilled or do not work.\n *\n * JSAction dispatch adds two extra \"phases\" to event dispatch:\n * 1. Event delegation - the event is being dispatched by a delegating event handler on a container\n *    (typically `window.document.documentElement`), to a delegated event handler on some child\n *    element. Certain `Event` properties will be unintuitive, such as `currentTarget`, which would\n *    be the container rather than the child element. Bubbling would also not work. In order to\n *    emulate the browser, these properties and methods on the `Event` are patched.\n * 2. Event replay - the event is being dispatched by the framework once the handlers have been\n *    loaded (during hydration, or late-loaded). Certain `Event` properties can be unset by the\n *    browser because the `Event` is no longer actively being dispatched, such as `target`. Other\n *    methods have no effect because the `Event` has already been dispatched, such as\n *    `preventDefault`. Bubbling would also not work. These properties and methods are patched,\n *    either to fill in information that the browser may have removed, or to throw errors in methods\n *    that no longer behave as expected.\n */\nfunction patchEventInstance(event, property, value, {\n  configurable = false\n} = {}) {\n  Object.defineProperty(event, property, {\n    value,\n    configurable\n  });\n}\n/**\n * Registers deferred functionality for an EventContract and a Jsaction\n * Dispatcher.\n */\nfunction registerDispatcher$1(eventContract, dispatcher) {\n  eventContract.ecrd(eventInfo => {\n    dispatcher.dispatch(eventInfo);\n  }, Restriction.I_AM_THE_JSACTION_FRAMEWORK);\n}\n\n/** Creates an `EarlyJsactionData` object. */\nfunction createEarlyJsactionData(container) {\n  const q = [];\n  const d = eventInfo => {\n    q.push(eventInfo);\n  };\n  const h = event => {\n    d(createEventInfoFromParameters(event.type, event, event.target, container, Date.now()));\n  };\n  return {\n    c: container,\n    q,\n    et: [],\n    etc: [],\n    d,\n    h\n  };\n}\n/** Add all the events to the container stored in the `EarlyJsactionData`. */\nfunction addEvents(earlyJsactionData, types, capture) {\n  for (let i = 0; i < types.length; i++) {\n    const eventType = types[i];\n    const eventTypes = capture ? earlyJsactionData.etc : earlyJsactionData.et;\n    eventTypes.push(eventType);\n    earlyJsactionData.c.addEventListener(eventType, earlyJsactionData.h, capture);\n  }\n}\n/** Get the queued `EventInfo` objects that were dispatched before a dispatcher was registered. */\nfunction getQueuedEventInfos(earlyJsactionData) {\n  return earlyJsactionData?.q ?? [];\n}\n/** Register a different dispatcher function on the `EarlyJsactionData`. */\nfunction registerDispatcher(earlyJsactionData, dispatcher) {\n  if (!earlyJsactionData) {\n    return;\n  }\n  earlyJsactionData.d = dispatcher;\n}\n/** Removes all event listener handlers. */\nfunction removeAllEventListeners(earlyJsactionData) {\n  if (!earlyJsactionData) {\n    return;\n  }\n  removeEventListeners(earlyJsactionData.c, earlyJsactionData.et, earlyJsactionData.h);\n  removeEventListeners(earlyJsactionData.c, earlyJsactionData.etc, earlyJsactionData.h, true);\n}\nfunction removeEventListeners(container, eventTypes, earlyEventHandler, capture) {\n  for (let i = 0; i < eventTypes.length; i++) {\n    container.removeEventListener(eventTypes[i], earlyEventHandler, /* useCapture */capture);\n  }\n}\n\n/**\n * @define Support for the non-bubbling mouseenter and mouseleave events.  This\n * flag can be overridden in a build rule.\n */\nconst MOUSE_SPECIAL_SUPPORT = false;\n\n/**\n * @fileoverview Implements the local event handling contract. This\n * allows DOM objects in a container that enters into this contract to\n * define event handlers which are executed in a local context.\n *\n * One EventContract instance can manage the contract for multiple\n * containers, which are added using the addContainer() method.\n *\n * Events can be registered using the addEvent() method.\n *\n * A Dispatcher is added using the registerDispatcher() method. Until there is\n * a dispatcher, events are queued. The idea is that the EventContract\n * class is inlined in the HTML of the top level page and instantiated\n * right after the start of <body>. The Dispatcher class is contained\n * in the external deferred js, and instantiated and registered with\n * EventContract when the external javascript in the page loads. The\n * external javascript will also register the jsaction handlers, which\n * then pick up the queued events at the time of registration.\n *\n * Since this class is meant to be inlined in the main page HTML, the\n * size of the binary compiled from this file MUST be kept as small as\n * possible and thus its dependencies to a minimum.\n */\n/**\n * EventContract intercepts events in the bubbling phase at the\n * boundary of a container element, and maps them to generic actions\n * which are specified using the custom jsaction attribute in\n * HTML. Behavior of the application is then specified in terms of\n * handler for such actions, cf. jsaction.Dispatcher in dispatcher.js.\n *\n * This has several benefits: (1) No DOM event handlers need to be\n * registered on the specific elements in the UI. (2) The set of\n * events that the application has to handle can be specified in terms\n * of the semantics of the application, rather than in terms of DOM\n * events. (3) Invocation of handlers can be delayed and handlers can\n * be delay loaded in a generic way.\n */\nlet EventContract = /*#__PURE__*/(() => {\n  class EventContract {\n    static MOUSE_SPECIAL_SUPPORT = MOUSE_SPECIAL_SUPPORT;\n    containerManager;\n    /**\n     * The DOM events which this contract covers. Used to prevent double\n     * registration of event types. The value of the map is the\n     * internally created DOM event handler function that handles the\n     * DOM events. See addEvent().\n     *\n     */\n    eventHandlers = {};\n    browserEventTypeToExtraEventTypes = {};\n    /**\n     * The dispatcher function. Events are passed to this function for\n     * handling once it was set using the registerDispatcher() method. This is\n     * done because the function is passed from another jsbinary, so passing the\n     * instance and invoking the method here would require to leave the method\n     * unobfuscated.\n     */\n    dispatcher = null;\n    /**\n     * The list of suspended `EventInfo` that will be dispatched\n     * as soon as the `Dispatcher` is registered.\n     */\n    queuedEventInfos = [];\n    constructor(containerManager) {\n      this.containerManager = containerManager;\n    }\n    handleEvent(eventType, event, container) {\n      const eventInfo = createEventInfoFromParameters(/* eventType= */eventType, /* event= */event, /* targetElement= */event.target, /* container= */container, /* timestamp= */Date.now());\n      this.handleEventInfo(eventInfo);\n    }\n    /**\n     * Handle an `EventInfo`.\n     */\n    handleEventInfo(eventInfo) {\n      if (!this.dispatcher) {\n        // All events are queued when the dispatcher isn't yet loaded.\n        setIsReplay(eventInfo, true);\n        this.queuedEventInfos?.push(eventInfo);\n        return;\n      }\n      this.dispatcher(eventInfo);\n    }\n    /**\n     * Enables jsaction handlers to be called for the event type given by\n     * name.\n     *\n     * If the event is already registered, this does nothing.\n     *\n     * @param prefixedEventType If supplied, this event is used in\n     *     the actual browser event registration instead of the name that is\n     *     exposed to jsaction. Use this if you e.g. want users to be able\n     *     to subscribe to jsaction=\"transitionEnd:foo\" while the underlying\n     *     event is webkitTransitionEnd in one browser and mozTransitionEnd\n     *     in another.\n     *\n     * @param passive A boolean value that, if `true`, indicates that the event\n     *     handler will never call `preventDefault()`.\n     */\n    addEvent(eventType, prefixedEventType, passive) {\n      if (eventType in this.eventHandlers || !this.containerManager) {\n        return;\n      }\n      if (!EventContract.MOUSE_SPECIAL_SUPPORT && MOUSE_SPECIAL_EVENT_TYPES.indexOf(eventType) >= 0) {\n        return;\n      }\n      const eventHandler = (eventType, event, container) => {\n        this.handleEvent(eventType, event, container);\n      };\n      // Store the callback to allow us to replay events.\n      this.eventHandlers[eventType] = eventHandler;\n      const browserEventType = getBrowserEventType(prefixedEventType || eventType);\n      if (browserEventType !== eventType) {\n        const eventTypes = this.browserEventTypeToExtraEventTypes[browserEventType] || [];\n        eventTypes.push(eventType);\n        this.browserEventTypeToExtraEventTypes[browserEventType] = eventTypes;\n      }\n      this.containerManager.addEventListener(browserEventType, element => {\n        return event => {\n          eventHandler(eventType, event, element);\n        };\n      }, passive);\n    }\n    /**\n     * Gets the queued early events and replay them using the appropriate handler\n     * in the provided event contract. Once all the events are replayed, it cleans\n     * up the early contract.\n     */\n    replayEarlyEvents(earlyJsactionData = window._ejsa) {\n      // Check if the early contract is present and prevent calling this function\n      // more than once.\n      if (!earlyJsactionData) {\n        return;\n      }\n      // Replay the early contract events.\n      this.replayEarlyEventInfos(earlyJsactionData.q);\n      // Clean up the early contract.\n      removeAllEventListeners(earlyJsactionData);\n      delete window._ejsa;\n    }\n    /**\n     * Replays all the early `EventInfo` objects, dispatching them through the normal\n     * `EventContract` flow.\n     */\n    replayEarlyEventInfos(earlyEventInfos) {\n      for (let i = 0; i < earlyEventInfos.length; i++) {\n        const earlyEventInfo = earlyEventInfos[i];\n        const eventTypes = this.getEventTypesForBrowserEventType(earlyEventInfo.eventType);\n        for (let j = 0; j < eventTypes.length; j++) {\n          const eventInfo = cloneEventInfo(earlyEventInfo);\n          // EventInfo eventType maps to JSAction's internal event type,\n          // rather than the browser event type.\n          setEventType(eventInfo, eventTypes[j]);\n          this.handleEventInfo(eventInfo);\n        }\n      }\n    }\n    /**\n     * Returns all JSAction event types that have been registered for a given\n     * browser event type.\n     */\n    getEventTypesForBrowserEventType(browserEventType) {\n      const eventTypes = [];\n      if (this.eventHandlers[browserEventType]) {\n        eventTypes.push(browserEventType);\n      }\n      if (this.browserEventTypeToExtraEventTypes[browserEventType]) {\n        eventTypes.push(...this.browserEventTypeToExtraEventTypes[browserEventType]);\n      }\n      return eventTypes;\n    }\n    /**\n     * Returns the event handler function for a given event type.\n     */\n    handler(eventType) {\n      return this.eventHandlers[eventType];\n    }\n    /**\n     * Cleans up the event contract. This resets all of the `EventContract`'s\n     * internal state. Users are responsible for not using this `EventContract`\n     * after it has been cleaned up.\n     */\n    cleanUp() {\n      this.containerManager?.cleanUp();\n      this.containerManager = null;\n      this.eventHandlers = {};\n      this.browserEventTypeToExtraEventTypes = {};\n      this.dispatcher = null;\n      this.queuedEventInfos = [];\n    }\n    /**\n     * Register a dispatcher function. Event info of each event mapped to\n     * a jsaction is passed for handling to this callback. The queued\n     * events are passed as well to the dispatcher for later replaying\n     * once the dispatcher is registered. Clears the event queue to null.\n     *\n     * @param dispatcher The dispatcher function.\n     * @param restriction\n     */\n    registerDispatcher(dispatcher, restriction) {\n      this.ecrd(dispatcher, restriction);\n    }\n    /**\n     * Unrenamed alias for registerDispatcher. Necessary for any codebases that\n     * split the `EventContract` and `Dispatcher` code into different compilation\n     * units.\n     */\n    ecrd(dispatcher, restriction) {\n      this.dispatcher = dispatcher;\n      if (this.queuedEventInfos?.length) {\n        for (let i = 0; i < this.queuedEventInfos.length; i++) {\n          this.handleEventInfo(this.queuedEventInfos[i]);\n        }\n        this.queuedEventInfos = null;\n      }\n    }\n  }\n  return EventContract;\n})();\n/**\n * Creates an `EarlyJsactionData`, adds events to it, and populates it on a nested object on\n * the window.\n */\nfunction bootstrapAppScopedEarlyEventContract(container, appId, bubbleEventTypes, captureEventTypes, dataContainer = window) {\n  const earlyJsactionData = createEarlyJsactionData(container);\n  if (!dataContainer._ejsas) {\n    dataContainer._ejsas = {};\n  }\n  dataContainer._ejsas[appId] = earlyJsactionData;\n  addEvents(earlyJsactionData, bubbleEventTypes);\n  addEvents(earlyJsactionData, captureEventTypes, /* capture= */true);\n}\n/** Get the queued `EventInfo` objects that were dispatched before a dispatcher was registered. */\nfunction getAppScopedQueuedEventInfos(appId, dataContainer = window) {\n  return getQueuedEventInfos(dataContainer._ejsas?.[appId]);\n}\n/**\n * Registers a dispatcher function on the `EarlyJsactionData` present on the nested object on the\n * window.\n */\nfunction registerAppScopedDispatcher(restriction, appId, dispatcher, dataContainer = window) {\n  registerDispatcher(dataContainer._ejsas?.[appId], dispatcher);\n}\n/** Removes all event listener handlers. */\nfunction removeAllAppScopedEventListeners(appId, dataContainer = window) {\n  removeAllEventListeners(dataContainer._ejsas?.[appId]);\n}\n/** Clear the early event contract. */\nfunction clearAppScopedEarlyEventContract(appId, dataContainer = window) {\n  if (!dataContainer._ejsas) {\n    return;\n  }\n  dataContainer._ejsas[appId] = undefined;\n}\nexport { Attribute, EventContract, EventContractContainer, EventDispatcher, EventInfoWrapper, EventPhase, bootstrapAppScopedEarlyEventContract, clearAppScopedEarlyEventContract, getDefaulted as getActionCache, getAppScopedQueuedEventInfos, isCaptureEventType, isEarlyEventType, registerAppScopedDispatcher, registerDispatcher$1 as registerDispatcher, removeAllAppScopedEventListeners };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { RuntimeError, InjectionToken, getCurrentTNode, assertInInjectionContext, signalAsReadonlyFn, assertNgModuleType, Injector, inject, ɵɵdefineInjectable as __defineInjectable, formatRuntimeError, INTERNAL_APPLICATION_ERROR_HANDLER, PROVIDED_ZONELESS, PendingTasksInternal, stringify, ChangeDetectionScheduler, errorHandlerEnvironmentInitializer, ɵɵinject as __inject, INJECTOR_SCOPE, makeEnvironmentProviders, runInInjectionContext, provideEnvironmentInitializer, ErrorHandler, _global, isComponentHost, getComponentLViewByIndex, getLView, DECLARATION_COMPONENT_VIEW, ɵɵdefineInjector as __defineInjector, ENVIRONMENT_INITIALIZER, unwrapRNode, CLEANUP, isLContainer, HOST, hasI18n, unwrapLView, RENDERER, assertTNode, isProjectionTNode, getComponentDef, PARENT, isRootView, HEADER_OFFSET, TVIEW, CONTEXT, CONTAINER_HEADER_OFFSET, isLView, getTNode, assertNotInReactiveContext, ViewContext, DestroyRef, getNullInjector } from './root_effect_scheduler.mjs';\nexport { DOCUMENT, EnvironmentInjector, INJECTOR, PendingTasks, defineInjectable, forwardRef, importProvidersFrom, isSignal, isStandalone, provideBrowserGlobalErrorListeners, resolveForwardRef, signal, EffectScheduler as ɵEffectScheduler, NG_COMP_DEF as ɵNG_COMP_DEF, NG_DIR_DEF as ɵNG_DIR_DEF, NG_ELEMENT_ID as ɵNG_ELEMENT_ID, NG_INJ_DEF as ɵNG_INJ_DEF, NG_MOD_DEF as ɵNG_MOD_DEF, NG_PIPE_DEF as ɵNG_PIPE_DEF, NG_PROV_DEF as ɵNG_PROV_DEF, R3Injector as ɵR3Injector, XSS_SECURITY_URL as ɵXSS_SECURITY_URL, ZONELESS_ENABLED as ɵZONELESS_ENABLED, convertToBitFlags as ɵconvertToBitFlags, createInjector as ɵcreateInjector, getInjectableDef as ɵgetInjectableDef, isEnvironmentProviders as ɵisEnvironmentProviders, isInjectable as ɵisInjectable, setInjectorProfilerContext as ɵsetInjectorProfilerContext, store as ɵstore, truncateMiddle as ɵtruncateMiddle, ɵunwrapWritableSignal, ɵɵdisableBindings, ɵɵenableBindings, ɵɵinvalidFactoryDep, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵresetView, ɵɵrestoreView } from './root_effect_scheduler.mjs';\nimport { SIGNAL_NODE, signalSetFn, SIGNAL, producerAccessed, consumerPollProducersForChange, consumerBeforeComputation, consumerAfterComputation } from './signal.mjs';\nimport { ɵɵinjectAttribute as __injectAttribute, createMultiResultQuerySignalFn, createSingleResultOptionalQuerySignalFn, createSingleResultRequiredQuerySignalFn, makePropDecorator, NgModuleFactory, COMPILER_OPTIONS, setJitOptions, isComponentResourceResolutionQueueEmpty, getCompilerFacade, resolveComponentResources, IMAGE_CONFIG, getDocument, setClassMetadata, Injectable, NgZone, PROVIDED_NG_ZONE, remove, isPromise, ApplicationInitStatus, LOCALE_ID, DEFAULT_LOCALE_ID, setLocaleId, ApplicationRef, internalProvideZoneChangeDetection, ChangeDetectionSchedulerImpl, createNgModuleRefWithProviders, optionsReducer, getNgZone, getNgZoneOptions, publishDefaultGlobalUtils, PLATFORM_INITIALIZER, publishSignalConfiguration, checkNoChangesInternal, UseExhaustiveCheckNoChanges, getRegisteredNgModuleType, ViewRef as ViewRef$1, isListLikeIterable, iterateListLike, isJsObject, SkipSelf, Optional, ɵɵdefineNgModule as __defineNgModule, NgModule, profiler, assertStandaloneComponentType, EnvironmentNgModuleRefAdapter, JSACTION_BLOCK_ELEMENT_MAP, APP_ID, setStashFn, APP_BOOTSTRAP_LISTENER, JSACTION_EVENT_CONTRACT, removeListeners, isIncrementalHydrationEnabled, DEFER_BLOCK_SSR_ID_ATTRIBUTE, invokeListeners, triggerHydrationFromBlockName, IS_EVENT_REPLAY_ENABLED, EVENT_REPLAY_ENABLED_DEFAULT, performanceMarkFeature, sharedStashFunction, sharedMapFunction, enableStashEventListenerImpl, isI18nHydrationEnabled, TransferState, NGH_DATA_KEY, NGH_DEFER_BLOCKS_KEY, SKIP_HYDRATION_ATTR_NAME, NGH_ATTR_NAME, getLNodeForHydration, isI18nHydrationSupportEnabled, getOrComputeI18nChildren, trySerializeI18nBlock, I18N_DATA, isTNodeShape, isDetachedByI18n, TEMPLATES, isDisconnectedNode, isInSkipHydrationBlock, unsupportedProjectionOfDomNodes, CONTAINERS, isLetDeclaration, ELEMENT_CONTAINERS, processTextNodeBeforeSerialization, setJSActionAttributes, ViewEncapsulation as ViewEncapsulation$1, collectNativeNodes, TEMPLATE_ID, NUM_ROOT_NODES, isDeferBlock, getLDeferBlockDetails, getTDeferBlockDetails, collectNativeNodesInLContainer, validateNodeExists, validateMatchingNode, DEFER_BLOCK_ID, DEFER_BLOCK_STATE, DEFER_BLOCK_STATE$1, MULTIPLIER, NODES, calcPathForNode, DISCONNECTED_NODES, convertHydrateTriggersToJsAction, DEFER_HYDRATE_TRIGGERS, DEFER_PARENT_BLOCK_ID, IS_I18N_HYDRATION_ENABLED, IS_HYDRATION_DOM_REUSE_ENABLED, IS_INCREMENTAL_HYDRATION_ENABLED, DEHYDRATED_BLOCK_REGISTRY, DehydratedBlockRegistry, processBlockData, gatherDeferBlocksCommentNodes, processAndInitTriggers, appendDeferBlocksToJSActionMap, verifySsrContentsIntegrity, Console, PRESERVE_HOST_CONTENT, cleanupDehydratedViews, countBlocksSkippedByHydration, enableRetrieveHydrationInfoImpl, enableLocateOrCreateElementNodeImpl, enableLocateOrCreateTextNodeImpl, enableLocateOrCreateElementContainerNodeImpl, enableLocateOrCreateContainerAnchorImpl, enableLocateOrCreateContainerRefImpl, enableFindMatchingDehydratedViewImpl, enableApplyRootElementTransformImpl, enableLocateOrCreateI18nNodeImpl, enablePrepareI18nBlockForHydrationImpl, setIsI18nHydrationSupportEnabled, enableClaimDehydratedIcuCaseImpl, enableRetrieveDeferBlockDataImpl, readPatchedLView, angularCoreEnv, setClassMetadataAsync, retrieveTransferredState, isInternalHydrationTransferStateKey, NOOP_AFTER_RENDER_REF, AfterRenderManager, TracingService, AfterRenderImpl, AfterRenderSequence, AFTER_RENDER_PHASES, assertComponentDef, ComponentFactory } from './debug_node.mjs';\nexport { ANIMATION_MODULE_TYPE, APP_INITIALIZER, Attribute, CSP_NONCE, CUSTOM_ELEMENTS_SCHEMA, ChangeDetectionStrategy, Compiler, CompilerFactory, Component, ComponentFactory$1 as ComponentFactory, ComponentFactoryResolver, ComponentRef, DEFAULT_CURRENCY_CODE, DebugElement, DebugEventListener, DebugNode, Directive, ElementRef, EventEmitter, Host, HostBinding, HostListener, Inject, Input, MissingTranslationStrategy, ModuleWithComponentFactories, NO_ERRORS_SCHEMA, NgModuleFactory$1 as NgModuleFactory, NgModuleRef$1 as NgModuleRef, NgProbeToken, Output, PACKAGE_ROOT_URL, PLATFORM_ID, Pipe, QueryList, Renderer2, RendererFactory2, RendererStyleFlags2, Sanitizer, SecurityContext, Self, SimpleChange, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Testability, TestabilityRegistry, Type, ViewContainerRef, afterEveryRender, afterNextRender, asNativeElements, createEnvironmentInjector, createNgModule, createNgModuleRef, enableProfiling, getDebugNode, inputBinding, makeStateKey, outputBinding, provideAppInitializer, provideNgReflectAttributes, provideZoneChangeDetection, provideZonelessChangeDetection, setTestabilityGetter, twoWayBinding, AcxChangeDetectionStrategy as ɵAcxChangeDetectionStrategy, AcxViewEncapsulation as ɵAcxViewEncapsulation, ComponentFactory$1 as ɵComponentFactory, DEFER_BLOCK_CONFIG as ɵDEFER_BLOCK_CONFIG, DEFER_BLOCK_DEPENDENCY_INTERCEPTOR as ɵDEFER_BLOCK_DEPENDENCY_INTERCEPTOR, DeferBlockBehavior as ɵDeferBlockBehavior, DeferBlockState as ɵDeferBlockState, Framework as ɵFramework, HydrationStatus as ɵHydrationStatus, IMAGE_CONFIG_DEFAULTS as ɵIMAGE_CONFIG_DEFAULTS, LContext as ɵLContext, LocaleDataIndex as ɵLocaleDataIndex, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, NO_CHANGE as ɵNO_CHANGE, NoopNgZone as ɵNoopNgZone, ReflectionCapabilities as ɵReflectionCapabilities, ComponentRef$1 as ɵRender3ComponentRef, NgModuleRef as ɵRender3NgModuleRef, SSR_CONTENT_INTEGRITY_MARKER as ɵSSR_CONTENT_INTEGRITY_MARKER, TESTABILITY as ɵTESTABILITY, TESTABILITY_GETTER as ɵTESTABILITY_GETTER, TimerScheduler as ɵTimerScheduler, TracingAction as ɵTracingAction, _sanitizeHtml as ɵ_sanitizeHtml, _sanitizeUrl as ɵ_sanitizeUrl, allowSanitizationBypassAndThrow as ɵallowSanitizationBypassAndThrow, bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, clearResolutionOfComponentResourcesQueue as ɵclearResolutionOfComponentResourcesQueue, compileComponent as ɵcompileComponent, compileDirective as ɵcompileDirective, compileNgModule as ɵcompileNgModule, compileNgModuleDefs as ɵcompileNgModuleDefs, compilePipe as ɵcompilePipe, depsTracker as ɵdepsTracker, devModeEqual as ɵdevModeEqual, findLocaleData as ɵfindLocaleData, flushModuleScopingQueueAsMuchAsPossible as ɵflushModuleScopingQueueAsMuchAsPossible, generateStandaloneInDeclarationsError as ɵgenerateStandaloneInDeclarationsError, getAsyncClassMetadataFn as ɵgetAsyncClassMetadataFn, getDebugNode as ɵgetDebugNode, getDeferBlocks as ɵgetDeferBlocks, getDirectives as ɵgetDirectives, getHostElement as ɵgetHostElement, getLContext as ɵgetLContext, getLocaleCurrencyCode as ɵgetLocaleCurrencyCode, getLocalePluralCase as ɵgetLocalePluralCase, getSanitizationBypassType as ɵgetSanitizationBypassType, ɵgetUnknownElementStrictMode, ɵgetUnknownPropertyStrictMode, isBoundToModule as ɵisBoundToModule, isComponentDefPendingResolution as ɵisComponentDefPendingResolution, isNgModule as ɵisNgModule, isSubscribable as ɵisSubscribable, isViewDirty as ɵisViewDirty, markForRefresh as ɵmarkForRefresh, noSideEffects as ɵnoSideEffects, patchComponentDefWithScope as ɵpatchComponentDefWithScope, publishExternalGlobalUtil as ɵpublishExternalGlobalUtil, readHydrationInfo as ɵreadHydrationInfo, registerLocaleData as ɵregisterLocaleData, renderDeferBlockState as ɵrenderDeferBlockState, resetCompiledComponents as ɵresetCompiledComponents, resetJitOptions as ɵresetJitOptions, restoreComponentResolutionQueue as ɵrestoreComponentResolutionQueue, setAllowDuplicateNgModuleIdsForTest as ɵsetAllowDuplicateNgModuleIdsForTest, ɵsetClassDebugInfo, setDocument as ɵsetDocument, ɵsetUnknownElementStrictMode, ɵsetUnknownPropertyStrictMode, transitiveScopesFor as ɵtransitiveScopesFor, triggerResourceLoading as ɵtriggerResourceLoading, unregisterAllLocaleData as ɵunregisterLocaleData, unwrapSafeValue as ɵunwrapSafeValue, ɵɵCopyDefinitionFeature, ɵɵExternalStylesFeature, ɵɵHostDirectivesFeature, ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature, ɵɵProvidersFeature, ɵɵadvance, ɵɵattachSourceLocations, ɵɵattribute, ɵɵclassMap, ɵɵclassProp, ɵɵcomponentInstance, ɵɵconditional, ɵɵconditionalBranchCreate, ɵɵconditionalCreate, ɵɵcontentQuery, ɵɵcontentQuerySignal, ɵɵdeclareLet, ɵɵdefer, ɵɵdeferEnableTimerScheduling, ɵɵdeferHydrateNever, ɵɵdeferHydrateOnHover, ɵɵdeferHydrateOnIdle, ɵɵdeferHydrateOnImmediate, ɵɵdeferHydrateOnInteraction, ɵɵdeferHydrateOnTimer, ɵɵdeferHydrateOnViewport, ɵɵdeferHydrateWhen, ɵɵdeferOnHover, ɵɵdeferOnIdle, ɵɵdeferOnImmediate, ɵɵdeferOnInteraction, ɵɵdeferOnTimer, ɵɵdeferOnViewport, ɵɵdeferPrefetchOnHover, ɵɵdeferPrefetchOnIdle, ɵɵdeferPrefetchOnImmediate, ɵɵdeferPrefetchOnInteraction, ɵɵdeferPrefetchOnTimer, ɵɵdeferPrefetchOnViewport, ɵɵdeferPrefetchWhen, ɵɵdeferWhen, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefinePipe, ɵɵdirectiveInject, ɵɵdomElement, ɵɵdomElementContainer, ɵɵdomElementContainerEnd, ɵɵdomElementContainerStart, ɵɵdomElementEnd, ɵɵdomElementStart, ɵɵdomListener, ɵɵdomProperty, ɵɵdomTemplate, ɵɵelement, ɵɵelementContainer, ɵɵelementContainerEnd, ɵɵelementContainerStart, ɵɵelementEnd, ɵɵelementStart, ɵɵgetComponentDepsFactory, ɵɵgetCurrentView, ɵɵgetInheritedFactory, ɵɵgetReplaceMetadataURL, ɵɵi18n, ɵɵi18nApply, ɵɵi18nAttributes, ɵɵi18nEnd, ɵɵi18nExp, ɵɵi18nPostprocess, ɵɵi18nStart, ɵɵinterpolate, ɵɵinterpolate1, ɵɵinterpolate2, ɵɵinterpolate3, ɵɵinterpolate4, ɵɵinterpolate5, ɵɵinterpolate6, ɵɵinterpolate7, ɵɵinterpolate8, ɵɵinterpolateV, ɵɵinvalidFactory, ɵɵlistener, ɵɵloadQuery, ɵɵnextContext, ɵɵpipe, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵprojection, ɵɵprojectionDef, ɵɵproperty, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵqueryAdvance, ɵɵqueryRefresh, ɵɵreadContextLet, ɵɵreference, registerNgModuleType as ɵɵregisterNgModuleType, ɵɵrepeater, ɵɵrepeaterCreate, ɵɵrepeaterTrackByIdentity, ɵɵrepeaterTrackByIndex, ɵɵreplaceMetadata, ɵɵresolveBody, ɵɵresolveDocument, ɵɵresolveWindow, ɵɵsanitizeHtml, ɵɵsanitizeResourceUrl, ɵɵsanitizeScript, ɵɵsanitizeStyle, ɵɵsanitizeUrl, ɵɵsanitizeUrlOrResourceUrl, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵstoreLet, ɵɵstyleMap, ɵɵstyleProp, ɵɵsyntheticHostListener, ɵɵsyntheticHostProperty, ɵɵtemplate, ɵɵtemplateRefExtractor, ɵɵtext, ɵɵtextInterpolate, ɵɵtextInterpolate1, ɵɵtextInterpolate2, ɵɵtextInterpolate3, ɵɵtextInterpolate4, ɵɵtextInterpolate5, ɵɵtextInterpolate6, ɵɵtextInterpolate7, ɵɵtextInterpolate8, ɵɵtextInterpolateV, ɵɵtrustConstantHtml, ɵɵtrustConstantResourceUrl, ɵɵtwoWayBindingSet, ɵɵtwoWayListener, ɵɵtwoWayProperty, ɵɵvalidateIframeAttribute, ɵɵviewQuery, ɵɵviewQuerySignal } from './debug_node.mjs';\nimport { OutputEmitterRef } from './resource.mjs';\nexport { computed, effect, linkedSignal, resource, untracked, ResourceImpl as ɵResourceImpl, encapsulateResourceError as ɵencapsulateResourceError, getOutputDestroyRef as ɵgetOutputDestroyRef, setResourceValueThrowsErrors as ɵsetResourceValueThrowsErrors } from './resource.mjs';\nexport { setAlternateWeakRefImpl as ɵsetAlternateWeakRefImpl } from './weak_ref.mjs';\nexport { setCurrentInjector as ɵsetCurrentInjector } from './not_found.mjs';\nimport { clearAppScopedEarlyEventContract, EventContract, EventContractContainer, EventDispatcher, registerDispatcher, EventPhase, getAppScopedQueuedEventInfos, isEarlyEventType, isCaptureEventType } from './primitives/event-dispatch.mjs';\nimport 'rxjs';\nimport '@angular/core/primitives/signals';\nimport '@angular/core/primitives/di';\nimport 'rxjs/operators';\nimport './attribute.mjs';\nimport './untracked.mjs';\nconst REQUIRED_UNSET_VALUE = /* @__PURE__ */Symbol('InputSignalNode#UNSET');\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst INPUT_SIGNAL_NODE = /* @__PURE__ */(() => {\n  return {\n    ...SIGNAL_NODE,\n    transformFn: undefined,\n    applyValueToInputSignal(node, value) {\n      signalSetFn(node, value);\n    }\n  };\n})();\nconst ɵINPUT_SIGNAL_BRAND_WRITE_TYPE = /* @__PURE__ */Symbol();\n/**\n * Creates an input signal.\n *\n * @param initialValue The initial value.\n *   Can be set to {@link REQUIRED_UNSET_VALUE} for required inputs.\n * @param options Additional options for the input. e.g. a transform, or an alias.\n */\nfunction createInputSignal(initialValue, options) {\n  const node = Object.create(INPUT_SIGNAL_NODE);\n  node.value = initialValue;\n  // Perf note: Always set `transformFn` here to ensure that `node` always\n  // has the same v8 class shape, allowing monomorphic reads on input signals.\n  node.transformFn = options?.transform;\n  function inputValueFn() {\n    // Record that someone looked at this signal.\n    producerAccessed(node);\n    if (node.value === REQUIRED_UNSET_VALUE) {\n      let message = null;\n      if (ngDevMode) {\n        const name = options?.debugName ?? options?.alias;\n        message = `Input${name ? ` \"${name}\"` : ''} is required but no value is available yet.`;\n      }\n      throw new RuntimeError(-950 /* RuntimeErrorCode.REQUIRED_INPUT_NO_VALUE */, message);\n    }\n    return node.value;\n  }\n  inputValueFn[SIGNAL] = node;\n  if (ngDevMode) {\n    inputValueFn.toString = () => `[Input Signal: ${inputValueFn()}]`;\n    node.debugName = options?.debugName;\n  }\n  return inputValueFn;\n}\nvar FactoryTarget = /*#__PURE__*/function (FactoryTarget) {\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n  return FactoryTarget;\n}(FactoryTarget || {});\nvar R3TemplateDependencyKind = /*#__PURE__*/function (R3TemplateDependencyKind) {\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Directive\"] = 0] = \"Directive\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Pipe\"] = 1] = \"Pipe\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"NgModule\"] = 2] = \"NgModule\";\n  return R3TemplateDependencyKind;\n}(R3TemplateDependencyKind || {});\nvar ViewEncapsulation = /*#__PURE__*/function (ViewEncapsulation) {\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n  return ViewEncapsulation;\n}(ViewEncapsulation || {});\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Creates a token that can be used to inject static attributes of the host node.\n *\n * @usageNotes\n * ### Injecting an attribute that is known to exist\n * ```ts\n * @Directive()\n * class MyDir {\n *   attr: string = inject(new HostAttributeToken('some-attr'));\n * }\n * ```\n *\n * ### Optionally injecting an attribute\n * ```ts\n * @Directive()\n * class MyDir {\n *   attr: string | null = inject(new HostAttributeToken('some-attr'), {optional: true});\n * }\n * ```\n * @publicApi\n */\nclass HostAttributeToken {\n  attributeName;\n  constructor(attributeName) {\n    this.attributeName = attributeName;\n  }\n  /** @internal */\n  __NG_ELEMENT_ID__ = () => __injectAttribute(this.attributeName);\n  toString() {\n    return `HostAttributeToken ${this.attributeName}`;\n  }\n}\n\n/**\n * A token that can be used to inject the tag name of the host node.\n *\n * @usageNotes\n * ### Injecting a tag name that is known to exist\n * ```ts\n * @Directive()\n * class MyDir {\n *   tagName: string = inject(HOST_TAG_NAME);\n * }\n * ```\n *\n * ### Optionally injecting a tag name\n * ```ts\n * @Directive()\n * class MyDir {\n *   tagName: string | null = inject(HOST_TAG_NAME, {optional: true});\n * }\n * ```\n * @publicApi\n */\nconst HOST_TAG_NAME = /*#__PURE__*/new InjectionToken(ngDevMode ? 'HOST_TAG_NAME' : '');\n// HOST_TAG_NAME should be resolved at the current node, similar to e.g. ElementRef,\n// so we manually specify __NG_ELEMENT_ID__ here, instead of using a factory.\n// tslint:disable-next-line:no-toplevel-property-access\nHOST_TAG_NAME.__NG_ELEMENT_ID__ = flags => {\n  const tNode = getCurrentTNode();\n  if (tNode === null) {\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && 'HOST_TAG_NAME can only be injected in directives and components ' + 'during construction time (in a class constructor or as a class field initializer)');\n  }\n  if (tNode.type & 2 /* TNodeType.Element */) {\n    return tNode.value;\n  }\n  if (flags & 8 /* InternalInjectFlags.Optional */) {\n    return null;\n  }\n  throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `HOST_TAG_NAME was used on ${getDevModeNodeName(tNode)} which doesn't have an underlying element in the DOM. ` + `This is invalid, and so the dependency should be marked as optional.`);\n};\nfunction getDevModeNodeName(tNode) {\n  if (tNode.type & 8 /* TNodeType.ElementContainer */) {\n    return 'an <ng-container>';\n  } else if (tNode.type & 4 /* TNodeType.Container */) {\n    return 'an <ng-template>';\n  } else if (tNode.type & 128 /* TNodeType.LetDeclaration */) {\n    return 'an @let declaration';\n  } else {\n    return 'a node';\n  }\n}\n\n/**\n * The `output` function allows declaration of Angular outputs in\n * directives and components.\n *\n * You can use outputs to emit values to parent directives and component.\n * Parents can subscribe to changes via:\n *\n * - template event bindings. For example, `(myOutput)=\"doSomething($event)\"`\n * - programmatic subscription by using `OutputRef#subscribe`.\n *\n * @usageNotes\n *\n * To use `output()`, import the function from `@angular/core`.\n *\n * ```ts\n * import {output} from '@angular/core';\n * ```\n *\n * Inside your component, introduce a new class member and initialize\n * it with a call to `output`.\n *\n * ```ts\n * @Directive({\n *   ...\n * })\n * export class MyDir {\n *   nameChange = output<string>();    // OutputEmitterRef<string>\n *   onClick    = output();            // OutputEmitterRef<void>\n * }\n * ```\n *\n * You can emit values to consumers of your directive, by using\n * the `emit` method from `OutputEmitterRef`.\n *\n * ```ts\n * updateName(newName: string): void {\n *   this.nameChange.emit(newName);\n * }\n * ```\n * @initializerApiFunction {\"showTypesInSignaturePreview\": true}\n * @publicApi 19.0\n */\nfunction output(opts) {\n  ngDevMode && assertInInjectionContext(output);\n  return new OutputEmitterRef();\n}\nfunction inputFunction(initialValue, opts) {\n  ngDevMode && assertInInjectionContext(input);\n  return createInputSignal(initialValue, opts);\n}\nfunction inputRequiredFunction(opts) {\n  ngDevMode && assertInInjectionContext(input);\n  return createInputSignal(REQUIRED_UNSET_VALUE, opts);\n}\n/**\n * The `input` function allows declaration of Angular inputs in directives\n * and components.\n *\n * There are two variants of inputs that can be declared:\n *\n *   1. **Optional inputs** with an initial value.\n *   2. **Required inputs** that consumers need to set.\n *\n * By default, the `input` function will declare optional inputs that\n * always have an initial value. Required inputs can be declared\n * using the `input.required()` function.\n *\n * Inputs are signals. The values of an input are exposed as a `Signal`.\n * The signal always holds the latest value of the input that is bound\n * from the parent.\n *\n * @usageNotes\n * To use signal-based inputs, import `input` from `@angular/core`.\n *\n * ```ts\n * import {input} from '@angular/core`;\n * ```\n *\n * Inside your component, introduce a new class member and initialize\n * it with a call to `input` or `input.required`.\n *\n * ```ts\n * @Component({\n *   ...\n * })\n * export class UserProfileComponent {\n *   firstName = input<string>();             // Signal<string|undefined>\n *   lastName  = input.required<string>();    // Signal<string>\n *   age       = input(0)                     // Signal<number>\n * }\n * ```\n *\n * Inside your component template, you can display values of the inputs\n * by calling the signal.\n *\n * ```html\n * <span>{{firstName()}}</span>\n * ```\n *\n * @publicAPI\n * @initializerApiFunction\n */\nconst input = /*#__PURE__*/(() => {\n  // Note: This may be considered a side-effect, but nothing will depend on\n  // this assignment, unless this `input` constant export is accessed. It's a\n  // self-contained side effect that is local to the user facing`input` export.\n  inputFunction.required = inputRequiredFunction;\n  return inputFunction;\n})();\nfunction viewChildFn(locator, opts) {\n  ngDevMode && assertInInjectionContext(viewChild);\n  return createSingleResultOptionalQuerySignalFn(opts);\n}\nfunction viewChildRequiredFn(locator, opts) {\n  ngDevMode && assertInInjectionContext(viewChild);\n  return createSingleResultRequiredQuerySignalFn(opts);\n}\n/**\n * Initializes a view child query.\n *\n * Consider using `viewChild.required` for queries that should always match.\n *\n * @usageNotes\n * Create a child query in your component by declaring a\n * class field and initializing it with the `viewChild()` function.\n *\n * ```angular-ts\n * @Component({template: '<div #el></div><my-component #cmp />'})\n * export class TestComponent {\n *   divEl = viewChild<ElementRef>('el');                   // Signal<ElementRef|undefined>\n *   divElRequired = viewChild.required<ElementRef>('el');  // Signal<ElementRef>\n *   cmp = viewChild(MyComponent);                          // Signal<MyComponent|undefined>\n *   cmpRequired = viewChild.required(MyComponent);         // Signal<MyComponent>\n * }\n * ```\n *\n * @publicApi 19.0\n * @initializerApiFunction\n */\nconst viewChild = /*#__PURE__*/(() => {\n  // Note: This may be considered a side-effect, but nothing will depend on\n  // this assignment, unless this `viewChild` constant export is accessed. It's a\n  // self-contained side effect that is local to the user facing `viewChild` export.\n  viewChildFn.required = viewChildRequiredFn;\n  return viewChildFn;\n})();\n/**\n * Initializes a view children query.\n *\n * Query results are represented as a signal of a read-only collection containing all matched\n * elements.\n *\n * @usageNotes\n * Create a children query in your component by declaring a\n * class field and initializing it with the `viewChildren()` function.\n *\n * ```ts\n * @Component({...})\n * export class TestComponent {\n *   divEls = viewChildren<ElementRef>('el');   // Signal<ReadonlyArray<ElementRef>>\n * }\n * ```\n *\n * @initializerApiFunction\n * @publicApi 19.0\n */\nfunction viewChildren(locator, opts) {\n  ngDevMode && assertInInjectionContext(viewChildren);\n  return createMultiResultQuerySignalFn(opts);\n}\nfunction contentChildFn(locator, opts) {\n  ngDevMode && assertInInjectionContext(contentChild);\n  return createSingleResultOptionalQuerySignalFn(opts);\n}\nfunction contentChildRequiredFn(locator, opts) {\n  ngDevMode && assertInInjectionContext(contentChildren);\n  return createSingleResultRequiredQuerySignalFn(opts);\n}\n/**\n * Initializes a content child query. Consider using `contentChild.required` for queries that should\n * always match.\n *\n * @usageNotes\n * Create a child query in your component by declaring a\n * class field and initializing it with the `contentChild()` function.\n *\n * ```ts\n * @Component({...})\n * export class TestComponent {\n *   headerEl = contentChild<ElementRef>('h');                    // Signal<ElementRef|undefined>\n *   headerElElRequired = contentChild.required<ElementRef>('h'); // Signal<ElementRef>\n *   header = contentChild(MyHeader);                             // Signal<MyHeader|undefined>\n *   headerRequired = contentChild.required(MyHeader);            // Signal<MyHeader>\n * }\n * ```\n *\n * Note: By default `descendants` is `true` which means the query will traverse all descendants in the same template.\n *\n * @initializerApiFunction\n * @publicApi 19.0\n */\nconst contentChild = /*#__PURE__*/(() => {\n  // Note: This may be considered a side-effect, but nothing will depend on\n  // this assignment, unless this `viewChild` constant export is accessed. It's a\n  // self-contained side effect that is local to the user facing `viewChild` export.\n  contentChildFn.required = contentChildRequiredFn;\n  return contentChildFn;\n})();\n/**\n * Initializes a content children query.\n *\n * Query results are represented as a signal of a read-only collection containing all matched\n * elements.\n *\n * @usageNotes\n * Create a children query in your component by declaring a\n * class field and initializing it with the `contentChildren()` function.\n *\n * ```ts\n * @Component({...})\n * export class TestComponent {\n *   headerEl = contentChildren<ElementRef>('h');   // Signal<ReadonlyArray<ElementRef>>\n * }\n * ```\n *\n * Note: By default `descendants` is `false` which means the query will not traverse all descendants in the same template.\n *\n * @initializerApiFunction\n * @publicApi 19.0\n */\nfunction contentChildren(locator, opts) {\n  return createMultiResultQuerySignalFn(opts);\n}\n\n/**\n * Creates a model signal.\n *\n * @param initialValue The initial value.\n *   Can be set to {@link REQUIRED_UNSET_VALUE} for required model signals.\n * @param options Additional options for the model.\n */\nfunction createModelSignal(initialValue, opts) {\n  const node = Object.create(INPUT_SIGNAL_NODE);\n  const emitterRef = new OutputEmitterRef();\n  node.value = initialValue;\n  function getter() {\n    producerAccessed(node);\n    assertModelSet(node.value);\n    return node.value;\n  }\n  getter[SIGNAL] = node;\n  getter.asReadonly = signalAsReadonlyFn.bind(getter);\n  // TODO: Should we throw an error when updating a destroyed model?\n  getter.set = newValue => {\n    if (!node.equal(node.value, newValue)) {\n      signalSetFn(node, newValue);\n      emitterRef.emit(newValue);\n    }\n  };\n  getter.update = updateFn => {\n    assertModelSet(node.value);\n    getter.set(updateFn(node.value));\n  };\n  getter.subscribe = emitterRef.subscribe.bind(emitterRef);\n  getter.destroyRef = emitterRef.destroyRef;\n  if (ngDevMode) {\n    getter.toString = () => `[Model Signal: ${getter()}]`;\n    node.debugName = opts?.debugName;\n  }\n  return getter;\n}\n/** Asserts that a model's value is set. */\nfunction assertModelSet(value) {\n  if (value === REQUIRED_UNSET_VALUE) {\n    throw new RuntimeError(952 /* RuntimeErrorCode.REQUIRED_MODEL_NO_VALUE */, ngDevMode && 'Model is required but no value is available yet.');\n  }\n}\nfunction modelFunction(initialValue, opts) {\n  ngDevMode && assertInInjectionContext(model);\n  return createModelSignal(initialValue, opts);\n}\nfunction modelRequiredFunction(opts) {\n  ngDevMode && assertInInjectionContext(model);\n  return createModelSignal(REQUIRED_UNSET_VALUE, opts);\n}\n/**\n * `model` declares a writeable signal that is exposed as an input/output\n * pair on the containing directive.\n *\n * The input name is taken either from the class member or from the `alias` option.\n * The output name is generated by taking the input name and appending `Change`.\n *\n * @usageNotes\n *\n * To use `model()`, import the function from `@angular/core`.\n *\n * ```ts\n * import {model} from '@angular/core`;\n * ```\n *\n * Inside your component, introduce a new class member and initialize\n * it with a call to `model` or `model.required`.\n *\n * ```ts\n * @Directive({\n *   ...\n * })\n * export class MyDir {\n *   firstName = model<string>();            // ModelSignal<string|undefined>\n *   lastName  = model.required<string>();   // ModelSignal<string>\n *   age       = model(0);                   // ModelSignal<number>\n * }\n * ```\n *\n * Inside your component template, you can display the value of a `model`\n * by calling the signal.\n *\n * ```html\n * <span>{{firstName()}}</span>\n * ```\n *\n * Updating the `model` is equivalent to updating a writable signal.\n *\n * ```ts\n * updateName(newFirstName: string): void {\n *   this.firstName.set(newFirstName);\n * }\n * ```\n *\n * @publicApi 19.0\n * @initializerApiFunction\n */\nconst model = /*#__PURE__*/(() => {\n  // Note: This may be considered a side-effect, but nothing will depend on\n  // this assignment, unless this `model` constant export is accessed. It's a\n  // self-contained side effect that is local to the user facing `model` export.\n  modelFunction.required = modelRequiredFunction;\n  return modelFunction;\n})();\n\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\nconst emitDistinctChangesOnlyDefaultValue = true;\n/**\n * Base class for query metadata.\n *\n * @see {@link ContentChildren}\n * @see {@link ContentChild}\n * @see {@link ViewChildren}\n * @see {@link ViewChild}\n *\n * @publicApi\n */\nclass Query {}\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nconst ContentChildren = /*#__PURE__*/makePropDecorator('ContentChildren', (selector, opts = {}) => ({\n  selector,\n  first: false,\n  isViewQuery: false,\n  descendants: false,\n  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n  ...opts\n}), Query);\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nconst ContentChild = /*#__PURE__*/makePropDecorator('ContentChild', (selector, opts = {}) => ({\n  selector,\n  first: true,\n  isViewQuery: false,\n  descendants: true,\n  ...opts\n}), Query);\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst ViewChildren = /*#__PURE__*/makePropDecorator('ViewChildren', (selector, opts = {}) => ({\n  selector,\n  first: false,\n  isViewQuery: true,\n  descendants: true,\n  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n  ...opts\n}), Query);\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst ViewChild = /*#__PURE__*/makePropDecorator('ViewChild', (selector, opts) => ({\n  selector,\n  first: true,\n  isViewQuery: true,\n  descendants: true,\n  ...opts\n}), Query);\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nclass Version {\n  full;\n  major;\n  minor;\n  patch;\n  constructor(full) {\n    this.full = full;\n    const parts = full.split('.');\n    this.major = parts[0];\n    this.minor = parts[1];\n    this.patch = parts.slice(2).join('.');\n  }\n}\n/**\n * @publicApi\n */\nconst VERSION = /*#__PURE__*/new Version('20.1.6');\nfunction compileNgModuleFactory(injector, options, moduleType) {\n  ngDevMode && assertNgModuleType(moduleType);\n  const moduleFactory = new NgModuleFactory(moduleType);\n  // All of the logic below is irrelevant for AOT-compiled code.\n  if (typeof ngJitMode !== 'undefined' && !ngJitMode) {\n    return Promise.resolve(moduleFactory);\n  }\n  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n  // Configure the compiler to use the provided options. This call may fail when multiple modules\n  // are bootstrapped with incompatible options, as a component can only be compiled according to\n  // a single set of options.\n  setJitOptions({\n    defaultEncapsulation: _lastDefined(compilerOptions.map(opts => opts.defaultEncapsulation)),\n    preserveWhitespaces: _lastDefined(compilerOptions.map(opts => opts.preserveWhitespaces))\n  });\n  if (isComponentResourceResolutionQueueEmpty()) {\n    return Promise.resolve(moduleFactory);\n  }\n  const compilerProviders = compilerOptions.flatMap(option => option.providers ?? []);\n  // In case there are no compiler providers, we just return the module factory as\n  // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n  // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n  // unnecessarily require the JIT compiler.\n  if (compilerProviders.length === 0) {\n    return Promise.resolve(moduleFactory);\n  }\n  const compiler = getCompilerFacade({\n    usage: 0 /* JitCompilerUsage.Decorator */,\n    kind: 'NgModule',\n    type: moduleType\n  });\n  const compilerInjector = Injector.create({\n    providers: compilerProviders\n  });\n  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n  // The resource loader can also return a string while the \"resolveComponentResources\"\n  // always expects a promise. Therefore we need to wrap the returned value in a promise.\n  return resolveComponentResources(url => Promise.resolve(resourceLoader.get(url))).then(() => moduleFactory);\n}\nfunction _lastDefined(args) {\n  for (let i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n\n// A delay in milliseconds before the scan is run after onLoad, to avoid any\n// potential race conditions with other LCP-related functions. This delay\n// happens outside of the main JavaScript execution and will only effect the timing\n// on when the warning becomes visible in the console.\nconst SCAN_DELAY = 200;\nconst OVERSIZED_IMAGE_TOLERANCE = 1200;\nlet ImagePerformanceWarning = /*#__PURE__*/(() => {\n  class ImagePerformanceWarning {\n    // Map of full image URLs -> original `ngSrc` values.\n    window = null;\n    observer = null;\n    options = inject(IMAGE_CONFIG);\n    lcpImageUrl;\n    start() {\n      if (typeof ngServerMode !== 'undefined' && ngServerMode || typeof PerformanceObserver === 'undefined' || this.options?.disableImageSizeWarning && this.options?.disableImageLazyLoadWarning) {\n        return;\n      }\n      this.observer = this.initPerformanceObserver();\n      const doc = getDocument();\n      const win = doc.defaultView;\n      if (win) {\n        this.window = win;\n        // Wait to avoid race conditions where LCP image triggers\n        // load event before it's recorded by the performance observer\n        const waitToScan = () => {\n          setTimeout(this.scanImages.bind(this), SCAN_DELAY);\n        };\n        const setup = () => {\n          // Consider the case when the application is created and destroyed multiple times.\n          // Typically, applications are created instantly once the page is loaded, and the\n          // `window.load` listener is always triggered. However, the `window.load` event will never\n          // be fired if the page is loaded, and the application is created later. Checking for\n          // `readyState` is the easiest way to determine whether the page has been loaded or not.\n          if (doc.readyState === 'complete') {\n            waitToScan();\n          } else {\n            this.window?.addEventListener('load', waitToScan, {\n              once: true\n            });\n          }\n        };\n        // Angular doesn't have to run change detection whenever any asynchronous tasks are invoked in\n        // the scope of this functionality.\n        if (typeof Zone !== 'undefined') {\n          Zone.root.run(() => setup());\n        } else {\n          setup();\n        }\n      }\n    }\n    ngOnDestroy() {\n      this.observer?.disconnect();\n    }\n    initPerformanceObserver() {\n      if (typeof PerformanceObserver === 'undefined') {\n        return null;\n      }\n      const observer = new PerformanceObserver(entryList => {\n        const entries = entryList.getEntries();\n        if (entries.length === 0) return;\n        // We use the latest entry produced by the `PerformanceObserver` as the best\n        // signal on which element is actually an LCP one. As an example, the first image to load on\n        // a page, by virtue of being the only thing on the page so far, is often a LCP candidate\n        // and gets reported by PerformanceObserver, but isn't necessarily the LCP element.\n        const lcpElement = entries[entries.length - 1];\n        // Cast to `any` due to missing `element` on the `LargestContentfulPaint` type of entry.\n        // See https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint\n        const imgSrc = lcpElement.element?.src ?? '';\n        // Exclude `data:` and `blob:` URLs, since they are fetched resources.\n        if (imgSrc.startsWith('data:') || imgSrc.startsWith('blob:')) return;\n        this.lcpImageUrl = imgSrc;\n      });\n      observer.observe({\n        type: 'largest-contentful-paint',\n        buffered: true\n      });\n      return observer;\n    }\n    scanImages() {\n      const images = getDocument().querySelectorAll('img');\n      let lcpElementFound,\n        lcpElementLoadedCorrectly = false;\n      // Important: do not refactor this to use `images.forEach` or\n      // `for (const ... of ...)`, because images might be a custom internal\n      // data structure — such as a lazily evaluated query result in Domino.\n      // (This naturally would never be a case in any browser).\n      for (let index = 0; index < images.length; index++) {\n        const image = images[index];\n        if (!image) {\n          continue;\n        }\n        if (!this.options?.disableImageSizeWarning) {\n          // Image elements using the NgOptimizedImage directive are excluded,\n          // as that directive has its own version of this check.\n          if (!image.getAttribute('ng-img') && this.isOversized(image)) {\n            logOversizedImageWarning(image.src);\n          }\n        }\n        if (!this.options?.disableImageLazyLoadWarning && this.lcpImageUrl) {\n          if (image.src === this.lcpImageUrl) {\n            lcpElementFound = true;\n            if (image.loading !== 'lazy' || image.getAttribute('ng-img')) {\n              // This variable is set to true and never goes back to false to account\n              // for the case where multiple images have the same src url, and some\n              // have lazy loading while others don't.\n              // Also ignore NgOptimizedImage because there's a different warning for that.\n              lcpElementLoadedCorrectly = true;\n            }\n          }\n        }\n      }\n      if (lcpElementFound && !lcpElementLoadedCorrectly && this.lcpImageUrl && !this.options?.disableImageLazyLoadWarning) {\n        logLazyLCPWarning(this.lcpImageUrl);\n      }\n    }\n    isOversized(image) {\n      if (!this.window) {\n        return false;\n      }\n      // The `isOversized` check may not be applicable or may require adjustments\n      // for several types of image formats or scenarios. Currently, we specify only\n      // `svg`, but this may also include `gif` since their quality isn’t tied to\n      // dimensions in the same way as raster images.\n      const nonOversizedImageExtentions = [\n      // SVG images are vector-based, which means they can scale\n      // to any size without losing quality.\n      '.svg'];\n      // Convert it to lowercase because this may have uppercase\n      // extensions, such as `IMAGE.SVG`.\n      // We fallback to an empty string because `src` may be `undefined`\n      // if it is explicitly set to `null` by some third-party code\n      // (e.g., `image.src = null`).\n      const imageSource = (image.src || '').toLowerCase();\n      if (nonOversizedImageExtentions.some(extension => imageSource.endsWith(extension))) {\n        return false;\n      }\n      const computedStyle = this.window.getComputedStyle(image);\n      let renderedWidth = parseFloat(computedStyle.getPropertyValue('width'));\n      let renderedHeight = parseFloat(computedStyle.getPropertyValue('height'));\n      const boxSizing = computedStyle.getPropertyValue('box-sizing');\n      const objectFit = computedStyle.getPropertyValue('object-fit');\n      if (objectFit === `cover`) {\n        // Object fit cover may indicate a use case such as a sprite sheet where\n        // this warning does not apply.\n        return false;\n      }\n      if (boxSizing === 'border-box') {\n        // If the image `box-sizing` is set to `border-box`, we adjust the rendered\n        // dimensions by subtracting padding values.\n        const paddingTop = computedStyle.getPropertyValue('padding-top');\n        const paddingRight = computedStyle.getPropertyValue('padding-right');\n        const paddingBottom = computedStyle.getPropertyValue('padding-bottom');\n        const paddingLeft = computedStyle.getPropertyValue('padding-left');\n        renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);\n        renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);\n      }\n      const intrinsicWidth = image.naturalWidth;\n      const intrinsicHeight = image.naturalHeight;\n      const recommendedWidth = this.window.devicePixelRatio * renderedWidth;\n      const recommendedHeight = this.window.devicePixelRatio * renderedHeight;\n      const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE;\n      const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE;\n      return oversizedWidth || oversizedHeight;\n    }\n    static ɵfac = function ImagePerformanceWarning_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ImagePerformanceWarning)();\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: ImagePerformanceWarning,\n      factory: ImagePerformanceWarning.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ImagePerformanceWarning;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ImagePerformanceWarning, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nfunction logLazyLCPWarning(src) {\n  console.warn(formatRuntimeError(-913 /* RuntimeErrorCode.IMAGE_PERFORMANCE_WARNING */, `An image with src ${src} is the Largest Contentful Paint (LCP) element ` + `but was given a \"loading\" value of \"lazy\", which can negatively impact ` + `application loading performance. This warning can be addressed by ` + `changing the loading value of the LCP image to \"eager\", or by using the ` + `NgOptimizedImage directive's prioritization utilities. For more ` + `information about addressing or disabling this warning, see ` + `https://angular.dev/errors/NG0913`));\n}\nfunction logOversizedImageWarning(src) {\n  console.warn(formatRuntimeError(-913 /* RuntimeErrorCode.IMAGE_PERFORMANCE_WARNING */, `An image with src ${src} has intrinsic file dimensions much larger than its ` + `rendered size. This can negatively impact application loading performance. ` + `For more information about addressing or disabling this warning, see ` + `https://angular.dev/errors/NG0913`));\n}\n\n/**\n * Internal token that allows to register extra callbacks that should be invoked during the\n * `PlatformRef.destroy` operation. This token is needed to avoid a direct reference to the\n * `PlatformRef` class (i.e. register the callback via `PlatformRef.onDestroy`), thus making the\n * entire class tree-shakeable.\n */\nconst PLATFORM_DESTROY_LISTENERS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'PlatformDestroyListeners' : '');\n\n/**\n * InjectionToken to control root component bootstrap behavior.\n *\n * This token is primarily used in Angular's server-side rendering (SSR) scenarios,\n * particularly by the `@angular/ssr` package, to manage whether the root component\n * should be bootstrapped during the application initialization process.\n *\n * ## Purpose:\n * During SSR route extraction, setting this token to `false` prevents Angular from\n * bootstrapping the root component. This avoids unnecessary component rendering,\n * enabling route extraction without requiring additional APIs or triggering\n * component logic.\n *\n * ## Behavior:\n * - **`false`**: Prevents the root component from being bootstrapped.\n * - **`true`** (default): Proceeds with the normal root component bootstrap process.\n *\n * This mechanism ensures SSR can efficiently separate route extraction logic\n * from component rendering.\n */\nconst ENABLE_ROOT_COMPONENT_BOOTSTRAP = /*#__PURE__*/new InjectionToken(ngDevMode ? 'ENABLE_ROOT_COMPONENT_BOOTSTRAP' : '');\nfunction isApplicationBootstrapConfig(config) {\n  return !config.moduleRef;\n}\nfunction bootstrap(config) {\n  const envInjector = isApplicationBootstrapConfig(config) ? config.r3Injector : config.moduleRef.injector;\n  const ngZone = envInjector.get(NgZone);\n  return ngZone.run(() => {\n    if (isApplicationBootstrapConfig(config)) {\n      config.r3Injector.resolveInjectorInitializers();\n    } else {\n      config.moduleRef.resolveInjectorInitializers();\n    }\n    const exceptionHandler = envInjector.get(INTERNAL_APPLICATION_ERROR_HANDLER);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (envInjector.get(PROVIDED_ZONELESS) && envInjector.get(PROVIDED_NG_ZONE)) {\n        throw new RuntimeError(408 /* RuntimeErrorCode.PROVIDED_BOTH_ZONE_AND_ZONELESS */, 'Invalid change detection configuration: ' + 'provideZoneChangeDetection and provideZonelessChangeDetection cannot be used together.');\n      }\n    }\n    let onErrorSubscription;\n    ngZone.runOutsideAngular(() => {\n      onErrorSubscription = ngZone.onError.subscribe({\n        next: exceptionHandler\n      });\n    });\n    // If the whole platform is destroyed, invoke the `destroy` method\n    // for all bootstrapped applications as well.\n    if (isApplicationBootstrapConfig(config)) {\n      const destroyListener = () => envInjector.destroy();\n      const onPlatformDestroyListeners = config.platformInjector.get(PLATFORM_DESTROY_LISTENERS);\n      onPlatformDestroyListeners.add(destroyListener);\n      envInjector.onDestroy(() => {\n        onErrorSubscription.unsubscribe();\n        onPlatformDestroyListeners.delete(destroyListener);\n      });\n    } else {\n      const destroyListener = () => config.moduleRef.destroy();\n      const onPlatformDestroyListeners = config.platformInjector.get(PLATFORM_DESTROY_LISTENERS);\n      onPlatformDestroyListeners.add(destroyListener);\n      config.moduleRef.onDestroy(() => {\n        remove(config.allPlatformModules, config.moduleRef);\n        onErrorSubscription.unsubscribe();\n        onPlatformDestroyListeners.delete(destroyListener);\n      });\n    }\n    return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {\n      const pendingTasks = envInjector.get(PendingTasksInternal);\n      const taskId = pendingTasks.add();\n      const initStatus = envInjector.get(ApplicationInitStatus);\n      initStatus.runInitializers();\n      return initStatus.donePromise.then(() => {\n        // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy\n        const localeId = envInjector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n        setLocaleId(localeId || DEFAULT_LOCALE_ID);\n        const enableRootComponentBoostrap = envInjector.get(ENABLE_ROOT_COMPONENT_BOOTSTRAP, true);\n        if (!enableRootComponentBoostrap) {\n          if (isApplicationBootstrapConfig(config)) {\n            return envInjector.get(ApplicationRef);\n          }\n          config.allPlatformModules.push(config.moduleRef);\n          return config.moduleRef;\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          const imagePerformanceService = envInjector.get(ImagePerformanceWarning);\n          imagePerformanceService.start();\n        }\n        if (isApplicationBootstrapConfig(config)) {\n          const appRef = envInjector.get(ApplicationRef);\n          if (config.rootComponent !== undefined) {\n            appRef.bootstrap(config.rootComponent);\n          }\n          return appRef;\n        } else {\n          moduleBootstrapImpl?.(config.moduleRef, config.allPlatformModules);\n          return config.moduleRef;\n        }\n      }).finally(() => void pendingTasks.remove(taskId));\n    });\n  });\n}\n/**\n * Having a separate symbol for the module boostrap implementation allows us to\n * tree shake the module based boostrap implementation in standalone apps.\n */\nlet moduleBootstrapImpl;\n/**\n * Set the implementation of the module based bootstrap.\n */\nfunction setModuleBootstrapImpl() {\n  moduleBootstrapImpl = _moduleDoBootstrap;\n}\nfunction _moduleDoBootstrap(moduleRef, allPlatformModules) {\n  const appRef = moduleRef.injector.get(ApplicationRef);\n  if (moduleRef._bootstrapComponents.length > 0) {\n    moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n  } else if (moduleRef.instance.ngDoBootstrap) {\n    moduleRef.instance.ngDoBootstrap(appRef);\n  } else {\n    throw new RuntimeError(-403 /* RuntimeErrorCode.BOOTSTRAP_COMPONENTS_NOT_FOUND */, ngDevMode && `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, ` + `but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` + `Please define one of these.`);\n  }\n  allPlatformModules.push(moduleRef);\n}\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch(e => {\n        ngZone.runOutsideAngular(() => errorHandler(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n\n/**\n * The Angular platform is the entry point for Angular on a web page.\n * Each page has exactly one platform. Services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * A page's platform is initialized implicitly when a platform is created using a platform\n * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.\n *\n * @publicApi\n */\nlet PlatformRef = /*#__PURE__*/(() => {\n  class PlatformRef {\n    _injector;\n    _modules = [];\n    _destroyListeners = [];\n    _destroyed = false;\n    /** @internal */\n    constructor(_injector) {\n      this._injector = _injector;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform.\n     *\n     * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function\n     *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.\n     */\n    bootstrapModuleFactory(moduleFactory, options) {\n      const scheduleInRootZone = options?.scheduleInRootZone;\n      const ngZoneFactory = () => getNgZone(options?.ngZone, {\n        ...getNgZoneOptions({\n          eventCoalescing: options?.ngZoneEventCoalescing,\n          runCoalescing: options?.ngZoneRunCoalescing\n        }),\n        scheduleInRootZone\n      });\n      const ignoreChangesOutsideZone = options?.ignoreChangesOutsideZone;\n      const allAppProviders = [internalProvideZoneChangeDetection({\n        ngZoneFactory,\n        ignoreChangesOutsideZone\n      }), {\n        provide: ChangeDetectionScheduler,\n        useExisting: ChangeDetectionSchedulerImpl\n      }, errorHandlerEnvironmentInitializer];\n      const moduleRef = createNgModuleRefWithProviders(moduleFactory.moduleType, this.injector, allAppProviders);\n      setModuleBootstrapImpl();\n      return bootstrap({\n        moduleRef,\n        allPlatformModules: this._modules,\n        platformInjector: this.injector\n      });\n    }\n    /**\n     * Creates an instance of an `@NgModule` for a given platform.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```ts\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    bootstrapModule(moduleType, compilerOptions = []) {\n      const options = optionsReducer({}, compilerOptions);\n      setModuleBootstrapImpl();\n      return compileNgModuleFactory(this.injector, options, moduleType).then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n    }\n    /**\n     * Registers a listener to be called when the platform is destroyed.\n     */\n    onDestroy(callback) {\n      this._destroyListeners.push(callback);\n    }\n    /**\n     * Retrieves the platform {@link Injector}, which is the parent injector for\n     * every Angular application on the page and provides singleton providers.\n     */\n    get injector() {\n      return this._injector;\n    }\n    /**\n     * Destroys the current Angular platform and all Angular applications on the page.\n     * Destroys all modules and listeners registered with the platform.\n     */\n    destroy() {\n      if (this._destroyed) {\n        throw new RuntimeError(404 /* RuntimeErrorCode.PLATFORM_ALREADY_DESTROYED */, ngDevMode && 'The platform has already been destroyed!');\n      }\n      this._modules.slice().forEach(module => module.destroy());\n      this._destroyListeners.forEach(listener => listener());\n      const destroyListeners = this._injector.get(PLATFORM_DESTROY_LISTENERS, null);\n      if (destroyListeners) {\n        destroyListeners.forEach(listener => listener());\n        destroyListeners.clear();\n      }\n      this._destroyed = true;\n    }\n    /**\n     * Indicates whether this instance was destroyed.\n     */\n    get destroyed() {\n      return this._destroyed;\n    }\n    static ɵfac = function PlatformRef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PlatformRef)(__inject(Injector));\n    };\n    static ɵprov = /*@__PURE__*/__defineInjectable({\n      token: PlatformRef,\n      factory: PlatformRef.ɵfac,\n      providedIn: 'platform'\n    });\n  }\n  return PlatformRef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(PlatformRef, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], () => [{\n    type: Injector\n  }], null);\n})();\nlet _platformInjector = null;\n/**\n * Internal token to indicate whether having multiple bootstrapped platform should be allowed (only\n * one bootstrapped platform is allowed by default). This token helps to support SSR scenarios.\n */\nconst ALLOW_MULTIPLE_PLATFORMS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'AllowMultipleToken' : '');\n/**\n * Creates a platform.\n * Platforms must be created on launch using this function.\n *\n * @publicApi\n */\nfunction createPlatform(injector) {\n  if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new RuntimeError(400 /* RuntimeErrorCode.MULTIPLE_PLATFORMS */, ngDevMode && 'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  publishDefaultGlobalUtils();\n  publishSignalConfiguration();\n  _platformInjector = injector;\n  const platform = injector.get(PlatformRef);\n  runPlatformInitializers(injector);\n  return platform;\n}\n/**\n * Creates a factory for a platform. Can be used to provide or override `Providers` specific to\n * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.\n * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories\n * to build up configurations that might be required by different libraries or parts of the\n * application.\n * @param name Identifies the new platform factory.\n * @param providers A set of dependency providers for platforms created with the new factory.\n *\n * @publicApi\n */\nfunction createPlatformFactory(parentPlatformFactory, name, providers = []) {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      const platformProviders = [...providers, ...extraProviders, {\n        provide: marker,\n        useValue: true\n      }];\n      if (parentPlatformFactory) {\n        parentPlatformFactory(platformProviders);\n      } else {\n        createPlatform(createPlatformInjector(platformProviders, desc));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n/**\n * Helper function to create an instance of a platform injector (that maintains the 'platform'\n * scope).\n */\nfunction createPlatformInjector(providers = [], name) {\n  return Injector.create({\n    name,\n    providers: [{\n      provide: INJECTOR_SCOPE,\n      useValue: 'platform'\n    }, {\n      provide: PLATFORM_DESTROY_LISTENERS,\n      useValue: new Set([() => _platformInjector = null])\n    }, ...providers]\n  });\n}\n/**\n * Checks that there is currently a platform that contains the given token as a provider.\n *\n * @publicApi\n */\nfunction assertPlatform(requiredToken) {\n  const platform = getPlatform();\n  if (!platform) {\n    throw new RuntimeError(401 /* RuntimeErrorCode.PLATFORM_NOT_FOUND */, ngDevMode && 'No platform exists!');\n  }\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && !platform.injector.get(requiredToken, null)) {\n    throw new RuntimeError(400 /* RuntimeErrorCode.MULTIPLE_PLATFORMS */, 'A platform with a different configuration has been created. Please destroy it first.');\n  }\n  return platform;\n}\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nfunction getPlatform() {\n  return _platformInjector?.get(PlatformRef) ?? null;\n}\n/**\n * Destroys the current Angular platform and all Angular applications on the page.\n * Destroys all modules and listeners registered with the platform.\n *\n * @publicApi\n */\nfunction destroyPlatform() {\n  getPlatform()?.destroy();\n}\n/**\n * The goal of this function is to bootstrap a platform injector,\n * but avoid referencing `PlatformRef` class.\n * This function is needed for bootstrapping a Standalone Component.\n */\nfunction createOrReusePlatformInjector(providers = []) {\n  // If a platform injector already exists, it means that the platform\n  // is already bootstrapped and no additional actions are required.\n  if (_platformInjector) return _platformInjector;\n  publishDefaultGlobalUtils();\n  // Otherwise, setup a new platform injector and run platform initializers.\n  const injector = createPlatformInjector(providers);\n  _platformInjector = injector;\n  publishSignalConfiguration();\n  runPlatformInitializers(injector);\n  return injector;\n}\n/**\n * @description\n * This function is used to provide initialization functions that will be executed upon\n * initialization of the platform injector.\n *\n * Note that the provided initializer is run in the injection context.\n *\n * Previously, this was achieved using the `PLATFORM_INITIALIZER` token which is now deprecated.\n *\n * @see {@link PLATFORM_INITIALIZER}\n *\n * @publicApi\n */\nfunction providePlatformInitializer(initializerFn) {\n  return makeEnvironmentProviders([{\n    provide: PLATFORM_INITIALIZER,\n    useValue: initializerFn,\n    multi: true\n  }]);\n}\nfunction runPlatformInitializers(injector) {\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  runInInjectionContext(injector, () => {\n    inits?.forEach(init => init());\n  });\n}\nfunction exhaustiveCheckNoChangesInterval(interval) {\n  return provideEnvironmentInitializer(() => {\n    const applicationRef = inject(ApplicationRef);\n    const errorHandler = inject(ErrorHandler);\n    const scheduler = inject(ChangeDetectionSchedulerImpl);\n    const ngZone = inject(NgZone);\n    function scheduleCheckNoChanges() {\n      ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          if (applicationRef.destroyed) {\n            return;\n          }\n          if (scheduler.pendingRenderTaskId || scheduler.runningTick) {\n            scheduleCheckNoChanges();\n            return;\n          }\n          for (const view of applicationRef.allViews) {\n            try {\n              checkNoChangesInternal(view._lView, true /** exhaustive */);\n            } catch (e) {\n              errorHandler.handleError(e);\n            }\n          }\n          scheduleCheckNoChanges();\n        }, interval);\n      });\n    }\n    scheduleCheckNoChanges();\n  });\n}\nfunction provideCheckNoChangesConfig(options) {\n  return makeEnvironmentProviders(typeof ngDevMode === 'undefined' || ngDevMode ? [{\n    provide: UseExhaustiveCheckNoChanges,\n    useValue: options.exhaustive\n  }, options?.interval !== undefined ? exhaustiveCheckNoChangesInterval(options.interval) : []] : []);\n}\n\n/**\n * Returns whether Angular is in development mode.\n *\n * By default, this is true, unless `enableProdMode` is invoked prior to calling this method or the\n * application is built using the Angular CLI with the `optimization` option.\n * @see {@link /cli/build ng build}\n *\n * @publicApi\n */\nfunction isDevMode() {\n  return typeof ngDevMode === 'undefined' || !!ngDevMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * Using this method is discouraged as the Angular CLI will set production mode when using the\n * `optimization` option.\n * @see {@link /cli/build ng build}\n *\n * @publicApi\n */\nfunction enableProdMode() {\n  // The below check is there so when ngDevMode is set via terser\n  // `global['ngDevMode'] = false;` is also dropped.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    _global['ngDevMode'] = false;\n  }\n}\n\n/**\n * Returns the NgModuleFactory with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Factories for NgModules that do\n * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n * @deprecated Use `getNgModuleById` instead.\n */\nfunction getModuleFactory(id) {\n  const type = getRegisteredNgModuleType(id);\n  if (!type) throw noModuleError(id);\n  return new NgModuleFactory(type);\n}\n/**\n * Returns the NgModule class with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Classes for NgModules that do\n * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n */\nfunction getNgModuleById(id) {\n  const type = getRegisteredNgModuleType(id);\n  if (!type) throw noModuleError(id);\n  return type;\n}\nfunction noModuleError(id) {\n  return new Error(`No module with ID ${id} loaded`);\n}\n\n/**\n * Base class that provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.\n *\n * @see [Using change detection hooks](guide/components/lifecycle#using-change-detection-hooks)\n * @see [Defining custom change detection](guide/components/lifecycle#defining-custom-change-detection)\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval.\n *\n * {@example core/ts/change_detect/change-detection.ts region='mark-for-check'}\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * {@example core/ts/change_detect/change-detection.ts region='detach'}\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * {@example core/ts/change_detect/change-detection.ts region='reattach'}\n *\n * @publicApi\n */\nlet ChangeDetectorRef = /*#__PURE__*/(() => {\n  class ChangeDetectorRef {\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ELEMENT_ID__ = injectChangeDetectorRef;\n  }\n  return ChangeDetectorRef;\n})();\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nfunction injectChangeDetectorRef(flags) {\n  return createViewRef(getCurrentTNode(), getLView(), (flags & 16 /* InternalInjectFlags.ForPipe */) === 16 /* InternalInjectFlags.ForPipe */);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param tNode The node that is requesting a ChangeDetectorRef\n * @param lView The view to which the node belongs\n * @param isPipe Whether the view is being injected into a pipe.\n * @returns The ChangeDetectorRef to use\n */\nfunction createViewRef(tNode, lView, isPipe) {\n  if (isComponentHost(tNode) && !isPipe) {\n    // The LView represents the location where the component is declared.\n    // Instead we want the LView for the component View and so we need to look it up.\n    const componentView = getComponentLViewByIndex(tNode.index, lView); // look down\n    return new ViewRef$1(componentView, componentView);\n  } else if (tNode.type & (3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */ | 128 /* TNodeType.LetDeclaration */)) {\n    // The LView represents the location where the injection is requested from.\n    // We need to locate the containing LView (in case where the `lView` is an embedded view)\n    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up\n    return new ViewRef$1(hostComponentView, lView);\n  }\n  return null;\n}\n\n/**\n * Represents an Angular view.\n *\n * @see {@link /api/core/ChangeDetectorRef?tab=usage-notes Change detection usage}\n *\n * @publicApi\n */\nclass ViewRef extends ChangeDetectorRef {}\n/**\n * Represents an Angular view in a view container.\n * An embedded view can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see {@link ViewContainerRef}\n *\n * @usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```html\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```html\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```html\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```html\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * @publicApi\n */\nclass EmbeddedViewRef extends ViewRef {}\nclass DefaultIterableDifferFactory {\n  constructor() {}\n  supports(obj) {\n    return isListLikeIterable(obj);\n  }\n  create(trackByFn) {\n    return new DefaultIterableDiffer(trackByFn);\n  }\n}\nconst trackByIdentity = (index, item) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nclass DefaultIterableDiffer {\n  length = 0;\n  // TODO: confirm the usage of `collection` as it's unused, readonly and on a non public API.\n  collection;\n  // Keeps track of the used records at any point in time (during & across `_check()` calls)\n  _linkedRecords = null;\n  // Keeps track of the removed records at any point in time during `_check()` calls.\n  _unlinkedRecords = null;\n  _previousItHead = null;\n  _itHead = null;\n  _itTail = null;\n  _additionsHead = null;\n  _additionsTail = null;\n  _movesHead = null;\n  _movesTail = null;\n  _removalsHead = null;\n  _removalsTail = null;\n  // Keeps track of records where custom track by is the same, but item identity has changed\n  _identityChangesHead = null;\n  _identityChangesTail = null;\n  _trackByFn;\n  constructor(trackByFn) {\n    this._trackByFn = trackByFn || trackByIdentity;\n  }\n  forEachItem(fn) {\n    let record;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n  forEachOperation(fn) {\n    let nextIt = this._itHead;\n    let nextRemove = this._removalsHead;\n    let addRemoveOffset = 0;\n    let moveOffsets = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;\n      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const currentIndex = record.currentIndex;\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const localCurrentIndex = currentIndex - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let i = 0; i < localMovePreviousIndex; i++) {\n              const offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;\n              const index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n  forEachPreviousItem(fn) {\n    let record;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n  forEachAddedItem(fn) {\n    let record;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n  forEachMovedItem(fn) {\n    let record;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n  forEachRemovedItem(fn) {\n    let record;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n  forEachIdentityChange(fn) {\n    let record;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n  diff(collection) {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n  onDestroy() {}\n  check(collection) {\n    this._reset();\n    let record = this._itHead;\n    let mayBeDirty = false;\n    let index;\n    let item;\n    let itemTrackBy;\n    if (Array.isArray(collection)) {\n      this.length = collection.length;\n      for (let index = 0; index < this.length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, item => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      this.length = index;\n    }\n    this._truncate(record);\n    this.collection = collection;\n    return this.isDirty;\n  }\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n   * changes.\n   */\n  get isDirty() {\n    return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   *\n   * @internal\n   */\n  _reset() {\n    if (this.isDirty) {\n      let record;\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n      for (record = this._movesHead; record !== null; record = record._nextMoved) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n      // TODO(vicb): when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - `record` is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - `item` is the current item in the collection\n   * - `index` is the position of the item in the collection\n   *\n   * @internal\n   */\n  _mismatch(record, item, itemTrackBy, index) {\n    // The previous record after which we will append the current one.\n    let previousRecord;\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n    // See if we have evicted the item, which used to be at some anterior position of _itHead list.\n    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (record !== null) {\n      // It is an item which we have evicted earlier: reinsert it back into the list.\n      // But first we need to check if identity changed, so we can update in view if necessary.\n      if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n      this._reinsertAfter(record, previousRecord, index);\n    } else {\n      // Attempt to see if the item is at some posterior position of _itHead list.\n      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n      if (record !== null) {\n        // We have the item in _itHead at/after `index` position. We need to move it forward in the\n        // collection.\n        // But first we need to check if identity changed, so we can update in view if necessary.\n        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        this._moveAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   *\n   * @internal\n   */\n  _verifyReinsertion(record, item, itemTrackBy, index) {\n    let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n  /**\n   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n   *\n   * - `record` The first excess {@link IterableChangeRecord_}.\n   *\n   * @internal\n   */\n  _truncate(record) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const nextRecord = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n  /** @internal */\n  _reinsertAfter(record, prevRecord, index) {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const prev = record._prevRemoved;\n    const next = record._nextRemoved;\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n  /** @internal */\n  _moveAfter(record, prevRecord, index) {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n  /** @internal */\n  _addAfter(record, prevRecord, index) {\n    this._insertAfter(record, prevRecord, index);\n    if (this._additionsTail === null) {\n      // TODO(vicb):\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n  /** @internal */\n  _insertAfter(record, prevRecord, index) {\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n    const next = prevRecord === null ? this._itHead : prevRecord._next;\n    // TODO(vicb):\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap();\n    }\n    this._linkedRecords.put(record);\n    record.currentIndex = index;\n    return record;\n  }\n  /** @internal */\n  _remove(record) {\n    return this._addToRemovals(this._unlink(record));\n  }\n  /** @internal */\n  _unlink(record) {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n    const prev = record._prev;\n    const next = record._next;\n    // TODO(vicb):\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n    return record;\n  }\n  /** @internal */\n  _addToMoves(record, toIndex) {\n    // TODO(vicb):\n    // assert(record._nextMoved === null);\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n    if (this._movesTail === null) {\n      // TODO(vicb):\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n    return record;\n  }\n  _addToRemovals(record) {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n    if (this._removalsTail === null) {\n      // TODO(vicb):\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // TODO(vicb):\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n  /** @internal */\n  _addIdentityChange(record, item) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n}\nclass IterableChangeRecord_ {\n  item;\n  trackById;\n  currentIndex = null;\n  previousIndex = null;\n  /** @internal */\n  _nextPrevious = null;\n  /** @internal */\n  _prev = null;\n  /** @internal */\n  _next = null;\n  /** @internal */\n  _prevDup = null;\n  /** @internal */\n  _nextDup = null;\n  /** @internal */\n  _prevRemoved = null;\n  /** @internal */\n  _nextRemoved = null;\n  /** @internal */\n  _nextAdded = null;\n  /** @internal */\n  _nextMoved = null;\n  /** @internal */\n  _nextIdentityChange = null;\n  constructor(item, trackById) {\n    this.item = item;\n    this.trackById = trackById;\n  }\n}\n// A linked list of IterableChangeRecords with the same IterableChangeRecord_.item\nclass _DuplicateItemRecordList {\n  /** @internal */\n  _head = null;\n  /** @internal */\n  _tail = null;\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   */\n  add(record) {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // TODO(vicb):\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n  // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n  get(trackById, atOrAfterIndex) {\n    let record;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n  /**\n   * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   */\n  remove(record) {\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n    const prev = record._prevDup;\n    const next = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\nclass _DuplicateMap {\n  map = /*#__PURE__*/new Map();\n  put(record) {\n    const key = record.trackById;\n    let duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n  /**\n   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the second `a`.\n   */\n  get(trackById, atOrAfterIndex) {\n    const key = trackById;\n    const recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n  /**\n   * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   */\n  remove(record) {\n    const key = record.trackById;\n    const recordList = this.map.get(key);\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n  get isEmpty() {\n    return this.map.size === 0;\n  }\n  clear() {\n    this.map.clear();\n  }\n}\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n  const previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\nclass DefaultKeyValueDifferFactory {\n  constructor() {}\n  supports(obj) {\n    return obj instanceof Map || isJsObject(obj);\n  }\n  create() {\n    return new DefaultKeyValueDiffer();\n  }\n}\nclass DefaultKeyValueDiffer {\n  _records = /*#__PURE__*/new Map();\n  _mapHead = null;\n  // _appendAfter is used in the check loop\n  _appendAfter = null;\n  _previousMapHead = null;\n  _changesHead = null;\n  _changesTail = null;\n  _additionsHead = null;\n  _additionsTail = null;\n  _removalsHead = null;\n  _removalsTail = null;\n  get isDirty() {\n    return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;\n  }\n  forEachItem(fn) {\n    let record;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n  forEachPreviousItem(fn) {\n    let record;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n  forEachChangedItem(fn) {\n    let record;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n  forEachAddedItem(fn) {\n    let record;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n  forEachRemovedItem(fn) {\n    let record;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n  diff(map) {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n    }\n    return this.check(map) ? this : null;\n  }\n  onDestroy() {}\n  /**\n   * Check the current state of the map vs the previous.\n   * The algorithm is optimised for when the keys do no change.\n   */\n  check(map) {\n    this._reset();\n    let insertBefore = this._mapHead;\n    this._appendAfter = null;\n    this._forEach(map, (value, key) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        const record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n      this._removalsHead = insertBefore;\n      for (let record = insertBefore; record !== null; record = record._nextRemoved) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n    return this.isDirty;\n  }\n  /**\n   * Inserts a record before `before` or append at the end of the list when `before` is null.\n   *\n   * Notes:\n   * - This method appends at `this._appendAfter`,\n   * - This method updates `this._appendAfter`,\n   * - The return value is the new value for the insertion pointer.\n   */\n  _insertBeforeOrAppend(before, record) {\n    if (before) {\n      const prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n      this._appendAfter = before;\n      return before;\n    }\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n    this._appendAfter = record;\n    return null;\n  }\n  _getOrCreateRecordForKey(key, value) {\n    if (this._records.has(key)) {\n      const record = this._records.get(key);\n      this._maybeAddToChanges(record, value);\n      const prev = record._prev;\n      const next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n      return record;\n    }\n    const record = new KeyValueChangeRecord_(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n  /** @internal */\n  _reset() {\n    if (this.isDirty) {\n      let record;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n  // Add the record or a given key to the list of changes only when the value has actually changed\n  _maybeAddToChanges(record, newValue) {\n    if (!Object.is(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n  _addToAdditions(record) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n  _addToChanges(record) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n  /** @internal */\n  _forEach(obj, fn) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach(k => fn(obj[k], k));\n    }\n  }\n}\nclass KeyValueChangeRecord_ {\n  key;\n  previousValue = null;\n  currentValue = null;\n  /** @internal */\n  _nextPrevious = null;\n  /** @internal */\n  _next = null;\n  /** @internal */\n  _prev = null;\n  /** @internal */\n  _nextAdded = null;\n  /** @internal */\n  _nextRemoved = null;\n  /** @internal */\n  _nextChanged = null;\n  constructor(key) {\n    this.key = key;\n  }\n}\nfunction defaultIterableDiffersFactory() {\n  return new IterableDiffers([new DefaultIterableDifferFactory()]);\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nlet IterableDiffers = /*#__PURE__*/(() => {\n  class IterableDiffers {\n    factories;\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: IterableDiffers,\n      providedIn: 'root',\n      factory: defaultIterableDiffersFactory\n    });\n    constructor(factories) {\n      this.factories = factories;\n    }\n    static create(factories, parent) {\n      if (parent != null) {\n        const copied = parent.factories.slice();\n        factories = factories.concat(copied);\n      }\n      return new IterableDiffers(factories);\n    }\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```ts\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    static extend(factories) {\n      return {\n        provide: IterableDiffers,\n        useFactory: parent => {\n          // if parent is null, it means that we are in the root injector and we have just overridden\n          // the default injection mechanism for IterableDiffers, in such a case just assume\n          // `defaultIterableDiffersFactory`.\n          return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());\n        },\n        // Dependency technically isn't optional, but we can provide a better error message this way.\n        deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n      };\n    }\n    find(iterable) {\n      const factory = this.factories.find(f => f.supports(iterable));\n      if (factory != null) {\n        return factory;\n      } else {\n        throw new RuntimeError(901 /* RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY */, ngDevMode && `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n      }\n    }\n  }\n  return IterableDiffers;\n})();\nfunction getTypeNameForDebugging(type) {\n  return type['name'] || typeof type;\n}\nfunction defaultKeyValueDiffersFactory() {\n  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nlet KeyValueDiffers = /*#__PURE__*/(() => {\n  class KeyValueDiffers {\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: KeyValueDiffers,\n      providedIn: 'root',\n      factory: defaultKeyValueDiffersFactory\n    });\n    factories;\n    constructor(factories) {\n      this.factories = factories;\n    }\n    static create(factories, parent) {\n      if (parent) {\n        const copied = parent.factories.slice();\n        factories = factories.concat(copied);\n      }\n      return new KeyValueDiffers(factories);\n    }\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```ts\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    static extend(factories) {\n      return {\n        provide: KeyValueDiffers,\n        useFactory: parent => {\n          // if parent is null, it means that we are in the root injector and we have just overridden\n          // the default injection mechanism for KeyValueDiffers, in such a case just assume\n          // `defaultKeyValueDiffersFactory`.\n          return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());\n        },\n        // Dependency technically isn't optional, but we can provide a better error message this way.\n        deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n      };\n    }\n    find(kv) {\n      const factory = this.factories.find(f => f.supports(kv));\n      if (factory) {\n        return factory;\n      }\n      throw new RuntimeError(901 /* RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY */, ngDevMode && `Cannot find a differ supporting object '${kv}'`);\n    }\n  }\n  return KeyValueDiffers;\n})();\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nconst keyValDiff = [/*#__PURE__*/new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nconst iterableDiff = [/*#__PURE__*/new DefaultIterableDifferFactory()];\nconst defaultIterableDiffers = /*#__PURE__*/new IterableDiffers(iterableDiff);\nconst defaultKeyValueDiffers = /*#__PURE__*/new KeyValueDiffers(keyValDiff);\n\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nconst platformCore = /*#__PURE__*/createPlatformFactory(null, 'core', []);\n\n/**\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command. Eagerly injects\n * `ApplicationRef` to instantiate it.\n *\n * @publicApi\n */\nlet ApplicationModule = /*#__PURE__*/(() => {\n  class ApplicationModule {\n    // Inject ApplicationRef to make it eager...\n    constructor(appRef) {}\n    static ɵfac = function ApplicationModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApplicationModule)(__inject(ApplicationRef));\n    };\n    static ɵmod = /*@__PURE__*/__defineNgModule({\n      type: ApplicationModule\n    });\n    static ɵinj = /*@__PURE__*/__defineInjector({});\n  }\n  return ApplicationModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationModule, [{\n    type: NgModule\n  }], () => [{\n    type: ApplicationRef\n  }], null);\n})();\n\n/**\n * Internal create application API that implements the core application creation logic and optional\n * bootstrap logic.\n *\n * Platforms (such as `platform-browser`) may require different set of application and platform\n * providers for an application to function correctly. As a result, platforms may use this function\n * internally and supply the necessary providers during the bootstrap, while exposing\n * platform-specific APIs as a part of their public API.\n *\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n */\nfunction internalCreateApplication(config) {\n  profiler(8 /* ProfilerEvent.BootstrapApplicationStart */);\n  try {\n    const {\n      rootComponent,\n      appProviders,\n      platformProviders\n    } = config;\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && rootComponent !== undefined) {\n      assertStandaloneComponentType(rootComponent);\n    }\n    const platformInjector = createOrReusePlatformInjector(platformProviders);\n    // Create root application injector based on a set of providers configured at the platform\n    // bootstrap level as well as providers passed to the bootstrap call by a user.\n    const allAppProviders = [internalProvideZoneChangeDetection({}), {\n      provide: ChangeDetectionScheduler,\n      useExisting: ChangeDetectionSchedulerImpl\n    }, errorHandlerEnvironmentInitializer, ...(appProviders || [])];\n    const adapter = new EnvironmentNgModuleRefAdapter({\n      providers: allAppProviders,\n      parent: platformInjector,\n      debugName: typeof ngDevMode === 'undefined' || ngDevMode ? 'Environment Injector' : '',\n      // We skip environment initializers because we need to run them inside the NgZone, which\n      // happens after we get the NgZone instance from the Injector.\n      runEnvironmentInitializers: false\n    });\n    return bootstrap({\n      r3Injector: adapter.injector,\n      platformInjector,\n      rootComponent\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  } finally {\n    profiler(9 /* ProfilerEvent.BootstrapApplicationEnd */);\n  }\n}\n\n/** Apps in which we've enabled event replay.\n *  This is to prevent initializing event replay more than once per app.\n */\nconst appsWithEventReplay = /*#__PURE__*/new WeakSet();\n/**\n * The key that represents all replayable elements that are not in defer blocks.\n */\nconst EAGER_CONTENT_LISTENERS_KEY = '';\n/**\n * A list of block events that need to be replayed\n */\nlet blockEventQueue = [];\n/**\n * Determines whether Event Replay feature should be activated on the client.\n */\nfunction shouldEnableEventReplay(injector) {\n  return injector.get(IS_EVENT_REPLAY_ENABLED, EVENT_REPLAY_ENABLED_DEFAULT);\n}\n/**\n * Returns a set of providers required to setup support for event replay.\n * Requires hydration to be enabled separately.\n */\nfunction withEventReplay() {\n  const providers = [{\n    provide: IS_EVENT_REPLAY_ENABLED,\n    useFactory: () => {\n      let isEnabled = true;\n      if (typeof ngServerMode === 'undefined' || !ngServerMode) {\n        // Note: globalThis[CONTRACT_PROPERTY] may be undefined in case Event Replay feature\n        // is enabled, but there are no events configured in this application, in which case\n        // we don't activate this feature, since there are no events to replay.\n        const appId = inject(APP_ID);\n        isEnabled = !!window._ejsas?.[appId];\n      }\n      if (isEnabled) {\n        performanceMarkFeature('NgEventReplay');\n      }\n      return isEnabled;\n    }\n  }];\n  if (typeof ngServerMode === 'undefined' || !ngServerMode) {\n    providers.push({\n      provide: ENVIRONMENT_INITIALIZER,\n      useValue: () => {\n        const appRef = inject(ApplicationRef);\n        const {\n          injector\n        } = appRef;\n        // We have to check for the appRef here due to the possibility of multiple apps\n        // being present on the same page. We only want to enable event replay for the\n        // apps that actually want it.\n        if (!appsWithEventReplay.has(appRef)) {\n          const jsActionMap = inject(JSACTION_BLOCK_ELEMENT_MAP);\n          if (shouldEnableEventReplay(injector)) {\n            enableStashEventListenerImpl();\n            const appId = injector.get(APP_ID);\n            const clearStashFn = setStashFn(appId, (rEl, eventName, listenerFn) => {\n              // If a user binds to a ng-container and uses a directive that binds using a host listener,\n              // this element could be a comment node. So we need to ensure we have an actual element\n              // node before stashing anything.\n              if (rEl.nodeType !== Node.ELEMENT_NODE) return;\n              sharedStashFunction(rEl, eventName, listenerFn);\n              sharedMapFunction(rEl, jsActionMap);\n            });\n            // Clean up the reference to the function set by the environment initializer,\n            // as the function closure may capture injected elements and prevent them\n            // from being properly garbage collected.\n            appRef.onDestroy(clearStashFn);\n          }\n        }\n      },\n      multi: true\n    }, {\n      provide: APP_BOOTSTRAP_LISTENER,\n      useFactory: () => {\n        const appRef = inject(ApplicationRef);\n        const {\n          injector\n        } = appRef;\n        return () => {\n          // We have to check for the appRef here due to the possibility of multiple apps\n          // being present on the same page. We only want to enable event replay for the\n          // apps that actually want it.\n          if (!shouldEnableEventReplay(injector) || appsWithEventReplay.has(appRef)) {\n            return;\n          }\n          appsWithEventReplay.add(appRef);\n          const appId = injector.get(APP_ID);\n          appRef.onDestroy(() => {\n            appsWithEventReplay.delete(appRef);\n            // Ensure that we're always safe calling this in the browser.\n            if (typeof ngServerMode !== 'undefined' && !ngServerMode) {\n              // `_ejsa` should be deleted when the app is destroyed, ensuring that\n              // no elements are still captured in the global list and are not prevented\n              // from being garbage collected.\n              clearAppScopedEarlyEventContract(appId);\n            }\n          });\n          // Kick off event replay logic once hydration for the initial part\n          // of the application is completed. This timing is similar to the unclaimed\n          // dehydrated views cleanup timing.\n          appRef.whenStable().then(() => {\n            // Note: we have to check whether the application is destroyed before\n            // performing other operations with the `injector`.\n            // The application may be destroyed **before** it becomes stable, so when\n            // the `whenStable` resolves, the injector might already be in\n            // a destroyed state. Thus, calling `injector.get` would throw an error\n            // indicating that the injector has already been destroyed.\n            if (appRef.destroyed) {\n              return;\n            }\n            const eventContractDetails = injector.get(JSACTION_EVENT_CONTRACT);\n            initEventReplay(eventContractDetails, injector);\n            const jsActionMap = injector.get(JSACTION_BLOCK_ELEMENT_MAP);\n            jsActionMap.get(EAGER_CONTENT_LISTENERS_KEY)?.forEach(removeListeners);\n            jsActionMap.delete(EAGER_CONTENT_LISTENERS_KEY);\n            const eventContract = eventContractDetails.instance;\n            // This removes event listeners registered through the container manager,\n            // as listeners registered on `document.body` might never be removed if we\n            // don't clean up the contract.\n            if (isIncrementalHydrationEnabled(injector)) {\n              // When incremental hydration is enabled, we cannot clean up the event\n              // contract immediately because we're unaware if there are any deferred\n              // blocks to hydrate. We can only schedule a contract cleanup when the\n              // app is destroyed.\n              appRef.onDestroy(() => eventContract.cleanUp());\n            } else {\n              eventContract.cleanUp();\n            }\n          });\n        };\n      },\n      multi: true\n    });\n  }\n  return providers;\n}\nconst initEventReplay = (eventDelegation, injector) => {\n  const appId = injector.get(APP_ID);\n  // This is set in packages/platform-server/src/utils.ts\n  const earlyJsactionData = window._ejsas[appId];\n  const eventContract = eventDelegation.instance = new EventContract(new EventContractContainer(earlyJsactionData.c));\n  for (const et of earlyJsactionData.et) {\n    eventContract.addEvent(et);\n  }\n  for (const et of earlyJsactionData.etc) {\n    eventContract.addEvent(et);\n  }\n  const eventInfos = getAppScopedQueuedEventInfos(appId);\n  eventContract.replayEarlyEventInfos(eventInfos);\n  clearAppScopedEarlyEventContract(appId);\n  const dispatcher = new EventDispatcher(event => {\n    invokeRegisteredReplayListeners(injector, event, event.currentTarget);\n  });\n  registerDispatcher(eventContract, dispatcher);\n};\n/**\n * Extracts information about all DOM events (added in a template) registered on elements in a give\n * LView. Maps collected events to a corresponding DOM element (an element is used as a key).\n */\nfunction collectDomEventsInfo(tView, lView, eventTypesToReplay) {\n  const domEventsInfo = new Map();\n  const lCleanup = lView[CLEANUP];\n  const tCleanup = tView.cleanup;\n  if (!tCleanup || !lCleanup) {\n    return domEventsInfo;\n  }\n  for (let i = 0; i < tCleanup.length;) {\n    const firstParam = tCleanup[i++];\n    const secondParam = tCleanup[i++];\n    if (typeof firstParam !== 'string') {\n      continue;\n    }\n    const eventType = firstParam;\n    if (!isEarlyEventType(eventType)) {\n      continue;\n    }\n    if (isCaptureEventType(eventType)) {\n      eventTypesToReplay.capture.add(eventType);\n    } else {\n      eventTypesToReplay.regular.add(eventType);\n    }\n    const listenerElement = unwrapRNode(lView[secondParam]);\n    i++; // move the cursor to the next position (location of the listener idx)\n    const useCaptureOrIndx = tCleanup[i++];\n    // if useCaptureOrIndx is boolean then report it as is.\n    // if useCaptureOrIndx is positive number then it in unsubscribe method\n    // if useCaptureOrIndx is negative number then it is a Subscription\n    const isDomEvent = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0;\n    if (!isDomEvent) {\n      continue;\n    }\n    if (!domEventsInfo.has(listenerElement)) {\n      domEventsInfo.set(listenerElement, [eventType]);\n    } else {\n      domEventsInfo.get(listenerElement).push(eventType);\n    }\n  }\n  return domEventsInfo;\n}\nfunction invokeRegisteredReplayListeners(injector, event, currentTarget) {\n  const blockName = (currentTarget && currentTarget.getAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE)) ?? '';\n  if (/d\\d+/.test(blockName)) {\n    hydrateAndInvokeBlockListeners(blockName, injector, event, currentTarget);\n  } else if (event.eventPhase === EventPhase.REPLAY) {\n    invokeListeners(event, currentTarget);\n  }\n}\nfunction hydrateAndInvokeBlockListeners(blockName, injector, event, currentTarget) {\n  blockEventQueue.push({\n    event,\n    currentTarget\n  });\n  triggerHydrationFromBlockName(injector, blockName, replayQueuedBlockEvents);\n}\nfunction replayQueuedBlockEvents(hydratedBlocks) {\n  // clone the queue\n  const queue = [...blockEventQueue];\n  const hydrated = new Set(hydratedBlocks);\n  // empty it\n  blockEventQueue = [];\n  for (let {\n    event,\n    currentTarget\n  } of queue) {\n    const blockName = currentTarget.getAttribute(DEFER_BLOCK_SSR_ID_ATTRIBUTE);\n    if (hydrated.has(blockName)) {\n      invokeListeners(event, currentTarget);\n    } else {\n      // requeue events that weren't yet hydrated\n      blockEventQueue.push({\n        event,\n        currentTarget\n      });\n    }\n  }\n}\n\n/**\n * A collection that tracks all serialized views (`ngh` DOM annotations)\n * to avoid duplication. An attempt to add a duplicate view results in the\n * collection returning the index of the previously collected serialized view.\n * This reduces the number of annotations needed for a given page.\n */\nclass SerializedViewCollection {\n  views = [];\n  indexByContent = /*#__PURE__*/new Map();\n  add(serializedView) {\n    const viewAsString = JSON.stringify(serializedView);\n    if (!this.indexByContent.has(viewAsString)) {\n      const index = this.views.length;\n      this.views.push(serializedView);\n      this.indexByContent.set(viewAsString, index);\n      return index;\n    }\n    return this.indexByContent.get(viewAsString);\n  }\n  getAll() {\n    return this.views;\n  }\n}\n/**\n * Global counter that is used to generate a unique id for TViews\n * during the serialization process.\n */\nlet tViewSsrId = 0;\n/**\n * Generates a unique id for a given TView and returns this id.\n * The id is also stored on this instance of a TView and reused in\n * subsequent calls.\n *\n * This id is needed to uniquely identify and pick up dehydrated views\n * at runtime.\n */\nfunction getSsrId(tView) {\n  if (!tView.ssrId) {\n    tView.ssrId = `t${tViewSsrId++}`;\n  }\n  return tView.ssrId;\n}\n/**\n * Computes the number of root nodes in a given view\n * (or child nodes in a given container if a tNode is provided).\n */\nfunction calcNumRootNodes(tView, lView, tNode) {\n  const rootNodes = [];\n  collectNativeNodes(tView, lView, tNode, rootNodes);\n  return rootNodes.length;\n}\n/**\n * Computes the number of root nodes in all views in a given LContainer.\n */\nfunction calcNumRootNodesInLContainer(lContainer) {\n  const rootNodes = [];\n  collectNativeNodesInLContainer(lContainer, rootNodes);\n  return rootNodes.length;\n}\n/**\n * Annotates root level component's LView for hydration,\n * see `annotateHostElementForHydration` for additional information.\n */\nfunction annotateComponentLViewForHydration(lView, context, injector) {\n  const hostElement = lView[HOST];\n  // Root elements might also be annotated with the `ngSkipHydration` attribute,\n  // check if it's present before starting the serialization process.\n  if (hostElement && !hostElement.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {\n    return annotateHostElementForHydration(hostElement, lView, null, context);\n  }\n  return null;\n}\n/**\n * Annotates root level LContainer for hydration. This happens when a root component\n * injects ViewContainerRef, thus making the component an anchor for a view container.\n * This function serializes the component itself as well as all views from the view\n * container.\n */\nfunction annotateLContainerForHydration(lContainer, context, injector) {\n  const componentLView = unwrapLView(lContainer[HOST]);\n  // Serialize the root component itself.\n  const componentLViewNghIndex = annotateComponentLViewForHydration(componentLView, context);\n  if (componentLViewNghIndex === null) {\n    // Component was not serialized (for example, if hydration was skipped by adding\n    // the `ngSkipHydration` attribute or this component uses i18n blocks in the template,\n    // but `withI18nSupport()` was not added), avoid annotating host element with the `ngh`\n    // attribute.\n    return;\n  }\n  const hostElement = unwrapRNode(componentLView[HOST]);\n  // Serialize all views within this view container.\n  const rootLView = lContainer[PARENT];\n  const rootLViewNghIndex = annotateHostElementForHydration(hostElement, rootLView, null, context);\n  const renderer = componentLView[RENDERER];\n  // For cases when a root component also acts as an anchor node for a ViewContainerRef\n  // (for example, when ViewContainerRef is injected in a root component), there is a need\n  // to serialize information about the component itself, as well as an LContainer that\n  // represents this ViewContainerRef. Effectively, we need to serialize 2 pieces of info:\n  // (1) hydration info for the root component itself and (2) hydration info for the\n  // ViewContainerRef instance (an LContainer). Each piece of information is included into\n  // the hydration data (in the TransferState object) separately, thus we end up with 2 ids.\n  // Since we only have 1 root element, we encode both bits of info into a single string:\n  // ids are separated by the `|` char (e.g. `10|25`, where `10` is the ngh for a component view\n  // and 25 is the `ngh` for a root view which holds LContainer).\n  const finalIndex = `${componentLViewNghIndex}|${rootLViewNghIndex}`;\n  renderer.setAttribute(hostElement, NGH_ATTR_NAME, finalIndex);\n}\n/**\n * Annotates all components bootstrapped in a given ApplicationRef\n * with info needed for hydration.\n *\n * @param appRef An instance of an ApplicationRef.\n * @param doc A reference to the current Document instance.\n * @return event types that need to be replayed\n */\nfunction annotateForHydration(appRef, doc) {\n  const injector = appRef.injector;\n  const isI18nHydrationEnabledVal = isI18nHydrationEnabled(injector);\n  const isIncrementalHydrationEnabledVal = isIncrementalHydrationEnabled(injector);\n  const serializedViewCollection = new SerializedViewCollection();\n  const corruptedTextNodes = new Map();\n  const viewRefs = appRef._views;\n  const shouldReplayEvents = injector.get(IS_EVENT_REPLAY_ENABLED, EVENT_REPLAY_ENABLED_DEFAULT);\n  const eventTypesToReplay = {\n    regular: new Set(),\n    capture: new Set()\n  };\n  const deferBlocks = new Map();\n  const appId = appRef.injector.get(APP_ID);\n  for (const viewRef of viewRefs) {\n    const lNode = getLNodeForHydration(viewRef);\n    // An `lView` might be `null` if a `ViewRef` represents\n    // an embedded view (not a component view).\n    if (lNode !== null) {\n      const context = {\n        serializedViewCollection,\n        corruptedTextNodes,\n        isI18nHydrationEnabled: isI18nHydrationEnabledVal,\n        isIncrementalHydrationEnabled: isIncrementalHydrationEnabledVal,\n        i18nChildren: new Map(),\n        eventTypesToReplay,\n        shouldReplayEvents,\n        appId,\n        deferBlocks\n      };\n      if (isLContainer(lNode)) {\n        annotateLContainerForHydration(lNode, context);\n      } else {\n        annotateComponentLViewForHydration(lNode, context);\n      }\n      insertCorruptedTextNodeMarkers(corruptedTextNodes, doc);\n    }\n  }\n  // Note: we *always* include hydration info key and a corresponding value\n  // into the TransferState, even if the list of serialized views is empty.\n  // This is needed as a signal to the client that the server part of the\n  // hydration logic was setup and enabled correctly. Otherwise, if a client\n  // hydration doesn't find a key in the transfer state - an error is produced.\n  const serializedViews = serializedViewCollection.getAll();\n  const transferState = injector.get(TransferState);\n  transferState.set(NGH_DATA_KEY, serializedViews);\n  if (deferBlocks.size > 0) {\n    const blocks = {};\n    for (const [id, info] of deferBlocks.entries()) {\n      blocks[id] = info;\n    }\n    transferState.set(NGH_DEFER_BLOCKS_KEY, blocks);\n  }\n  return eventTypesToReplay;\n}\n/**\n * Serializes the lContainer data into a list of SerializedView objects,\n * that represent views within this lContainer.\n *\n * @param lContainer the lContainer we are serializing\n * @param tNode the TNode that contains info about this LContainer\n * @param lView that hosts this LContainer\n * @param parentDeferBlockId the defer block id of the parent if it exists\n * @param context the hydration context\n * @returns an array of the `SerializedView` objects\n */\nfunction serializeLContainer(lContainer, tNode, lView, parentDeferBlockId, context) {\n  const views = [];\n  let lastViewAsString = '';\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    let childLView = lContainer[i];\n    let template;\n    let numRootNodes;\n    let serializedView;\n    if (isRootView(childLView)) {\n      // If this is a root view, get an LView for the underlying component,\n      // because it contains information about the view to serialize.\n      childLView = childLView[HEADER_OFFSET];\n      // If we have an LContainer at this position, this indicates that the\n      // host element was used as a ViewContainerRef anchor (e.g. a `ViewContainerRef`\n      // was injected within the component class). This case requires special handling.\n      if (isLContainer(childLView)) {\n        // Calculate the number of root nodes in all views in a given container\n        // and increment by one to account for an anchor node itself, i.e. in this\n        // scenario we'll have a layout that would look like this:\n        // `<app-root /><#VIEW1><#VIEW2>...<!--container-->`\n        // The `+1` is to capture the `<app-root />` element.\n        numRootNodes = calcNumRootNodesInLContainer(childLView) + 1;\n        annotateLContainerForHydration(childLView, context);\n        const componentLView = unwrapLView(childLView[HOST]);\n        serializedView = {\n          [TEMPLATE_ID]: componentLView[TVIEW].ssrId,\n          [NUM_ROOT_NODES]: numRootNodes\n        };\n      }\n    }\n    if (!serializedView) {\n      const childTView = childLView[TVIEW];\n      if (childTView.type === 1 /* TViewType.Component */) {\n        template = childTView.ssrId;\n        // This is a component view, thus it has only 1 root node: the component\n        // host node itself (other nodes would be inside that host node).\n        numRootNodes = 1;\n      } else {\n        template = getSsrId(childTView);\n        numRootNodes = calcNumRootNodes(childTView, childLView, childTView.firstChild);\n      }\n      serializedView = {\n        [TEMPLATE_ID]: template,\n        [NUM_ROOT_NODES]: numRootNodes\n      };\n      let isHydrateNeverBlock = false;\n      // If this is a defer block, serialize extra info.\n      if (isDeferBlock(lView[TVIEW], tNode)) {\n        const lDetails = getLDeferBlockDetails(lView, tNode);\n        const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);\n        if (context.isIncrementalHydrationEnabled && tDetails.hydrateTriggers !== null) {\n          const deferBlockId = `d${context.deferBlocks.size}`;\n          if (tDetails.hydrateTriggers.has(7 /* DeferBlockTrigger.Never */)) {\n            isHydrateNeverBlock = true;\n          }\n          let rootNodes = [];\n          collectNativeNodesInLContainer(lContainer, rootNodes);\n          // Add defer block into info context.deferBlocks\n          const deferBlockInfo = {\n            [NUM_ROOT_NODES]: rootNodes.length,\n            [DEFER_BLOCK_STATE]: lDetails[DEFER_BLOCK_STATE$1]\n          };\n          const serializedTriggers = serializeHydrateTriggers(tDetails.hydrateTriggers);\n          if (serializedTriggers.length > 0) {\n            deferBlockInfo[DEFER_HYDRATE_TRIGGERS] = serializedTriggers;\n          }\n          if (parentDeferBlockId !== null) {\n            // Serialize parent id only when it's present.\n            deferBlockInfo[DEFER_PARENT_BLOCK_ID] = parentDeferBlockId;\n          }\n          context.deferBlocks.set(deferBlockId, deferBlockInfo);\n          const node = unwrapRNode(lContainer);\n          if (node !== undefined) {\n            if (node.nodeType === Node.COMMENT_NODE) {\n              annotateDeferBlockAnchorForHydration(node, deferBlockId);\n            }\n          } else {\n            ngDevMode && validateNodeExists(node, childLView, tNode);\n            ngDevMode && validateMatchingNode(node, Node.COMMENT_NODE, null, childLView, tNode, true);\n            annotateDeferBlockAnchorForHydration(node, deferBlockId);\n          }\n          if (!isHydrateNeverBlock) {\n            // Add JSAction attributes for root nodes that use some hydration triggers\n            annotateDeferBlockRootNodesWithJsAction(tDetails, rootNodes, deferBlockId, context);\n          }\n          // Use current block id as parent for nested routes.\n          parentDeferBlockId = deferBlockId;\n          // Serialize extra info into the view object.\n          // TODO(incremental-hydration): this should be serialized and included at a different level\n          // (not at the view level).\n          serializedView[DEFER_BLOCK_ID] = deferBlockId;\n        }\n        // DEFER_BLOCK_STATE is used for reconciliation in hydration, both regular and incremental.\n        // We need to know which template is rendered when hydrating. So we serialize this state\n        // regardless of hydration type.\n        serializedView[DEFER_BLOCK_STATE] = lDetails[DEFER_BLOCK_STATE$1];\n      }\n      if (!isHydrateNeverBlock) {\n        Object.assign(serializedView, serializeLView(lContainer[i], parentDeferBlockId, context));\n      }\n    }\n    // Check if the previous view has the same shape (for example, it was\n    // produced by the *ngFor), in which case bump the counter on the previous\n    // view instead of including the same information again.\n    const currentViewAsString = JSON.stringify(serializedView);\n    if (views.length > 0 && currentViewAsString === lastViewAsString) {\n      const previousView = views[views.length - 1];\n      previousView[MULTIPLIER] ??= 1;\n      previousView[MULTIPLIER]++;\n    } else {\n      // Record this view as most recently added.\n      lastViewAsString = currentViewAsString;\n      views.push(serializedView);\n    }\n  }\n  return views;\n}\nfunction serializeHydrateTriggers(triggerMap) {\n  const serializableDeferBlockTrigger = new Set([0 /* DeferBlockTrigger.Idle */, 1 /* DeferBlockTrigger.Immediate */, 2 /* DeferBlockTrigger.Viewport */, 5 /* DeferBlockTrigger.Timer */]);\n  let triggers = [];\n  for (let [trigger, details] of triggerMap) {\n    if (serializableDeferBlockTrigger.has(trigger)) {\n      if (details === null) {\n        triggers.push(trigger);\n      } else {\n        triggers.push({\n          trigger,\n          delay: details.delay\n        });\n      }\n    }\n  }\n  return triggers;\n}\n/**\n * Helper function to produce a node path (which navigation steps runtime logic\n * needs to take to locate a node) and stores it in the `NODES` section of the\n * current serialized view.\n */\nfunction appendSerializedNodePath(ngh, tNode, lView, excludedParentNodes) {\n  const noOffsetIndex = tNode.index - HEADER_OFFSET;\n  ngh[NODES] ??= {};\n  // Ensure we don't calculate the path multiple times.\n  ngh[NODES][noOffsetIndex] ??= calcPathForNode(tNode, lView, excludedParentNodes);\n}\n/**\n * Helper function to append information about a disconnected node.\n * This info is needed at runtime to avoid DOM lookups for this element\n * and instead, the element would be created from scratch.\n */\nfunction appendDisconnectedNodeIndex(ngh, tNodeOrNoOffsetIndex) {\n  const noOffsetIndex = typeof tNodeOrNoOffsetIndex === 'number' ? tNodeOrNoOffsetIndex : tNodeOrNoOffsetIndex.index - HEADER_OFFSET;\n  ngh[DISCONNECTED_NODES] ??= [];\n  if (!ngh[DISCONNECTED_NODES].includes(noOffsetIndex)) {\n    ngh[DISCONNECTED_NODES].push(noOffsetIndex);\n  }\n}\n/**\n * Serializes the lView data into a SerializedView object that will later be added\n * to the TransferState storage and referenced using the `ngh` attribute on a host\n * element.\n *\n * @param lView the lView we are serializing\n * @param context the hydration context\n * @returns the `SerializedView` object containing the data to be added to the host node\n */\nfunction serializeLView(lView, parentDeferBlockId = null, context) {\n  const ngh = {};\n  const tView = lView[TVIEW];\n  const i18nChildren = getOrComputeI18nChildren(tView, context);\n  const nativeElementsToEventTypes = context.shouldReplayEvents ? collectDomEventsInfo(tView, lView, context.eventTypesToReplay) : null;\n  // Iterate over DOM element references in an LView.\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    const tNode = tView.data[i];\n    const noOffsetIndex = i - HEADER_OFFSET;\n    // Attempt to serialize any i18n data for the given slot. We do this first, as i18n\n    // has its own process for serialization.\n    const i18nData = trySerializeI18nBlock(lView, i, context);\n    if (i18nData) {\n      ngh[I18N_DATA] ??= {};\n      ngh[I18N_DATA][noOffsetIndex] = i18nData.caseQueue;\n      for (const nodeNoOffsetIndex of i18nData.disconnectedNodes) {\n        appendDisconnectedNodeIndex(ngh, nodeNoOffsetIndex);\n      }\n      for (const nodeNoOffsetIndex of i18nData.disjointNodes) {\n        const tNode = tView.data[nodeNoOffsetIndex + HEADER_OFFSET];\n        ngDevMode && assertTNode(tNode);\n        appendSerializedNodePath(ngh, tNode, lView, i18nChildren);\n      }\n      continue;\n    }\n    // Skip processing of a given slot in the following cases:\n    // - Local refs (e.g. <div #localRef>) take up an extra slot in LViews\n    //   to store the same element. In this case, there is no information in\n    //   a corresponding slot in TNode data structure.\n    // - When a slot contains something other than a TNode. For example, there\n    //   might be some metadata information about a defer block or a control flow block.\n    if (!isTNodeShape(tNode)) {\n      continue;\n    }\n    // Skip any nodes that are in an i18n block but are considered detached (i.e. not\n    // present in the template). These nodes are disconnected from the DOM tree, and\n    // so we don't want to serialize any information about them.\n    if (isDetachedByI18n(tNode)) {\n      continue;\n    }\n    // Serialize information about template.\n    if (isLContainer(lView[i]) && tNode.tView) {\n      ngh[TEMPLATES] ??= {};\n      ngh[TEMPLATES][noOffsetIndex] = getSsrId(tNode.tView);\n    }\n    // Check if a native node that represents a given TNode is disconnected from the DOM tree.\n    // Such nodes must be excluded from the hydration (since the hydration won't be able to\n    // find them), so the TNode ids are collected and used at runtime to skip the hydration.\n    // This situation may happen during the content projection, when some nodes don't make it\n    // into one of the content projection slots (for example, when there is no default\n    // <ng-content /> slot in projector component's template).\n    if (isDisconnectedNode(tNode, lView) && isContentProjectedNode(tNode)) {\n      appendDisconnectedNodeIndex(ngh, tNode);\n      continue;\n    }\n    if (Array.isArray(tNode.projection)) {\n      for (const projectionHeadTNode of tNode.projection) {\n        // We may have `null`s in slots with no projected content.\n        if (!projectionHeadTNode) continue;\n        if (!Array.isArray(projectionHeadTNode)) {\n          // If we process re-projected content (i.e. `<ng-content>`\n          // appears at projection location), skip annotations for this content\n          // since all DOM nodes in this projection were handled while processing\n          // a parent lView, which contains those nodes.\n          if (!isProjectionTNode(projectionHeadTNode) && !isInSkipHydrationBlock(projectionHeadTNode)) {\n            if (isDisconnectedNode(projectionHeadTNode, lView)) {\n              // Check whether this node is connected, since we may have a TNode\n              // in the data structure as a projection segment head, but the\n              // content projection slot might be disabled (e.g.\n              // <ng-content *ngIf=\"false\" />).\n              appendDisconnectedNodeIndex(ngh, projectionHeadTNode);\n            } else {\n              appendSerializedNodePath(ngh, projectionHeadTNode, lView, i18nChildren);\n            }\n          }\n        } else {\n          // If a value is an array, it means that we are processing a projection\n          // where projectable nodes were passed in as DOM nodes (for example, when\n          // calling `ViewContainerRef.createComponent(CmpA, {projectableNodes: [...]})`).\n          //\n          // In this scenario, nodes can come from anywhere (either created manually,\n          // accessed via `document.querySelector`, etc) and may be in any state\n          // (attached or detached from the DOM tree). As a result, we can not reliably\n          // restore the state for such cases during hydration.\n          throw unsupportedProjectionOfDomNodes(unwrapRNode(lView[i]));\n        }\n      }\n    }\n    conditionallyAnnotateNodePath(ngh, tNode, lView, i18nChildren);\n    if (isLContainer(lView[i])) {\n      // Serialize views within this LContainer.\n      const hostNode = lView[i][HOST]; // host node of this container\n      // LView[i][HOST] can be of 2 different types:\n      // - either a DOM node\n      // - or an array that represents an LView of a component\n      if (Array.isArray(hostNode)) {\n        // This is a component, serialize info about it.\n        const targetNode = unwrapRNode(hostNode);\n        if (!targetNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {\n          annotateHostElementForHydration(targetNode, hostNode, parentDeferBlockId, context);\n        }\n      }\n      ngh[CONTAINERS] ??= {};\n      ngh[CONTAINERS][noOffsetIndex] = serializeLContainer(lView[i], tNode, lView, parentDeferBlockId, context);\n    } else if (Array.isArray(lView[i]) && !isLetDeclaration(tNode)) {\n      // This is a component, annotate the host node with an `ngh` attribute.\n      // Note: Let declarations that return an array are also storing an array in the LView,\n      // we need to exclude them.\n      const targetNode = unwrapRNode(lView[i][HOST]);\n      if (!targetNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {\n        annotateHostElementForHydration(targetNode, lView[i], parentDeferBlockId, context);\n      }\n    } else {\n      // <ng-container> case\n      if (tNode.type & 8 /* TNodeType.ElementContainer */) {\n        // An <ng-container> is represented by the number of\n        // top-level nodes. This information is needed to skip over\n        // those nodes to reach a corresponding anchor node (comment node).\n        ngh[ELEMENT_CONTAINERS] ??= {};\n        ngh[ELEMENT_CONTAINERS][noOffsetIndex] = calcNumRootNodes(tView, lView, tNode.child);\n      } else if (tNode.type & (16 /* TNodeType.Projection */ | 128 /* TNodeType.LetDeclaration */)) {\n        // Current TNode represents an `<ng-content>` slot or `@let` declaration,\n        // thus it has no DOM elements associated with it, so the **next sibling**\n        // node would not be able to find an anchor. In this case, use full path instead.\n        let nextTNode = tNode.next;\n        // Skip over all `<ng-content>` slots and `@let` declarations in a row.\n        while (nextTNode !== null && nextTNode.type & (16 /* TNodeType.Projection */ | 128 /* TNodeType.LetDeclaration */)) {\n          nextTNode = nextTNode.next;\n        }\n        if (nextTNode && !isInSkipHydrationBlock(nextTNode)) {\n          // Handle a tNode after the `<ng-content>` slot.\n          appendSerializedNodePath(ngh, nextTNode, lView, i18nChildren);\n        }\n      } else if (tNode.type & 1 /* TNodeType.Text */) {\n        const rNode = unwrapRNode(lView[i]);\n        processTextNodeBeforeSerialization(context, rNode);\n      }\n    }\n    // Attach `jsaction` attribute to elements that have registered listeners,\n    // thus potentially having a need to do an event replay.\n    if (nativeElementsToEventTypes && tNode.type & 2 /* TNodeType.Element */) {\n      const nativeElement = unwrapRNode(lView[i]);\n      if (nativeElementsToEventTypes.has(nativeElement)) {\n        setJSActionAttributes(nativeElement, nativeElementsToEventTypes.get(nativeElement), parentDeferBlockId);\n      }\n    }\n  }\n  return ngh;\n}\n/**\n * Serializes node location in cases when it's needed, specifically:\n *\n *  1. If `tNode.projectionNext` is different from `tNode.next` - it means that\n *     the next `tNode` after projection is different from the one in the original\n *     template. Since hydration relies on `tNode.next`, this serialized info\n *     is required to help runtime code find the node at the correct location.\n *  2. In certain content projection-based use-cases, it's possible that only\n *     a content of a projected element is rendered. In this case, content nodes\n *     require an extra annotation, since runtime logic can't rely on parent-child\n *     connection to identify the location of a node.\n */\nfunction conditionallyAnnotateNodePath(ngh, tNode, lView, excludedParentNodes) {\n  if (isProjectionTNode(tNode)) {\n    // Do not annotate projection nodes (<ng-content />), since\n    // they don't have a corresponding DOM node representing them.\n    return;\n  }\n  // Handle case #1 described above.\n  if (tNode.projectionNext && tNode.projectionNext !== tNode.next && !isInSkipHydrationBlock(tNode.projectionNext)) {\n    appendSerializedNodePath(ngh, tNode.projectionNext, lView, excludedParentNodes);\n  }\n  // Handle case #2 described above.\n  // Note: we only do that for the first node (i.e. when `tNode.prev === null`),\n  // the rest of the nodes would rely on the current node location, so no extra\n  // annotation is needed.\n  if (tNode.prev === null && tNode.parent !== null && isDisconnectedNode(tNode.parent, lView) && !isDisconnectedNode(tNode, lView)) {\n    appendSerializedNodePath(ngh, tNode, lView, excludedParentNodes);\n  }\n}\n/**\n * Determines whether a component instance that is represented\n * by a given LView uses `ViewEncapsulation.ShadowDom`.\n */\nfunction componentUsesShadowDomEncapsulation(lView) {\n  const instance = lView[CONTEXT];\n  return instance?.constructor ? getComponentDef(instance.constructor)?.encapsulation === ViewEncapsulation$1.ShadowDom : false;\n}\n/**\n * Annotates component host element for hydration:\n * - by either adding the `ngh` attribute and collecting hydration-related info\n *   for the serialization and transferring to the client\n * - or by adding the `ngSkipHydration` attribute in case Angular detects that\n *   component contents is not compatible with hydration.\n *\n * @param element The Host element to be annotated\n * @param lView The associated LView\n * @param context The hydration context\n * @returns An index of serialized view from the transfer state object\n *          or `null` when a given component can not be serialized.\n */\nfunction annotateHostElementForHydration(element, lView, parentDeferBlockId, context) {\n  const renderer = lView[RENDERER];\n  if (hasI18n(lView) && !isI18nHydrationSupportEnabled() || componentUsesShadowDomEncapsulation(lView)) {\n    // Attach the skip hydration attribute if this component:\n    // - either has i18n blocks, since hydrating such blocks is not yet supported\n    // - or uses ShadowDom view encapsulation, since Domino doesn't support\n    //   shadow DOM, so we can not guarantee that client and server representations\n    //   would exactly match\n    renderer.setAttribute(element, SKIP_HYDRATION_ATTR_NAME, '');\n    return null;\n  } else {\n    const ngh = serializeLView(lView, parentDeferBlockId, context);\n    const index = context.serializedViewCollection.add(ngh);\n    renderer.setAttribute(element, NGH_ATTR_NAME, index.toString());\n    return index;\n  }\n}\n/**\n * Annotates defer block comment node for hydration:\n *\n * @param comment The Host element to be annotated\n * @param deferBlockId the id of the target defer block\n */\nfunction annotateDeferBlockAnchorForHydration(comment, deferBlockId) {\n  comment.textContent = `ngh=${deferBlockId}`;\n}\n/**\n * Physically inserts the comment nodes to ensure empty text nodes and adjacent\n * text node separators are preserved after server serialization of the DOM.\n * These get swapped back for empty text nodes or separators once hydration happens\n * on the client.\n *\n * @param corruptedTextNodes The Map of text nodes to be replaced with comments\n * @param doc The document\n */\nfunction insertCorruptedTextNodeMarkers(corruptedTextNodes, doc) {\n  for (const [textNode, marker] of corruptedTextNodes) {\n    textNode.after(doc.createComment(marker));\n  }\n}\n/**\n * Detects whether a given TNode represents a node that\n * is being content projected.\n */\nfunction isContentProjectedNode(tNode) {\n  let currentTNode = tNode;\n  while (currentTNode != null) {\n    // If we come across a component host node in parent nodes -\n    // this TNode is in the content projection section.\n    if (isComponentHost(currentTNode)) {\n      return true;\n    }\n    currentTNode = currentTNode.parent;\n  }\n  return false;\n}\n/**\n * Incremental hydration requires that any defer block root node\n * with interaction or hover triggers have all of their root nodes\n * trigger hydration with those events. So we need to make sure all\n * the root nodes of that block have the proper jsaction attribute\n * to ensure hydration is triggered, since the content is dehydrated\n */\nfunction annotateDeferBlockRootNodesWithJsAction(tDetails, rootNodes, parentDeferBlockId, context) {\n  const actionList = convertHydrateTriggersToJsAction(tDetails.hydrateTriggers);\n  for (let et of actionList) {\n    context.eventTypesToReplay.regular.add(et);\n  }\n  if (actionList.length > 0) {\n    const elementNodes = rootNodes.filter(rn => rn.nodeType === Node.ELEMENT_NODE);\n    for (let rNode of elementNodes) {\n      setJSActionAttributes(rNode, actionList, parentDeferBlockId);\n    }\n  }\n}\n\n/**\n * Indicates whether the hydration-related code was added,\n * prevents adding it multiple times.\n */\nlet isHydrationSupportEnabled = false;\n/**\n * Indicates whether the i18n-related code was added,\n * prevents adding it multiple times.\n *\n * Note: This merely controls whether the code is loaded,\n * while `setIsI18nHydrationSupportEnabled` determines\n * whether i18n blocks are serialized or hydrated.\n */\nlet isI18nHydrationRuntimeSupportEnabled = false;\n/**\n * Indicates whether the incremental hydration code was added,\n * prevents adding it multiple times.\n */\nlet isIncrementalHydrationRuntimeSupportEnabled = false;\n/**\n * Defines a period of time that Angular waits for the `ApplicationRef.isStable` to emit `true`.\n * If there was no event with the `true` value during this time, Angular reports a warning.\n */\nconst APPLICATION_IS_STABLE_TIMEOUT = 10_000;\n/**\n * Brings the necessary hydration code in tree-shakable manner.\n * The code is only present when the `provideClientHydration` is\n * invoked. Otherwise, this code is tree-shaken away during the\n * build optimization step.\n *\n * This technique allows us to swap implementations of methods so\n * tree shaking works appropriately when hydration is disabled or\n * enabled. It brings in the appropriate version of the method that\n * supports hydration only when enabled.\n */\nfunction enableHydrationRuntimeSupport() {\n  if (!isHydrationSupportEnabled) {\n    isHydrationSupportEnabled = true;\n    enableRetrieveHydrationInfoImpl();\n    enableLocateOrCreateElementNodeImpl();\n    enableLocateOrCreateTextNodeImpl();\n    enableLocateOrCreateElementContainerNodeImpl();\n    enableLocateOrCreateContainerAnchorImpl();\n    enableLocateOrCreateContainerRefImpl();\n    enableFindMatchingDehydratedViewImpl();\n    enableApplyRootElementTransformImpl();\n  }\n}\n/**\n * Brings the necessary i18n hydration code in tree-shakable manner.\n * Similar to `enableHydrationRuntimeSupport`, the code is only\n * present when `withI18nSupport` is invoked.\n */\nfunction enableI18nHydrationRuntimeSupport() {\n  if (!isI18nHydrationRuntimeSupportEnabled) {\n    isI18nHydrationRuntimeSupportEnabled = true;\n    enableLocateOrCreateI18nNodeImpl();\n    enablePrepareI18nBlockForHydrationImpl();\n    enableClaimDehydratedIcuCaseImpl();\n  }\n}\n/**\n * Brings the necessary incremental hydration code in tree-shakable manner.\n * Similar to `enableHydrationRuntimeSupport`, the code is only\n * present when `enableIncrementalHydrationRuntimeSupport` is invoked.\n */\nfunction enableIncrementalHydrationRuntimeSupport() {\n  if (!isIncrementalHydrationRuntimeSupportEnabled) {\n    isIncrementalHydrationRuntimeSupportEnabled = true;\n    enableRetrieveDeferBlockDataImpl();\n  }\n}\n/**\n * Outputs a message with hydration stats into a console.\n */\nfunction printHydrationStats(injector) {\n  const console = injector.get(Console);\n  const message = `Angular hydrated ${ngDevMode.hydratedComponents} component(s) ` + `and ${ngDevMode.hydratedNodes} node(s), ` + `${ngDevMode.componentsSkippedHydration} component(s) were skipped. ` + (isIncrementalHydrationEnabled(injector) ? `${ngDevMode.deferBlocksWithIncrementalHydration} defer block(s) were configured to use incremental hydration. ` : '') + `Learn more at https://angular.dev/guide/hydration.`;\n  // tslint:disable-next-line:no-console\n  console.log(message);\n}\n/**\n * Returns a Promise that is resolved when an application becomes stable.\n */\nfunction whenStableWithTimeout(appRef) {\n  const whenStablePromise = appRef.whenStable();\n  if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    const timeoutTime = APPLICATION_IS_STABLE_TIMEOUT;\n    const console = appRef.injector.get(Console);\n    const ngZone = appRef.injector.get(NgZone);\n    // The following call should not and does not prevent the app to become stable\n    // We cannot use RxJS timer here because the app would remain unstable.\n    // This also avoids an extra change detection cycle.\n    const timeoutId = ngZone.runOutsideAngular(() => {\n      return setTimeout(() => logWarningOnStableTimedout(timeoutTime, console), timeoutTime);\n    });\n    whenStablePromise.finally(() => clearTimeout(timeoutId));\n  }\n  return whenStablePromise;\n}\n/**\n * Defines a name of an attribute that is added to the <body> tag\n * in the `index.html` file in case a given route was configured\n * with `RenderMode.Client`. 'cm' is an abbreviation for \"Client Mode\".\n */\nconst CLIENT_RENDER_MODE_FLAG = 'ngcm';\n/**\n * Checks whether the `RenderMode.Client` was defined for the current route.\n */\nfunction isClientRenderModeEnabled() {\n  const doc = getDocument();\n  return (typeof ngServerMode === 'undefined' || !ngServerMode) && doc.body.hasAttribute(CLIENT_RENDER_MODE_FLAG);\n}\n/**\n * Returns a set of providers required to setup hydration support\n * for an application that is server side rendered. This function is\n * included into the `provideClientHydration` public API function from\n * the `platform-browser` package.\n *\n * The function sets up an internal flag that would be recognized during\n * the server side rendering time as well, so there is no need to\n * configure or change anything in NgUniversal to enable the feature.\n */\nfunction withDomHydration() {\n  const providers = [{\n    provide: IS_HYDRATION_DOM_REUSE_ENABLED,\n    useFactory: () => {\n      let isEnabled = true;\n      if (typeof ngServerMode === 'undefined' || !ngServerMode) {\n        // On the client, verify that the server response contains\n        // hydration annotations. Otherwise, keep hydration disabled.\n        const transferState = inject(TransferState, {\n          optional: true\n        });\n        isEnabled = !!transferState?.get(NGH_DATA_KEY, null);\n      }\n      if (isEnabled) {\n        performanceMarkFeature('NgHydration');\n      }\n      return isEnabled;\n    }\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      // i18n support is enabled by calling withI18nSupport(), but there's\n      // no way to turn it off (e.g. for tests), so we turn it off by default.\n      setIsI18nHydrationSupportEnabled(false);\n      if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n        // Since this function is used across both server and client,\n        // make sure that the runtime code is only added when invoked\n        // on the client (see the `enableHydrationRuntimeSupport` function\n        // call below).\n        return;\n      }\n      if (inject(IS_HYDRATION_DOM_REUSE_ENABLED)) {\n        verifySsrContentsIntegrity(getDocument());\n        enableHydrationRuntimeSupport();\n      } else if (typeof ngDevMode !== 'undefined' && ngDevMode && !isClientRenderModeEnabled()) {\n        const console = inject(Console);\n        const message = formatRuntimeError(-505 /* RuntimeErrorCode.MISSING_HYDRATION_ANNOTATIONS */, 'Angular hydration was requested on the client, but there was no ' + 'serialized information present in the server response, ' + 'thus hydration was not enabled. ' + 'Make sure the `provideClientHydration()` is included into the list ' + 'of providers in the server part of the application configuration.');\n        console.warn(message);\n      }\n    },\n    multi: true\n  }];\n  if (typeof ngServerMode === 'undefined' || !ngServerMode) {\n    providers.push({\n      provide: PRESERVE_HOST_CONTENT,\n      useFactory: () => {\n        // Preserve host element content only in a browser\n        // environment and when hydration is configured properly.\n        // On a server, an application is rendered from scratch,\n        // so the host content needs to be empty.\n        return inject(IS_HYDRATION_DOM_REUSE_ENABLED);\n      }\n    }, {\n      provide: APP_BOOTSTRAP_LISTENER,\n      useFactory: () => {\n        if (inject(IS_HYDRATION_DOM_REUSE_ENABLED)) {\n          const appRef = inject(ApplicationRef);\n          return () => {\n            // Wait until an app becomes stable and cleanup all views that\n            // were not claimed during the application bootstrap process.\n            // The timing is similar to when we start the serialization process\n            // on the server.\n            //\n            // Note: the cleanup task *MUST* be scheduled within the Angular zone in Zone apps\n            // to ensure that change detection is properly run afterward.\n            whenStableWithTimeout(appRef).then(() => {\n              // Note: we have to check whether the application is destroyed before\n              // performing other operations with the `injector`.\n              // The application may be destroyed **before** it becomes stable, so when\n              // the `whenStableWithTimeout` resolves, the injector might already be in\n              // a destroyed state. Thus, calling `injector.get` would throw an error\n              // indicating that the injector has already been destroyed.\n              if (appRef.destroyed) {\n                return;\n              }\n              cleanupDehydratedViews(appRef);\n              if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n                countBlocksSkippedByHydration(appRef.injector);\n                printHydrationStats(appRef.injector);\n              }\n            });\n          };\n        }\n        return () => {}; // noop\n      },\n      multi: true\n    });\n  }\n  return makeEnvironmentProviders(providers);\n}\n/**\n * Returns a set of providers required to setup support for i18n hydration.\n * Requires hydration to be enabled separately.\n */\nfunction withI18nSupport() {\n  return [{\n    provide: IS_I18N_HYDRATION_ENABLED,\n    useFactory: () => inject(IS_HYDRATION_DOM_REUSE_ENABLED)\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      if (inject(IS_HYDRATION_DOM_REUSE_ENABLED)) {\n        enableI18nHydrationRuntimeSupport();\n        setIsI18nHydrationSupportEnabled(true);\n        performanceMarkFeature('NgI18nHydration');\n      }\n    },\n    multi: true\n  }];\n}\n/**\n * Returns a set of providers required to setup support for incremental hydration.\n * Requires hydration to be enabled separately.\n * Enabling incremental hydration also enables event replay for the entire app.\n */\nfunction withIncrementalHydration() {\n  const providers = [withEventReplay(), {\n    provide: IS_INCREMENTAL_HYDRATION_ENABLED,\n    useValue: true\n  }, {\n    provide: DEHYDRATED_BLOCK_REGISTRY,\n    useClass: DehydratedBlockRegistry\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      enableIncrementalHydrationRuntimeSupport();\n      performanceMarkFeature('NgIncrementalHydration');\n    },\n    multi: true\n  }];\n  if (typeof ngServerMode === 'undefined' || !ngServerMode) {\n    providers.push({\n      provide: APP_BOOTSTRAP_LISTENER,\n      useFactory: () => {\n        const injector = inject(Injector);\n        const doc = getDocument();\n        return () => {\n          const deferBlockData = processBlockData(injector);\n          const commentsByBlockId = gatherDeferBlocksCommentNodes(doc, doc.body);\n          processAndInitTriggers(injector, deferBlockData, commentsByBlockId);\n          appendDeferBlocksToJSActionMap(doc, injector);\n        };\n      },\n      multi: true\n    });\n  }\n  return providers;\n}\n/**\n *\n * @param time The time in ms until the stable timedout warning message is logged\n */\nfunction logWarningOnStableTimedout(time, console) {\n  const message = `Angular hydration expected the ApplicationRef.isStable() to emit \\`true\\`, but it ` + `didn't happen within ${time}ms. Angular hydration logic depends on the application becoming stable ` + `as a signal to complete hydration process.`;\n  console.warn(formatRuntimeError(-506 /* RuntimeErrorCode.HYDRATION_STABLE_TIMEDOUT */, message));\n}\n\n/**\n * Transforms a value (typically a string) to a boolean.\n * Intended to be used as a transform function of an input.\n *\n *  @usageNotes\n *  ```ts\n *  status = input({ transform: booleanAttribute });\n *  ```\n * @param value Value to be transformed.\n *\n * @publicApi\n */\nfunction booleanAttribute(value) {\n  return typeof value === 'boolean' ? value : value != null && value !== 'false';\n}\n/**\n * Transforms a value (typically a string) to a number.\n * Intended to be used as a transform function of an input.\n * @param value Value to be transformed.\n * @param fallbackValue Value to use if the provided value can't be parsed as a number.\n *\n *  @usageNotes\n *  ```ts\n *  status = input({ transform: numberAttribute });\n *  ```\n *\n * @publicApi\n */\nfunction numberAttribute(value, fallbackValue = NaN) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  const isNumberValue = !isNaN(parseFloat(value)) && !isNaN(Number(value));\n  return isNumberValue ? Number(value) : fallbackValue;\n}\nconst PERFORMANCE_MARK_PREFIX = '🅰️';\nlet enablePerfLogging = false;\n/**\n * Function that will start measuring against the performance API\n * Should be used in pair with stopMeasuring\n */\nfunction startMeasuring(label) {\n  if (!enablePerfLogging) {\n    return;\n  }\n  const {\n    startLabel\n  } = labels(label);\n  /* tslint:disable:ban */\n  performance.mark(startLabel);\n  /* tslint:enable:ban */\n}\n/**\n * Function that will stop measuring against the performance API\n * Should be used in pair with startMeasuring\n */\nfunction stopMeasuring(label) {\n  if (!enablePerfLogging) {\n    return;\n  }\n  const {\n    startLabel,\n    labelName,\n    endLabel\n  } = labels(label);\n  /* tslint:disable:ban */\n  performance.mark(endLabel);\n  performance.measure(labelName, startLabel, endLabel);\n  performance.clearMarks(startLabel);\n  performance.clearMarks(endLabel);\n  /* tslint:enable:ban */\n}\nfunction labels(label) {\n  const labelName = `${PERFORMANCE_MARK_PREFIX}:${label}`;\n  return {\n    labelName,\n    startLabel: `start:${labelName}`,\n    endLabel: `end:${labelName}`\n  };\n}\nlet warningLogged = false;\n/**\n * This enables an internal performance profiler\n *\n * It should not be imported in application code\n */\nfunction enableProfiling() {\n  if (!warningLogged && (typeof performance === 'undefined' || !performance.mark || !performance.measure)) {\n    warningLogged = true;\n    console.warn('Performance API is not supported on this platform');\n    return;\n  }\n  enablePerfLogging = true;\n}\nfunction disableProfiling() {\n  enablePerfLogging = false;\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Gets the class name of the closest component to a node.\n * Warning! this function will return minified names if the name of the component is minified. The\n * consumer of the function is responsible for resolving the minified name to its original name.\n * @param node Node from which to start the search.\n */\nfunction getClosestComponentName(node) {\n  let currentNode = node;\n  while (currentNode) {\n    const lView = readPatchedLView(currentNode);\n    if (lView !== null) {\n      for (let i = HEADER_OFFSET; i < lView.length; i++) {\n        const current = lView[i];\n        if (!isLView(current) && !isLContainer(current) || current[HOST] !== currentNode) {\n          continue;\n        }\n        const tView = lView[TVIEW];\n        const tNode = getTNode(tView, i);\n        if (isComponentHost(tNode)) {\n          const def = tView.data[tNode.directiveStart + tNode.componentOffset];\n          const name = def.debugInfo?.className || def.type.name;\n          // Note: the name may be an empty string if the class name is\n          // dropped due to minification. In such cases keep going up the tree.\n          if (name) {\n            return name;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    currentNode = currentNode.parentNode;\n  }\n  return null;\n}\n\n/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n/**\n * Utility function used during template type checking to assert that a value is of a certain type.\n * @codeGenApi\n */\nfunction ɵassertType(value) {}\n\n/**\n * Compiles a partial directive declaration object into a full directive definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareDirective(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'directive',\n    type: decl.type\n  });\n  return compiler.compileDirectiveDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);\n}\n/**\n * Evaluates the class metadata declaration.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareClassMetadata(decl) {\n  setClassMetadata(decl.type, decl.decorators, decl.ctorParameters ?? null, decl.propDecorators ?? null);\n}\n/**\n * Evaluates the class metadata of a component that contains deferred blocks.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareClassMetadataAsync(decl) {\n  setClassMetadataAsync(decl.type, decl.resolveDeferredDeps, (...types) => {\n    const meta = decl.resolveMetadata(...types);\n    setClassMetadata(decl.type, meta.decorators, meta.ctorParameters, meta.propDecorators);\n  });\n}\n/**\n * Compiles a partial component declaration object into a full component definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareComponent(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'component',\n    type: decl.type\n  });\n  return compiler.compileComponentDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵcmp.js`, decl);\n}\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareFactory(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: getFactoryKind(decl.target),\n    type: decl.type\n  });\n  return compiler.compileFactoryDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);\n}\nfunction getFactoryKind(target) {\n  switch (target) {\n    case FactoryTarget.Directive:\n      return 'directive';\n    case FactoryTarget.Component:\n      return 'component';\n    case FactoryTarget.Injectable:\n      return 'injectable';\n    case FactoryTarget.Pipe:\n      return 'pipe';\n    case FactoryTarget.NgModule:\n      return 'NgModule';\n  }\n}\n/**\n * Compiles a partial injectable declaration object into a full injectable definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareInjectable(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'injectable',\n    type: decl.type\n  });\n  return compiler.compileInjectableDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵprov.js`, decl);\n}\n/**\n * Compiles a partial injector declaration object into a full injector definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareInjector(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'NgModule',\n    type: decl.type\n  });\n  return compiler.compileInjectorDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵinj.js`, decl);\n}\n/**\n * Compiles a partial NgModule declaration object into a full NgModule definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareNgModule(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'NgModule',\n    type: decl.type\n  });\n  return compiler.compileNgModuleDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵmod.js`, decl);\n}\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclarePipe(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'pipe',\n    type: decl.type\n  });\n  return compiler.compilePipeDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵpipe.js`, decl);\n}\n\n/**\n * Retrieves transfer state data from the DOM using the provided injector to get APP_ID.\n * This approach works by getting the APP_ID from the injector and then finding the\n * corresponding transfer state script tag. Internal framework keys used for hydration\n * are stripped from the result.\n *\n * @param injector - The injector to use for getting APP_ID\n * @returns The transfer state data as an object, or empty object if not available\n */\nfunction getTransferState(injector) {\n  const doc = getDocument();\n  const appId = injector.get(APP_ID);\n  const transferState = retrieveTransferredState(doc, appId);\n  // Strip internal keys\n  const filteredEntries = {};\n  for (const [key, value] of Object.entries(transferState)) {\n    if (!isInternalHydrationTransferStateKey(key)) {\n      filteredEntries[key] = value;\n    }\n  }\n  return filteredEntries;\n}\nconst NOT_SET = /* @__PURE__ */Symbol('NOT_SET');\nconst EMPTY_CLEANUP_SET = /* @__PURE__ */new Set();\nconst AFTER_RENDER_PHASE_EFFECT_NODE = /* @__PURE__ */(() => ({\n  ...SIGNAL_NODE,\n  consumerIsAlwaysLive: true,\n  consumerAllowSignalWrites: true,\n  value: NOT_SET,\n  cleanup: null,\n  /** Called when the effect becomes dirty */\n  consumerMarkedDirty() {\n    if (this.sequence.impl.executing) {\n      // If hooks are in the middle of executing, then it matters whether this node has yet been\n      // executed within its sequence. If not, then we don't want to notify the scheduler since\n      // this node will be reached naturally.\n      if (this.sequence.lastPhase === null || this.sequence.lastPhase < this.phase) {\n        return;\n      }\n      // If during the execution of a later phase an earlier phase became dirty, then we should not\n      // run any further phases until the earlier one reruns.\n      this.sequence.erroredOrDestroyed = true;\n    }\n    // Either hooks are not running, or we're marking a node dirty that has already run within its\n    // sequence.\n    this.sequence.scheduler.notify(7 /* NotificationSource.RenderHook */);\n  },\n  phaseFn(previousValue) {\n    this.sequence.lastPhase = this.phase;\n    if (!this.dirty) {\n      return this.signal;\n    }\n    this.dirty = false;\n    if (this.value !== NOT_SET && !consumerPollProducersForChange(this)) {\n      // None of our producers report a change since the last time they were read, so no\n      // recomputation of our value is necessary.\n      return this.signal;\n    }\n    // Run any needed cleanup functions.\n    try {\n      for (const cleanupFn of this.cleanup ?? EMPTY_CLEANUP_SET) {\n        cleanupFn();\n      }\n    } finally {\n      // Even if a cleanup function errors, ensure it's cleared.\n      this.cleanup?.clear();\n    }\n    // Prepare to call the user's effect callback. If there was a previous phase, then it gave us\n    // its value as a `Signal`, otherwise `previousValue` will be `undefined`.\n    const args = [];\n    if (previousValue !== undefined) {\n      args.push(previousValue);\n    }\n    args.push(this.registerCleanupFn);\n    // Call the user's callback in our reactive context.\n    const prevConsumer = consumerBeforeComputation(this);\n    let newValue;\n    try {\n      newValue = this.userFn.apply(null, args);\n    } finally {\n      consumerAfterComputation(this, prevConsumer);\n    }\n    if (this.value === NOT_SET || !this.equal(this.value, newValue)) {\n      this.value = newValue;\n      this.version++;\n    }\n    return this.signal;\n  }\n}))();\n/**\n * An `AfterRenderSequence` that manages an `afterRenderEffect`'s phase effects.\n */\nclass AfterRenderEffectSequence extends AfterRenderSequence {\n  scheduler;\n  /**\n   * While this sequence is executing, this tracks the last phase which was called by the\n   * `afterRender` machinery.\n   *\n   * When a phase effect is marked dirty, this is used to determine whether it's already run or not.\n   */\n  lastPhase = null;\n  /**\n   * The reactive nodes for each phase, if a phase effect is defined for that phase.\n   *\n   * These are initialized to `undefined` but set in the constructor.\n   */\n  nodes = [undefined, undefined, undefined, undefined];\n  constructor(impl, effectHooks, view, scheduler, destroyRef, snapshot = null) {\n    // Note that we also initialize the underlying `AfterRenderSequence` hooks to `undefined` and\n    // populate them as we create reactive nodes below.\n    super(impl, [undefined, undefined, undefined, undefined], view, false, destroyRef, snapshot);\n    this.scheduler = scheduler;\n    // Setup a reactive node for each phase.\n    for (const phase of AFTER_RENDER_PHASES) {\n      const effectHook = effectHooks[phase];\n      if (effectHook === undefined) {\n        continue;\n      }\n      const node = Object.create(AFTER_RENDER_PHASE_EFFECT_NODE);\n      node.sequence = this;\n      node.phase = phase;\n      node.userFn = effectHook;\n      node.dirty = true;\n      node.signal = () => {\n        producerAccessed(node);\n        return node.value;\n      };\n      node.signal[SIGNAL] = node;\n      node.registerCleanupFn = fn => (node.cleanup ??= new Set()).add(fn);\n      this.nodes[phase] = node;\n      // Install the upstream hook which runs the `phaseFn` for this phase.\n      this.hooks[phase] = value => node.phaseFn(value);\n    }\n  }\n  afterRun() {\n    super.afterRun();\n    // We're done running this sequence, so reset `lastPhase`.\n    this.lastPhase = null;\n  }\n  destroy() {\n    super.destroy();\n    // Run the cleanup functions for each node.\n    for (const node of this.nodes) {\n      for (const fn of node?.cleanup ?? EMPTY_CLEANUP_SET) {\n        fn();\n      }\n    }\n  }\n}\n/**\n * @publicApi\n */\nfunction afterRenderEffect(callbackOrSpec, options) {\n  ngDevMode && assertNotInReactiveContext(afterRenderEffect, 'Call `afterRenderEffect` outside of a reactive context. For example, create the render ' + 'effect inside the component constructor`.');\n  if (ngDevMode && !options?.injector) {\n    assertInInjectionContext(afterRenderEffect);\n  }\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return NOOP_AFTER_RENDER_REF;\n  }\n  const injector = options?.injector ?? inject(Injector);\n  const scheduler = injector.get(ChangeDetectionScheduler);\n  const manager = injector.get(AfterRenderManager);\n  const tracing = injector.get(TracingService, null, {\n    optional: true\n  });\n  manager.impl ??= injector.get(AfterRenderImpl);\n  let spec = callbackOrSpec;\n  if (typeof spec === 'function') {\n    spec = {\n      mixedReadWrite: callbackOrSpec\n    };\n  }\n  const viewContext = injector.get(ViewContext, null, {\n    optional: true\n  });\n  const sequence = new AfterRenderEffectSequence(manager.impl, [spec.earlyRead, spec.write, spec.mixedReadWrite, spec.read], viewContext?.view, scheduler, injector.get(DestroyRef), tracing?.snapshot(null));\n  manager.impl.register(sequence);\n  return sequence;\n}\n\n/**\n * Creates a `ComponentRef` instance based on provided component type and a set of options.\n *\n * @usageNotes\n *\n * The example below demonstrates how the `createComponent` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   template: `Hello {{ name }}!`\n * })\n * class HelloComponent {\n *   name = 'Angular';\n * }\n *\n * @Component({\n *   standalone: true,\n *   template: `<div id=\"hello-component-host\"></div>`\n * })\n * class RootComponent {}\n *\n * // Bootstrap an application.\n * const applicationRef = await bootstrapApplication(RootComponent);\n *\n * // Locate a DOM node that would be used as a host.\n * const hostElement = document.getElementById('hello-component-host');\n *\n * // Get an `EnvironmentInjector` instance from the `ApplicationRef`.\n * const environmentInjector = applicationRef.injector;\n *\n * // We can now create a `ComponentRef` instance.\n * const componentRef = createComponent(HelloComponent, {hostElement, environmentInjector});\n *\n * // Last step is to register the newly created ref using the `ApplicationRef` instance\n * // to include the component view into change detection cycles.\n * applicationRef.attachView(componentRef.hostView);\n * componentRef.changeDetectorRef.detectChanges();\n * ```\n *\n * @param component Component class reference.\n * @param options Set of options to use:\n *  * `environmentInjector`: An `EnvironmentInjector` instance to be used for the component.\n *  * `hostElement` (optional): A DOM node that should act as a host node for the component. If not\n * provided, Angular creates one based on the tag name used in the component selector (and falls\n * back to using `div` if selector doesn't have tag name info).\n *  * `elementInjector` (optional): An `ElementInjector` instance, see additional info about it\n * [here](guide/di/hierarchical-dependency-injection#elementinjector).\n *  * `projectableNodes` (optional): A list of DOM nodes that should be projected through\n * [`<ng-content>`](api/core/ng-content) of the new component instance, e.g.,\n * `[[element1, element2]]`: projects `element1` and `element2` into the same `<ng-content>`.\n * `[[element1, element2], [element3]]`: projects `element1` and `element2` into one `<ng-content>`,\n * and `element3` into a separate `<ng-content>`.\n *  * `directives` (optional): Directives that should be applied to the component.\n *  * `binding` (optional): Bindings to apply to the root component.\n * @returns ComponentRef instance that represents a given Component.\n *\n * @publicApi\n */\nfunction createComponent(component, options) {\n  ngDevMode && assertComponentDef(component);\n  const componentDef = getComponentDef(component);\n  const elementInjector = options.elementInjector || getNullInjector();\n  const factory = new ComponentFactory(componentDef);\n  return factory.create(elementInjector, options.projectableNodes, options.hostElement, options.environmentInjector, options.directives, options.bindings);\n}\n/**\n * Creates an object that allows to retrieve component metadata.\n *\n * @usageNotes\n *\n * The example below demonstrates how to use the function and how the fields\n * of the returned object map to the component metadata.\n *\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   selector: 'foo-component',\n *   template: `\n *     <ng-content></ng-content>\n *     <ng-content select=\"content-selector-a\"></ng-content>\n *   `,\n * })\n * class FooComponent {\n *   @Input('inputName') inputPropName: string;\n *   @Output('outputName') outputPropName = new EventEmitter<void>();\n * }\n *\n * const mirror = reflectComponentType(FooComponent);\n * expect(mirror.type).toBe(FooComponent);\n * expect(mirror.selector).toBe('foo-component');\n * expect(mirror.isStandalone).toBe(true);\n * expect(mirror.inputs).toEqual([{propName: 'inputName', templateName: 'inputPropName'}]);\n * expect(mirror.outputs).toEqual([{propName: 'outputName', templateName: 'outputPropName'}]);\n * expect(mirror.ngContentSelectors).toEqual([\n *   '*',                 // first `<ng-content>` in a template, the selector defaults to `*`\n *   'content-selector-a' // second `<ng-content>` in a template\n * ]);\n * ```\n *\n * @param component Component class reference.\n * @returns An object that allows to retrieve component metadata.\n *\n * @publicApi\n */\nfunction reflectComponentType(component) {\n  const componentDef = getComponentDef(component);\n  if (!componentDef) return null;\n  const factory = new ComponentFactory(componentDef);\n  return {\n    get selector() {\n      return factory.selector;\n    },\n    get type() {\n      return factory.componentType;\n    },\n    get inputs() {\n      return factory.inputs;\n    },\n    get outputs() {\n      return factory.outputs;\n    },\n    get ngContentSelectors() {\n      return factory.ngContentSelectors;\n    },\n    get isStandalone() {\n      return componentDef.standalone;\n    },\n    get isSignal() {\n      return componentDef.signals;\n    }\n  };\n}\n\n/**\n * Merge multiple application configurations from left to right.\n *\n * @param configs Two or more configurations to be merged.\n * @returns A merged [ApplicationConfig](api/core/ApplicationConfig).\n *\n * @publicApi\n */\nfunction mergeApplicationConfig(...configs) {\n  return configs.reduce((prev, curr) => {\n    return Object.assign(prev, curr, {\n      providers: [...prev.providers, ...curr.providers]\n    });\n  }, {\n    providers: []\n  });\n}\n\n/**\n * Injection token representing the current HTTP request object.\n *\n * Use this token to access the current request when handling server-side\n * rendering (SSR).\n *\n * @remarks\n * This token may be `null` in the following scenarios:\n *\n * * During the build processes.\n * * When the application is rendered in the browser (client-side rendering).\n * * When performing static site generation (SSG).\n * * During route extraction in development (at the time of the request).\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Request `Request` on MDN}\n *\n * @publicApi\n */\nconst REQUEST = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'REQUEST' : '', {\n  providedIn: 'platform',\n  factory: () => null\n});\n/**\n * Injection token for response initialization options.\n *\n * Use this token to provide response options for configuring or initializing\n * HTTP responses in server-side rendering or API endpoints.\n *\n * @remarks\n * This token may be `null` in the following scenarios:\n *\n * * During the build processes.\n * * When the application is rendered in the browser (client-side rendering).\n * * When performing static site generation (SSG).\n * * During route extraction in development (at the time of the request).\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response `ResponseInit` on MDN}\n *\n * @publicApi\n */\nconst RESPONSE_INIT = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'RESPONSE_INIT' : '', {\n  providedIn: 'platform',\n  factory: () => null\n});\n/**\n * Injection token for additional request context.\n *\n * Use this token to pass custom metadata or context related to the current request in server-side rendering.\n *\n * @remarks\n * This token is only available during server-side rendering and will be `null` in other contexts.\n *\n * @publicApi\n */\nconst REQUEST_CONTEXT = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'REQUEST_CONTEXT' : '', {\n  providedIn: 'platform',\n  factory: () => null\n});\nexport { APP_BOOTSTRAP_LISTENER, APP_ID, ApplicationInitStatus, ApplicationModule, ApplicationRef, COMPILER_OPTIONS, ChangeDetectorRef, ContentChild, ContentChildren, DefaultIterableDiffer, DestroyRef, ENVIRONMENT_INITIALIZER, EmbeddedViewRef, ErrorHandler, HOST_TAG_NAME, HostAttributeToken, Injectable, InjectionToken, Injector, IterableDiffers, KeyValueDiffers, LOCALE_ID, NgModule, NgZone, Optional, OutputEmitterRef, PLATFORM_INITIALIZER, PlatformRef, Query, REQUEST, REQUEST_CONTEXT, RESPONSE_INIT, SkipSelf, TransferState, VERSION, Version, ViewChild, ViewChildren, ViewEncapsulation$1 as ViewEncapsulation, ViewRef, afterRenderEffect, assertInInjectionContext, assertNotInReactiveContext, assertPlatform, booleanAttribute, contentChild, contentChildren, createComponent, createPlatform, createPlatformFactory, destroyPlatform, enableProdMode, getModuleFactory, getNgModuleById, getPlatform, inject, input, isDevMode, makeEnvironmentProviders, mergeApplicationConfig, model, numberAttribute, output, platformCore, provideCheckNoChangesConfig, provideEnvironmentInitializer, providePlatformInitializer, reflectComponentType, runInInjectionContext, viewChild, viewChildren, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, AfterRenderManager as ɵAfterRenderManager, CLIENT_RENDER_MODE_FLAG as ɵCLIENT_RENDER_MODE_FLAG, CONTAINER_HEADER_OFFSET as ɵCONTAINER_HEADER_OFFSET, ChangeDetectionScheduler as ɵChangeDetectionScheduler, ChangeDetectionSchedulerImpl as ɵChangeDetectionSchedulerImpl, Console as ɵConsole, DEFAULT_LOCALE_ID as ɵDEFAULT_LOCALE_ID, DEHYDRATED_BLOCK_REGISTRY as ɵDEHYDRATED_BLOCK_REGISTRY, ENABLE_ROOT_COMPONENT_BOOTSTRAP as ɵENABLE_ROOT_COMPONENT_BOOTSTRAP, IMAGE_CONFIG as ɵIMAGE_CONFIG, INJECTOR_SCOPE as ɵINJECTOR_SCOPE, ɵINPUT_SIGNAL_BRAND_WRITE_TYPE, INTERNAL_APPLICATION_ERROR_HANDLER as ɵINTERNAL_APPLICATION_ERROR_HANDLER, IS_HYDRATION_DOM_REUSE_ENABLED as ɵIS_HYDRATION_DOM_REUSE_ENABLED, IS_INCREMENTAL_HYDRATION_ENABLED as ɵIS_INCREMENTAL_HYDRATION_ENABLED, JSACTION_BLOCK_ELEMENT_MAP as ɵJSACTION_BLOCK_ELEMENT_MAP, JSACTION_EVENT_CONTRACT as ɵJSACTION_EVENT_CONTRACT, NgModuleFactory as ɵNgModuleFactory, PERFORMANCE_MARK_PREFIX as ɵPERFORMANCE_MARK_PREFIX, PROVIDED_NG_ZONE as ɵPROVIDED_NG_ZONE, PendingTasksInternal as ɵPendingTasksInternal, ComponentFactory as ɵRender3ComponentFactory, RuntimeError as ɵRuntimeError, SIGNAL as ɵSIGNAL, TracingService as ɵTracingService, ViewRef$1 as ɵViewRef, annotateForHydration as ɵannotateForHydration, ɵassertType, compileNgModuleFactory as ɵcompileNgModuleFactory, createOrReusePlatformInjector as ɵcreateOrReusePlatformInjector, defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers, disableProfiling as ɵdisableProfiling, enableProfiling as ɵenableProfiling, formatRuntimeError as ɵformatRuntimeError, getClosestComponentName as ɵgetClosestComponentName, getComponentDef as ɵgetComponentDef, getDocument as ɵgetDocument, getTransferState as ɵgetTransferState, _global as ɵglobal, injectChangeDetectorRef as ɵinjectChangeDetectorRef, internalCreateApplication as ɵinternalCreateApplication, internalProvideZoneChangeDetection as ɵinternalProvideZoneChangeDetection, isPromise as ɵisPromise, performanceMarkFeature as ɵperformanceMarkFeature, resolveComponentResources as ɵresolveComponentResources, setClassMetadata as ɵsetClassMetadata, setClassMetadataAsync as ɵsetClassMetadataAsync, setLocaleId as ɵsetLocaleId, startMeasuring as ɵstartMeasuring, stopMeasuring as ɵstopMeasuring, stringify as ɵstringify, withDomHydration as ɵwithDomHydration, withEventReplay as ɵwithEventReplay, withI18nSupport as ɵwithI18nSupport, withIncrementalHydration as ɵwithIncrementalHydration, FactoryTarget as ɵɵFactoryTarget, __defineInjectable as ɵɵdefineInjectable, __defineInjector as ɵɵdefineInjector, __defineNgModule as ɵɵdefineNgModule, __inject as ɵɵinject, __injectAttribute as ɵɵinjectAttribute, ɵɵngDeclareClassMetadata, ɵɵngDeclareClassMetadataAsync, ɵɵngDeclareComponent, ɵɵngDeclareDirective, ɵɵngDeclareFactory, ɵɵngDeclareInjectable, ɵɵngDeclareInjector, ɵɵngDeclareNgModule, ɵɵngDeclarePipe };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { inject, Injectable, InjectionToken, DOCUMENT, Optional, Inject, ɵɵinject as __inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nlet _DOM = null;\nfunction getDOM() {\n  return _DOM;\n}\nfunction setRootDomAdapter(adapter) {\n  _DOM ??= adapter;\n}\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nclass DomAdapter {}\n\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be\n * platform-agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that Angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-server` provides\n * one suitable for use with server-side rendering.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM APIs like pushState, popState, etc.\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link /api/router/Router Router} in order to navigate between routes. Since all interactions between\n * {@link /api/router/Router Router} /\n * {@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`\n * class, they are all platform-agnostic.\n *\n * @publicApi\n */\nlet PlatformLocation = /*#__PURE__*/(() => {\n  class PlatformLocation {\n    historyGo(relativePosition) {\n      throw new Error(ngDevMode ? 'Not implemented' : '');\n    }\n    static ɵfac = function PlatformLocation_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PlatformLocation)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: PlatformLocation,\n      factory: () => (() => inject(BrowserPlatformLocation))(),\n      providedIn: 'platform'\n    });\n  }\n  return PlatformLocation;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Indicates when a location is initialized.\n *\n * @publicApi\n */\nconst LOCATION_INITIALIZED = /*#__PURE__*/new InjectionToken(ngDevMode ? 'Location Initialized' : '');\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * @publicApi\n */\nlet BrowserPlatformLocation = /*#__PURE__*/(() => {\n  class BrowserPlatformLocation extends PlatformLocation {\n    _location;\n    _history;\n    _doc = inject(DOCUMENT);\n    constructor() {\n      super();\n      this._location = window.location;\n      this._history = window.history;\n    }\n    getBaseHrefFromDOM() {\n      return getDOM().getBaseHref(this._doc);\n    }\n    onPopState(fn) {\n      const window = getDOM().getGlobalEventTarget(this._doc, 'window');\n      window.addEventListener('popstate', fn, false);\n      return () => window.removeEventListener('popstate', fn);\n    }\n    onHashChange(fn) {\n      const window = getDOM().getGlobalEventTarget(this._doc, 'window');\n      window.addEventListener('hashchange', fn, false);\n      return () => window.removeEventListener('hashchange', fn);\n    }\n    get href() {\n      return this._location.href;\n    }\n    get protocol() {\n      return this._location.protocol;\n    }\n    get hostname() {\n      return this._location.hostname;\n    }\n    get port() {\n      return this._location.port;\n    }\n    get pathname() {\n      return this._location.pathname;\n    }\n    get search() {\n      return this._location.search;\n    }\n    get hash() {\n      return this._location.hash;\n    }\n    set pathname(newPath) {\n      this._location.pathname = newPath;\n    }\n    pushState(state, title, url) {\n      this._history.pushState(state, title, url);\n    }\n    replaceState(state, title, url) {\n      this._history.replaceState(state, title, url);\n    }\n    forward() {\n      this._history.forward();\n    }\n    back() {\n      this._history.back();\n    }\n    historyGo(relativePosition = 0) {\n      this._history.go(relativePosition);\n    }\n    getState() {\n      return this._history.state;\n    }\n    static ɵfac = function BrowserPlatformLocation_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BrowserPlatformLocation)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: BrowserPlatformLocation,\n      factory: () => (() => new BrowserPlatformLocation())(),\n      providedIn: 'platform'\n    });\n  }\n  return BrowserPlatformLocation;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Joins two parts of a URL with a slash if needed.\n *\n * @param start  URL string\n * @param end    URL string\n *\n *\n * @returns The joined URL string.\n */\nfunction joinWithSlash(start, end) {\n  // If `start` is an empty string, return `end` as the result.\n  if (!start) return end;\n  // If `end` is an empty string, return `start` as the result.\n  if (!end) return start;\n  // If `start` ends with a slash, remove the leading slash from `end`.\n  if (start.endsWith('/')) {\n    return end.startsWith('/') ? start + end.slice(1) : start + end;\n  }\n  // If `start` doesn't end with a slash, add one if `end` doesn't start with a slash.\n  return end.startsWith('/') ? start + end : `${start}/${end}`;\n}\n/**\n * Removes a trailing slash from a URL string if needed.\n * Looks for the first occurrence of either `#`, `?`, or the end of the\n * line as `/` characters and removes the trailing slash if one exists.\n *\n * @param url URL string.\n *\n * @returns The URL string, modified if needed.\n */\nfunction stripTrailingSlash(url) {\n  // Find the index of the first occurrence of `#`, `?`, or the end of the string.\n  // This marks the start of the query string, fragment, or the end of the URL path.\n  const pathEndIdx = url.search(/#|\\?|$/);\n  // Check if the character before `pathEndIdx` is a trailing slash.\n  // If it is, remove the trailing slash and return the modified URL.\n  // Otherwise, return the URL as is.\n  return url[pathEndIdx - 1] === '/' ? url.slice(0, pathEndIdx - 1) + url.slice(pathEndIdx) : url;\n}\n/**\n * Normalizes URL parameters by prepending with `?` if needed.\n *\n * @param  params String of URL parameters.\n *\n * @returns The normalized URL parameters string.\n */\nfunction normalizeQueryParams(params) {\n  return params && params[0] !== '?' ? `?${params}` : params;\n}\n\n/**\n * Enables the `Location` service to read route state from the browser's URL.\n * Angular provides two strategies:\n * `HashLocationStrategy` and `PathLocationStrategy`.\n *\n * Applications should use the `Router` or `Location` services to\n * interact with application route state.\n *\n * For instance, `HashLocationStrategy` produces URLs like\n * <code class=\"no-auto-link\">http://example.com/#/foo</code>,\n * and `PathLocationStrategy` produces\n * <code class=\"no-auto-link\">http://example.com/foo</code> as an equivalent URL.\n *\n * See these two classes for more.\n *\n * @publicApi\n */\nlet LocationStrategy = /*#__PURE__*/(() => {\n  class LocationStrategy {\n    historyGo(relativePosition) {\n      throw new Error(ngDevMode ? 'Not implemented' : '');\n    }\n    static ɵfac = function LocationStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LocationStrategy)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: LocationStrategy,\n      factory: () => (() => inject(PathLocationStrategy))(),\n      providedIn: 'root'\n    });\n  }\n  return LocationStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A predefined DI token for the base href\n * to be used with the `PathLocationStrategy`.\n * The base href is the URL prefix that should be preserved when generating\n * and recognizing URLs.\n *\n * @usageNotes\n *\n * The following example shows how to use this token to configure the root app injector\n * with a base href value, so that the DI framework can supply the dependency anywhere in the app.\n *\n * ```ts\n * import {NgModule} from '@angular/core';\n * import {APP_BASE_HREF} from '@angular/common';\n *\n * @NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nconst APP_BASE_HREF = /*#__PURE__*/new InjectionToken(ngDevMode ? 'appBaseHref' : '');\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n *\n * If you're using `PathLocationStrategy`, you may provide a {@link APP_BASE_HREF}\n * or add a `<base href>` element to the document to override the default.\n *\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app/'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`. To ensure all relative URIs resolve correctly,\n * the `<base href>` and/or `APP_BASE_HREF` should end with a `/`.\n *\n * Similarly, if you add `<base href='/my/app/'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * Note that when using `PathLocationStrategy`, neither the query nor\n * the fragment in the `<base href>` will be preserved, as outlined\n * by the [RFC](https://tools.ietf.org/html/rfc3986#section-5.2.2).\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\nlet PathLocationStrategy = /*#__PURE__*/(() => {\n  class PathLocationStrategy extends LocationStrategy {\n    _platformLocation;\n    _baseHref;\n    _removeListenerFns = [];\n    constructor(_platformLocation, href) {\n      super();\n      this._platformLocation = _platformLocation;\n      this._baseHref = href ?? this._platformLocation.getBaseHrefFromDOM() ?? inject(DOCUMENT).location?.origin ?? '';\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      while (this._removeListenerFns.length) {\n        this._removeListenerFns.pop()();\n      }\n    }\n    onPopState(fn) {\n      this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));\n    }\n    getBaseHref() {\n      return this._baseHref;\n    }\n    prepareExternalUrl(internal) {\n      return joinWithSlash(this._baseHref, internal);\n    }\n    path(includeHash = false) {\n      const pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);\n      const hash = this._platformLocation.hash;\n      return hash && includeHash ? `${pathname}${hash}` : pathname;\n    }\n    pushState(state, title, url, queryParams) {\n      const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));\n      this._platformLocation.pushState(state, title, externalUrl);\n    }\n    replaceState(state, title, url, queryParams) {\n      const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));\n      this._platformLocation.replaceState(state, title, externalUrl);\n    }\n    forward() {\n      this._platformLocation.forward();\n    }\n    back() {\n      this._platformLocation.back();\n    }\n    getState() {\n      return this._platformLocation.getState();\n    }\n    historyGo(relativePosition = 0) {\n      this._platformLocation.historyGo?.(relativePosition);\n    }\n    static ɵfac = function PathLocationStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PathLocationStrategy)(i0.ɵɵinject(PlatformLocation), i0.ɵɵinject(APP_BASE_HREF, 8));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: PathLocationStrategy,\n      factory: PathLocationStrategy.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return PathLocationStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on the `LocationStrategy` used, `Location` persists\n * to the URL's path or the URL's hash segment.\n *\n * @usageNotes\n *\n * It's better to use the `Router.navigate()` service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\nlet Location = /*#__PURE__*/(() => {\n  class Location {\n    /** @internal */\n    _subject = new Subject();\n    /** @internal */\n    _basePath;\n    /** @internal */\n    _locationStrategy;\n    /** @internal */\n    _urlChangeListeners = [];\n    /** @internal */\n    _urlChangeSubscription = null;\n    constructor(locationStrategy) {\n      this._locationStrategy = locationStrategy;\n      const baseHref = this._locationStrategy.getBaseHref();\n      // Note: This class's interaction with base HREF does not fully follow the rules\n      // outlined in the spec https://www.freesoft.org/CIE/RFC/1808/18.htm.\n      // Instead of trying to fix individual bugs with more and more code, we should\n      // investigate using the URL constructor and providing the base as a second\n      // argument.\n      // https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#parameters\n      this._basePath = _stripOrigin(stripTrailingSlash(_stripIndexHtml(baseHref)));\n      this._locationStrategy.onPopState(ev => {\n        this._subject.next({\n          'url': this.path(true),\n          'pop': true,\n          'state': ev.state,\n          'type': ev.type\n        });\n      });\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      this._urlChangeSubscription?.unsubscribe();\n      this._urlChangeListeners = [];\n    }\n    /**\n     * Normalizes the URL path for this location.\n     *\n     * @param includeHash True to include an anchor fragment in the path.\n     *\n     * @returns The normalized URL path.\n     */\n    // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n    // removed.\n    path(includeHash = false) {\n      return this.normalize(this._locationStrategy.path(includeHash));\n    }\n    /**\n     * Reports the current state of the location history.\n     * @returns The current value of the `history.state` object.\n     */\n    getState() {\n      return this._locationStrategy.getState();\n    }\n    /**\n     * Normalizes the given path and compares to the current normalized path.\n     *\n     * @param path The given URL path.\n     * @param query Query parameters.\n     *\n     * @returns True if the given URL path is equal to the current normalized path, false\n     * otherwise.\n     */\n    isCurrentPathEqualTo(path, query = '') {\n      return this.path() == this.normalize(path + normalizeQueryParams(query));\n    }\n    /**\n     * Normalizes a URL path by stripping any trailing slashes.\n     *\n     * @param url String representing a URL.\n     *\n     * @returns The normalized URL string.\n     */\n    normalize(url) {\n      return Location.stripTrailingSlash(_stripBasePath(this._basePath, _stripIndexHtml(url)));\n    }\n    /**\n     * Normalizes an external URL path.\n     * If the given URL doesn't begin with a leading slash (`'/'`), adds one\n     * before normalizing. Adds a hash if `HashLocationStrategy` is\n     * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n     *\n     * @param url String representing a URL.\n     *\n     * @returns  A normalized platform-specific URL.\n     */\n    prepareExternalUrl(url) {\n      if (url && url[0] !== '/') {\n        url = '/' + url;\n      }\n      return this._locationStrategy.prepareExternalUrl(url);\n    }\n    // TODO: rename this method to pushState\n    /**\n     * Changes the browser's URL to a normalized version of a given URL, and pushes a\n     * new item onto the platform's history.\n     *\n     * @param path  URL path to normalize.\n     * @param query Query parameters.\n     * @param state Location history state.\n     *\n     */\n    go(path, query = '', state = null) {\n      this._locationStrategy.pushState(state, '', path, query);\n      this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);\n    }\n    /**\n     * Changes the browser's URL to a normalized version of the given URL, and replaces\n     * the top item on the platform's history stack.\n     *\n     * @param path  URL path to normalize.\n     * @param query Query parameters.\n     * @param state Location history state.\n     */\n    replaceState(path, query = '', state = null) {\n      this._locationStrategy.replaceState(state, '', path, query);\n      this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);\n    }\n    /**\n     * Navigates forward in the platform's history.\n     */\n    forward() {\n      this._locationStrategy.forward();\n    }\n    /**\n     * Navigates back in the platform's history.\n     */\n    back() {\n      this._locationStrategy.back();\n    }\n    /**\n     * Navigate to a specific page from session history, identified by its relative position to the\n     * current page.\n     *\n     * @param relativePosition  Position of the target page in the history relative to the current\n     *     page.\n     * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`\n     * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go\n     * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs\n     * when `relativePosition` equals 0.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history\n     */\n    historyGo(relativePosition = 0) {\n      this._locationStrategy.historyGo?.(relativePosition);\n    }\n    /**\n     * Registers a URL change listener. Use to catch updates performed by the Angular\n     * framework that are not detectible through \"popstate\" or \"hashchange\" events.\n     *\n     * @param fn The change handler function, which take a URL and a location history state.\n     * @returns A function that, when executed, unregisters a URL change listener.\n     */\n    onUrlChange(fn) {\n      this._urlChangeListeners.push(fn);\n      this._urlChangeSubscription ??= this.subscribe(v => {\n        this._notifyUrlChangeListeners(v.url, v.state);\n      });\n      return () => {\n        const fnIndex = this._urlChangeListeners.indexOf(fn);\n        this._urlChangeListeners.splice(fnIndex, 1);\n        if (this._urlChangeListeners.length === 0) {\n          this._urlChangeSubscription?.unsubscribe();\n          this._urlChangeSubscription = null;\n        }\n      };\n    }\n    /** @internal */\n    _notifyUrlChangeListeners(url = '', state) {\n      this._urlChangeListeners.forEach(fn => fn(url, state));\n    }\n    /**\n     * Subscribes to the platform's `popState` events.\n     *\n     * Note: `Location.go()` does not trigger the `popState` event in the browser. Use\n     * `Location.onUrlChange()` to subscribe to URL changes instead.\n     *\n     * @param value Event that is triggered when the state history changes.\n     * @param exception The exception to throw.\n     *\n     * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)\n     *\n     * @returns Subscribed events.\n     */\n    subscribe(onNext, onThrow, onReturn) {\n      return this._subject.subscribe({\n        next: onNext,\n        error: onThrow ?? undefined,\n        complete: onReturn ?? undefined\n      });\n    }\n    /**\n     * Normalizes URL parameters by prepending with `?` if needed.\n     *\n     * @param  params String of URL parameters.\n     *\n     * @returns The normalized URL parameters string.\n     */\n    static normalizeQueryParams = normalizeQueryParams;\n    /**\n     * Joins two parts of a URL with a slash if needed.\n     *\n     * @param start  URL string\n     * @param end    URL string\n     *\n     *\n     * @returns The joined URL string.\n     */\n    static joinWithSlash = joinWithSlash;\n    /**\n     * Removes a trailing slash from a URL string if needed.\n     * Looks for the first occurrence of either `#`, `?`, or the end of the\n     * line as `/` characters and removes the trailing slash if one exists.\n     *\n     * @param url URL string.\n     *\n     * @returns The URL string, modified if needed.\n     */\n    static stripTrailingSlash = stripTrailingSlash;\n    static ɵfac = function Location_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Location)(i0.ɵɵinject(LocationStrategy));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Location,\n      factory: () => createLocation(),\n      providedIn: 'root'\n    });\n  }\n  return Location;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction createLocation() {\n  return new Location(__inject(LocationStrategy));\n}\nfunction _stripBasePath(basePath, url) {\n  if (!basePath || !url.startsWith(basePath)) {\n    return url;\n  }\n  const strippedUrl = url.substring(basePath.length);\n  if (strippedUrl === '' || ['/', ';', '?', '#'].includes(strippedUrl[0])) {\n    return strippedUrl;\n  }\n  return url;\n}\nfunction _stripIndexHtml(url) {\n  return url.replace(/\\/index.html$/, '');\n}\nfunction _stripOrigin(baseHref) {\n  // DO NOT REFACTOR! Previously, this check looked like this:\n  // `/^(https?:)?\\/\\//.test(baseHref)`, but that resulted in\n  // syntactically incorrect code after Closure Compiler minification.\n  // This was likely caused by a bug in Closure Compiler, but\n  // for now, the check is rewritten to use `new RegExp` instead.\n  const isAbsoluteUrl = new RegExp('^(https?:)?//').test(baseHref);\n  if (isAbsoluteUrl) {\n    const [, pathname] = baseHref.split(/\\/\\/[^\\/]+/);\n    return pathname;\n  }\n  return baseHref;\n}\nexport { APP_BASE_HREF, BrowserPlatformLocation, DomAdapter, LOCATION_INITIALIZED, Location, LocationStrategy, PathLocationStrategy, PlatformLocation, getDOM, joinWithSlash, normalizeQueryParams, setRootDomAdapter };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, Inject, ɵfindLocaleData as _findLocaleData, ɵLocaleDataIndex as _LocaleDataIndex, ɵgetLocaleCurrencyCode as _getLocaleCurrencyCode, ɵgetLocalePluralCase as _getLocalePluralCase, ɵRuntimeError as _RuntimeError, ɵformatRuntimeError as _formatRuntimeError, LOCALE_ID, ɵstringify as _stringify, Directive, Input, createNgModule, NgModuleRef, Host, Attribute, RendererStyleFlags2, inject, ɵINTERNAL_APPLICATION_ERROR_HANDLER as _INTERNAL_APPLICATION_ERROR_HANDLER, ɵisPromise as _isPromise, ɵisSubscribable as _isSubscribable, Pipe, untracked, InjectionToken, DEFAULT_CURRENCY_CODE, NgModule } from '@angular/core';\nimport { LocationStrategy, joinWithSlash, normalizeQueryParams, PlatformLocation, APP_BASE_HREF } from './location.mjs';\n\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\nlet HashLocationStrategy = /*#__PURE__*/(() => {\n  class HashLocationStrategy extends LocationStrategy {\n    _platformLocation;\n    _baseHref = '';\n    _removeListenerFns = [];\n    constructor(_platformLocation, _baseHref) {\n      super();\n      this._platformLocation = _platformLocation;\n      if (_baseHref != null) {\n        this._baseHref = _baseHref;\n      }\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      while (this._removeListenerFns.length) {\n        this._removeListenerFns.pop()();\n      }\n    }\n    onPopState(fn) {\n      this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));\n    }\n    getBaseHref() {\n      return this._baseHref;\n    }\n    path(includeHash = false) {\n      // the hash value is always prefixed with a `#`\n      // and if it is empty then it will stay empty\n      const path = this._platformLocation.hash ?? '#';\n      return path.length > 0 ? path.substring(1) : path;\n    }\n    prepareExternalUrl(internal) {\n      const url = joinWithSlash(this._baseHref, internal);\n      return url.length > 0 ? '#' + url : url;\n    }\n    pushState(state, title, path, queryParams) {\n      const url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams)) || this._platformLocation.pathname;\n      this._platformLocation.pushState(state, title, url);\n    }\n    replaceState(state, title, path, queryParams) {\n      const url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams)) || this._platformLocation.pathname;\n      this._platformLocation.replaceState(state, title, url);\n    }\n    forward() {\n      this._platformLocation.forward();\n    }\n    back() {\n      this._platformLocation.back();\n    }\n    getState() {\n      return this._platformLocation.getState();\n    }\n    historyGo(relativePosition = 0) {\n      this._platformLocation.historyGo?.(relativePosition);\n    }\n    static ɵfac = function HashLocationStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HashLocationStrategy)(i0.ɵɵinject(PlatformLocation), i0.ɵɵinject(APP_BASE_HREF, 8));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HashLocationStrategy,\n      factory: HashLocationStrategy.ɵfac\n    });\n  }\n  return HashLocationStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** @internal */\nconst CURRENCIES_EN = {\n  \"ADP\": [undefined, undefined, 0],\n  \"AFN\": [undefined, \"؋\", 0],\n  \"ALL\": [undefined, undefined, 0],\n  \"AMD\": [undefined, \"֏\", 2],\n  \"AOA\": [undefined, \"Kz\"],\n  \"ARS\": [undefined, \"$\"],\n  \"AUD\": [\"A$\", \"$\"],\n  \"AZN\": [undefined, \"₼\"],\n  \"BAM\": [undefined, \"KM\"],\n  \"BBD\": [undefined, \"$\"],\n  \"BDT\": [undefined, \"৳\"],\n  \"BHD\": [undefined, undefined, 3],\n  \"BIF\": [undefined, undefined, 0],\n  \"BMD\": [undefined, \"$\"],\n  \"BND\": [undefined, \"$\"],\n  \"BOB\": [undefined, \"Bs\"],\n  \"BRL\": [\"R$\"],\n  \"BSD\": [undefined, \"$\"],\n  \"BWP\": [undefined, \"P\"],\n  \"BYN\": [undefined, undefined, 2],\n  \"BYR\": [undefined, undefined, 0],\n  \"BZD\": [undefined, \"$\"],\n  \"CAD\": [\"CA$\", \"$\", 2],\n  \"CHF\": [undefined, undefined, 2],\n  \"CLF\": [undefined, undefined, 4],\n  \"CLP\": [undefined, \"$\", 0],\n  \"CNY\": [\"CN¥\", \"¥\"],\n  \"COP\": [undefined, \"$\", 2],\n  \"CRC\": [undefined, \"₡\", 2],\n  \"CUC\": [undefined, \"$\"],\n  \"CUP\": [undefined, \"$\"],\n  \"CZK\": [undefined, \"Kč\", 2],\n  \"DJF\": [undefined, undefined, 0],\n  \"DKK\": [undefined, \"kr\", 2],\n  \"DOP\": [undefined, \"$\"],\n  \"EGP\": [undefined, \"E£\"],\n  \"ESP\": [undefined, \"₧\", 0],\n  \"EUR\": [\"€\"],\n  \"FJD\": [undefined, \"$\"],\n  \"FKP\": [undefined, \"£\"],\n  \"GBP\": [\"£\"],\n  \"GEL\": [undefined, \"₾\"],\n  \"GHS\": [undefined, \"GH₵\"],\n  \"GIP\": [undefined, \"£\"],\n  \"GNF\": [undefined, \"FG\", 0],\n  \"GTQ\": [undefined, \"Q\"],\n  \"GYD\": [undefined, \"$\", 2],\n  \"HKD\": [\"HK$\", \"$\"],\n  \"HNL\": [undefined, \"L\"],\n  \"HRK\": [undefined, \"kn\"],\n  \"HUF\": [undefined, \"Ft\", 2],\n  \"IDR\": [undefined, \"Rp\", 2],\n  \"ILS\": [\"₪\"],\n  \"INR\": [\"₹\"],\n  \"IQD\": [undefined, undefined, 0],\n  \"IRR\": [undefined, undefined, 0],\n  \"ISK\": [undefined, \"kr\", 0],\n  \"ITL\": [undefined, undefined, 0],\n  \"JMD\": [undefined, \"$\"],\n  \"JOD\": [undefined, undefined, 3],\n  \"JPY\": [\"¥\", undefined, 0],\n  \"KHR\": [undefined, \"៛\"],\n  \"KMF\": [undefined, \"CF\", 0],\n  \"KPW\": [undefined, \"₩\", 0],\n  \"KRW\": [\"₩\", undefined, 0],\n  \"KWD\": [undefined, undefined, 3],\n  \"KYD\": [undefined, \"$\"],\n  \"KZT\": [undefined, \"₸\"],\n  \"LAK\": [undefined, \"₭\", 0],\n  \"LBP\": [undefined, \"L£\", 0],\n  \"LKR\": [undefined, \"Rs\"],\n  \"LRD\": [undefined, \"$\"],\n  \"LTL\": [undefined, \"Lt\"],\n  \"LUF\": [undefined, undefined, 0],\n  \"LVL\": [undefined, \"Ls\"],\n  \"LYD\": [undefined, undefined, 3],\n  \"MGA\": [undefined, \"Ar\", 0],\n  \"MGF\": [undefined, undefined, 0],\n  \"MMK\": [undefined, \"K\", 0],\n  \"MNT\": [undefined, \"₮\", 2],\n  \"MRO\": [undefined, undefined, 0],\n  \"MUR\": [undefined, \"Rs\", 2],\n  \"MXN\": [\"MX$\", \"$\"],\n  \"MYR\": [undefined, \"RM\"],\n  \"NAD\": [undefined, \"$\"],\n  \"NGN\": [undefined, \"₦\"],\n  \"NIO\": [undefined, \"C$\"],\n  \"NOK\": [undefined, \"kr\", 2],\n  \"NPR\": [undefined, \"Rs\"],\n  \"NZD\": [\"NZ$\", \"$\"],\n  \"OMR\": [undefined, undefined, 3],\n  \"PHP\": [\"₱\"],\n  \"PKR\": [undefined, \"Rs\", 2],\n  \"PLN\": [undefined, \"zł\"],\n  \"PYG\": [undefined, \"₲\", 0],\n  \"RON\": [undefined, \"lei\"],\n  \"RSD\": [undefined, undefined, 0],\n  \"RUB\": [undefined, \"₽\"],\n  \"RWF\": [undefined, \"RF\", 0],\n  \"SBD\": [undefined, \"$\"],\n  \"SEK\": [undefined, \"kr\", 2],\n  \"SGD\": [undefined, \"$\"],\n  \"SHP\": [undefined, \"£\"],\n  \"SLE\": [undefined, undefined, 2],\n  \"SLL\": [undefined, undefined, 0],\n  \"SOS\": [undefined, undefined, 0],\n  \"SRD\": [undefined, \"$\"],\n  \"SSP\": [undefined, \"£\"],\n  \"STD\": [undefined, undefined, 0],\n  \"STN\": [undefined, \"Db\"],\n  \"SYP\": [undefined, \"£\", 0],\n  \"THB\": [undefined, \"฿\"],\n  \"TMM\": [undefined, undefined, 0],\n  \"TND\": [undefined, undefined, 3],\n  \"TOP\": [undefined, \"T$\"],\n  \"TRL\": [undefined, undefined, 0],\n  \"TRY\": [undefined, \"₺\"],\n  \"TTD\": [undefined, \"$\"],\n  \"TWD\": [\"NT$\", \"$\", 2],\n  \"TZS\": [undefined, undefined, 2],\n  \"UAH\": [undefined, \"₴\"],\n  \"UGX\": [undefined, undefined, 0],\n  \"USD\": [\"$\"],\n  \"UYI\": [undefined, undefined, 0],\n  \"UYU\": [undefined, \"$\"],\n  \"UYW\": [undefined, undefined, 4],\n  \"UZS\": [undefined, undefined, 2],\n  \"VEF\": [undefined, \"Bs\", 2],\n  \"VND\": [\"₫\", undefined, 0],\n  \"VUV\": [undefined, undefined, 0],\n  \"XAF\": [\"FCFA\", undefined, 0],\n  \"XCD\": [\"EC$\", \"$\"],\n  \"XOF\": [\"F CFA\", undefined, 0],\n  \"XPF\": [\"CFPF\", undefined, 0],\n  \"XXX\": [\"¤\"],\n  \"YER\": [undefined, undefined, 0],\n  \"ZAR\": [undefined, \"R\"],\n  \"ZMK\": [undefined, undefined, 0],\n  \"ZMW\": [undefined, \"ZK\"],\n  \"ZWD\": [undefined, undefined, 0]\n};\n\n/**\n * Format styles that can be used to represent numbers.\n * @see {@link getLocaleNumberFormat}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated `getLocaleNumberFormat` is deprecated\n */\nvar NumberFormatStyle = /*#__PURE__*/function (NumberFormatStyle) {\n  NumberFormatStyle[NumberFormatStyle[\"Decimal\"] = 0] = \"Decimal\";\n  NumberFormatStyle[NumberFormatStyle[\"Percent\"] = 1] = \"Percent\";\n  NumberFormatStyle[NumberFormatStyle[\"Currency\"] = 2] = \"Currency\";\n  NumberFormatStyle[NumberFormatStyle[\"Scientific\"] = 3] = \"Scientific\";\n  return NumberFormatStyle;\n}(NumberFormatStyle || {});\n/**\n * Plurality cases used for translating plurals to different languages.\n *\n * @see {@link NgPlural}\n * @see {@link NgPluralCase}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated `getLocalePluralCase` is deprecated\n */\nvar Plural = /*#__PURE__*/function (Plural) {\n  Plural[Plural[\"Zero\"] = 0] = \"Zero\";\n  Plural[Plural[\"One\"] = 1] = \"One\";\n  Plural[Plural[\"Two\"] = 2] = \"Two\";\n  Plural[Plural[\"Few\"] = 3] = \"Few\";\n  Plural[Plural[\"Many\"] = 4] = \"Many\";\n  Plural[Plural[\"Other\"] = 5] = \"Other\";\n  return Plural;\n}(Plural || {});\n/**\n * Context-dependant translation forms for strings.\n * Typically the standalone version is for the nominative form of the word,\n * and the format version is used for the genitive case.\n * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated locale data getters are deprecated\n */\nvar FormStyle = /*#__PURE__*/function (FormStyle) {\n  FormStyle[FormStyle[\"Format\"] = 0] = \"Format\";\n  FormStyle[FormStyle[\"Standalone\"] = 1] = \"Standalone\";\n  return FormStyle;\n}(FormStyle || {});\n/**\n * String widths available for translations.\n * The specific character widths are locale-specific.\n * Examples are given for the word \"Sunday\" in English.\n *\n * @publicApi\n *\n * @deprecated locale data getters are deprecated\n */\nvar TranslationWidth = /*#__PURE__*/function (TranslationWidth) {\n  /** 1 character for `en-US`. For example: 'S' */\n  TranslationWidth[TranslationWidth[\"Narrow\"] = 0] = \"Narrow\";\n  /** 3 characters for `en-US`. For example: 'Sun' */\n  TranslationWidth[TranslationWidth[\"Abbreviated\"] = 1] = \"Abbreviated\";\n  /** Full length for `en-US`. For example: \"Sunday\" */\n  TranslationWidth[TranslationWidth[\"Wide\"] = 2] = \"Wide\";\n  /** 2 characters for `en-US`, For example: \"Su\" */\n  TranslationWidth[TranslationWidth[\"Short\"] = 3] = \"Short\";\n  return TranslationWidth;\n}(TranslationWidth || {});\n/**\n * String widths available for date-time formats.\n * The specific character widths are locale-specific.\n * Examples are given for `en-US`.\n *\n * @see {@link getLocaleDateFormat}\n * @see {@link getLocaleTimeFormat}\n * @see {@link getLocaleDateTimeFormat}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n * @publicApi\n *\n * @deprecated 18.0\n * Date locale data getters are deprecated\n */\nvar FormatWidth = /*#__PURE__*/function (FormatWidth) {\n  /**\n   * For `en-US`, `'M/d/yy, h:mm a'`\n   * (Example: `6/15/15, 9:03 AM`)\n   */\n  FormatWidth[FormatWidth[\"Short\"] = 0] = \"Short\";\n  /**\n   * For `en-US`, `'MMM d, y, h:mm:ss a'`\n   * (Example: `Jun 15, 2015, 9:03:01 AM`)\n   */\n  FormatWidth[FormatWidth[\"Medium\"] = 1] = \"Medium\";\n  /**\n   * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n   * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n   */\n  FormatWidth[FormatWidth[\"Long\"] = 2] = \"Long\";\n  /**\n   * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n   * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n   */\n  FormatWidth[FormatWidth[\"Full\"] = 3] = \"Full\";\n  return FormatWidth;\n}(FormatWidth || {});\n// This needs to be an object literal, rather than an enum, because TypeScript 5.4+\n// doesn't allow numeric keys and we have `Infinity` and `NaN`.\n/**\n * Symbols that can be used to replace placeholders in number patterns.\n * Examples are based on `en-US` values.\n *\n * @see {@link getLocaleNumberSymbol}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated `getLocaleNumberSymbol` is deprecated\n *\n * @object-literal-as-enum\n */\nconst NumberSymbol = {\n  /**\n   * Decimal separator.\n   * For `en-US`, the dot character.\n   * Example: 2,345`.`67\n   */\n  Decimal: 0,\n  /**\n   * Grouping separator, typically for thousands.\n   * For `en-US`, the comma character.\n   * Example: 2`,`345.67\n   */\n  Group: 1,\n  /**\n   * List-item separator.\n   * Example: \"one, two, and three\"\n   */\n  List: 2,\n  /**\n   * Sign for percentage (out of 100).\n   * Example: 23.4%\n   */\n  PercentSign: 3,\n  /**\n   * Sign for positive numbers.\n   * Example: +23\n   */\n  PlusSign: 4,\n  /**\n   * Sign for negative numbers.\n   * Example: -23\n   */\n  MinusSign: 5,\n  /**\n   * Computer notation for exponential value (n times a power of 10).\n   * Example: 1.2E3\n   */\n  Exponential: 6,\n  /**\n   * Human-readable format of exponential.\n   * Example: 1.2x103\n   */\n  SuperscriptingExponent: 7,\n  /**\n   * Sign for permille (out of 1000).\n   * Example: 23.4‰\n   */\n  PerMille: 8,\n  /**\n   * Infinity, can be used with plus and minus.\n   * Example: ∞, +∞, -∞\n   */\n  Infinity: 9,\n  /**\n   * Not a number.\n   * Example: NaN\n   */\n  NaN: 10,\n  /**\n   * Symbol used between time units.\n   * Example: 10:52\n   */\n  TimeSeparator: 11,\n  /**\n   * Decimal separator for currency values (fallback to `Decimal`).\n   * Example: $2,345.67\n   */\n  CurrencyDecimal: 12,\n  /**\n   * Group separator for currency values (fallback to `Group`).\n   * Example: $2,345.67\n   */\n  CurrencyGroup: 13\n};\n/**\n * The value for each day of the week, based on the `en-US` locale\n *\n * @publicApi\n *\n * @deprecated Week locale getters are deprecated\n */\nvar WeekDay = /*#__PURE__*/function (WeekDay) {\n  WeekDay[WeekDay[\"Sunday\"] = 0] = \"Sunday\";\n  WeekDay[WeekDay[\"Monday\"] = 1] = \"Monday\";\n  WeekDay[WeekDay[\"Tuesday\"] = 2] = \"Tuesday\";\n  WeekDay[WeekDay[\"Wednesday\"] = 3] = \"Wednesday\";\n  WeekDay[WeekDay[\"Thursday\"] = 4] = \"Thursday\";\n  WeekDay[WeekDay[\"Friday\"] = 5] = \"Friday\";\n  WeekDay[WeekDay[\"Saturday\"] = 6] = \"Saturday\";\n  return WeekDay;\n}(WeekDay || {});\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @param locale A locale code, such as `fr-FR`.\n * @returns The locale code. For example, `fr`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * This function serves no purpose when relying on the `Intl` API.\n */\nfunction getLocaleId(locale) {\n  return _findLocaleData(locale)[_LocaleDataIndex.LocaleId];\n}\n/**\n * Retrieves day period strings for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nfunction getLocaleDayPeriods(locale, formStyle, width) {\n  const data = _findLocaleData(locale);\n  const amPmData = [data[_LocaleDataIndex.DayPeriodsFormat], data[_LocaleDataIndex.DayPeriodsStandalone]];\n  const amPm = getLastDefinedValue(amPmData, formStyle);\n  return getLastDefinedValue(amPm, width);\n}\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nfunction getLocaleDayNames(locale, formStyle, width) {\n  const data = _findLocaleData(locale);\n  const daysData = [data[_LocaleDataIndex.DaysFormat], data[_LocaleDataIndex.DaysStandalone]];\n  const days = getLastDefinedValue(daysData, formStyle);\n  return getLastDefinedValue(days, width);\n}\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nfunction getLocaleMonthNames(locale, formStyle, width) {\n  const data = _findLocaleData(locale);\n  const monthsData = [data[_LocaleDataIndex.MonthsFormat], data[_LocaleDataIndex.MonthsStandalone]];\n  const months = getLastDefinedValue(monthsData, formStyle);\n  return getLastDefinedValue(months, width);\n}\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @param locale A locale code for the locale format rules to use.\n * @param width The required character width.\n\n * @returns An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nfunction getLocaleEraNames(locale, width) {\n  const data = _findLocaleData(locale);\n  const erasData = data[_LocaleDataIndex.Eras];\n  return getLastDefinedValue(erasData, width);\n}\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Intl's [`getWeekInfo`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo) has partial support (Chromium M99 & Safari 17).\n * You may want to rely on the following alternatives:\n * - Libraries like [`Luxon`](https://moment.github.io/luxon/#/) rely on `Intl` but fallback on the ISO 8601 definition (monday) if `getWeekInfo` is not supported.\n * - Other librairies like [`date-fns`](https://date-fns.org/), [`day.js`](https://day.js.org/en/) or [`weekstart`](https://www.npmjs.com/package/weekstart) library provide their own locale based data for the first day of the week.\n */\nfunction getLocaleFirstDayOfWeek(locale) {\n  const data = _findLocaleData(locale);\n  return data[_LocaleDataIndex.FirstDayOfWeek];\n}\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The range of day values, `[startDay, endDay]`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Intl's [`getWeekInfo`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo) has partial support (Chromium M99 & Safari 17).\n * Libraries like [`Luxon`](https://moment.github.io/luxon/#/) rely on `Intl` but fallback on the ISO 8601 definition (Saturday+Sunday) if `getWeekInfo` is not supported .\n */\nfunction getLocaleWeekEndRange(locale) {\n  const data = _findLocaleData(locale);\n  return data[_LocaleDataIndex.WeekendRange];\n}\n/**\n * Retrieves a localized date-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nfunction getLocaleDateFormat(locale, width) {\n  const data = _findLocaleData(locale);\n  return getLastDefinedValue(data[_LocaleDataIndex.DateFormat], width);\n}\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n\n * @publicApi\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nfunction getLocaleTimeFormat(locale, width) {\n  const data = _findLocaleData(locale);\n  return getLastDefinedValue(data[_LocaleDataIndex.TimeFormat], width);\n}\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nfunction getLocaleDateTimeFormat(locale, width) {\n  const data = _findLocaleData(locale);\n  const dateTimeFormatData = data[_LocaleDataIndex.DateTimeFormat];\n  return getLastDefinedValue(dateTimeFormatData, width);\n}\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @param locale The locale code.\n * @param symbol The symbol to localize. Must be one of `NumberSymbol`.\n * @returns The character for the localized symbol.\n * @see {@link NumberSymbol}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.NumberFormat` to format numbers instead.\n */\nfunction getLocaleNumberSymbol(locale, symbol) {\n  const data = _findLocaleData(locale);\n  const res = data[_LocaleDataIndex.NumberSymbols][symbol];\n  if (typeof res === 'undefined') {\n    if (symbol === NumberSymbol.CurrencyDecimal) {\n      return data[_LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\n      return data[_LocaleDataIndex.NumberSymbols][NumberSymbol.Group];\n    }\n  }\n  return res;\n}\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @param locale A locale code for the locale format rules to use.\n * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @returns The localized format string.\n * @see {@link NumberFormatStyle}\n * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Let `Intl.NumberFormat` determine the number format instead\n */\nfunction getLocaleNumberFormat(locale, type) {\n  const data = _findLocaleData(locale);\n  return data[_LocaleDataIndex.NumberFormats][type];\n}\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The localized symbol character,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Use the `Intl` API to format a currency with from currency code\n */\nfunction getLocaleCurrencySymbol(locale) {\n  const data = _findLocaleData(locale);\n  return data[_LocaleDataIndex.CurrencySymbol] || null;\n}\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency name,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Use the `Intl` API to format a currency with from currency code\n */\nfunction getLocaleCurrencyName(locale) {\n  const data = _findLocaleData(locale);\n  return data[_LocaleDataIndex.CurrencyName] || null;\n}\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n * @publicApi\n *\n * @deprecated We recommend you create a map of locale to ISO 4217 currency codes.\n * Time relative currency data is provided by the CLDR project. See https://www.unicode.org/cldr/charts/44/supplemental/detailed_territory_currency_information.html\n */\nfunction getLocaleCurrencyCode(locale) {\n  return _getLocaleCurrencyCode(locale);\n}\n/**\n * Retrieves the currency values for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency values.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n */\nfunction getLocaleCurrencies(locale) {\n  const data = _findLocaleData(locale);\n  return data[_LocaleDataIndex.Currencies];\n}\n/**\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.PluralRules` instead\n */\nconst getLocalePluralCase = _getLocalePluralCase;\nfunction checkFullData(data) {\n  if (!data[_LocaleDataIndex.ExtraData]) {\n    throw new _RuntimeError(2303 /* RuntimeErrorCode.MISSING_EXTRA_LOCALE_DATA_FOR_LOCALE */, ngDevMode && `Missing extra locale data for the locale \"${data[_LocaleDataIndex.LocaleId]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n  }\n}\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n/format-data-locale).\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n * @see {@link getLocaleExtraDayPeriods}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Let `Intl.DateTimeFormat` determine the day period instead.\n */\nfunction getLocaleExtraDayPeriodRules(locale) {\n  const data = _findLocaleData(locale);\n  checkFullData(data);\n  const rules = data[_LocaleDataIndex.ExtraData][2 /* ɵExtraLocaleDataIndex.ExtraDayPeriodsRules */] || [];\n  return rules.map(rule => {\n    if (typeof rule === 'string') {\n      return extractTime(rule);\n    }\n    return [extractTime(rule[0]), extractTime(rule[1])];\n  });\n}\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n/format-data-locale).\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns The translated day-period strings.\n * @see {@link getLocaleExtraDayPeriodRules}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * To extract a day period use `Intl.DateTimeFormat` with the `dayPeriod` option instead.\n */\nfunction getLocaleExtraDayPeriods(locale, formStyle, width) {\n  const data = _findLocaleData(locale);\n  checkFullData(data);\n  const dayPeriodsData = [data[_LocaleDataIndex.ExtraData][0 /* ɵExtraLocaleDataIndex.ExtraDayPeriodFormats */], data[_LocaleDataIndex.ExtraData][1 /* ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone */]];\n  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n  return getLastDefinedValue(dayPeriods, width) || [];\n}\n/**\n * Retrieves the writing direction of a specified locale\n * @param locale A locale code for the locale format rules to use.\n * @publicApi\n * @returns 'rtl' or 'ltr'\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * For dates and numbers, let `Intl.DateTimeFormat()` and `Intl.NumberFormat()` determine the writing direction.\n * The `Intl` alternative [`getTextInfo`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo).\n * has only partial support (Chromium M99 & Safari 17).\n * 3rd party alternatives like [`rtl-detect`](https://www.npmjs.com/package/rtl-detect) can work around this issue.\n */\nfunction getLocaleDirection(locale) {\n  const data = _findLocaleData(locale);\n  return data[_LocaleDataIndex.Directionality];\n}\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @param data The data array to retrieve from.\n * @param index A 0-based index into the array to start from.\n * @returns The value immediately before the given index position.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n */\nfunction getLastDefinedValue(data, index) {\n  for (let i = index; i > -1; i--) {\n    if (typeof data[i] !== 'undefined') {\n      return data[i];\n    }\n  }\n  throw new _RuntimeError(2304 /* RuntimeErrorCode.LOCALE_DATA_UNDEFINED */, ngDevMode && 'Locale data API: locale data undefined');\n}\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time) {\n  const [h, m] = time.split(':');\n  return {\n    hours: +h,\n    minutes: +m\n  };\n}\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @param code The currency code.\n * @param format The format, `wide` or `narrow`.\n * @param locale A locale code for the locale format rules to use.\n *\n * @returns The symbol, or the currency code if no symbol is available.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * You can use `Intl.NumberFormat().formatToParts()` to extract the currency symbol.\n * For example: `Intl.NumberFormat('en', {style:'currency', currency: 'USD'}).formatToParts().find(part => part.type === 'currency').value`\n * returns `$` for USD currency code in the `en` locale.\n * Note: `US$` is a currency symbol for the `en-ca` locale but not the `en-us` locale.\n */\nfunction getCurrencySymbol(code, format, locale = 'en') {\n  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n  const symbolNarrow = currency[1 /* ɵCurrencyIndex.SymbolNarrow */];\n  if (format === 'narrow' && typeof symbolNarrow === 'string') {\n    return symbolNarrow;\n  }\n  return currency[0 /* ɵCurrencyIndex.Symbol */] || code;\n}\n// Most currencies have cents, that's why the default is 2\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @param code The currency code.\n * @returns The number of decimal digits, typically 0 or 2.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * This function should not be used anymore. Let `Intl.NumberFormat` determine the number of digits to display for the currency\n */\nfunction getNumberOfCurrencyDigits(code) {\n  let digits;\n  const currency = CURRENCIES_EN[code];\n  if (currency) {\n    digits = currency[2 /* ɵCurrencyIndex.NbOfDigits */];\n  }\n  return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\nconst ISO8601_DATE_REGEX = /^(\\d{4,})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n//    1        2       3         4          5          6          7          8  9     10      11\nconst NAMED_FORMATS = {};\nconst DATE_FORMATS_SPLIT = /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)\n * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).\n * @param format The date-time components to include. See `DatePipe` for details.\n * @param locale A locale code for the locale format rules to use.\n * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`).\n * If not specified, uses host system settings.\n *\n * @returns The formatted date string.\n *\n * @see {@link DatePipe}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n */\nfunction formatDate(value, format, locale, timezone) {\n  let date = toDate(value);\n  const namedFormat = getNamedFormat(locale, format);\n  format = namedFormat || format;\n  let parts = [];\n  let match;\n  while (format) {\n    match = DATE_FORMATS_SPLIT.exec(format);\n    if (match) {\n      parts = parts.concat(match.slice(1));\n      const part = parts.pop();\n      if (!part) {\n        break;\n      }\n      format = part;\n    } else {\n      parts.push(format);\n      break;\n    }\n  }\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    assertValidDateFormat(parts);\n  }\n  let dateTimezoneOffset = date.getTimezoneOffset();\n  if (timezone) {\n    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    date = convertTimezoneToLocal(date, timezone);\n  }\n  let text = '';\n  parts.forEach(value => {\n    const dateFormatter = getDateFormatter(value);\n    text += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value === \"''\" ? \"'\" : value.replace(/(^'|'$)/g, '').replace(/''/g, \"'\");\n  });\n  return text;\n}\n/**\n * Asserts that the given date format is free from common mistakes.  Throws an\n * error if one is found (except for the case of all \"Y\", in which case we just\n * log a warning).  This should only be called in development mode.\n */\nfunction assertValidDateFormat(parts) {\n  if (parts.some(part => /^Y+$/.test(part)) && !parts.some(part => /^w+$/.test(part))) {\n    // \"Y\" indicates \"week-based year\", which differs from the actual calendar\n    // year for a few days around Jan 1 most years.  Unless \"w\" is also\n    // present (e.g. a date like \"2024-W52\") this is likely a mistake.  Users\n    // probably meant \"y\" instead.\n    const message = `Suspicious use of week-based year \"Y\" in date pattern \"${parts.join('')}\". Did you mean to use calendar year \"y\" instead?`;\n    if (parts.length === 1) {\n      // NOTE: allow \"YYYY\" with just a warning, since it's used in tests.\n      console.error(_formatRuntimeError(2300 /* RuntimeErrorCode.SUSPICIOUS_DATE_FORMAT */, message));\n    } else {\n      throw new _RuntimeError(2300 /* RuntimeErrorCode.SUSPICIOUS_DATE_FORMAT */, message);\n    }\n  }\n}\n/**\n * Create a new Date object with the given date value, and the time set to midnight.\n *\n * We cannot use `new Date(year, month, date)` because it maps years between 0 and 99 to 1900-1999.\n * See: https://github.com/angular/angular/issues/40377\n *\n * Note that this function returns a Date object whose time is midnight in the current locale's\n * timezone. In the future we might want to change this to be midnight in UTC, but this would be a\n * considerable breaking change.\n */\nfunction createDate(year, month, date) {\n  // The `newDate` is set to midnight (UTC) on January 1st 1970.\n  // - In PST this will be December 31st 1969 at 4pm.\n  // - In GMT this will be January 1st 1970 at 1am.\n  // Note that they even have different years, dates and months!\n  const newDate = new Date(0);\n  // `setFullYear()` allows years like 0001 to be set correctly. This function does not\n  // change the internal time of the date.\n  // Consider calling `setFullYear(2019, 8, 20)` (September 20, 2019).\n  // - In PST this will now be September 20, 2019 at 4pm\n  // - In GMT this will now be September 20, 2019 at 1am\n  newDate.setFullYear(year, month, date);\n  // We want the final date to be at local midnight, so we reset the time.\n  // - In PST this will now be September 20, 2019 at 12am\n  // - In GMT this will now be September 20, 2019 at 12am\n  newDate.setHours(0, 0, 0);\n  return newDate;\n}\nfunction getNamedFormat(locale, format) {\n  const localeId = getLocaleId(locale);\n  NAMED_FORMATS[localeId] ??= {};\n  if (NAMED_FORMATS[localeId][format]) {\n    return NAMED_FORMATS[localeId][format];\n  }\n  let formatValue = '';\n  switch (format) {\n    case 'shortDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n      break;\n    case 'shortTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n      break;\n    case 'short':\n      const shortTime = getNamedFormat(locale, 'shortTime');\n      const shortDate = getNamedFormat(locale, 'shortDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\n      break;\n    case 'medium':\n      const mediumTime = getNamedFormat(locale, 'mediumTime');\n      const mediumDate = getNamedFormat(locale, 'mediumDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\n      break;\n    case 'long':\n      const longTime = getNamedFormat(locale, 'longTime');\n      const longDate = getNamedFormat(locale, 'longDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\n      break;\n    case 'full':\n      const fullTime = getNamedFormat(locale, 'fullTime');\n      const fullDate = getNamedFormat(locale, 'fullDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\n      break;\n  }\n  if (formatValue) {\n    NAMED_FORMATS[localeId][format] = formatValue;\n  }\n  return formatValue;\n}\nfunction formatDateTime(str, opt_values) {\n  if (opt_values) {\n    str = str.replace(/\\{([^}]+)}/g, function (match, key) {\n      return opt_values != null && key in opt_values ? opt_values[key] : match;\n    });\n  }\n  return str;\n}\nfunction padNumber(num, digits, minusSign = '-', trim, negWrap) {\n  let neg = '';\n  if (num < 0 || negWrap && num <= 0) {\n    if (negWrap) {\n      num = -num + 1;\n    } else {\n      num = -num;\n      neg = minusSign;\n    }\n  }\n  let strNum = String(num);\n  while (strNum.length < digits) {\n    strNum = '0' + strNum;\n  }\n  if (trim) {\n    strNum = strNum.slice(strNum.length - digits);\n  }\n  return neg + strNum;\n}\nfunction formatFractionalSeconds(milliseconds, digits) {\n  const strMs = padNumber(milliseconds, 3);\n  return strMs.substring(0, digits);\n}\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n */\nfunction dateGetter(name, size, offset = 0, trim = false, negWrap = false) {\n  return function (date, locale) {\n    let part = getDatePart(name, date);\n    if (offset > 0 || part > -offset) {\n      part += offset;\n    }\n    if (name === 3 /* DateType.Hours */) {\n      if (part === 0 && offset === -12) {\n        part = 12;\n      }\n    } else if (name === 6 /* DateType.FractionalSeconds */) {\n      return formatFractionalSeconds(part, size);\n    }\n    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    return padNumber(part, size, localeMinus, trim, negWrap);\n  };\n}\nfunction getDatePart(part, date) {\n  switch (part) {\n    case 0 /* DateType.FullYear */:\n      return date.getFullYear();\n    case 1 /* DateType.Month */:\n      return date.getMonth();\n    case 2 /* DateType.Date */:\n      return date.getDate();\n    case 3 /* DateType.Hours */:\n      return date.getHours();\n    case 4 /* DateType.Minutes */:\n      return date.getMinutes();\n    case 5 /* DateType.Seconds */:\n      return date.getSeconds();\n    case 6 /* DateType.FractionalSeconds */:\n      return date.getMilliseconds();\n    case 7 /* DateType.Day */:\n      return date.getDay();\n    default:\n      throw new _RuntimeError(2301 /* RuntimeErrorCode.UNKNOWN_DATE_TYPE_VALUE */, ngDevMode && `Unknown DateType value \"${part}\".`);\n  }\n}\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n */\nfunction dateStrGetter(name, width, form = FormStyle.Format, extended = false) {\n  return function (date, locale) {\n    return getDateTranslation(date, locale, name, width, form, extended);\n  };\n}\n/**\n * Returns the locale translation of a date for a given form, type and width\n */\nfunction getDateTranslation(date, locale, name, width, form, extended) {\n  switch (name) {\n    case 2 /* TranslationType.Months */:\n      return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n    case 1 /* TranslationType.Days */:\n      return getLocaleDayNames(locale, form, width)[date.getDay()];\n    case 0 /* TranslationType.DayPeriods */:\n      const currentHours = date.getHours();\n      const currentMinutes = date.getMinutes();\n      if (extended) {\n        const rules = getLocaleExtraDayPeriodRules(locale);\n        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n        const index = rules.findIndex(rule => {\n          if (Array.isArray(rule)) {\n            // morning, afternoon, evening, night\n            const [from, to] = rule;\n            const afterFrom = currentHours >= from.hours && currentMinutes >= from.minutes;\n            const beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes;\n            // We must account for normal rules that span a period during the day (e.g. 6am-9am)\n            // where `from` is less (earlier) than `to`. But also rules that span midnight (e.g.\n            // 10pm - 5am) where `from` is greater (later!) than `to`.\n            //\n            // In the first case the current time must be BOTH after `from` AND before `to`\n            // (e.g. 8am is after 6am AND before 10am).\n            //\n            // In the second case the current time must be EITHER after `from` OR before `to`\n            // (e.g. 4am is before 5am but not after 10pm; and 11pm is not before 5am but it is\n            // after 10pm).\n            if (from.hours < to.hours) {\n              if (afterFrom && beforeTo) {\n                return true;\n              }\n            } else if (afterFrom || beforeTo) {\n              return true;\n            }\n          } else {\n            // noon or midnight\n            if (rule.hours === currentHours && rule.minutes === currentMinutes) {\n              return true;\n            }\n          }\n          return false;\n        });\n        if (index !== -1) {\n          return dayPeriods[index];\n        }\n      }\n      // if no rules for the day periods, we use am/pm by default\n      return getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];\n    case 3 /* TranslationType.Eras */:\n      return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];\n    default:\n      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n      // However Closure Compiler does not understand that and reports an error in typed mode.\n      // The `throw new Error` below works around the problem, and the unexpected: never variable\n      // makes sure tsc still checks this code is unreachable.\n      const unexpected = name;\n      throw new _RuntimeError(2302 /* RuntimeErrorCode.UNEXPECTED_TRANSLATION_TYPE */, ngDevMode && `unexpected translation type ${unexpected}`);\n  }\n}\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n */\nfunction timeZoneGetter(width) {\n  return function (date, locale, offset) {\n    const zone = -1 * offset;\n    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n    switch (width) {\n      case 0 /* ZoneWidth.Short */:\n        return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);\n      case 1 /* ZoneWidth.ShortGMT */:\n        return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 1, minusSign);\n      case 2 /* ZoneWidth.Long */:\n        return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);\n      case 3 /* ZoneWidth.Extended */:\n        if (offset === 0) {\n          return 'Z';\n        } else {\n          return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);\n        }\n      default:\n        throw new _RuntimeError(2302 /* RuntimeErrorCode.UNKNOWN_ZONE_WIDTH */, ngDevMode && `Unknown zone width \"${width}\"`);\n    }\n  };\n}\nconst JANUARY = 0;\nconst THURSDAY = 4;\nfunction getFirstThursdayOfYear(year) {\n  const firstDayOfYear = createDate(year, JANUARY, 1).getDay();\n  return createDate(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\n}\n/**\n *  ISO Week starts on day 1 (Monday) and ends with day 0 (Sunday)\n */\nfunction getThursdayThisIsoWeek(datetime) {\n  // getDay returns 0-6 range with sunday as 0.\n  const currentDay = datetime.getDay();\n  // On a Sunday, read the previous Thursday since ISO weeks start on Monday.\n  const deltaToThursday = currentDay === 0 ? -3 : THURSDAY - currentDay;\n  return createDate(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + deltaToThursday);\n}\nfunction weekGetter(size, monthBased = false) {\n  return function (date, locale) {\n    let result;\n    if (monthBased) {\n      const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n      const today = date.getDate();\n      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n    } else {\n      const thisThurs = getThursdayThisIsoWeek(date);\n      // Some days of a year are part of next year according to ISO 8601.\n      // Compute the firstThurs from the year of this week's Thursday\n      const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());\n      const diff = thisThurs.getTime() - firstThurs.getTime();\n      result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\n    }\n    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  };\n}\n/**\n * Returns a date formatter that provides the week-numbering year for the input date.\n */\nfunction weekNumberingYearGetter(size, trim = false) {\n  return function (date, locale) {\n    const thisThurs = getThursdayThisIsoWeek(date);\n    const weekNumberingYear = thisThurs.getFullYear();\n    return padNumber(weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);\n  };\n}\nconst DATE_FORMATS = {};\n// Based on CLDR formats:\n// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n// See also explanations: http://cldr.unicode.org/translation/date-time\n// TODO(ocombe): support all missing cldr formats: U, Q, D, F, e, j, J, C, A, v, V, X, x\nfunction getDateFormatter(format) {\n  if (DATE_FORMATS[format]) {\n    return DATE_FORMATS[format];\n  }\n  let formatter;\n  switch (format) {\n    // Era name (AD/BC)\n    case 'G':\n    case 'GG':\n    case 'GGG':\n      formatter = dateStrGetter(3 /* TranslationType.Eras */, TranslationWidth.Abbreviated);\n      break;\n    case 'GGGG':\n      formatter = dateStrGetter(3 /* TranslationType.Eras */, TranslationWidth.Wide);\n      break;\n    case 'GGGGG':\n      formatter = dateStrGetter(3 /* TranslationType.Eras */, TranslationWidth.Narrow);\n      break;\n    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'y':\n      formatter = dateGetter(0 /* DateType.FullYear */, 1, 0, false, true);\n      break;\n    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yy':\n      formatter = dateGetter(0 /* DateType.FullYear */, 2, 0, true, true);\n      break;\n    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yyy':\n      formatter = dateGetter(0 /* DateType.FullYear */, 3, 0, false, true);\n      break;\n    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'yyyy':\n      formatter = dateGetter(0 /* DateType.FullYear */, 4, 0, false, true);\n      break;\n    // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'Y':\n      formatter = weekNumberingYearGetter(1);\n      break;\n    // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD\n    // 2010 => 10)\n    case 'YY':\n      formatter = weekNumberingYearGetter(2, true);\n      break;\n    // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD\n    // 2010 => 2010)\n    case 'YYY':\n      formatter = weekNumberingYearGetter(3);\n      break;\n    // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'YYYY':\n      formatter = weekNumberingYearGetter(4);\n      break;\n    // Month of the year (1-12), numeric\n    case 'M':\n    case 'L':\n      formatter = dateGetter(1 /* DateType.Month */, 1, 1);\n      break;\n    case 'MM':\n    case 'LL':\n      formatter = dateGetter(1 /* DateType.Month */, 2, 1);\n      break;\n    // Month of the year (January, ...), string, format\n    case 'MMM':\n      formatter = dateStrGetter(2 /* TranslationType.Months */, TranslationWidth.Abbreviated);\n      break;\n    case 'MMMM':\n      formatter = dateStrGetter(2 /* TranslationType.Months */, TranslationWidth.Wide);\n      break;\n    case 'MMMMM':\n      formatter = dateStrGetter(2 /* TranslationType.Months */, TranslationWidth.Narrow);\n      break;\n    // Month of the year (January, ...), string, standalone\n    case 'LLL':\n      formatter = dateStrGetter(2 /* TranslationType.Months */, TranslationWidth.Abbreviated, FormStyle.Standalone);\n      break;\n    case 'LLLL':\n      formatter = dateStrGetter(2 /* TranslationType.Months */, TranslationWidth.Wide, FormStyle.Standalone);\n      break;\n    case 'LLLLL':\n      formatter = dateStrGetter(2 /* TranslationType.Months */, TranslationWidth.Narrow, FormStyle.Standalone);\n      break;\n    // Week of the year (1, ... 52)\n    case 'w':\n      formatter = weekGetter(1);\n      break;\n    case 'ww':\n      formatter = weekGetter(2);\n      break;\n    // Week of the month (1, ...)\n    case 'W':\n      formatter = weekGetter(1, true);\n      break;\n    // Day of the month (1-31)\n    case 'd':\n      formatter = dateGetter(2 /* DateType.Date */, 1);\n      break;\n    case 'dd':\n      formatter = dateGetter(2 /* DateType.Date */, 2);\n      break;\n    // Day of the Week StandAlone (1, 1, Mon, Monday, M, Mo)\n    case 'c':\n    case 'cc':\n      formatter = dateGetter(7 /* DateType.Day */, 1);\n      break;\n    case 'ccc':\n      formatter = dateStrGetter(1 /* TranslationType.Days */, TranslationWidth.Abbreviated, FormStyle.Standalone);\n      break;\n    case 'cccc':\n      formatter = dateStrGetter(1 /* TranslationType.Days */, TranslationWidth.Wide, FormStyle.Standalone);\n      break;\n    case 'ccccc':\n      formatter = dateStrGetter(1 /* TranslationType.Days */, TranslationWidth.Narrow, FormStyle.Standalone);\n      break;\n    case 'cccccc':\n      formatter = dateStrGetter(1 /* TranslationType.Days */, TranslationWidth.Short, FormStyle.Standalone);\n      break;\n    // Day of the Week\n    case 'E':\n    case 'EE':\n    case 'EEE':\n      formatter = dateStrGetter(1 /* TranslationType.Days */, TranslationWidth.Abbreviated);\n      break;\n    case 'EEEE':\n      formatter = dateStrGetter(1 /* TranslationType.Days */, TranslationWidth.Wide);\n      break;\n    case 'EEEEE':\n      formatter = dateStrGetter(1 /* TranslationType.Days */, TranslationWidth.Narrow);\n      break;\n    case 'EEEEEE':\n      formatter = dateStrGetter(1 /* TranslationType.Days */, TranslationWidth.Short);\n      break;\n    // Generic period of the day (am-pm)\n    case 'a':\n    case 'aa':\n    case 'aaa':\n      formatter = dateStrGetter(0 /* TranslationType.DayPeriods */, TranslationWidth.Abbreviated);\n      break;\n    case 'aaaa':\n      formatter = dateStrGetter(0 /* TranslationType.DayPeriods */, TranslationWidth.Wide);\n      break;\n    case 'aaaaa':\n      formatter = dateStrGetter(0 /* TranslationType.DayPeriods */, TranslationWidth.Narrow);\n      break;\n    // Extended period of the day (midnight, at night, ...), standalone\n    case 'b':\n    case 'bb':\n    case 'bbb':\n      formatter = dateStrGetter(0 /* TranslationType.DayPeriods */, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\n      break;\n    case 'bbbb':\n      formatter = dateStrGetter(0 /* TranslationType.DayPeriods */, TranslationWidth.Wide, FormStyle.Standalone, true);\n      break;\n    case 'bbbbb':\n      formatter = dateStrGetter(0 /* TranslationType.DayPeriods */, TranslationWidth.Narrow, FormStyle.Standalone, true);\n      break;\n    // Extended period of the day (midnight, night, ...), standalone\n    case 'B':\n    case 'BB':\n    case 'BBB':\n      formatter = dateStrGetter(0 /* TranslationType.DayPeriods */, TranslationWidth.Abbreviated, FormStyle.Format, true);\n      break;\n    case 'BBBB':\n      formatter = dateStrGetter(0 /* TranslationType.DayPeriods */, TranslationWidth.Wide, FormStyle.Format, true);\n      break;\n    case 'BBBBB':\n      formatter = dateStrGetter(0 /* TranslationType.DayPeriods */, TranslationWidth.Narrow, FormStyle.Format, true);\n      break;\n    // Hour in AM/PM, (1-12)\n    case 'h':\n      formatter = dateGetter(3 /* DateType.Hours */, 1, -12);\n      break;\n    case 'hh':\n      formatter = dateGetter(3 /* DateType.Hours */, 2, -12);\n      break;\n    // Hour of the day (0-23)\n    case 'H':\n      formatter = dateGetter(3 /* DateType.Hours */, 1);\n      break;\n    // Hour in day, padded (00-23)\n    case 'HH':\n      formatter = dateGetter(3 /* DateType.Hours */, 2);\n      break;\n    // Minute of the hour (0-59)\n    case 'm':\n      formatter = dateGetter(4 /* DateType.Minutes */, 1);\n      break;\n    case 'mm':\n      formatter = dateGetter(4 /* DateType.Minutes */, 2);\n      break;\n    // Second of the minute (0-59)\n    case 's':\n      formatter = dateGetter(5 /* DateType.Seconds */, 1);\n      break;\n    case 'ss':\n      formatter = dateGetter(5 /* DateType.Seconds */, 2);\n      break;\n    // Fractional second\n    case 'S':\n      formatter = dateGetter(6 /* DateType.FractionalSeconds */, 1);\n      break;\n    case 'SS':\n      formatter = dateGetter(6 /* DateType.FractionalSeconds */, 2);\n      break;\n    case 'SSS':\n      formatter = dateGetter(6 /* DateType.FractionalSeconds */, 3);\n      break;\n    // Timezone ISO8601 short format (-0430)\n    case 'Z':\n    case 'ZZ':\n    case 'ZZZ':\n      formatter = timeZoneGetter(0 /* ZoneWidth.Short */);\n      break;\n    // Timezone ISO8601 extended format (-04:30)\n    case 'ZZZZZ':\n      formatter = timeZoneGetter(3 /* ZoneWidth.Extended */);\n      break;\n    // Timezone GMT short format (GMT+4)\n    case 'O':\n    case 'OO':\n    case 'OOO':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'z':\n    case 'zz':\n    case 'zzz':\n      formatter = timeZoneGetter(1 /* ZoneWidth.ShortGMT */);\n      break;\n    // Timezone GMT long format (GMT+0430)\n    case 'OOOO':\n    case 'ZZZZ':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'zzzz':\n      formatter = timeZoneGetter(2 /* ZoneWidth.Long */);\n      break;\n    default:\n      return null;\n  }\n  DATE_FORMATS[format] = formatter;\n  return formatter;\n}\nfunction timezoneToOffset(timezone, fallback) {\n  // Support: IE 11 only, Edge 13-15+\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\n  timezone = timezone.replace(/:/g, '');\n  const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\nfunction addDateMinutes(date, minutes) {\n  date = new Date(date.getTime());\n  date.setMinutes(date.getMinutes() + minutes);\n  return date;\n}\nfunction convertTimezoneToLocal(date, timezone, reverse) {\n  const reverseValue = -1;\n  const dateTimezoneOffset = date.getTimezoneOffset();\n  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n */\nfunction toDate(value) {\n  if (isDate(value)) {\n    return value;\n  }\n  if (typeof value === 'number' && !isNaN(value)) {\n    return new Date(value);\n  }\n  if (typeof value === 'string') {\n    value = value.trim();\n    if (/^(\\d{4}(-\\d{1,2}(-\\d{1,2})?)?)$/.test(value)) {\n      /* For ISO Strings without time the day, month and year must be extracted from the ISO String\n      before Date creation to avoid time offset and errors in the new Date.\n      If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n      date, some browsers (e.g. IE 9) will throw an invalid Date error.\n      If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n      is applied.\n      Note: ISO months are 0 for January, 1 for February, ... */\n      const [y, m = 1, d = 1] = value.split('-').map(val => +val);\n      return createDate(y, m - 1, d);\n    }\n    const parsedNb = parseFloat(value);\n    // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\n    if (!isNaN(value - parsedNb)) {\n      return new Date(parsedNb);\n    }\n    let match;\n    if (match = value.match(ISO8601_DATE_REGEX)) {\n      return isoStringToDate(match);\n    }\n  }\n  const date = new Date(value);\n  if (!isDate(date)) {\n    throw new _RuntimeError(2302 /* RuntimeErrorCode.INVALID_TO_DATE_CONVERSION */, ngDevMode && `Unable to convert \"${value}\" into a date`);\n  }\n  return date;\n}\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n */\nfunction isoStringToDate(match) {\n  const date = new Date(0);\n  let tzHour = 0;\n  let tzMin = 0;\n  // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\n  const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const timeSetter = match[8] ? date.setUTCHours : date.setHours;\n  // if there is a timezone defined like \"+01:00\" or \"+0100\"\n  if (match[9]) {\n    tzHour = Number(match[9] + match[10]);\n    tzMin = Number(match[9] + match[11]);\n  }\n  dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\n  const h = Number(match[4] || 0) - tzHour;\n  const m = Number(match[5] || 0) - tzMin;\n  const s = Number(match[6] || 0);\n  // The ECMAScript specification (https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.11)\n  // defines that `DateTime` milliseconds should always be rounded down, so that `999.9ms`\n  // becomes `999ms`.\n  const ms = Math.floor(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\nfunction isDate(value) {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\nconst NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\nconst MAX_DIGITS = 22;\nconst DECIMAL_SEP = '.';\nconst ZERO_CHAR = '0';\nconst PATTERN_SEP = ';';\nconst GROUP_SEP = ',';\nconst DIGIT_CHAR = '#';\nconst CURRENCY_CHAR = '¤';\nconst PERCENT_CHAR = '%';\n/**\n * Transforms a number to a locale string based on a style and a format.\n */\nfunction formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {\n  let formattedText = '';\n  let isZero = false;\n  if (!isFinite(value)) {\n    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\n  } else {\n    let parsedNumber = parseNumber(value);\n    if (isPercent) {\n      parsedNumber = toPercent(parsedNumber);\n    }\n    let minInt = pattern.minInt;\n    let minFraction = pattern.minFrac;\n    let maxFraction = pattern.maxFrac;\n    if (digitsInfo) {\n      const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n      if (parts === null) {\n        throw new _RuntimeError(2306 /* RuntimeErrorCode.INVALID_DIGIT_INFO */, ngDevMode && `${digitsInfo} is not a valid digit info`);\n      }\n      const minIntPart = parts[1];\n      const minFractionPart = parts[3];\n      const maxFractionPart = parts[5];\n      if (minIntPart != null) {\n        minInt = parseIntAutoRadix(minIntPart);\n      }\n      if (minFractionPart != null) {\n        minFraction = parseIntAutoRadix(minFractionPart);\n      }\n      if (maxFractionPart != null) {\n        maxFraction = parseIntAutoRadix(maxFractionPart);\n      } else if (minFractionPart != null && minFraction > maxFraction) {\n        maxFraction = minFraction;\n      }\n    }\n    roundNumber(parsedNumber, minFraction, maxFraction);\n    let digits = parsedNumber.digits;\n    let integerLen = parsedNumber.integerLen;\n    const exponent = parsedNumber.exponent;\n    let decimals = [];\n    isZero = digits.every(d => !d);\n    // pad zeros for small numbers\n    for (; integerLen < minInt; integerLen++) {\n      digits.unshift(0);\n    }\n    // pad zeros for small numbers\n    for (; integerLen < 0; integerLen++) {\n      digits.unshift(0);\n    }\n    // extract decimals digits\n    if (integerLen > 0) {\n      decimals = digits.splice(integerLen, digits.length);\n    } else {\n      decimals = digits;\n      digits = [0];\n    }\n    // format the integer digits with grouping separators\n    const groups = [];\n    if (digits.length >= pattern.lgSize) {\n      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n    }\n    while (digits.length > pattern.gSize) {\n      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n    }\n    if (digits.length) {\n      groups.unshift(digits.join(''));\n    }\n    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\n    // append the decimal digits\n    if (decimals.length) {\n      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\n    }\n    if (exponent) {\n      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\n    }\n  }\n  if (value < 0 && !isZero) {\n    formattedText = pattern.negPre + formattedText + pattern.negSuf;\n  } else {\n    formattedText = pattern.posPre + formattedText + pattern.posSuf;\n  }\n  return formattedText;\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as currency using locale rules.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param currency A string containing the currency symbol or its name,\n * such as \"$\" or \"Canadian Dollar\". Used in output string, but does not affect the operation\n * of the function.\n * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)\n * currency code, such as `USD` for the US dollar and `EUR` for the euro.\n * Used to determine the number of digits in the decimal part.\n * @param digitsInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted currency value.\n *\n * @see {@link formatNumber}\n * @see {@link DecimalPipe}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n */\nfunction formatCurrency(value, locale, currency, currencyCode, digitsInfo) {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);\n  pattern.maxFrac = pattern.minFrac;\n  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);\n  return res.replace(CURRENCY_CHAR, currency)\n  // if we have 2 time the currency character, the second one is ignored\n  .replace(CURRENCY_CHAR, '')\n  // If there is a spacing between currency character and the value and\n  // the currency character is suppressed by passing an empty string, the\n  // spacing character would remain as part of the string. Then we\n  // should remove it.\n  .trim();\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as a percentage according to locale rules.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param digitsInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted percentage value.\n *\n * @see {@link formatNumber}\n * @see {@link DecimalPipe}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n * @publicApi\n *\n */\nfunction formatPercent(value, locale, digitsInfo) {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);\n  return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as text, with group sizing, separator, and other\n * parameters based on the locale.\n *\n * @param value The number to format.\n * @param locale A locale code for the locale format rules to use.\n * @param digitsInfo Decimal representation options, specified by a string in the following format:\n * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.\n *\n * @returns The formatted text string.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n */\nfunction formatNumber(value, locale, digitsInfo) {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);\n}\nfunction parseNumberFormat(format, minusSign = '-') {\n  const p = {\n    minInt: 1,\n    minFrac: 0,\n    maxFrac: 0,\n    posPre: '',\n    posSuf: '',\n    negPre: '',\n    negSuf: '',\n    gSize: 0,\n    lgSize: 0\n  };\n  const patternParts = format.split(PATTERN_SEP);\n  const positive = patternParts[0];\n  const negative = patternParts[1];\n  const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1), positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)],\n    integer = positiveParts[0],\n    fraction = positiveParts[1] || '';\n  p.posPre = integer.substring(0, integer.indexOf(DIGIT_CHAR));\n  for (let i = 0; i < fraction.length; i++) {\n    const ch = fraction.charAt(i);\n    if (ch === ZERO_CHAR) {\n      p.minFrac = p.maxFrac = i + 1;\n    } else if (ch === DIGIT_CHAR) {\n      p.maxFrac = i + 1;\n    } else {\n      p.posSuf += ch;\n    }\n  }\n  const groups = integer.split(GROUP_SEP);\n  p.gSize = groups[1] ? groups[1].length : 0;\n  p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;\n  if (negative) {\n    const trunkLen = positive.length - p.posPre.length - p.posSuf.length,\n      pos = negative.indexOf(DIGIT_CHAR);\n    p.negPre = negative.substring(0, pos).replace(/'/g, '');\n    p.negSuf = negative.slice(pos + trunkLen).replace(/'/g, '');\n  } else {\n    p.negPre = minusSign + p.posPre;\n    p.negSuf = p.posSuf;\n  }\n  return p;\n}\n// Transforms a parsed number into a percentage by multiplying it by 100\nfunction toPercent(parsedNumber) {\n  // if the number is 0, don't do anything\n  if (parsedNumber.digits[0] === 0) {\n    return parsedNumber;\n  }\n  // Getting the current number of decimals\n  const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;\n  if (parsedNumber.exponent) {\n    parsedNumber.exponent += 2;\n  } else {\n    if (fractionLen === 0) {\n      parsedNumber.digits.push(0, 0);\n    } else if (fractionLen === 1) {\n      parsedNumber.digits.push(0);\n    }\n    parsedNumber.integerLen += 2;\n  }\n  return parsedNumber;\n}\n/**\n * Parses a number.\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\n */\nfunction parseNumber(num) {\n  let numStr = Math.abs(num) + '';\n  let exponent = 0,\n    digits,\n    integerLen;\n  let i, j, zeros;\n  // Decimal point?\n  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\n    numStr = numStr.replace(DECIMAL_SEP, '');\n  }\n  // Exponential form?\n  if ((i = numStr.search(/e/i)) > 0) {\n    // Work out the exponent.\n    if (integerLen < 0) integerLen = i;\n    integerLen += +numStr.slice(i + 1);\n    numStr = numStr.substring(0, i);\n  } else if (integerLen < 0) {\n    // There was no decimal point or exponent so it is an integer.\n    integerLen = numStr.length;\n  }\n  // Count the number of leading zeros.\n  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {\n    /* empty */\n  }\n  if (i === (zeros = numStr.length)) {\n    // The digits are all zero.\n    digits = [0];\n    integerLen = 1;\n  } else {\n    // Count the number of trailing zeros\n    zeros--;\n    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;\n    // Trailing zeros are insignificant so ignore them\n    integerLen -= i;\n    digits = [];\n    // Convert string to array of digits without leading/trailing zeros.\n    for (j = 0; i <= zeros; i++, j++) {\n      digits[j] = Number(numStr.charAt(i));\n    }\n  }\n  // If the number overflows the maximum allowed digits then use an exponent.\n  if (integerLen > MAX_DIGITS) {\n    digits = digits.splice(0, MAX_DIGITS - 1);\n    exponent = integerLen - 1;\n    integerLen = 1;\n  }\n  return {\n    digits,\n    exponent,\n    integerLen\n  };\n}\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changes the parsedNumber in-place\n */\nfunction roundNumber(parsedNumber, minFrac, maxFrac) {\n  if (minFrac > maxFrac) {\n    throw new _RuntimeError(2307 /* RuntimeErrorCode.INVALID_NUMBER_OF_DIGITS_AFTER_FRACTION */, ngDevMode && `The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);\n  }\n  let digits = parsedNumber.digits;\n  let fractionLen = digits.length - parsedNumber.integerLen;\n  const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\n  // The index of the digit to where rounding is to occur\n  let roundAt = fractionSize + parsedNumber.integerLen;\n  let digit = digits[roundAt];\n  if (roundAt > 0) {\n    // Drop fractional digits beyond `roundAt`\n    digits.splice(Math.max(parsedNumber.integerLen, roundAt));\n    // Set non-fractional digits beyond `roundAt` to 0\n    for (let j = roundAt; j < digits.length; j++) {\n      digits[j] = 0;\n    }\n  } else {\n    // We rounded to zero so reset the parsedNumber\n    fractionLen = Math.max(0, fractionLen);\n    parsedNumber.integerLen = 1;\n    digits.length = Math.max(1, roundAt = fractionSize + 1);\n    digits[0] = 0;\n    for (let i = 1; i < roundAt; i++) digits[i] = 0;\n  }\n  if (digit >= 5) {\n    if (roundAt - 1 < 0) {\n      for (let k = 0; k > roundAt; k--) {\n        digits.unshift(0);\n        parsedNumber.integerLen++;\n      }\n      digits.unshift(1);\n      parsedNumber.integerLen++;\n    } else {\n      digits[roundAt - 1]++;\n    }\n  }\n  // Pad out with zeros to get the required fraction length\n  for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);\n  let dropTrailingZeros = fractionSize !== 0;\n  // Minimal length = nb of decimals required + current nb of integers\n  // Any number besides that is optional and can be removed if it's a trailing 0\n  const minLen = minFrac + parsedNumber.integerLen;\n  // Do any carrying, e.g. a digit was rounded up to 10\n  const carry = digits.reduceRight(function (carry, d, i, digits) {\n    d = d + carry;\n    digits[i] = d < 10 ? d : d - 10; // d % 10\n    if (dropTrailingZeros) {\n      // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)\n      if (digits[i] === 0 && i >= minLen) {\n        digits.pop();\n      } else {\n        dropTrailingZeros = false;\n      }\n    }\n    return d >= 10 ? 1 : 0; // Math.floor(d / 10);\n  }, 0);\n  if (carry) {\n    digits.unshift(carry);\n    parsedNumber.integerLen++;\n  }\n}\nfunction parseIntAutoRadix(text) {\n  const result = parseInt(text);\n  if (isNaN(result)) {\n    throw new _RuntimeError(2305 /* RuntimeErrorCode.INVALID_INTEGER_LITERAL */, ngDevMode && 'Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\n\n/**\n * @publicApi\n */\nlet NgLocalization = /*#__PURE__*/(() => {\n  class NgLocalization {\n    static ɵfac = function NgLocalization_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgLocalization)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgLocalization,\n      factory: function NgLocalization_Factory(__ngFactoryType__) {\n        let __ngConditionalFactory__ = null;\n        if (__ngFactoryType__) {\n          __ngConditionalFactory__ = new __ngFactoryType__();\n        } else {\n          __ngConditionalFactory__ = (locale => new NgLocaleLocalization(locale))(i0.ɵɵinject(LOCALE_ID));\n        }\n        return __ngConditionalFactory__;\n      },\n      providedIn: 'root'\n    });\n  }\n  return NgLocalization;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nfunction getPluralCategory(value, cases, ngLocalization, locale) {\n  let key = `=${value}`;\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n  key = ngLocalization.getPluralCategory(value, locale);\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n  throw new _RuntimeError(2308 /* RuntimeErrorCode.NO_PLURAL_MESSAGE_FOUND */, ngDevMode && `No plural message found for value \"${value}\"`);\n}\n/**\n * Returns the plural case based on the locale\n *\n * @publicApi\n */\nlet NgLocaleLocalization = /*#__PURE__*/(() => {\n  class NgLocaleLocalization extends NgLocalization {\n    locale;\n    constructor(locale) {\n      super();\n      this.locale = locale;\n    }\n    getPluralCategory(value, locale) {\n      const plural = getLocalePluralCase(locale || this.locale)(value);\n      switch (plural) {\n        case Plural.Zero:\n          return 'zero';\n        case Plural.One:\n          return 'one';\n        case Plural.Two:\n          return 'two';\n        case Plural.Few:\n          return 'few';\n        case Plural.Many:\n          return 'many';\n        default:\n          return 'other';\n      }\n    }\n    static ɵfac = function NgLocaleLocalization_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgLocaleLocalization)(i0.ɵɵinject(LOCALE_ID));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgLocaleLocalization,\n      factory: NgLocaleLocalization.ɵfac\n    });\n  }\n  return NgLocaleLocalization;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst WS_REGEXP = /\\s+/;\nconst EMPTY_ARRAY = [];\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```html\n * <some-element [ngClass]=\"stringExp|arrayExp|objExp|Set\">...</some-element>\n *\n * <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * For more simple use cases you can use the [class bindings](/guide/templates/binding#css-class-and-style-property-bindings) directly.\n * It doesn't require importing a directive.\n *\n * ```html\n * <some-element [class]=\"'first second'\">...</some-element>\n *\n * <some-element [class.expanded]=\"isExpanded\">...</some-element>\n *\n * <some-element [class]=\"['first', 'second']\">...</some-element>\n *\n * <some-element [class]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n * ```\n * @description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n *\n * @see [Class bindings](/guide/templates/binding#css-class-and-style-property-bindings)\n *\n * @publicApi\n */\nlet NgClass = /*#__PURE__*/(() => {\n  class NgClass {\n    _ngEl;\n    _renderer;\n    initialClasses = EMPTY_ARRAY;\n    rawClass;\n    stateMap = new Map();\n    constructor(_ngEl, _renderer) {\n      this._ngEl = _ngEl;\n      this._renderer = _renderer;\n    }\n    set klass(value) {\n      this.initialClasses = value != null ? value.trim().split(WS_REGEXP) : EMPTY_ARRAY;\n    }\n    set ngClass(value) {\n      this.rawClass = typeof value === 'string' ? value.trim().split(WS_REGEXP) : value;\n    }\n    /*\n    The NgClass directive uses the custom change detection algorithm for its inputs. The custom\n    algorithm is necessary since inputs are represented as complex object or arrays that need to be\n    deeply-compared.\n       This algorithm is perf-sensitive since NgClass is used very frequently and its poor performance\n    might negatively impact runtime performance of the entire change detection cycle. The design of\n    this algorithm is making sure that:\n    - there is no unnecessary DOM manipulation (CSS classes are added / removed from the DOM only when\n    needed), even if references to bound objects change;\n    - there is no memory allocation if nothing changes (even relatively modest memory allocation\n    during the change detection cycle can result in GC pauses for some of the CD cycles).\n       The algorithm works by iterating over the set of bound classes, staring with [class] binding and\n    then going over [ngClass] binding. For each CSS class name:\n    - check if it was seen before (this information is tracked in the state map) and if its value\n    changed;\n    - mark it as \"touched\" - names that are not marked are not present in the latest set of binding\n    and we can remove such class name from the internal data structures;\n       After iteration over all the CSS class names we've got data structure with all the information\n    necessary to synchronize changes to the DOM - it is enough to iterate over the state map, flush\n    changes to the DOM and reset internal data structures so those are ready for the next change\n    detection cycle.\n     */\n    ngDoCheck() {\n      // classes from the [class] binding\n      for (const klass of this.initialClasses) {\n        this._updateState(klass, true);\n      }\n      // classes from the [ngClass] binding\n      const rawClass = this.rawClass;\n      if (Array.isArray(rawClass) || rawClass instanceof Set) {\n        for (const klass of rawClass) {\n          this._updateState(klass, true);\n        }\n      } else if (rawClass != null) {\n        for (const klass of Object.keys(rawClass)) {\n          this._updateState(klass, Boolean(rawClass[klass]));\n        }\n      }\n      this._applyStateDiff();\n    }\n    _updateState(klass, nextEnabled) {\n      const state = this.stateMap.get(klass);\n      if (state !== undefined) {\n        if (state.enabled !== nextEnabled) {\n          state.changed = true;\n          state.enabled = nextEnabled;\n        }\n        state.touched = true;\n      } else {\n        this.stateMap.set(klass, {\n          enabled: nextEnabled,\n          changed: true,\n          touched: true\n        });\n      }\n    }\n    _applyStateDiff() {\n      for (const stateEntry of this.stateMap) {\n        const klass = stateEntry[0];\n        const state = stateEntry[1];\n        if (state.changed) {\n          this._toggleClass(klass, state.enabled);\n          state.changed = false;\n        } else if (!state.touched) {\n          // A class that was previously active got removed from the new collection of classes -\n          // remove from the DOM as well.\n          if (state.enabled) {\n            this._toggleClass(klass, false);\n          }\n          this.stateMap.delete(klass);\n        }\n        state.touched = false;\n      }\n    }\n    _toggleClass(klass, enabled) {\n      if (ngDevMode) {\n        if (typeof klass !== 'string') {\n          throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${_stringify(klass)}`);\n        }\n      }\n      klass = klass.trim();\n      if (klass.length > 0) {\n        klass.split(WS_REGEXP).forEach(klass => {\n          if (enabled) {\n            this._renderer.addClass(this._ngEl.nativeElement, klass);\n          } else {\n            this._renderer.removeClass(this._ngEl.nativeElement, klass);\n          }\n        });\n      }\n    }\n    static ɵfac = function NgClass_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgClass)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgClass,\n      selectors: [[\"\", \"ngClass\", \"\"]],\n      inputs: {\n        klass: [0, \"class\", \"klass\"],\n        ngClass: \"ngClass\"\n      }\n    });\n  }\n  return NgClass;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Instantiates a {@link /api/core/Component Component} type and inserts its Host View into the current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will be destroyed.\n *\n * @usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInputs`: Optional component inputs object, which will be bind to the\n * component.\n *\n * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletEnvironmentInjector`: Optional custom {@link EnvironmentInjector} which will\n * provide the component's environment.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if it exists.\n *\n * * `ngComponentOutletNgModule`: Optional NgModule class reference to allow loading another\n * module dynamically, then loading a component from that module.\n *\n * * `ngComponentOutletNgModuleFactory`: Deprecated config option that allows providing optional\n * NgModule factory to allow loading another module dynamically, then loading a component from that\n * module. Use `ngComponentOutletNgModule` instead.\n *\n * ### Syntax\n *\n * Simple\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * With inputs\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   inputs: inputsExpression;\">\n * </ng-container>\n * ```\n *\n * Customized injector/content\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized NgModule reference\n * ```html\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModule: ngModuleClass;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n *\n * @publicApi\n * @ngModule CommonModule\n */\nlet NgComponentOutlet = /*#__PURE__*/(() => {\n  class NgComponentOutlet {\n    _viewContainerRef;\n    // TODO(crisbeto): this should be `Type<T>`, but doing so broke a few\n    // targets in a TGP so we need to do it in a major version.\n    /** Component that should be rendered in the outlet. */\n    ngComponentOutlet = null;\n    ngComponentOutletInputs;\n    ngComponentOutletInjector;\n    ngComponentOutletEnvironmentInjector;\n    ngComponentOutletContent;\n    ngComponentOutletNgModule;\n    /**\n     * @deprecated This input is deprecated, use `ngComponentOutletNgModule` instead.\n     */\n    ngComponentOutletNgModuleFactory;\n    _componentRef;\n    _moduleRef;\n    /**\n     * A helper data structure that allows us to track inputs that were part of the\n     * ngComponentOutletInputs expression. Tracking inputs is necessary for proper removal of ones\n     * that are no longer referenced.\n     */\n    _inputsUsed = new Map();\n    /**\n     * Gets the instance of the currently-rendered component.\n     * Will be null if no component has been rendered.\n     */\n    get componentInstance() {\n      return this._componentRef?.instance ?? null;\n    }\n    constructor(_viewContainerRef) {\n      this._viewContainerRef = _viewContainerRef;\n    }\n    _needToReCreateNgModuleInstance(changes) {\n      // Note: square brackets property accessor is safe for Closure compiler optimizations (the\n      // `changes` argument of the `ngOnChanges` lifecycle hook retains the names of the fields that\n      // were changed).\n      return changes['ngComponentOutletNgModule'] !== undefined || changes['ngComponentOutletNgModuleFactory'] !== undefined;\n    }\n    _needToReCreateComponentInstance(changes) {\n      // Note: square brackets property accessor is safe for Closure compiler optimizations (the\n      // `changes` argument of the `ngOnChanges` lifecycle hook retains the names of the fields that\n      // were changed).\n      return changes['ngComponentOutlet'] !== undefined || changes['ngComponentOutletContent'] !== undefined || changes['ngComponentOutletInjector'] !== undefined || changes['ngComponentOutletEnvironmentInjector'] !== undefined || this._needToReCreateNgModuleInstance(changes);\n    }\n    /** @docs-private */\n    ngOnChanges(changes) {\n      if (this._needToReCreateComponentInstance(changes)) {\n        this._viewContainerRef.clear();\n        this._inputsUsed.clear();\n        this._componentRef = undefined;\n        if (this.ngComponentOutlet) {\n          const injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n          if (this._needToReCreateNgModuleInstance(changes)) {\n            this._moduleRef?.destroy();\n            if (this.ngComponentOutletNgModule) {\n              this._moduleRef = createNgModule(this.ngComponentOutletNgModule, getParentInjector(injector));\n            } else if (this.ngComponentOutletNgModuleFactory) {\n              this._moduleRef = this.ngComponentOutletNgModuleFactory.create(getParentInjector(injector));\n            } else {\n              this._moduleRef = undefined;\n            }\n          }\n          this._componentRef = this._viewContainerRef.createComponent(this.ngComponentOutlet, {\n            injector,\n            ngModuleRef: this._moduleRef,\n            projectableNodes: this.ngComponentOutletContent,\n            environmentInjector: this.ngComponentOutletEnvironmentInjector\n          });\n        }\n      }\n    }\n    /** @docs-private */\n    ngDoCheck() {\n      if (this._componentRef) {\n        if (this.ngComponentOutletInputs) {\n          for (const inputName of Object.keys(this.ngComponentOutletInputs)) {\n            this._inputsUsed.set(inputName, true);\n          }\n        }\n        this._applyInputStateDiff(this._componentRef);\n      }\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      this._moduleRef?.destroy();\n    }\n    _applyInputStateDiff(componentRef) {\n      for (const [inputName, touched] of this._inputsUsed) {\n        if (!touched) {\n          // The input that was previously active no longer exists and needs to be set to undefined.\n          componentRef.setInput(inputName, undefined);\n          this._inputsUsed.delete(inputName);\n        } else {\n          // Since touched is true, it can be asserted that the inputs object is not empty.\n          componentRef.setInput(inputName, this.ngComponentOutletInputs[inputName]);\n          this._inputsUsed.set(inputName, false);\n        }\n      }\n    }\n    static ɵfac = function NgComponentOutlet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgComponentOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgComponentOutlet,\n      selectors: [[\"\", \"ngComponentOutlet\", \"\"]],\n      inputs: {\n        ngComponentOutlet: \"ngComponentOutlet\",\n        ngComponentOutletInputs: \"ngComponentOutletInputs\",\n        ngComponentOutletInjector: \"ngComponentOutletInjector\",\n        ngComponentOutletEnvironmentInjector: \"ngComponentOutletEnvironmentInjector\",\n        ngComponentOutletContent: \"ngComponentOutletContent\",\n        ngComponentOutletNgModule: \"ngComponentOutletNgModule\",\n        ngComponentOutletNgModuleFactory: \"ngComponentOutletNgModuleFactory\"\n      },\n      exportAs: [\"ngComponentOutlet\"],\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return NgComponentOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n// Helper function that returns an Injector instance of a parent NgModule.\nfunction getParentInjector(injector) {\n  const parentNgModule = injector.get(NgModuleRef);\n  return parentNgModule.injector;\n}\n\n/**\n * @publicApi\n *\n * @deprecated 20.0\n * The `ngFor` directive is deprecated. Use the `@for` block instead.\n */\nclass NgForOfContext {\n  $implicit;\n  ngForOf;\n  index;\n  count;\n  constructor(/** Reference to the current item from the collection. */\n  $implicit,\n  /**\n   * The value of the iterable expression. Useful when the expression is\n   * more complex then a property access, for example when using the async pipe\n   * (`userStreams | async`).\n   */\n  ngForOf, /** Returns an index of the current item in the collection. */\n  index, /** Returns total amount of items in the collection. */\n  count) {\n    this.$implicit = $implicit;\n    this.ngForOf = ngForOf;\n    this.index = index;\n    this.count = count;\n  }\n  // Indicates whether this is the first item in the collection.\n  get first() {\n    return this.index === 0;\n  }\n  // Indicates whether this is the last item in the collection.\n  get last() {\n    return this.index === this.count - 1;\n  }\n  // Indicates whether an index of this item in the collection is even.\n  get even() {\n    return this.index % 2 === 0;\n  }\n  // Indicates whether an index of this item in the collection is odd.\n  get odd() {\n    return !this.even;\n  }\n}\n/**\n * A [structural directive](guide/directives/structural-directives) that renders\n * a template for each item in a collection.\n * The directive is placed on an element, which becomes the parent\n * of the cloned templates.\n *\n * The `ngForOf` directive is generally used in the\n * [shorthand form](guide/directives/structural-directives#asterisk) `*ngFor`.\n * In this form, the template to be rendered for each iteration is the content\n * of an anchor element containing the directive.\n *\n * The following example shows the shorthand syntax with some options,\n * contained in an `<li>` element.\n *\n * ```html\n * <li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>\n * ```\n *\n * The shorthand form expands into a long form that uses the `ngForOf` selector\n * on an `<ng-template>` element.\n * The content of the `<ng-template>` element is the `<li>` element that held the\n * short-form directive.\n *\n * Here is the expanded version of the short-form example.\n *\n * ```html\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * Angular automatically expands the shorthand syntax as it compiles the template.\n * The context for each embedded view is logically merged to the current component\n * context according to its lexical position.\n *\n * When using the shorthand syntax, Angular allows only [one structural directive\n * on an element](guide/directives/structural-directives#one-per-element).\n * If you want to iterate conditionally, for example,\n * put the `*ngIf` on a container element that wraps the `*ngFor` element.\n * For further discussion, see\n * [Structural Directives](guide/directives/structural-directives#one-per-element).\n *\n * @usageNotes\n *\n * ### Local variables\n *\n * `NgForOf` provides exported values that can be aliased to local variables.\n * For example:\n *\n *  ```html\n * <li *ngFor=\"let user of users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * The following exported values can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `count: number`: The length of the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ### Change propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls that are present, such as `<input>` elements that accept user input. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * For more on animations, see [Transitions and Triggers](guide/animations/transition-and-triggers).\n *\n * The identities of elements in the iterator can change while the data does not.\n * This can happen, for example, if the iterator is produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response produces objects with\n * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted).\n *\n * To avoid this expensive operation, you can customize the default tracking algorithm.\n * by supplying the `trackBy` option to `NgForOf`.\n * `trackBy` takes a function that has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * @see [Structural Directives](guide/directives/structural-directives)\n * @ngModule CommonModule\n * @publicApi\n *\n * @deprecated 20.0\n * Use the `@for` block instead. Intent to remove in v22\n */\nlet NgForOf = /*#__PURE__*/(() => {\n  class NgForOf {\n    _viewContainer;\n    _template;\n    _differs;\n    /**\n     * The value of the iterable expression, which can be used as a\n     * [template input variable](guide/directives/structural-directives#shorthand).\n     * @deprecated The `ngFor` directive is deprecated. Use the `@for` block instead.\n     */\n    set ngForOf(ngForOf) {\n      this._ngForOf = ngForOf;\n      this._ngForOfDirty = true;\n    }\n    /**\n     * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.\n     *\n     * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object\n     * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n     * as the key.\n     *\n     * `NgForOf` uses the computed key to associate items in an iterable with DOM elements\n     * it produces for these items.\n     *\n     * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an\n     * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a\n     * primary key), and this iterable could be updated with new object instances that still\n     * represent the same underlying entity (for example, when data is re-fetched from the server,\n     * and the iterable is recreated and re-rendered, but most of the data is still the same).\n     *\n     * @see {@link TrackByFunction}\n     * @deprecated The `ngFor` directive is deprecated. Use the `@for` block instead.\n     */\n    set ngForTrackBy(fn) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}. ` + `See https://angular.dev/api/common/NgForOf#change-propagation for more information.`);\n      }\n      this._trackByFn = fn;\n    }\n    get ngForTrackBy() {\n      return this._trackByFn;\n    }\n    _ngForOf = null;\n    _ngForOfDirty = true;\n    _differ = null;\n    // waiting for microsoft/typescript#43662 to allow the return type `TrackByFunction|undefined` for\n    // the getter\n    _trackByFn;\n    constructor(_viewContainer, _template, _differs) {\n      this._viewContainer = _viewContainer;\n      this._template = _template;\n      this._differs = _differs;\n    }\n    /**\n     * A reference to the template that is stamped out for each item in the iterable.\n     * @see [template reference variable](guide/templates/variables#template-reference-variables)\n     * @deprecated The `ngFor` directive is deprecated. Use the `@for` block instead.\n     */\n    set ngForTemplate(value) {\n      // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n      // The current type is too restrictive; a template that just uses index, for example,\n      // should be acceptable.\n      if (value) {\n        this._template = value;\n      }\n    }\n    /**\n     * Applies the changes when needed.\n     * @docs-private\n     */\n    ngDoCheck() {\n      if (this._ngForOfDirty) {\n        this._ngForOfDirty = false;\n        // React on ngForOf changes only once all inputs have been initialized\n        const value = this._ngForOf;\n        if (!this._differ && value) {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            try {\n              // CAUTION: this logic is duplicated for production mode below, as the try-catch\n              // is only present in development builds.\n              this._differ = this._differs.find(value).create(this.ngForTrackBy);\n            } catch {\n              let errorMessage = `Cannot find a differ supporting object '${value}' of type '` + `${getTypeName(value)}'. NgFor only supports binding to Iterables, such as Arrays.`;\n              if (typeof value === 'object') {\n                errorMessage += ' Did you mean to use the keyvalue pipe?';\n              }\n              throw new _RuntimeError(-2200 /* RuntimeErrorCode.NG_FOR_MISSING_DIFFER */, errorMessage);\n            }\n          } else {\n            // CAUTION: this logic is duplicated for development mode above, as the try-catch\n            // is only present in development builds.\n            this._differ = this._differs.find(value).create(this.ngForTrackBy);\n          }\n        }\n      }\n      if (this._differ) {\n        const changes = this._differ.diff(this._ngForOf);\n        if (changes) this._applyChanges(changes);\n      }\n    }\n    _applyChanges(changes) {\n      const viewContainer = this._viewContainer;\n      changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n        if (item.previousIndex == null) {\n          // NgForOf is never \"null\" or \"undefined\" here because the differ detected\n          // that a new item needs to be inserted from the iterable. This implies that\n          // there is an iterable value for \"_ngForOf\".\n          viewContainer.createEmbeddedView(this._template, new NgForOfContext(item.item, this._ngForOf, -1, -1), currentIndex === null ? undefined : currentIndex);\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);\n        } else if (adjustedPreviousIndex !== null) {\n          const view = viewContainer.get(adjustedPreviousIndex);\n          viewContainer.move(view, currentIndex);\n          applyViewChange(view, item);\n        }\n      });\n      for (let i = 0, ilen = viewContainer.length; i < ilen; i++) {\n        const viewRef = viewContainer.get(i);\n        const context = viewRef.context;\n        context.index = i;\n        context.count = ilen;\n        context.ngForOf = this._ngForOf;\n      }\n      changes.forEachIdentityChange(record => {\n        const viewRef = viewContainer.get(record.currentIndex);\n        applyViewChange(viewRef, record);\n      });\n    }\n    /**\n     * Asserts the correct type of the context for the template that `NgForOf` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type-check compiler that the\n     * `NgForOf` structural directive renders its template with a specific context type.\n     */\n    static ngTemplateContextGuard(dir, ctx) {\n      return true;\n    }\n    static ɵfac = function NgForOf_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgForOf)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgForOf,\n      selectors: [[\"\", \"ngFor\", \"\", \"ngForOf\", \"\"]],\n      inputs: {\n        ngForOf: \"ngForOf\",\n        ngForTrackBy: \"ngForTrackBy\",\n        ngForTemplate: \"ngForTemplate\"\n      }\n    });\n  }\n  return NgForOf;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction applyViewChange(view, record) {\n  view.context.$implicit = record.item;\n}\nfunction getTypeName(type) {\n  return type['name'] || typeof type;\n}\n\n/**\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean.\n * When the expression evaluates to true, Angular renders the template\n * provided in a `then` clause, and when  false or null,\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * A [shorthand form](guide/directives/structural-directives#asterisk) of the directive,\n * `*ngIf=\"condition\"`, is generally used, provided\n * as an attribute of the anchor element for the inserted template.\n * Angular expands this into a more explicit version, in which the anchor element\n * is contained in an `<ng-template>` element.\n *\n * Simple form with shorthand syntax:\n *\n * ```html\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\n * ```\n *\n * Simple form with expanded syntax:\n *\n * ```html\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\n * true.</div></ng-template>\n * ```\n *\n * Form with an \"else\" block:\n *\n * ```html\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Shorthand form with \"then\" and \"else\" blocks:\n *\n * ```html\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Form with storing the value locally:\n *\n * ```html\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\n * ```\n *\n * @usageNotes\n *\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\n * as seen in the following  example.\n * The default `else` template is blank.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * To display a template when `expression` evaluates to false, use an `else` template\n * binding as shown in the following example.\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\n * The template can be defined anywhere in the component view, but is typically placed right after\n * `ngIf` for readability.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using an external `then` template\n *\n * In the previous example, the then-clause template is specified inline, as the content of the\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\n * change which template to use at runtime, as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing a conditional result in a variable\n *\n * You might want to show a set of properties from the same object. If you are waiting\n * for asynchronous data, the object can be undefined.\n * In this case, you can use `ngIf` and store the result of the condition in a local\n * variable as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * This code uses only one `AsyncPipe`, so only one subscription is created.\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\n * You can then bind the local `user` repeatedly.\n *\n * The conditional displays the data only if `userStream` returns a value,\n * so you don't need to use the\n * safe-navigation-operator (`?.`)\n * to guard against null values when accessing properties.\n * You can display an alternative template while waiting for the data.\n *\n * ### Shorthand syntax\n *\n * The shorthand syntax `*ngIf` expands into two separate template specifications\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\n * that is meant to show a loading page while waiting for data to be loaded.\n *\n * ```html\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\n *  ...\n * </div>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * You can see that the \"else\" clause references the `<ng-template>`\n * with the `#loading` label, and the template for the \"then\" clause\n * is provided as the content of the anchor element.\n *\n * However, when Angular expands the shorthand syntax, it creates\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\n * The anchor element containing the template for the \"then\" clause becomes\n * the content of this unlabeled `<ng-template>` tag.\n *\n * ```html\n * <ng-template [ngIf]=\"heroes\" [ngIfElse]=\"loading\">\n *  <div class=\"hero-list\">\n *   ...\n *  </div>\n * </ng-template>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * The presence of the implicit template object has implications for the nesting of\n * structural directives. For more on this subject, see\n * [Structural Directives](guide/directives/structural-directives#one-per-element).\n *\n * @ngModule CommonModule\n * @publicApi\n *\n * @deprecated 20.0\n * Use the `@if` block instead. Intent to remove in v22\n */\nlet NgIf = /*#__PURE__*/(() => {\n  class NgIf {\n    _viewContainer;\n    _context = new NgIfContext();\n    _thenTemplateRef = null;\n    _elseTemplateRef = null;\n    _thenViewRef = null;\n    _elseViewRef = null;\n    constructor(_viewContainer, templateRef) {\n      this._viewContainer = _viewContainer;\n      this._thenTemplateRef = templateRef;\n    }\n    /**\n     * The Boolean expression to evaluate as the condition for showing a template.\n     * @deprecated Use the `@if` block instead. Intent to remove in v22\n     */\n    set ngIf(condition) {\n      this._context.$implicit = this._context.ngIf = condition;\n      this._updateView();\n    }\n    /**\n     * A template to show if the condition expression evaluates to true.\n     * @deprecated Use the `@if` block instead. Intent to remove in v22\n     */\n    set ngIfThen(templateRef) {\n      assertTemplate(templateRef, (typeof ngDevMode === 'undefined' || ngDevMode) && 'ngIfThen');\n      this._thenTemplateRef = templateRef;\n      this._thenViewRef = null; // clear previous view if any.\n      this._updateView();\n    }\n    /**\n     * A template to show if the condition expression evaluates to false.\n     * @deprecated Use the `@if` block instead. Intent to remove in v22\n     */\n    set ngIfElse(templateRef) {\n      assertTemplate(templateRef, (typeof ngDevMode === 'undefined' || ngDevMode) && 'ngIfElse');\n      this._elseTemplateRef = templateRef;\n      this._elseViewRef = null; // clear previous view if any.\n      this._updateView();\n    }\n    _updateView() {\n      if (this._context.$implicit) {\n        if (!this._thenViewRef) {\n          this._viewContainer.clear();\n          this._elseViewRef = null;\n          if (this._thenTemplateRef) {\n            this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n          }\n        }\n      } else {\n        if (!this._elseViewRef) {\n          this._viewContainer.clear();\n          this._thenViewRef = null;\n          if (this._elseTemplateRef) {\n            this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n          }\n        }\n      }\n    }\n    /** @internal */\n    static ngIfUseIfTypeGuard;\n    /**\n     * Assert the correct type of the expression bound to the `ngIf` input within the template.\n     *\n     * The presence of this static field is a signal to the Ivy template type check compiler that\n     * when the `NgIf` structural directive renders its template, the type of the expression bound\n     * to `ngIf` should be narrowed in some way. For `NgIf`, the binding expression itself is used to\n     * narrow its type, which allows the strictNullChecks feature of TypeScript to work with `NgIf`.\n     */\n    static ngTemplateGuard_ngIf;\n    /**\n     * Asserts the correct type of the context for the template that `NgIf` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type-check compiler that the\n     * `NgIf` structural directive renders its template with a specific context type.\n     */\n    static ngTemplateContextGuard(dir, ctx) {\n      return true;\n    }\n    static ɵfac = function NgIf_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgIf)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgIf,\n      selectors: [[\"\", \"ngIf\", \"\"]],\n      inputs: {\n        ngIf: \"ngIf\",\n        ngIfThen: \"ngIfThen\",\n        ngIfElse: \"ngIfElse\"\n      }\n    });\n  }\n  return NgIf;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @publicApi\n *\n * @deprecated 20.0\n * The ngIf directive is deprecated in favor of the @if block instead.\n */\nclass NgIfContext {\n  $implicit = null;\n  ngIf = null;\n}\nfunction assertTemplate(templateRef, property) {\n  if (templateRef && !templateRef.createEmbeddedView) {\n    throw new _RuntimeError(2020 /* RuntimeErrorCode.NG_IF_NOT_A_TEMPLATE_REF */, (typeof ngDevMode === 'undefined' || ngDevMode) && `${property} must be a TemplateRef, but received '${_stringify(templateRef)}'.`);\n  }\n}\nclass SwitchView {\n  _viewContainerRef;\n  _templateRef;\n  _created = false;\n  constructor(_viewContainerRef, _templateRef) {\n    this._viewContainerRef = _viewContainerRef;\n    this._templateRef = _templateRef;\n  }\n  create() {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n  destroy() {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n  enforceState(created) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n/**\n * @ngModule CommonModule\n *\n * @description\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * @usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```html\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```html\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```html\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```html\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * @publicApi\n * @see {@link NgSwitchCase}\n * @see {@link NgSwitchDefault}\n * @see [Structural Directives](guide/directives/structural-directives)\n *\n * @deprecated 20.0\n * Use the `@switch` block instead. Intent to remove in v22\n */\nlet NgSwitch = /*#__PURE__*/(() => {\n  class NgSwitch {\n    _defaultViews = [];\n    _defaultUsed = false;\n    _caseCount = 0;\n    _lastCaseCheckIndex = 0;\n    _lastCasesMatched = false;\n    _ngSwitch;\n    /** @deprecated Use the `@switch` block instead. Intent to remove in v22 */\n    set ngSwitch(newValue) {\n      this._ngSwitch = newValue;\n      if (this._caseCount === 0) {\n        this._updateDefaultCases(true);\n      }\n    }\n    /** @internal */\n    _addCase() {\n      return this._caseCount++;\n    }\n    /** @internal */\n    _addDefault(view) {\n      this._defaultViews.push(view);\n    }\n    /** @internal */\n    _matchCase(value) {\n      const matched = value === this._ngSwitch;\n      this._lastCasesMatched ||= matched;\n      this._lastCaseCheckIndex++;\n      if (this._lastCaseCheckIndex === this._caseCount) {\n        this._updateDefaultCases(!this._lastCasesMatched);\n        this._lastCaseCheckIndex = 0;\n        this._lastCasesMatched = false;\n      }\n      return matched;\n    }\n    _updateDefaultCases(useDefault) {\n      if (this._defaultViews.length > 0 && useDefault !== this._defaultUsed) {\n        this._defaultUsed = useDefault;\n        for (const defaultView of this._defaultViews) {\n          defaultView.enforceState(useDefault);\n        }\n      }\n    }\n    static ɵfac = function NgSwitch_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgSwitch)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgSwitch,\n      selectors: [[\"\", \"ngSwitch\", \"\"]],\n      inputs: {\n        ngSwitch: \"ngSwitch\"\n      }\n    });\n  }\n  return NgSwitch;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @ngModule CommonModule\n *\n * @description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * @usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```html\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * As of Angular v17 the NgSwitch directive uses strict equality comparison (`===`) instead of\n * loose equality (`==`) to match different cases.\n *\n * @publicApi\n * @see {@link NgSwitch}\n * @see {@link NgSwitchDefault}\n *\n * @deprecated 20.0\n * Use the `@case` block within a `@switch` block instead. Intent to remove in v22\n */\nlet NgSwitchCase = /*#__PURE__*/(() => {\n  class NgSwitchCase {\n    ngSwitch;\n    _view;\n    /**\n     * Stores the HTML template to be selected on match.\n     * @deprecated Use the `@case` block within a `@switch` block instead. Intent to remove in v22\n     */\n    ngSwitchCase;\n    constructor(viewContainer, templateRef, ngSwitch) {\n      this.ngSwitch = ngSwitch;\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n        throwNgSwitchProviderNotFoundError('ngSwitchCase', 'NgSwitchCase');\n      }\n      ngSwitch._addCase();\n      this._view = new SwitchView(viewContainer, templateRef);\n    }\n    /**\n     * Performs case matching. For internal use only.\n     * @docs-private\n     */\n    ngDoCheck() {\n      this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));\n    }\n    static ɵfac = function NgSwitchCase_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgSwitchCase)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(NgSwitch, 9));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgSwitchCase,\n      selectors: [[\"\", \"ngSwitchCase\", \"\"]],\n      inputs: {\n        ngSwitchCase: \"ngSwitchCase\"\n      }\n    });\n  }\n  return NgSwitchCase;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * @publicApi\n * @see {@link NgSwitch}\n * @see {@link NgSwitchCase}\n *\n * @deprecated 20.0\n * Use the `@default` block within a `@switch` block instead. Intent to remove in v22\n */\nlet NgSwitchDefault = /*#__PURE__*/(() => {\n  class NgSwitchDefault {\n    constructor(viewContainer, templateRef, ngSwitch) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n        throwNgSwitchProviderNotFoundError('ngSwitchDefault', 'NgSwitchDefault');\n      }\n      ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n    }\n    static ɵfac = function NgSwitchDefault_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgSwitchDefault)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(NgSwitch, 9));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgSwitchDefault,\n      selectors: [[\"\", \"ngSwitchDefault\", \"\"]]\n    });\n  }\n  return NgSwitchDefault;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction throwNgSwitchProviderNotFoundError(attrName, directiveName) {\n  throw new _RuntimeError(2000 /* RuntimeErrorCode.PARENT_NG_SWITCH_NOT_FOUND */, `An element with the \"${attrName}\" attribute ` + `(matching the \"${directiveName}\" directive) must be located inside an element with the \"ngSwitch\" attribute ` + `(matching \"NgSwitch\" directive)`);\n}\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```html\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n *\n * @description\n *\n * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n *\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n *\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n *\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n *\n * @publicApi\n */\nlet NgPlural = /*#__PURE__*/(() => {\n  class NgPlural {\n    _localization;\n    _activeView;\n    _caseViews = {};\n    constructor(_localization) {\n      this._localization = _localization;\n    }\n    set ngPlural(value) {\n      this._updateView(value);\n    }\n    addCase(value, switchView) {\n      this._caseViews[value] = switchView;\n    }\n    _updateView(switchValue) {\n      this._clearViews();\n      const cases = Object.keys(this._caseViews);\n      const key = getPluralCategory(switchValue, cases, this._localization);\n      this._activateView(this._caseViews[key]);\n    }\n    _clearViews() {\n      if (this._activeView) this._activeView.destroy();\n    }\n    _activateView(view) {\n      if (view) {\n        this._activeView = view;\n        this._activeView.create();\n      }\n    }\n    static ɵfac = function NgPlural_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgPlural)(i0.ɵɵdirectiveInject(NgLocalization));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgPlural,\n      selectors: [[\"\", \"ngPlural\", \"\"]],\n      inputs: {\n        ngPlural: \"ngPlural\"\n      }\n    });\n  }\n  return NgPlural;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that will be added/removed from the parent {@link NgPlural} when the\n * given expression matches the plural expression according to CLDR rules.\n *\n * @usageNotes\n * ```html\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n *```\n *\n * See {@link NgPlural} for more details and example.\n *\n * @publicApi\n */\nlet NgPluralCase = /*#__PURE__*/(() => {\n  class NgPluralCase {\n    value;\n    constructor(value, template, viewContainer, ngPlural) {\n      this.value = value;\n      const isANumber = !isNaN(Number(value));\n      ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n    }\n    static ɵfac = function NgPluralCase_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgPluralCase)(i0.ɵɵinjectAttribute('ngPluralCase'), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(NgPlural, 1));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgPluralCase,\n      selectors: [[\"\", \"ngPluralCase\", \"\"]]\n    });\n  }\n  return NgPluralCase;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n *\n * Set the width of the containing element to a pixel value returned by an expression.\n *\n * ```html\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * ```\n *\n * Set a collection of style values using an expression that returns key-value pairs.\n *\n * ```html\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * For more simple use cases you can use the [style bindings](/guide/templates/binding#css-class-and-style-property-bindings) directly.\n * It doesn't require importing a directive.\n *\n * Set the font of the containing element to the result of an expression.\n *\n * ```html\n * <some-element [style]=\"{'font-style': styleExp}\">...</some-element>\n * ```\n *\n * @description\n *\n * An attribute directive that updates styles for the containing HTML element.\n * Sets one or more style properties, specified as colon-separated key-value pairs.\n * The key is a style name, with an optional `.<unit>` suffix\n * (such as 'top.px', 'font-style.em').\n * The value is an expression to be evaluated.\n * The resulting non-null value, expressed in the given unit,\n * is assigned to the given style property.\n * If the result of evaluation is null, the corresponding style is removed.\n *\n * @see [Style bindings](/guide/templates/binding#css-class-and-style-property-bindings)\n *\n * @publicApi\n */\nlet NgStyle = /*#__PURE__*/(() => {\n  class NgStyle {\n    _ngEl;\n    _differs;\n    _renderer;\n    _ngStyle = null;\n    _differ = null;\n    constructor(_ngEl, _differs, _renderer) {\n      this._ngEl = _ngEl;\n      this._differs = _differs;\n      this._renderer = _renderer;\n    }\n    set ngStyle(values) {\n      this._ngStyle = values;\n      if (!this._differ && values) {\n        this._differ = this._differs.find(values).create();\n      }\n    }\n    ngDoCheck() {\n      if (this._differ) {\n        const changes = this._differ.diff(this._ngStyle);\n        if (changes) {\n          this._applyChanges(changes);\n        }\n      }\n    }\n    _setStyle(nameAndUnit, value) {\n      const [name, unit] = nameAndUnit.split('.');\n      const flags = name.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\n      if (value != null) {\n        this._renderer.setStyle(this._ngEl.nativeElement, name, unit ? `${value}${unit}` : value, flags);\n      } else {\n        this._renderer.removeStyle(this._ngEl.nativeElement, name, flags);\n      }\n    }\n    _applyChanges(changes) {\n      changes.forEachRemovedItem(record => this._setStyle(record.key, null));\n      changes.forEachAddedItem(record => this._setStyle(record.key, record.currentValue));\n      changes.forEachChangedItem(record => this._setStyle(record.key, record.currentValue));\n    }\n    static ɵfac = function NgStyle_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgStyle)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i0.Renderer2));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgStyle,\n      selectors: [[\"\", \"ngStyle\", \"\"]],\n      inputs: {\n        ngStyle: \"ngStyle\"\n      }\n    });\n  }\n  return NgStyle;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * @usageNotes\n * ```html\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n * @publicApi\n */\nlet NgTemplateOutlet = /*#__PURE__*/(() => {\n  class NgTemplateOutlet {\n    _viewContainerRef;\n    _viewRef = null;\n    /**\n     * A context object to attach to the {@link EmbeddedViewRef}. This should be an\n     * object, the object's keys will be available for binding by the local template `let`\n     * declarations.\n     * Using the key `$implicit` in the context object will set its value as default.\n     */\n    ngTemplateOutletContext = null;\n    /**\n     * A string defining the template reference and optionally the context object for the template.\n     */\n    ngTemplateOutlet = null;\n    /** Injector to be used within the embedded view. */\n    ngTemplateOutletInjector = null;\n    constructor(_viewContainerRef) {\n      this._viewContainerRef = _viewContainerRef;\n    }\n    ngOnChanges(changes) {\n      if (this._shouldRecreateView(changes)) {\n        const viewContainerRef = this._viewContainerRef;\n        if (this._viewRef) {\n          viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n        }\n        // If there is no outlet, clear the destroyed view ref.\n        if (!this.ngTemplateOutlet) {\n          this._viewRef = null;\n          return;\n        }\n        // Create a context forward `Proxy` that will always bind to the user-specified context,\n        // without having to destroy and re-create views whenever the context changes.\n        const viewContext = this._createContextForwardProxy();\n        this._viewRef = viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, viewContext, {\n          injector: this.ngTemplateOutletInjector ?? undefined\n        });\n      }\n    }\n    /**\n     * We need to re-create existing embedded view if either is true:\n     * - the outlet changed.\n     * - the injector changed.\n     */\n    _shouldRecreateView(changes) {\n      return !!changes['ngTemplateOutlet'] || !!changes['ngTemplateOutletInjector'];\n    }\n    /**\n     * For a given outlet instance, we create a proxy object that delegates\n     * to the user-specified context. This allows changing, or swapping out\n     * the context object completely without having to destroy/re-create the view.\n     */\n    _createContextForwardProxy() {\n      return new Proxy({}, {\n        set: (_target, prop, newValue) => {\n          if (!this.ngTemplateOutletContext) {\n            return false;\n          }\n          return Reflect.set(this.ngTemplateOutletContext, prop, newValue);\n        },\n        get: (_target, prop, receiver) => {\n          if (!this.ngTemplateOutletContext) {\n            return undefined;\n          }\n          return Reflect.get(this.ngTemplateOutletContext, prop, receiver);\n        }\n      });\n    }\n    static ɵfac = function NgTemplateOutlet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgTemplateOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgTemplateOutlet,\n      selectors: [[\"\", \"ngTemplateOutlet\", \"\"]],\n      inputs: {\n        ngTemplateOutletContext: \"ngTemplateOutletContext\",\n        ngTemplateOutlet: \"ngTemplateOutlet\",\n        ngTemplateOutletInjector: \"ngTemplateOutletInjector\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return NgTemplateOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nconst COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];\nfunction invalidPipeArgumentError(type, value) {\n  return new _RuntimeError(2100 /* RuntimeErrorCode.INVALID_PIPE_ARGUMENT */, ngDevMode && `InvalidPipeArgument: '${value}' for pipe '${_stringify(type)}'`);\n}\nclass SubscribableStrategy {\n  createSubscription(async, updateLatestValue, onError) {\n    // Subscription can be side-effectful, and we don't want any signal reads which happen in the\n    // side effect of the subscription to be tracked by a component's template when that\n    // subscription is triggered via the async pipe. So we wrap the subscription in `untracked` to\n    // decouple from the current reactive context.\n    //\n    // `untracked` also prevents signal _writes_ which happen in the subscription side effect from\n    // being treated as signal writes during the template evaluation (which throws errors).\n    return untracked(() => async.subscribe({\n      next: updateLatestValue,\n      error: onError\n    }));\n  }\n  dispose(subscription) {\n    // See the comment in `createSubscription` above on the use of `untracked`.\n    untracked(() => subscription.unsubscribe());\n  }\n}\nclass PromiseStrategy {\n  createSubscription(async, updateLatestValue, onError) {\n    // According to the promise specification, promises are not cancellable by default.\n    // Once a promise is created, it will either resolve or reject, and it doesn't\n    // provide a built-in mechanism to cancel it.\n    // There may be situations where a promise is provided, and it either resolves after\n    // the pipe has been destroyed or never resolves at all. If the promise never\n    // resolves — potentially due to factors beyond our control, such as third-party\n    // libraries — this can lead to a memory leak.\n    // When we use `async.then(updateLatestValue)`, the engine captures a reference to the\n    // `updateLatestValue` function. This allows the promise to invoke that function when it\n    // resolves. In this case, the promise directly captures a reference to the\n    // `updateLatestValue` function. If the promise resolves later, it retains a reference\n    // to the original `updateLatestValue`, meaning that even if the context where\n    // `updateLatestValue` was defined has been destroyed, the function reference remains in memory.\n    // This can lead to memory leaks if `updateLatestValue` is no longer needed or if it holds\n    // onto resources that should be released.\n    // When we do `async.then(v => ...)` the promise captures a reference to the lambda\n    // function (the arrow function).\n    // When we assign `updateLatestValue = null` within the context of an `unsubscribe` function,\n    // we're changing the reference of `updateLatestValue` in the current scope to `null`.\n    // The lambda will no longer have access to it after the assignment, effectively\n    // preventing any further calls to the original function and allowing it to be garbage collected.\n    async.then(\n    // Using optional chaining because we may have set it to `null`; since the promise\n    // is async, the view might be destroyed by the time the promise resolves.\n    v => updateLatestValue?.(v), e => onError?.(e));\n    return {\n      unsubscribe: () => {\n        updateLatestValue = null;\n        onError = null;\n      }\n    };\n  }\n  dispose(subscription) {\n    subscription.unsubscribe();\n  }\n}\nconst _promiseStrategy = /*#__PURE__*/new PromiseStrategy();\nconst _subscribableStrategy = /*#__PURE__*/new SubscribableStrategy();\n/**\n * @ngModule CommonModule\n * @description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks. When the reference of the expression changes, the `async` pipe\n * automatically unsubscribes from the old `Observable` or `Promise` and subscribes to the new one.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * @publicApi\n */\nlet AsyncPipe = /*#__PURE__*/(() => {\n  class AsyncPipe {\n    _ref;\n    _latestValue = null;\n    markForCheckOnValueUpdate = true;\n    _subscription = null;\n    _obj = null;\n    _strategy = null;\n    applicationErrorHandler = inject(_INTERNAL_APPLICATION_ERROR_HANDLER);\n    constructor(ref) {\n      // Assign `ref` into `this._ref` manually instead of declaring `_ref` in the constructor\n      // parameter list, as the type of `this._ref` includes `null` unlike the type of `ref`.\n      this._ref = ref;\n    }\n    ngOnDestroy() {\n      if (this._subscription) {\n        this._dispose();\n      }\n      // Clear the `ChangeDetectorRef` and its association with the view data, to mitigate\n      // potential memory leaks in Observables that could otherwise cause the view data to\n      // be retained.\n      // https://github.com/angular/angular/issues/17624\n      this._ref = null;\n    }\n    transform(obj) {\n      if (!this._obj) {\n        if (obj) {\n          try {\n            // Only call `markForCheck` if the value is updated asynchronously.\n            // Synchronous updates _during_ subscription should not wastefully mark for check -\n            // this value is already going to be returned from the transform function.\n            this.markForCheckOnValueUpdate = false;\n            this._subscribe(obj);\n          } finally {\n            this.markForCheckOnValueUpdate = true;\n          }\n        }\n        return this._latestValue;\n      }\n      if (obj !== this._obj) {\n        this._dispose();\n        return this.transform(obj);\n      }\n      return this._latestValue;\n    }\n    _subscribe(obj) {\n      this._obj = obj;\n      this._strategy = this._selectStrategy(obj);\n      this._subscription = this._strategy.createSubscription(obj, value => this._updateLatestValue(obj, value), e => this.applicationErrorHandler(e));\n    }\n    _selectStrategy(obj) {\n      if (_isPromise(obj)) {\n        return _promiseStrategy;\n      }\n      if (_isSubscribable(obj)) {\n        return _subscribableStrategy;\n      }\n      throw invalidPipeArgumentError(AsyncPipe, obj);\n    }\n    _dispose() {\n      // Note: `dispose` is only called if a subscription has been initialized before, indicating\n      // that `this._strategy` is also available.\n      this._strategy.dispose(this._subscription);\n      this._latestValue = null;\n      this._subscription = null;\n      this._obj = null;\n    }\n    _updateLatestValue(async, value) {\n      if (async === this._obj) {\n        this._latestValue = value;\n        if (this.markForCheckOnValueUpdate) {\n          this._ref?.markForCheck();\n        }\n      }\n    }\n    static ɵfac = function AsyncPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AsyncPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16));\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"async\",\n      type: AsyncPipe,\n      pure: false\n    });\n  }\n  return AsyncPipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Transforms text to all lower case.\n *\n * @see {@link UpperCasePipe}\n * @see {@link TitleCasePipe}\n * @usageNotes\n *\n * The following example defines a view that allows the user to enter\n * text, and then uses the pipe to convert the input text to all lower case.\n *\n * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}\n *\n * @ngModule CommonModule\n * @publicApi\n */\nlet LowerCasePipe = /*#__PURE__*/(() => {\n  class LowerCasePipe {\n    transform(value) {\n      if (value == null) return null;\n      if (typeof value !== 'string') {\n        throw invalidPipeArgumentError(LowerCasePipe, value);\n      }\n      return value.toLowerCase();\n    }\n    static ɵfac = function LowerCasePipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LowerCasePipe)();\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"lowercase\",\n      type: LowerCasePipe,\n      pure: true\n    });\n  }\n  return LowerCasePipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//\n// Regex below matches any Unicode word and number compatible with ES5. In ES2018 the same result\n// can be achieved by using /[0-9\\p{L}]\\S*/gu and also known as Unicode Property Escapes\n// (https://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no\n// transpilation of this functionality down to ES5 without external tool, the only solution is\n// to use already transpiled form. Example can be found here -\n// https://mothereff.in/regexpu#input=var+regex+%3D+%2F%5B0-9%5Cp%7BL%7D%5D%5CS*%2Fgu%3B%0A%0A&unicodePropertyEscape=1\n//\nconst unicodeWordMatch = /(?:[0-9A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])\\S*/g;\n/**\n * Transforms text to title case.\n * Capitalizes the first letter of each word and transforms the\n * rest of the word to lower case.\n * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.\n *\n * @see {@link LowerCasePipe}\n * @see {@link UpperCasePipe}\n *\n * @usageNotes\n * The following example shows the result of transforming various strings into title case.\n *\n * {@example common/pipes/ts/titlecase_pipe.ts region='TitleCasePipe'}\n *\n * @ngModule CommonModule\n * @publicApi\n */\nlet TitleCasePipe = /*#__PURE__*/(() => {\n  class TitleCasePipe {\n    transform(value) {\n      if (value == null) return null;\n      if (typeof value !== 'string') {\n        throw invalidPipeArgumentError(TitleCasePipe, value);\n      }\n      return value.replace(unicodeWordMatch, txt => txt[0].toUpperCase() + txt.slice(1).toLowerCase());\n    }\n    static ɵfac = function TitleCasePipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TitleCasePipe)();\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"titlecase\",\n      type: TitleCasePipe,\n      pure: true\n    });\n  }\n  return TitleCasePipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Transforms text to all upper case.\n * @see {@link LowerCasePipe}\n * @see {@link TitleCasePipe}\n *\n * @ngModule CommonModule\n * @publicApi\n */\nlet UpperCasePipe = /*#__PURE__*/(() => {\n  class UpperCasePipe {\n    transform(value) {\n      if (value == null) return null;\n      if (typeof value !== 'string') {\n        throw invalidPipeArgumentError(UpperCasePipe, value);\n      }\n      return value.toUpperCase();\n    }\n    static ɵfac = function UpperCasePipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UpperCasePipe)();\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"uppercase\",\n      type: UpperCasePipe,\n      pure: true\n    });\n  }\n  return UpperCasePipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * The default date format of Angular date pipe, which corresponds to the following format:\n * `'MMM d,y'` (e.g. `Jun 15, 2015`)\n */\nconst DEFAULT_DATE_FORMAT = 'mediumDate';\n\n/**\n * Optionally-provided default timezone to use for all instances of `DatePipe` (such as `'+0430'`).\n * If the value isn't provided, the `DatePipe` will use the end-user's local system timezone.\n *\n * @deprecated use DATE_PIPE_DEFAULT_OPTIONS token to configure DatePipe\n */\nconst DATE_PIPE_DEFAULT_TIMEZONE = /*#__PURE__*/new InjectionToken(ngDevMode ? 'DATE_PIPE_DEFAULT_TIMEZONE' : '');\n/**\n * DI token that allows to provide default configuration for the `DatePipe` instances in an\n * application. The value is an object which can include the following fields:\n * - `dateFormat`: configures the default date format. If not provided, the `DatePipe`\n * will use the 'mediumDate' as a value.\n * - `timezone`: configures the default timezone. If not provided, the `DatePipe` will\n * use the end-user's local system timezone.\n *\n * @see {@link DatePipeConfig}\n *\n * @usageNotes\n *\n * Various date pipe default values can be overwritten by providing this token with\n * the value that has this interface.\n *\n * For example:\n *\n * Override the default date format by providing a value using the token:\n * ```ts\n * providers: [\n *   {provide: DATE_PIPE_DEFAULT_OPTIONS, useValue: {dateFormat: 'shortDate'}}\n * ]\n * ```\n *\n * Override the default timezone by providing a value using the token:\n * ```ts\n * providers: [\n *   {provide: DATE_PIPE_DEFAULT_OPTIONS, useValue: {timezone: '-1200'}}\n * ]\n * ```\n */\nconst DATE_PIPE_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'DATE_PIPE_DEFAULT_OPTIONS' : '');\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date value according to locale rules.\n *\n * `DatePipe` is executed only when it detects a pure change to the input value.\n * A pure change is either a change to a primitive input value\n * (such as `String`, `Number`, `Boolean`, or `Symbol`),\n * or a changed object reference (such as `Date`, `Array`, `Function`, or `Object`).\n *\n * Note that mutating a `Date` object does not cause the pipe to be rendered again.\n * To ensure that the pipe is executed, you must create a new `Date` object.\n *\n * Only the `en-US` locale data comes with Angular. To localize dates\n * in another language, you must import the corresponding locale data.\n * See the [I18n guide](guide/i18n/format-data-locale) for more information.\n *\n * The time zone of the formatted value can be specified either by passing it in as the second\n * parameter of the pipe, or by setting the default through the `DATE_PIPE_DEFAULT_OPTIONS`\n * injection token. The value that is passed in as the second parameter takes precedence over\n * the one defined using the injection token.\n *\n * @see {@link formatDate}\n *\n *\n * @usageNotes\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to\n * reformat the date on every change-detection cycle, treat the date as an immutable object\n * and change the reference when the pipe needs to run again.\n *\n * ### Pre-defined format options\n *\n * | Option        | Equivalent to                       | Examples (given in `en-US` locale)              |\n * |---------------|-------------------------------------|-------------------------------------------------|\n * | `'short'`     | `'M/d/yy, h:mm a'`                  | `6/15/15, 9:03 AM`                              |\n * | `'medium'`    | `'MMM d, y, h:mm:ss a'`             | `Jun 15, 2015, 9:03:01 AM`                      |\n * | `'long'`      | `'MMMM d, y, h:mm:ss a z'`          | `June 15, 2015 at 9:03:01 AM GMT+1`             |\n * | `'full'`      | `'EEEE, MMMM d, y, h:mm:ss a zzzz'` | `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00` |\n * | `'shortDate'` | `'M/d/yy'`                          | `6/15/15`                                       |\n * | `'mediumDate'`| `'MMM d, y'`                        | `Jun 15, 2015`                                  |\n * | `'longDate'`  | `'MMMM d, y'`                       | `June 15, 2015`                                 |\n * | `'fullDate'`  | `'EEEE, MMMM d, y'`                 | `Monday, June 15, 2015`                         |\n * | `'shortTime'` | `'h:mm a'`                          | `9:03 AM`                                       |\n * | `'mediumTime'`| `'h:mm:ss a'`                       | `9:03:01 AM`                                    |\n * | `'longTime'`  | `'h:mm:ss a z'`                     | `9:03:01 AM GMT+1`                              |\n * | `'fullTime'`  | `'h:mm:ss a zzzz'`                  | `9:03:01 AM GMT+01:00`                          |\n *\n * ### Custom format options\n *\n * You can construct a format string using symbols to specify the components\n * of a date-time value, as described in the following table.\n * Format details depend on the locale.\n * Fields marked with (*) are only available in the extra data set for the given locale.\n *\n *  | Field type              | Format      | Description                                                   | Example Value                                              |\n *  |-------------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\n *  | Era                     | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n *  |                         | GGGG        | Wide                                                          | Anno Domini                                                |\n *  |                         | GGGGG       | Narrow                                                        | A                                                          |\n *  | Year                    | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                         | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                         | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                         | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | ISO Week-numbering year | Y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                         | YY          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                         | YYY         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                         | YYYY        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Month                   | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                         | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                         | MMM         | Abbreviated                                                   | Sep                                                        |\n *  |                         | MMMM        | Wide                                                          | September                                                  |\n *  |                         | MMMMM       | Narrow                                                        | S                                                          |\n *  | Month standalone        | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                         | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                         | LLL         | Abbreviated                                                   | Sep                                                        |\n *  |                         | LLLL        | Wide                                                          | September                                                  |\n *  |                         | LLLLL       | Narrow                                                        | S                                                          |\n *  | ISO Week of year        | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n *  |                         | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n *  | Week of month           | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n *  | Day of month            | d           | Numeric: minimum digits                                       | 1                                                          |\n *  |                         | dd          | Numeric: 2 digits + zero padded                               | 01                                                         |\n *  | Week day                | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n *  |                         | EEEE        | Wide                                                          | Tuesday                                                    |\n *  |                         | EEEEE       | Narrow                                                        | T                                                          |\n *  |                         | EEEEEE      | Short                                                         | Tu                                                         |\n *  | Week day standalone     | c, cc       | Numeric: 1 digit                                              | 2                                                          |\n *  |                         | ccc         | Abbreviated                                                   | Tue                                                        |\n *  |                         | cccc        | Wide                                                          | Tuesday                                                    |\n *  |                         | ccccc       | Narrow                                                        | T                                                          |\n *  |                         | cccccc      | Short                                                         | Tu                                                         |\n *  | Period                  | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                         | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                         | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*                 | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                         | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                         | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone*      | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                         | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                         | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12               | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                         | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23               | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                         | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute                  | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                         | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second                  | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                         | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds      | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                         | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                         | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone                    | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                         | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                         | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                         | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                         | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                         | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                         | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mm:ss' }}       // output is '43:11'\n * {{ dateObj | date:\"MMM dd, yyyy 'at' hh:mm a\" }}  // output is 'Jun 15, 2015 at 09:43 PM'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```angular-ts\n * @Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();\n * }\n * ```\n *\n * @publicApi\n */\nlet DatePipe = /*#__PURE__*/(() => {\n  class DatePipe {\n    locale;\n    defaultTimezone;\n    defaultOptions;\n    constructor(locale, defaultTimezone, defaultOptions) {\n      this.locale = locale;\n      this.defaultTimezone = defaultTimezone;\n      this.defaultOptions = defaultOptions;\n    }\n    transform(value, format, timezone, locale) {\n      if (value == null || value === '' || value !== value) return null;\n      try {\n        const _format = format ?? this.defaultOptions?.dateFormat ?? DEFAULT_DATE_FORMAT;\n        const _timezone = timezone ?? this.defaultOptions?.timezone ?? this.defaultTimezone ?? undefined;\n        return formatDate(value, _format, locale || this.locale, _timezone);\n      } catch (error) {\n        throw invalidPipeArgumentError(DatePipe, error.message);\n      }\n    }\n    static ɵfac = function DatePipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DatePipe)(i0.ɵɵdirectiveInject(LOCALE_ID, 16), i0.ɵɵdirectiveInject(DATE_PIPE_DEFAULT_TIMEZONE, 24), i0.ɵɵdirectiveInject(DATE_PIPE_DEFAULT_OPTIONS, 24));\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"date\",\n      type: DatePipe,\n      pure: true\n    });\n  }\n  return DatePipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst _INTERPOLATION_REGEXP = /#/g;\n/**\n * @ngModule CommonModule\n * @description\n *\n * Maps a value to a string that pluralizes the value according to locale rules.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * @publicApi\n */\nlet I18nPluralPipe = /*#__PURE__*/(() => {\n  class I18nPluralPipe {\n    _localization;\n    constructor(_localization) {\n      this._localization = _localization;\n    }\n    /**\n     * @param value the number to be formatted\n     * @param pluralMap an object that mimics the ICU format, see\n     * https://unicode-org.github.io/icu/userguide/format_parse/messages/.\n     * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by\n     * default).\n     */\n    transform(value, pluralMap, locale) {\n      if (value == null) return '';\n      if (typeof pluralMap !== 'object' || pluralMap === null) {\n        throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n      }\n      const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n      return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n    }\n    static ɵfac = function I18nPluralPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || I18nPluralPipe)(i0.ɵɵdirectiveInject(NgLocalization, 16));\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"i18nPlural\",\n      type: I18nPluralPipe,\n      pure: true\n    });\n  }\n  return I18nPluralPipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Generic selector that displays the string that matches the current value.\n *\n * If none of the keys of the `mapping` match the `value`, then the content\n * of the `other` key is returned when present, otherwise an empty string is returned.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n *\n * @publicApi\n */\nlet I18nSelectPipe = /*#__PURE__*/(() => {\n  class I18nSelectPipe {\n    /**\n     * @param value a string to be internationalized.\n     * @param mapping an object that indicates the text that should be displayed\n     * for different values of the provided `value`.\n     */\n    transform(value, mapping) {\n      if (value == null) return '';\n      if (typeof mapping !== 'object' || typeof value !== 'string') {\n        throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n      }\n      if (mapping.hasOwnProperty(value)) {\n        return mapping[value];\n      }\n      if (mapping.hasOwnProperty('other')) {\n        return mapping['other'];\n      }\n      return '';\n    }\n    static ɵfac = function I18nSelectPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || I18nSelectPipe)();\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"i18nSelect\",\n      type: I18nSelectPipe,\n      pure: true\n    });\n  }\n  return I18nSelectPipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Converts a value into its JSON-format representation.  Useful for debugging.\n *\n * @usageNotes\n *\n * The following component uses a JSON pipe to convert an object\n * to JSON format, and displays the string in both formats for comparison.\n *\n * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n *\n * @publicApi\n */\nlet JsonPipe = /*#__PURE__*/(() => {\n  class JsonPipe {\n    /**\n     * @param value A value of any type to convert into a JSON-format string.\n     */\n    transform(value) {\n      return JSON.stringify(value, null, 2);\n    }\n    static ɵfac = function JsonPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || JsonPipe)();\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"json\",\n      type: JsonPipe,\n      pure: false\n    });\n  }\n  return JsonPipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction makeKeyValuePair(key, value) {\n  return {\n    key: key,\n    value: value\n  };\n}\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n * Passing `null` as the compareFn will use natural ordering of the input.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this\n * keyvalue pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\nlet KeyValuePipe = /*#__PURE__*/(() => {\n  class KeyValuePipe {\n    differs;\n    constructor(differs) {\n      this.differs = differs;\n    }\n    differ;\n    keyValues = [];\n    compareFn = defaultComparator;\n    transform(input, compareFn = defaultComparator) {\n      if (!input || !(input instanceof Map) && typeof input !== 'object') {\n        return null;\n      }\n      // make a differ for whatever type we've been passed in\n      this.differ ??= this.differs.find(input).create();\n      const differChanges = this.differ.diff(input);\n      const compareFnChanged = compareFn !== this.compareFn;\n      if (differChanges) {\n        this.keyValues = [];\n        differChanges.forEachItem(r => {\n          this.keyValues.push(makeKeyValuePair(r.key, r.currentValue));\n        });\n      }\n      if (differChanges || compareFnChanged) {\n        if (compareFn) {\n          this.keyValues.sort(compareFn);\n        }\n        this.compareFn = compareFn;\n      }\n      return this.keyValues;\n    }\n    static ɵfac = function KeyValuePipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || KeyValuePipe)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers, 16));\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"keyvalue\",\n      type: KeyValuePipe,\n      pure: false\n    });\n  }\n  return KeyValuePipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction defaultComparator(keyValueA, keyValueB) {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // If both keys are the same, return 0 (no sorting needed).\n  if (a === b) return 0;\n  // If one of the keys is `null` or `undefined`, place it at the end of the sort.\n  if (a == null) return 1; // `a` comes after `b`.\n  if (b == null) return -1; // `b` comes after `a`.\n  // If both keys are strings, compare them lexicographically.\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  // If both keys are numbers, sort them numerically.\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  // If both keys are booleans, sort `false` before `true`.\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // Fallback case: if keys are of different types, compare their string representations.\n  const aString = String(a);\n  const bString = String(b);\n  // Compare the string representations lexicographically.\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a value according to digit options and locale rules.\n * Locale determines group sizing and separator,\n * decimal point character, and other locale-specific configurations.\n *\n * @see {@link formatNumber}\n *\n * @usageNotes\n *\n * ### digitsInfo\n *\n * The value's decimal representation is specified by the `digitsInfo`\n * parameter, written in the following format:<br>\n *\n * ```\n * {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n * ```\n *\n *  - `minIntegerDigits`:\n * The minimum number of integer digits before the decimal point.\n * Default is 1.\n *\n * - `minFractionDigits`:\n * The minimum number of digits after the decimal point.\n * Default is 0.\n *\n *  - `maxFractionDigits`:\n * The maximum number of digits after the decimal point.\n * Default is 3.\n *\n * If the formatted value is truncated it will be rounded using the \"to-nearest\" method:\n *\n * ```\n * {{3.6 | number: '1.0-0'}}\n * <!--will output '4'-->\n *\n * {{-3.6 | number:'1.0-0'}}\n * <!--will output '-4'-->\n * ```\n *\n * ### locale\n *\n * `locale` will format a value according to locale rules.\n * Locale determines group sizing and separator,\n * decimal point character, and other locale-specific configurations.\n *\n * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n *\n * See [Setting your app locale](guide/i18n/locale-id).\n *\n * ### Example\n *\n * The following code shows how the pipe transforms values\n * according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * {@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n *\n * @publicApi\n */\nlet DecimalPipe = /*#__PURE__*/(() => {\n  class DecimalPipe {\n    _locale;\n    constructor(_locale) {\n      this._locale = _locale;\n    }\n    transform(value, digitsInfo, locale) {\n      if (!isValue(value)) return null;\n      locale ||= this._locale;\n      try {\n        const num = strToNumber(value);\n        return formatNumber(num, locale, digitsInfo);\n      } catch (error) {\n        throw invalidPipeArgumentError(DecimalPipe, error.message);\n      }\n    }\n    static ɵfac = function DecimalPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DecimalPipe)(i0.ɵɵdirectiveInject(LOCALE_ID, 16));\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"number\",\n      type: DecimalPipe,\n      pure: true\n    });\n  }\n  return DecimalPipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a percentage\n * string, formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * @see {@link formatPercent}\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * {@example common/pipes/ts/percent_pipe.ts region='PercentPipe'}\n *\n * @publicApi\n */\nlet PercentPipe = /*#__PURE__*/(() => {\n  class PercentPipe {\n    _locale;\n    constructor(_locale) {\n      this._locale = _locale;\n    }\n    /**\n     *\n     * @param value The number to be formatted as a percentage.\n     * @param digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `0`.\n     * @param locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n/locale-id).\n     */\n    transform(value, digitsInfo, locale) {\n      if (!isValue(value)) return null;\n      locale ||= this._locale;\n      try {\n        const num = strToNumber(value);\n        return formatPercent(num, locale, digitsInfo);\n      } catch (error) {\n        throw invalidPipeArgumentError(PercentPipe, error.message);\n      }\n    }\n    static ɵfac = function PercentPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PercentPipe)(i0.ɵɵdirectiveInject(LOCALE_ID, 16));\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"percent\",\n      type: PercentPipe,\n      pure: true\n    });\n  }\n  return PercentPipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a currency string, formatted according to locale rules\n * that determine group sizing and separator, decimal-point character,\n * and other locale-specific configurations.\n *\n *\n * @see {@link getCurrencySymbol}\n * @see {@link formatCurrency}\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * {@example common/pipes/ts/currency_pipe.ts region='CurrencyPipe'}\n *\n * @publicApi\n */\nlet CurrencyPipe = /*#__PURE__*/(() => {\n  class CurrencyPipe {\n    _locale;\n    _defaultCurrencyCode;\n    constructor(_locale, _defaultCurrencyCode = 'USD') {\n      this._locale = _locale;\n      this._defaultCurrencyCode = _defaultCurrencyCode;\n    }\n    transform(value, currencyCode = this._defaultCurrencyCode, display = 'symbol', digitsInfo, locale) {\n      if (!isValue(value)) return null;\n      locale ||= this._locale;\n      if (typeof display === 'boolean') {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\n        }\n        display = display ? 'symbol' : 'code';\n      }\n      let currency = currencyCode || this._defaultCurrencyCode;\n      if (display !== 'code') {\n        if (display === 'symbol' || display === 'symbol-narrow') {\n          currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\n        } else {\n          currency = display;\n        }\n      }\n      try {\n        const num = strToNumber(value);\n        return formatCurrency(num, locale, currency, currencyCode, digitsInfo);\n      } catch (error) {\n        throw invalidPipeArgumentError(CurrencyPipe, error.message);\n      }\n    }\n    static ɵfac = function CurrencyPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CurrencyPipe)(i0.ɵɵdirectiveInject(LOCALE_ID, 16), i0.ɵɵdirectiveInject(DEFAULT_CURRENCY_CODE, 16));\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"currency\",\n      type: CurrencyPipe,\n      pure: true\n    });\n  }\n  return CurrencyPipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction isValue(value) {\n  return !(value == null || value === '' || value !== value);\n}\n/**\n * Transforms a string into a number (if needed).\n */\nfunction strToNumber(value) {\n  // Convert strings to numbers\n  if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n    return Number(value);\n  }\n  if (typeof value !== 'number') {\n    throw new _RuntimeError(2309 /* RuntimeErrorCode.VALUE_NOT_A_NUMBER */, ngDevMode && `${value} is not a number`);\n  }\n  return value;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Creates a new `Array` or `String` containing a subset (slice) of the elements.\n *\n * @usageNotes\n *\n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n *\n * When operating on an `Array`, the returned `Array` is always a copy even when all\n * the elements are being returned.\n *\n * When operating on a blank value, the pipe returns the blank value.\n *\n * ### List Example\n *\n * This `ngFor` example:\n *\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n *\n * produces the following:\n *\n * ```html\n * <li>b</li>\n * <li>c</li>\n * ```\n *\n * ### String Examples\n *\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n *\n * @publicApi\n */\nlet SlicePipe = /*#__PURE__*/(() => {\n  class SlicePipe {\n    transform(value, start, end) {\n      if (value == null) return null;\n      const supports = typeof value === 'string' || Array.isArray(value);\n      if (!supports) {\n        throw invalidPipeArgumentError(SlicePipe, value);\n      }\n      return value.slice(start, end);\n    }\n    static ɵfac = function SlicePipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SlicePipe)();\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"slice\",\n      type: SlicePipe,\n      pure: false\n    });\n  }\n  return SlicePipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @module\n * @description\n * This module provides a set of common Pipes.\n */\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nconst COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe];\n\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\nlet CommonModule = /*#__PURE__*/(() => {\n  class CommonModule {\n    static ɵfac = function CommonModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CommonModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CommonModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return CommonModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { AsyncPipe, CommonModule, CurrencyPipe, DATE_PIPE_DEFAULT_OPTIONS, DATE_PIPE_DEFAULT_TIMEZONE, DatePipe, DecimalPipe, FormStyle, FormatWidth, HashLocationStrategy, I18nPluralPipe, I18nSelectPipe, JsonPipe, KeyValuePipe, LowerCasePipe, NgClass, NgComponentOutlet, NgForOf, NgForOfContext, NgIf, NgIfContext, NgLocaleLocalization, NgLocalization, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NumberFormatStyle, NumberSymbol, PercentPipe, Plural, SlicePipe, TitleCasePipe, TranslationWidth, UpperCasePipe, WeekDay, formatCurrency, formatDate, formatNumber, formatPercent, getCurrencySymbol, getLocaleCurrencyCode, getLocaleCurrencyName, getLocaleCurrencySymbol, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleDirection, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleFirstDayOfWeek, getLocaleId, getLocaleMonthNames, getLocaleNumberFormat, getLocaleNumberSymbol, getLocalePluralCase, getLocaleTimeFormat, getLocaleWeekEndRange, getNumberOfCurrencyDigits };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nfunction parseCookieValue(cookieStr, name) {\n  name = encodeURIComponent(name);\n  for (const cookie of cookieStr.split(';')) {\n    const eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nclass XhrFactory {}\nexport { XhrFactory, parseCookieValue };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nexport { AsyncPipe, CommonModule, CurrencyPipe, DATE_PIPE_DEFAULT_OPTIONS, DATE_PIPE_DEFAULT_TIMEZONE, DatePipe, DecimalPipe, FormStyle, FormatWidth, HashLocationStrategy, I18nPluralPipe, I18nSelectPipe, JsonPipe, KeyValuePipe, LowerCasePipe, NgClass, NgComponentOutlet, NgForOf as NgFor, NgForOf, NgForOfContext, NgIf, NgIfContext, NgLocaleLocalization, NgLocalization, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NumberFormatStyle, NumberSymbol, PercentPipe, Plural, SlicePipe, TitleCasePipe, TranslationWidth, UpperCasePipe, WeekDay, formatCurrency, formatDate, formatNumber, formatPercent, getCurrencySymbol, getLocaleCurrencyCode, getLocaleCurrencyName, getLocaleCurrencySymbol, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleDirection, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleFirstDayOfWeek, getLocaleId, getLocaleMonthNames, getLocaleNumberFormat, getLocaleNumberSymbol, getLocalePluralCase, getLocaleTimeFormat, getLocaleWeekEndRange, getNumberOfCurrencyDigits } from './common_module.mjs';\nimport * as i0 from '@angular/core';\nimport { ɵregisterLocaleData as _registerLocaleData, Version, ɵɵdefineInjectable as __defineInjectable, inject, DOCUMENT, ɵformatRuntimeError as _formatRuntimeError, InjectionToken, ɵRuntimeError as _RuntimeError, Injectable, ɵIMAGE_CONFIG as _IMAGE_CONFIG, Renderer2, ElementRef, Injector, DestroyRef, ɵperformanceMarkFeature as _performanceMarkFeature, NgZone, ApplicationRef, numberAttribute, booleanAttribute, Directive, Input, ɵIMAGE_CONFIG_DEFAULTS as _IMAGE_CONFIG_DEFAULTS, ɵunwrapSafeValue as _unwrapSafeValue, ChangeDetectorRef } from '@angular/core';\nexport { DOCUMENT, ɵIMAGE_CONFIG as IMAGE_CONFIG } from '@angular/core';\nexport { XhrFactory, parseCookieValue as ɵparseCookieValue } from './xhr.mjs';\nexport { APP_BASE_HREF, BrowserPlatformLocation, LOCATION_INITIALIZED, Location, LocationStrategy, PathLocationStrategy, PlatformLocation, DomAdapter as ɵDomAdapter, getDOM as ɵgetDOM, normalizeQueryParams as ɵnormalizeQueryParams, setRootDomAdapter as ɵsetRootDomAdapter } from './location.mjs';\nexport { PlatformNavigation as ɵPlatformNavigation } from './platform_navigation.mjs';\nimport 'rxjs';\n\n/**\n * Register global data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n/format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1\n *\n * @publicApi\n */\nfunction registerLocaleData(data, localeId, extraData) {\n  return _registerLocaleData(data, localeId, extraData);\n}\nconst PLATFORM_BROWSER_ID = 'browser';\nconst PLATFORM_SERVER_ID = 'server';\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nfunction isPlatformBrowser(platformId) {\n  return platformId === PLATFORM_BROWSER_ID;\n}\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nfunction isPlatformServer(platformId) {\n  return platformId === PLATFORM_SERVER_ID;\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * @publicApi\n */\nconst VERSION = /*#__PURE__*/new Version('20.1.6');\n\n/**\n * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.\n *\n * @publicApi\n */\nlet ViewportScroller = /*#__PURE__*/(() => {\n  class ViewportScroller {\n    // De-sugared tree-shakable injection\n    // See #23917\n    /** @nocollapse */\n    static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */__defineInjectable({\n      token: ViewportScroller,\n      providedIn: 'root',\n      factory: () => typeof ngServerMode !== 'undefined' && ngServerMode ? new NullViewportScroller() : new BrowserViewportScroller(inject(DOCUMENT), window)\n    });\n  }\n  return ViewportScroller;\n})();\n/**\n * Manages the scroll position for a browser window.\n */\nclass BrowserViewportScroller {\n  document;\n  window;\n  offset = () => [0, 0];\n  constructor(document, window) {\n    this.document = document;\n    this.window = window;\n  }\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   * @param offset A position in screen coordinates (a tuple with x and y values)\n   * or a function that returns the top offset position.\n   *\n   */\n  setOffset(offset) {\n    if (Array.isArray(offset)) {\n      this.offset = () => offset;\n    } else {\n      this.offset = offset;\n    }\n  }\n  /**\n   * Retrieves the current scroll position.\n   * @returns The position in screen coordinates.\n   */\n  getScrollPosition() {\n    return [this.window.scrollX, this.window.scrollY];\n  }\n  /**\n   * Sets the scroll position.\n   * @param position The new position in screen coordinates.\n   */\n  scrollToPosition(position, options) {\n    this.window.scrollTo({\n      ...options,\n      left: position[0],\n      top: position[1]\n    });\n  }\n  /**\n   * Scrolls to an element and attempts to focus the element.\n   *\n   * Note that the function name here is misleading in that the target string may be an ID for a\n   * non-anchor element.\n   *\n   * @param target The ID of an element or name of the anchor.\n   *\n   * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document\n   * @see https://html.spec.whatwg.org/#scroll-to-fragid\n   */\n  scrollToAnchor(target, options) {\n    const elSelected = findAnchorFromDocument(this.document, target);\n    if (elSelected) {\n      this.scrollToElement(elSelected, options);\n      // After scrolling to the element, the spec dictates that we follow the focus steps for the\n      // target. Rather than following the robust steps, simply attempt focus.\n      //\n      // @see https://html.spec.whatwg.org/#get-the-focusable-area\n      // @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus\n      // @see https://html.spec.whatwg.org/#focusable-area\n      elSelected.focus();\n    }\n  }\n  /**\n   * Disables automatic scroll restoration provided by the browser.\n   */\n  setHistoryScrollRestoration(scrollRestoration) {\n    try {\n      this.window.history.scrollRestoration = scrollRestoration;\n    } catch {\n      console.warn(_formatRuntimeError(2400 /* RuntimeErrorCode.SCROLL_RESTORATION_UNSUPPORTED */, ngDevMode && 'Failed to set `window.history.scrollRestoration`. ' + 'This may occur when:\\n' + '• The script is running inside a sandboxed iframe\\n' + '• The window is partially navigated or inactive\\n' + '• The script is executed in an untrusted or special context (e.g., test runners, browser extensions, or content previews)\\n' + 'Scroll position may not be preserved across navigation.'));\n    }\n  }\n  /**\n   * Scrolls to an element using the native offset and the specified offset set on this scroller.\n   *\n   * The offset can be used when we know that there is a floating header and scrolling naively to an\n   * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.\n   */\n  scrollToElement(el, options) {\n    const rect = el.getBoundingClientRect();\n    const left = rect.left + this.window.pageXOffset;\n    const top = rect.top + this.window.pageYOffset;\n    const offset = this.offset();\n    this.window.scrollTo({\n      ...options,\n      left: left - offset[0],\n      top: top - offset[1]\n    });\n  }\n}\nfunction findAnchorFromDocument(document, target) {\n  const documentResult = document.getElementById(target) || document.getElementsByName(target)[0];\n  if (documentResult) {\n    return documentResult;\n  }\n  // `getElementById` and `getElementsByName` won't pierce through the shadow DOM so we\n  // have to traverse the DOM manually and do the lookup through the shadow roots.\n  if (typeof document.createTreeWalker === 'function' && document.body && typeof document.body.attachShadow === 'function') {\n    const treeWalker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT);\n    let currentNode = treeWalker.currentNode;\n    while (currentNode) {\n      const shadowRoot = currentNode.shadowRoot;\n      if (shadowRoot) {\n        // Note that `ShadowRoot` doesn't support `getElementsByName`\n        // so we have to fall back to `querySelector`.\n        const result = shadowRoot.getElementById(target) || shadowRoot.querySelector(`[name=\"${target}\"]`);\n        if (result) {\n          return result;\n        }\n      }\n      currentNode = treeWalker.nextNode();\n    }\n  }\n  return null;\n}\n/**\n * Provides an empty implementation of the viewport scroller.\n */\nclass NullViewportScroller {\n  /**\n   * Empty implementation\n   */\n  setOffset(offset) {}\n  /**\n   * Empty implementation\n   */\n  getScrollPosition() {\n    return [0, 0];\n  }\n  /**\n   * Empty implementation\n   */\n  scrollToPosition(position) {}\n  /**\n   * Empty implementation\n   */\n  scrollToAnchor(anchor) {}\n  /**\n   * Empty implementation\n   */\n  setHistoryScrollRestoration(scrollRestoration) {}\n}\n\n/**\n * Value (out of 100) of the requested quality for placeholder images.\n */\nconst PLACEHOLDER_QUALITY = '20';\n\n// Converts a string that represents a URL into a URL class instance.\nfunction getUrl(src, win) {\n  // Don't use a base URL is the URL is absolute.\n  return isAbsoluteUrl(src) ? new URL(src) : new URL(src, win.location.href);\n}\n// Checks whether a URL is absolute (i.e. starts with `http://` or `https://`).\nfunction isAbsoluteUrl(src) {\n  return /^https?:\\/\\//.test(src);\n}\n// Given a URL, extract the hostname part.\n// If a URL is a relative one - the URL is returned as is.\nfunction extractHostname(url) {\n  return isAbsoluteUrl(url) ? new URL(url).hostname : url;\n}\nfunction isValidPath(path) {\n  const isString = typeof path === 'string';\n  if (!isString || path.trim() === '') {\n    return false;\n  }\n  // Calling new URL() will throw if the path string is malformed\n  try {\n    const url = new URL(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\nfunction normalizePath(path) {\n  return path.endsWith('/') ? path.slice(0, -1) : path;\n}\nfunction normalizeSrc(src) {\n  return src.startsWith('/') ? src.slice(1) : src;\n}\n\n/**\n * Noop image loader that does no transformation to the original src and just returns it as is.\n * This loader is used as a default one if more specific logic is not provided in an app config.\n *\n * @see {@link ImageLoader}\n * @see {@link NgOptimizedImage}\n */\nconst noopImageLoader = config => config.src;\n/**\n * Injection token that configures the image loader function.\n *\n * @see {@link ImageLoader}\n * @see {@link NgOptimizedImage}\n * @publicApi\n */\nconst IMAGE_LOADER = /*#__PURE__*/new InjectionToken(ngDevMode ? 'ImageLoader' : '', {\n  providedIn: 'root',\n  factory: () => noopImageLoader\n});\n/**\n * Internal helper function that makes it easier to introduce custom image loaders for the\n * `NgOptimizedImage` directive. It is enough to specify a URL builder function to obtain full DI\n * configuration for a given loader: a DI token corresponding to the actual loader function, plus DI\n * tokens managing preconnect check functionality.\n * @param buildUrlFn a function returning a full URL based on loader's configuration\n * @param exampleUrls example of full URLs for a given loader (used in error messages)\n * @returns a set of DI providers corresponding to the configured image loader\n */\nfunction createImageLoader(buildUrlFn, exampleUrls) {\n  return function provideImageLoader(path) {\n    if (!isValidPath(path)) {\n      throwInvalidPathError(path, exampleUrls || []);\n    }\n    // The trailing / is stripped (if provided) to make URL construction (concatenation) easier in\n    // the individual loader functions.\n    path = normalizePath(path);\n    const loaderFn = config => {\n      if (isAbsoluteUrl(config.src)) {\n        // Image loader functions expect an image file name (e.g. `my-image.png`)\n        // or a relative path + a file name (e.g. `/a/b/c/my-image.png`) as an input,\n        // so the final absolute URL can be constructed.\n        // When an absolute URL is provided instead - the loader can not\n        // build a final URL, thus the error is thrown to indicate that.\n        throwUnexpectedAbsoluteUrlError(path, config.src);\n      }\n      return buildUrlFn(path, {\n        ...config,\n        src: normalizeSrc(config.src)\n      });\n    };\n    const providers = [{\n      provide: IMAGE_LOADER,\n      useValue: loaderFn\n    }];\n    return providers;\n  };\n}\nfunction throwInvalidPathError(path, exampleUrls) {\n  throw new _RuntimeError(2959 /* RuntimeErrorCode.INVALID_LOADER_ARGUMENTS */, ngDevMode && `Image loader has detected an invalid path (\\`${path}\\`). ` + `To fix this, supply a path using one of the following formats: ${exampleUrls.join(' or ')}`);\n}\nfunction throwUnexpectedAbsoluteUrlError(path, url) {\n  throw new _RuntimeError(2959 /* RuntimeErrorCode.INVALID_LOADER_ARGUMENTS */, ngDevMode && `Image loader has detected a \\`<img>\\` tag with an invalid \\`ngSrc\\` attribute: ${url}. ` + `This image loader expects \\`ngSrc\\` to be a relative URL - ` + `however the provided value is an absolute URL. ` + `To fix this, provide \\`ngSrc\\` as a path relative to the base URL ` + `configured for this loader (\\`${path}\\`).`);\n}\n\n/**\n * Function that generates an ImageLoader for [Cloudflare Image\n * Resizing](https://developers.cloudflare.com/images/image-resizing/) and turns it into an Angular\n * provider. Note: Cloudflare has multiple image products - this provider is specifically for\n * Cloudflare Image Resizing; it will not work with Cloudflare Images or Cloudflare Polish.\n *\n * @param path Your domain name, e.g. https://mysite.com\n * @returns Provider that provides an ImageLoader function\n *\n * @publicApi\n */\nconst provideCloudflareLoader = /*#__PURE__*/createImageLoader(createCloudflareUrl, ngDevMode ? ['https://<ZONE>/cdn-cgi/image/<OPTIONS>/<SOURCE-IMAGE>'] : undefined);\nfunction createCloudflareUrl(path, config) {\n  let params = `format=auto`;\n  if (config.width) {\n    params += `,width=${config.width}`;\n  }\n  // When requesting a placeholder image we ask for a low quality image to reduce the load time.\n  if (config.isPlaceholder) {\n    params += `,quality=${PLACEHOLDER_QUALITY}`;\n  }\n  // Cloudflare image URLs format:\n  // https://developers.cloudflare.com/images/image-resizing/url-format/\n  return `${path}/cdn-cgi/image/${params}/${config.src}`;\n}\n\n/**\n * Name and URL tester for Cloudinary.\n */\nconst cloudinaryLoaderInfo = {\n  name: 'Cloudinary',\n  testUrl: isCloudinaryUrl\n};\nconst CLOUDINARY_LOADER_REGEX = /https?\\:\\/\\/[^\\/]+\\.cloudinary\\.com\\/.+/;\n/**\n * Tests whether a URL is from Cloudinary CDN.\n */\nfunction isCloudinaryUrl(url) {\n  return CLOUDINARY_LOADER_REGEX.test(url);\n}\n/**\n * Function that generates an ImageLoader for Cloudinary and turns it into an Angular provider.\n *\n * @param path Base URL of your Cloudinary images\n * This URL should match one of the following formats:\n * https://res.cloudinary.com/mysite\n * https://mysite.cloudinary.com\n * https://subdomain.mysite.com\n * @returns Set of providers to configure the Cloudinary loader.\n *\n * @publicApi\n */\nconst provideCloudinaryLoader = /*#__PURE__*/createImageLoader(createCloudinaryUrl, ngDevMode ? ['https://res.cloudinary.com/mysite', 'https://mysite.cloudinary.com', 'https://subdomain.mysite.com'] : undefined);\nfunction createCloudinaryUrl(path, config) {\n  // Cloudinary image URLformat:\n  // https://cloudinary.com/documentation/image_transformations#transformation_url_structure\n  // Example of a Cloudinary image URL:\n  // https://res.cloudinary.com/mysite/image/upload/c_scale,f_auto,q_auto,w_600/marketing/tile-topics-m.png\n  // For a placeholder image, we use the lowest image setting available to reduce the load time\n  // else we use the auto size\n  const quality = config.isPlaceholder ? 'q_auto:low' : 'q_auto';\n  let params = `f_auto,${quality}`;\n  if (config.width) {\n    params += `,w_${config.width}`;\n  }\n  if (config.loaderParams?.['rounded']) {\n    params += `,r_max`;\n  }\n  return `${path}/image/upload/${params}/${config.src}`;\n}\n\n/**\n * Name and URL tester for ImageKit.\n */\nconst imageKitLoaderInfo = {\n  name: 'ImageKit',\n  testUrl: isImageKitUrl\n};\nconst IMAGE_KIT_LOADER_REGEX = /https?\\:\\/\\/[^\\/]+\\.imagekit\\.io\\/.+/;\n/**\n * Tests whether a URL is from ImageKit CDN.\n */\nfunction isImageKitUrl(url) {\n  return IMAGE_KIT_LOADER_REGEX.test(url);\n}\n/**\n * Function that generates an ImageLoader for ImageKit and turns it into an Angular provider.\n *\n * @param path Base URL of your ImageKit images\n * This URL should match one of the following formats:\n * https://ik.imagekit.io/myaccount\n * https://subdomain.mysite.com\n * @returns Set of providers to configure the ImageKit loader.\n *\n * @publicApi\n */\nconst provideImageKitLoader = /*#__PURE__*/createImageLoader(createImagekitUrl, ngDevMode ? ['https://ik.imagekit.io/mysite', 'https://subdomain.mysite.com'] : undefined);\nfunction createImagekitUrl(path, config) {\n  // Example of an ImageKit image URL:\n  // https://ik.imagekit.io/demo/tr:w-300,h-300/medium_cafe_B1iTdD0C.jpg\n  const {\n    src,\n    width\n  } = config;\n  const params = [];\n  if (width) {\n    params.push(`w-${width}`);\n  }\n  // When requesting a placeholder image we ask for a low quality image to reduce the load time.\n  if (config.isPlaceholder) {\n    params.push(`q-${PLACEHOLDER_QUALITY}`);\n  }\n  const urlSegments = params.length ? [path, `tr:${params.join(',')}`, src] : [path, src];\n  const url = new URL(urlSegments.join('/'));\n  return url.href;\n}\n\n/**\n * Name and URL tester for Imgix.\n */\nconst imgixLoaderInfo = {\n  name: 'Imgix',\n  testUrl: isImgixUrl\n};\nconst IMGIX_LOADER_REGEX = /https?\\:\\/\\/[^\\/]+\\.imgix\\.net\\/.+/;\n/**\n * Tests whether a URL is from Imgix CDN.\n */\nfunction isImgixUrl(url) {\n  return IMGIX_LOADER_REGEX.test(url);\n}\n/**\n * Function that generates an ImageLoader for Imgix and turns it into an Angular provider.\n *\n * @param path path to the desired Imgix origin,\n * e.g. https://somepath.imgix.net or https://images.mysite.com\n * @returns Set of providers to configure the Imgix loader.\n *\n * @publicApi\n */\nconst provideImgixLoader = /*#__PURE__*/createImageLoader(createImgixUrl, ngDevMode ? ['https://somepath.imgix.net/'] : undefined);\nfunction createImgixUrl(path, config) {\n  const url = new URL(`${path}/${config.src}`);\n  // This setting ensures the smallest allowable format is set.\n  url.searchParams.set('auto', 'format');\n  if (config.width) {\n    url.searchParams.set('w', config.width.toString());\n  }\n  // When requesting a placeholder image we ask a low quality image to reduce the load time.\n  if (config.isPlaceholder) {\n    url.searchParams.set('q', PLACEHOLDER_QUALITY);\n  }\n  return url.href;\n}\n\n/**\n * Name and URL tester for Netlify.\n */\nconst netlifyLoaderInfo = {\n  name: 'Netlify',\n  testUrl: isNetlifyUrl\n};\nconst NETLIFY_LOADER_REGEX = /https?\\:\\/\\/[^\\/]+\\.netlify\\.app\\/.+/;\n/**\n * Tests whether a URL is from a Netlify site. This won't catch sites with a custom domain,\n * but it's a good start for sites in development. This is only used to warn users who haven't\n * configured an image loader.\n */\nfunction isNetlifyUrl(url) {\n  return NETLIFY_LOADER_REGEX.test(url);\n}\n/**\n * Function that generates an ImageLoader for Netlify and turns it into an Angular provider.\n *\n * @param path optional URL of the desired Netlify site. Defaults to the current site.\n * @returns Set of providers to configure the Netlify loader.\n *\n * @publicApi\n */\nfunction provideNetlifyLoader(path) {\n  if (path && !isValidPath(path)) {\n    throw new _RuntimeError(2959 /* RuntimeErrorCode.INVALID_LOADER_ARGUMENTS */, ngDevMode && `Image loader has detected an invalid path (\\`${path}\\`). ` + `To fix this, supply either the full URL to the Netlify site, or leave it empty to use the current site.`);\n  }\n  if (path) {\n    const url = new URL(path);\n    path = url.origin;\n  }\n  const loaderFn = config => {\n    return createNetlifyUrl(config, path);\n  };\n  const providers = [{\n    provide: IMAGE_LOADER,\n    useValue: loaderFn\n  }];\n  return providers;\n}\nconst validParams = /*#__PURE__*/new Map([['height', 'h'], ['fit', 'fit'], ['quality', 'q'], ['q', 'q'], ['position', 'position']]);\nfunction createNetlifyUrl(config, path) {\n  // Note: `path` can be undefined, in which case we use a fake one to construct a `URL` instance.\n  const url = new URL(path ?? 'https://a/');\n  url.pathname = '/.netlify/images';\n  if (!isAbsoluteUrl(config.src) && !config.src.startsWith('/')) {\n    config.src = '/' + config.src;\n  }\n  url.searchParams.set('url', config.src);\n  if (config.width) {\n    url.searchParams.set('w', config.width.toString());\n  }\n  // When requesting a placeholder image we ask for a low quality image to reduce the load time.\n  // If the quality is specified in the loader config - always use provided value.\n  const configQuality = config.loaderParams?.['quality'] ?? config.loaderParams?.['q'];\n  if (config.isPlaceholder && !configQuality) {\n    url.searchParams.set('q', PLACEHOLDER_QUALITY);\n  }\n  for (const [param, value] of Object.entries(config.loaderParams ?? {})) {\n    if (validParams.has(param)) {\n      url.searchParams.set(validParams.get(param), value.toString());\n    } else {\n      if (ngDevMode) {\n        console.warn(_formatRuntimeError(2959 /* RuntimeErrorCode.INVALID_LOADER_ARGUMENTS */, `The Netlify image loader has detected an \\`<img>\\` tag with the unsupported attribute \"\\`${param}\\`\".`));\n      }\n    }\n  }\n  // The \"a\" hostname is used for relative URLs, so we can remove it from the final URL.\n  return url.hostname === 'a' ? url.href.replace(url.origin, '') : url.href;\n}\n\n// Assembles directive details string, useful for error messages.\nfunction imgDirectiveDetails(ngSrc, includeNgSrc = true) {\n  const ngSrcInfo = includeNgSrc ? `(activated on an <img> element with the \\`ngSrc=\"${ngSrc}\"\\`) ` : '';\n  return `The NgOptimizedImage directive ${ngSrcInfo}has detected that`;\n}\n\n/**\n * Asserts that the application is in development mode. Throws an error if the application is in\n * production mode. This assert can be used to make sure that there is no dev-mode code invoked in\n * the prod mode accidentally.\n */\nfunction assertDevMode(checkName) {\n  if (!ngDevMode) {\n    throw new _RuntimeError(2958 /* RuntimeErrorCode.UNEXPECTED_DEV_MODE_CHECK_IN_PROD_MODE */, `Unexpected invocation of the ${checkName} in the prod mode. ` + `Please make sure that the prod mode is enabled for production builds.`);\n  }\n}\n\n/**\n * Observer that detects whether an image with `NgOptimizedImage`\n * is treated as a Largest Contentful Paint (LCP) element. If so,\n * asserts that the image has the `priority` attribute.\n *\n * Note: this is a dev-mode only class and it does not appear in prod bundles,\n * thus there is no `ngDevMode` use in the code.\n *\n * Based on https://web.dev/lcp/#measure-lcp-in-javascript.\n */\nlet LCPImageObserver = /*#__PURE__*/(() => {\n  class LCPImageObserver {\n    // Map of full image URLs -> original `ngSrc` values.\n    images = new Map();\n    window = inject(DOCUMENT).defaultView;\n    observer = null;\n    constructor() {\n      assertDevMode('LCP checker');\n      if ((typeof ngServerMode === 'undefined' || !ngServerMode) && typeof PerformanceObserver !== 'undefined') {\n        this.observer = this.initPerformanceObserver();\n      }\n    }\n    /**\n     * Inits PerformanceObserver and subscribes to LCP events.\n     * Based on https://web.dev/lcp/#measure-lcp-in-javascript\n     */\n    initPerformanceObserver() {\n      const observer = new PerformanceObserver(entryList => {\n        const entries = entryList.getEntries();\n        if (entries.length === 0) return;\n        // We use the latest entry produced by the `PerformanceObserver` as the best\n        // signal on which element is actually an LCP one. As an example, the first image to load on\n        // a page, by virtue of being the only thing on the page so far, is often a LCP candidate\n        // and gets reported by PerformanceObserver, but isn't necessarily the LCP element.\n        const lcpElement = entries[entries.length - 1];\n        // Cast to `any` due to missing `element` on the `LargestContentfulPaint` type of entry.\n        // See https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint\n        const imgSrc = lcpElement.element?.src ?? '';\n        // Exclude `data:` and `blob:` URLs, since they are not supported by the directive.\n        if (imgSrc.startsWith('data:') || imgSrc.startsWith('blob:')) return;\n        const img = this.images.get(imgSrc);\n        if (!img) return;\n        if (!img.priority && !img.alreadyWarnedPriority) {\n          img.alreadyWarnedPriority = true;\n          logMissingPriorityError(imgSrc);\n        }\n        if (img.modified && !img.alreadyWarnedModified) {\n          img.alreadyWarnedModified = true;\n          logModifiedWarning(imgSrc);\n        }\n      });\n      observer.observe({\n        type: 'largest-contentful-paint',\n        buffered: true\n      });\n      return observer;\n    }\n    registerImage(rewrittenSrc, originalNgSrc, isPriority) {\n      if (!this.observer) return;\n      const newObservedImageState = {\n        priority: isPriority,\n        modified: false,\n        alreadyWarnedModified: false,\n        alreadyWarnedPriority: false\n      };\n      this.images.set(getUrl(rewrittenSrc, this.window).href, newObservedImageState);\n    }\n    unregisterImage(rewrittenSrc) {\n      if (!this.observer) return;\n      this.images.delete(getUrl(rewrittenSrc, this.window).href);\n    }\n    updateImage(originalSrc, newSrc) {\n      if (!this.observer) return;\n      const originalUrl = getUrl(originalSrc, this.window).href;\n      const img = this.images.get(originalUrl);\n      if (img) {\n        img.modified = true;\n        this.images.set(getUrl(newSrc, this.window).href, img);\n        this.images.delete(originalUrl);\n      }\n    }\n    ngOnDestroy() {\n      if (!this.observer) return;\n      this.observer.disconnect();\n      this.images.clear();\n    }\n    static ɵfac = function LCPImageObserver_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LCPImageObserver)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: LCPImageObserver,\n      factory: LCPImageObserver.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return LCPImageObserver;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction logMissingPriorityError(ngSrc) {\n  const directiveDetails = imgDirectiveDetails(ngSrc);\n  console.error(_formatRuntimeError(2955 /* RuntimeErrorCode.LCP_IMG_MISSING_PRIORITY */, `${directiveDetails} this image is the Largest Contentful Paint (LCP) ` + `element but was not marked \"priority\". This image should be marked ` + `\"priority\" in order to prioritize its loading. ` + `To fix this, add the \"priority\" attribute.`));\n}\nfunction logModifiedWarning(ngSrc) {\n  const directiveDetails = imgDirectiveDetails(ngSrc);\n  console.warn(_formatRuntimeError(2964 /* RuntimeErrorCode.LCP_IMG_NGSRC_MODIFIED */, `${directiveDetails} this image is the Largest Contentful Paint (LCP) ` + `element and has had its \"ngSrc\" attribute modified. This can cause ` + `slower loading performance. It is recommended not to modify the \"ngSrc\" ` + `property on any image which could be the LCP element.`));\n}\n\n// Set of origins that are always excluded from the preconnect checks.\nconst INTERNAL_PRECONNECT_CHECK_BLOCKLIST = /*#__PURE__*/new Set(['localhost', '127.0.0.1', '0.0.0.0']);\n/**\n * Injection token to configure which origins should be excluded\n * from the preconnect checks. It can either be a single string or an array of strings\n * to represent a group of origins, for example:\n *\n * ```ts\n *  {provide: PRECONNECT_CHECK_BLOCKLIST, useValue: 'https://your-domain.com'}\n * ```\n *\n * or:\n *\n * ```ts\n *  {provide: PRECONNECT_CHECK_BLOCKLIST,\n *   useValue: ['https://your-domain-1.com', 'https://your-domain-2.com']}\n * ```\n *\n * @publicApi\n */\nconst PRECONNECT_CHECK_BLOCKLIST = /*#__PURE__*/new InjectionToken(ngDevMode ? 'PRECONNECT_CHECK_BLOCKLIST' : '');\n/**\n * Contains the logic to detect whether an image, marked with the \"priority\" attribute\n * has a corresponding `<link rel=\"preconnect\">` tag in the `document.head`.\n *\n * Note: this is a dev-mode only class, which should not appear in prod bundles,\n * thus there is no `ngDevMode` use in the code.\n */\nlet PreconnectLinkChecker = /*#__PURE__*/(() => {\n  class PreconnectLinkChecker {\n    document = inject(DOCUMENT);\n    /**\n     * Set of <link rel=\"preconnect\"> tags found on this page.\n     * The `null` value indicates that there was no DOM query operation performed.\n     */\n    preconnectLinks = null;\n    /*\n     * Keep track of all already seen origin URLs to avoid repeating the same check.\n     */\n    alreadySeen = new Set();\n    window = this.document.defaultView;\n    blocklist = new Set(INTERNAL_PRECONNECT_CHECK_BLOCKLIST);\n    constructor() {\n      assertDevMode('preconnect link checker');\n      const blocklist = inject(PRECONNECT_CHECK_BLOCKLIST, {\n        optional: true\n      });\n      if (blocklist) {\n        this.populateBlocklist(blocklist);\n      }\n    }\n    populateBlocklist(origins) {\n      if (Array.isArray(origins)) {\n        deepForEach(origins, origin => {\n          this.blocklist.add(extractHostname(origin));\n        });\n      } else {\n        this.blocklist.add(extractHostname(origins));\n      }\n    }\n    /**\n     * Checks that a preconnect resource hint exists in the head for the\n     * given src.\n     *\n     * @param rewrittenSrc src formatted with loader\n     * @param originalNgSrc ngSrc value\n     */\n    assertPreconnect(rewrittenSrc, originalNgSrc) {\n      if (typeof ngServerMode !== 'undefined' && ngServerMode) return;\n      const imgUrl = getUrl(rewrittenSrc, this.window);\n      if (this.blocklist.has(imgUrl.hostname) || this.alreadySeen.has(imgUrl.origin)) return;\n      // Register this origin as seen, so we don't check it again later.\n      this.alreadySeen.add(imgUrl.origin);\n      // Note: we query for preconnect links only *once* and cache the results\n      // for the entire lifespan of an application, since it's unlikely that the\n      // list would change frequently. This allows to make sure there are no\n      // performance implications of making extra DOM lookups for each image.\n      this.preconnectLinks ??= this.queryPreconnectLinks();\n      if (!this.preconnectLinks.has(imgUrl.origin)) {\n        console.warn(_formatRuntimeError(2956 /* RuntimeErrorCode.PRIORITY_IMG_MISSING_PRECONNECT_TAG */, `${imgDirectiveDetails(originalNgSrc)} there is no preconnect tag present for this ` + `image. Preconnecting to the origin(s) that serve priority images ensures that these ` + `images are delivered as soon as possible. To fix this, please add the following ` + `element into the <head> of the document:\\n` + `  <link rel=\"preconnect\" href=\"${imgUrl.origin}\">`));\n      }\n    }\n    queryPreconnectLinks() {\n      const preconnectUrls = new Set();\n      const links = this.document.querySelectorAll('link[rel=preconnect]');\n      for (const link of links) {\n        const url = getUrl(link.href, this.window);\n        preconnectUrls.add(url.origin);\n      }\n      return preconnectUrls;\n    }\n    ngOnDestroy() {\n      this.preconnectLinks?.clear();\n      this.alreadySeen.clear();\n    }\n    static ɵfac = function PreconnectLinkChecker_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PreconnectLinkChecker)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: PreconnectLinkChecker,\n      factory: PreconnectLinkChecker.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return PreconnectLinkChecker;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Invokes a callback for each element in the array. Also invokes a callback\n * recursively for each nested array.\n */\nfunction deepForEach(input, fn) {\n  for (let value of input) {\n    Array.isArray(value) ? deepForEach(value, fn) : fn(value);\n  }\n}\n\n/**\n * In SSR scenarios, a preload `<link>` element is generated for priority images.\n * Having a large number of preload tags may negatively affect the performance,\n * so we warn developers (by throwing an error) if the number of preloaded images\n * is above a certain threshold. This const specifies this threshold.\n */\nconst DEFAULT_PRELOADED_IMAGES_LIMIT = 5;\n/**\n * Helps to keep track of priority images that already have a corresponding\n * preload tag (to avoid generating multiple preload tags with the same URL).\n *\n * This Set tracks the original src passed into the `ngSrc` input not the src after it has been\n * run through the specified `IMAGE_LOADER`.\n */\nconst PRELOADED_IMAGES = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'NG_OPTIMIZED_PRELOADED_IMAGES' : '', {\n  providedIn: 'root',\n  factory: () => new Set()\n});\n\n/**\n * @description Contains the logic needed to track and add preload link tags to the `<head>` tag. It\n * will also track what images have already had preload link tags added so as to not duplicate link\n * tags.\n *\n * In dev mode this service will validate that the number of preloaded images does not exceed the\n * configured default preloaded images limit: {@link DEFAULT_PRELOADED_IMAGES_LIMIT}.\n */\nlet PreloadLinkCreator = /*#__PURE__*/(() => {\n  class PreloadLinkCreator {\n    preloadedImages = inject(PRELOADED_IMAGES);\n    document = inject(DOCUMENT);\n    errorShown = false;\n    /**\n     * @description Add a preload `<link>` to the `<head>` of the `index.html` that is served from the\n     * server while using Angular Universal and SSR to kick off image loads for high priority images.\n     *\n     * The `sizes` (passed in from the user) and `srcset` (parsed and formatted from `ngSrcset`)\n     * properties used to set the corresponding attributes, `imagesizes` and `imagesrcset`\n     * respectively, on the preload `<link>` tag so that the correctly sized image is preloaded from\n     * the CDN.\n     *\n     * {@link https://web.dev/preload-responsive-images/#imagesrcset-and-imagesizes}\n     *\n     * @param renderer The `Renderer2` passed in from the directive\n     * @param src The original src of the image that is set on the `ngSrc` input.\n     * @param srcset The parsed and formatted srcset created from the `ngSrcset` input\n     * @param sizes The value of the `sizes` attribute passed in to the `<img>` tag\n     */\n    createPreloadLinkTag(renderer, src, srcset, sizes) {\n      if (ngDevMode && !this.errorShown && this.preloadedImages.size >= DEFAULT_PRELOADED_IMAGES_LIMIT) {\n        this.errorShown = true;\n        console.warn(_formatRuntimeError(2961 /* RuntimeErrorCode.TOO_MANY_PRELOADED_IMAGES */, `The \\`NgOptimizedImage\\` directive has detected that more than ` + `${DEFAULT_PRELOADED_IMAGES_LIMIT} images were marked as priority. ` + `This might negatively affect an overall performance of the page. ` + `To fix this, remove the \"priority\" attribute from images with less priority.`));\n      }\n      if (this.preloadedImages.has(src)) {\n        return;\n      }\n      this.preloadedImages.add(src);\n      const preload = renderer.createElement('link');\n      renderer.setAttribute(preload, 'as', 'image');\n      renderer.setAttribute(preload, 'href', src);\n      renderer.setAttribute(preload, 'rel', 'preload');\n      renderer.setAttribute(preload, 'fetchpriority', 'high');\n      if (sizes) {\n        renderer.setAttribute(preload, 'imageSizes', sizes);\n      }\n      if (srcset) {\n        renderer.setAttribute(preload, 'imageSrcset', srcset);\n      }\n      renderer.appendChild(this.document.head, preload);\n    }\n    static ɵfac = function PreloadLinkCreator_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PreloadLinkCreator)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: PreloadLinkCreator,\n      factory: PreloadLinkCreator.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return PreloadLinkCreator;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * When a Base64-encoded image is passed as an input to the `NgOptimizedImage` directive,\n * an error is thrown. The image content (as a string) might be very long, thus making\n * it hard to read an error message if the entire string is included. This const defines\n * the number of characters that should be included into the error message. The rest\n * of the content is truncated.\n */\nconst BASE64_IMG_MAX_LENGTH_IN_ERROR = 50;\n/**\n * RegExpr to determine whether a src in a srcset is using width descriptors.\n * Should match something like: \"100w, 200w\".\n */\nconst VALID_WIDTH_DESCRIPTOR_SRCSET = /^((\\s*\\d+w\\s*(,|$)){1,})$/;\n/**\n * RegExpr to determine whether a src in a srcset is using density descriptors.\n * Should match something like: \"1x, 2x, 50x\". Also supports decimals like \"1.5x, 1.50x\".\n */\nconst VALID_DENSITY_DESCRIPTOR_SRCSET = /^((\\s*\\d+(\\.\\d+)?x\\s*(,|$)){1,})$/;\n/**\n * Srcset values with a density descriptor higher than this value will actively\n * throw an error. Such densities are not permitted as they cause image sizes\n * to be unreasonably large and slow down LCP.\n */\nconst ABSOLUTE_SRCSET_DENSITY_CAP = 3;\n/**\n * Used only in error message text to communicate best practices, as we will\n * only throw based on the slightly more conservative ABSOLUTE_SRCSET_DENSITY_CAP.\n */\nconst RECOMMENDED_SRCSET_DENSITY_CAP = 2;\n/**\n * Used in generating automatic density-based srcsets\n */\nconst DENSITY_SRCSET_MULTIPLIERS = [1, 2];\n/**\n * Used to determine which breakpoints to use on full-width images\n */\nconst VIEWPORT_BREAKPOINT_CUTOFF = 640;\n/**\n * Used to determine whether two aspect ratios are similar in value.\n */\nconst ASPECT_RATIO_TOLERANCE = 0.1;\n/**\n * Used to determine whether the image has been requested at an overly\n * large size compared to the actual rendered image size (after taking\n * into account a typical device pixel ratio). In pixels.\n */\nconst OVERSIZED_IMAGE_TOLERANCE = 1000;\n/**\n * Used to limit automatic srcset generation of very large sources for\n * fixed-size images. In pixels.\n */\nconst FIXED_SRCSET_WIDTH_LIMIT = 1920;\nconst FIXED_SRCSET_HEIGHT_LIMIT = 1080;\n/**\n * Placeholder dimension (height or width) limit in pixels. Angular produces a warning\n * when this limit is crossed.\n */\nconst PLACEHOLDER_DIMENSION_LIMIT = 1000;\n/**\n * Used to warn or error when the user provides an overly large dataURL for the placeholder\n * attribute.\n * Character count of Base64 images is 1 character per byte, and base64 encoding is approximately\n * 33% larger than base images, so 4000 characters is around 3KB on disk and 10000 characters is\n * around 7.7KB. Experimentally, 4000 characters is about 20x20px in PNG or medium-quality JPEG\n * format, and 10,000 is around 50x50px, but there's quite a bit of variation depending on how the\n * image is saved.\n */\nconst DATA_URL_WARN_LIMIT = 4000;\nconst DATA_URL_ERROR_LIMIT = 10000;\n/** Info about built-in loaders we can test for. */\nconst BUILT_IN_LOADERS = [imgixLoaderInfo, imageKitLoaderInfo, cloudinaryLoaderInfo, netlifyLoaderInfo];\n/**\n * Threshold for the PRIORITY_TRUE_COUNT\n */\nconst PRIORITY_COUNT_THRESHOLD = 10;\n/**\n * This count is used to log a devMode warning\n * when the count of directive instances with priority=true\n * exceeds the threshold PRIORITY_COUNT_THRESHOLD\n */\nlet IMGS_WITH_PRIORITY_ATTR_COUNT = 0;\n/**\n * Directive that improves image loading performance by enforcing best practices.\n *\n * `NgOptimizedImage` ensures that the loading of the Largest Contentful Paint (LCP) image is\n * prioritized by:\n * - Automatically setting the `fetchpriority` attribute on the `<img>` tag\n * - Lazy loading non-priority images by default\n * - Automatically generating a preconnect link tag in the document head\n *\n * In addition, the directive:\n * - Generates appropriate asset URLs if a corresponding `ImageLoader` function is provided\n * - Automatically generates a srcset\n * - Requires that `width` and `height` are set\n * - Warns if `width` or `height` have been set incorrectly\n * - Warns if the image will be visually distorted when rendered\n *\n * @usageNotes\n * The `NgOptimizedImage` directive is marked as [standalone](guide/components/importing) and can\n * be imported directly.\n *\n * Follow the steps below to enable and use the directive:\n * 1. Import it into the necessary NgModule or a standalone Component.\n * 2. Optionally provide an `ImageLoader` if you use an image hosting service.\n * 3. Update the necessary `<img>` tags in templates and replace `src` attributes with `ngSrc`.\n * Using a `ngSrc` allows the directive to control when the `src` gets set, which triggers an image\n * download.\n *\n * Step 1: import the `NgOptimizedImage` directive.\n *\n * ```ts\n * import { NgOptimizedImage } from '@angular/common';\n *\n * // Include it into the necessary NgModule\n * @NgModule({\n *   imports: [NgOptimizedImage],\n * })\n * class AppModule {}\n *\n * // ... or a standalone Component\n * @Component({\n *   imports: [NgOptimizedImage],\n * })\n * class MyStandaloneComponent {}\n * ```\n *\n * Step 2: configure a loader.\n *\n * To use the **default loader**: no additional code changes are necessary. The URL returned by the\n * generic loader will always match the value of \"src\". In other words, this loader applies no\n * transformations to the resource URL and the value of the `ngSrc` attribute will be used as is.\n *\n * To use an existing loader for a **third-party image service**: add the provider factory for your\n * chosen service to the `providers` array. In the example below, the Imgix loader is used:\n *\n * ```ts\n * import {provideImgixLoader} from '@angular/common';\n *\n * // Call the function and add the result to the `providers` array:\n * providers: [\n *   provideImgixLoader(\"https://my.base.url/\"),\n * ],\n * ```\n *\n * The `NgOptimizedImage` directive provides the following functions:\n * - `provideCloudflareLoader`\n * - `provideCloudinaryLoader`\n * - `provideImageKitLoader`\n * - `provideImgixLoader`\n *\n * If you use a different image provider, you can create a custom loader function as described\n * below.\n *\n * To use a **custom loader**: provide your loader function as a value for the `IMAGE_LOADER` DI\n * token.\n *\n * ```ts\n * import {IMAGE_LOADER, ImageLoaderConfig} from '@angular/common';\n *\n * // Configure the loader using the `IMAGE_LOADER` token.\n * providers: [\n *   {\n *      provide: IMAGE_LOADER,\n *      useValue: (config: ImageLoaderConfig) => {\n *        return `https://example.com/${config.src}-${config.width}.jpg`;\n *      }\n *   },\n * ],\n * ```\n *\n * Step 3: update `<img>` tags in templates to use `ngSrc` instead of `src`.\n *\n * ```html\n * <img ngSrc=\"logo.png\" width=\"200\" height=\"100\">\n * ```\n *\n * @publicApi\n */\nlet NgOptimizedImage = /*#__PURE__*/(() => {\n  class NgOptimizedImage {\n    imageLoader = inject(IMAGE_LOADER);\n    config = processConfig(inject(_IMAGE_CONFIG));\n    renderer = inject(Renderer2);\n    imgElement = inject(ElementRef).nativeElement;\n    injector = inject(Injector);\n    // An LCP image observer should be injected only in development mode.\n    // Do not assign it to `null` to avoid having a redundant property in the production bundle.\n    lcpObserver;\n    /**\n     * Calculate the rewritten `src` once and store it.\n     * This is needed to avoid repetitive calculations and make sure the directive cleanup in the\n     * `ngOnDestroy` does not rely on the `IMAGE_LOADER` logic (which in turn can rely on some other\n     * instance that might be already destroyed).\n     */\n    _renderedSrc = null;\n    /**\n     * Name of the source image.\n     * Image name will be processed by the image loader and the final URL will be applied as the `src`\n     * property of the image.\n     */\n    ngSrc;\n    /**\n     * A comma separated list of width or density descriptors.\n     * The image name will be taken from `ngSrc` and combined with the list of width or density\n     * descriptors to generate the final `srcset` property of the image.\n     *\n     * Example:\n     * ```html\n     * <img ngSrc=\"hello.jpg\" ngSrcset=\"100w, 200w\" />  =>\n     * <img src=\"path/hello.jpg\" srcset=\"path/hello.jpg?w=100 100w, path/hello.jpg?w=200 200w\" />\n     * ```\n     */\n    ngSrcset;\n    /**\n     * The base `sizes` attribute passed through to the `<img>` element.\n     * Providing sizes causes the image to create an automatic responsive srcset.\n     */\n    sizes;\n    /**\n     * For responsive images: the intrinsic width of the image in pixels.\n     * For fixed size images: the desired rendered width of the image in pixels.\n     */\n    width;\n    /**\n     * For responsive images: the intrinsic height of the image in pixels.\n     * For fixed size images: the desired rendered height of the image in pixels.\n     */\n    height;\n    /**\n     * The desired decoding behavior for the image. Defaults to `auto`\n     * if not explicitly set, matching native browser behavior.\n     *\n     * Use `async` to decode the image off the main thread (non-blocking),\n     * `sync` for immediate decoding (blocking), or `auto` to let the\n     * browser decide the optimal strategy.\n     *\n     * [Spec](https://html.spec.whatwg.org/multipage/images.html#image-decoding-hint)\n     */\n    decoding;\n    /**\n     * The desired loading behavior (lazy, eager, or auto). Defaults to `lazy`,\n     * which is recommended for most images.\n     *\n     * Warning: Setting images as loading=\"eager\" or loading=\"auto\" marks them\n     * as non-priority images and can hurt loading performance. For images which\n     * may be the LCP element, use the `priority` attribute instead of `loading`.\n     */\n    loading;\n    /**\n     * Indicates whether this image should have a high priority.\n     */\n    priority = false;\n    /**\n     * Data to pass through to custom loaders.\n     */\n    loaderParams;\n    /**\n     * Disables automatic srcset generation for this image.\n     */\n    disableOptimizedSrcset = false;\n    /**\n     * Sets the image to \"fill mode\", which eliminates the height/width requirement and adds\n     * styles such that the image fills its containing element.\n     */\n    fill = false;\n    /**\n     * A URL or data URL for an image to be used as a placeholder while this image loads.\n     */\n    placeholder;\n    /**\n     * Configuration object for placeholder settings. Options:\n     *   * blur: Setting this to false disables the automatic CSS blur.\n     */\n    placeholderConfig;\n    /**\n     * Value of the `src` attribute if set on the host `<img>` element.\n     * This input is exclusively read to assert that `src` is not set in conflict\n     * with `ngSrc` and that images don't start to load until a lazy loading strategy is set.\n     * @internal\n     */\n    src;\n    /**\n     * Value of the `srcset` attribute if set on the host `<img>` element.\n     * This input is exclusively read to assert that `srcset` is not set in conflict\n     * with `ngSrcset` and that images don't start to load until a lazy loading strategy is set.\n     * @internal\n     */\n    srcset;\n    constructor() {\n      if (ngDevMode) {\n        this.lcpObserver = this.injector.get(LCPImageObserver);\n        // Using `DestroyRef` to avoid having an empty `ngOnDestroy` method since this\n        // is only run in development mode.\n        const destroyRef = inject(DestroyRef);\n        destroyRef.onDestroy(() => {\n          if (!this.priority && this._renderedSrc !== null) {\n            this.lcpObserver.unregisterImage(this._renderedSrc);\n          }\n        });\n      }\n    }\n    /** @docs-private */\n    ngOnInit() {\n      _performanceMarkFeature('NgOptimizedImage');\n      if (ngDevMode) {\n        const ngZone = this.injector.get(NgZone);\n        assertNonEmptyInput(this, 'ngSrc', this.ngSrc);\n        assertValidNgSrcset(this, this.ngSrcset);\n        assertNoConflictingSrc(this);\n        if (this.ngSrcset) {\n          assertNoConflictingSrcset(this);\n        }\n        assertNotBase64Image(this);\n        assertNotBlobUrl(this);\n        if (this.fill) {\n          assertEmptyWidthAndHeight(this);\n          // This leaves the Angular zone to avoid triggering unnecessary change detection cycles when\n          // `load` tasks are invoked on images.\n          ngZone.runOutsideAngular(() => assertNonZeroRenderedHeight(this, this.imgElement, this.renderer));\n        } else {\n          assertNonEmptyWidthAndHeight(this);\n          if (this.height !== undefined) {\n            assertGreaterThanZero(this, this.height, 'height');\n          }\n          if (this.width !== undefined) {\n            assertGreaterThanZero(this, this.width, 'width');\n          }\n          // Only check for distorted images when not in fill mode, where\n          // images may be intentionally stretched, cropped or letterboxed.\n          ngZone.runOutsideAngular(() => assertNoImageDistortion(this, this.imgElement, this.renderer));\n        }\n        assertValidLoadingInput(this);\n        assertValidDecodingInput(this);\n        if (!this.ngSrcset) {\n          assertNoComplexSizes(this);\n        }\n        assertValidPlaceholder(this, this.imageLoader);\n        assertNotMissingBuiltInLoader(this.ngSrc, this.imageLoader);\n        assertNoNgSrcsetWithoutLoader(this, this.imageLoader);\n        assertNoLoaderParamsWithoutLoader(this, this.imageLoader);\n        ngZone.runOutsideAngular(() => {\n          this.lcpObserver.registerImage(this.getRewrittenSrc(), this.ngSrc, this.priority);\n        });\n        if (this.priority) {\n          const checker = this.injector.get(PreconnectLinkChecker);\n          checker.assertPreconnect(this.getRewrittenSrc(), this.ngSrc);\n          if (typeof ngServerMode !== 'undefined' && !ngServerMode) {\n            const applicationRef = this.injector.get(ApplicationRef);\n            assetPriorityCountBelowThreshold(applicationRef);\n          }\n        }\n      }\n      if (this.placeholder) {\n        this.removePlaceholderOnLoad(this.imgElement);\n      }\n      this.setHostAttributes();\n    }\n    setHostAttributes() {\n      // Must set width/height explicitly in case they are bound (in which case they will\n      // only be reflected and not found by the browser)\n      if (this.fill) {\n        this.sizes ||= '100vw';\n      } else {\n        this.setHostAttribute('width', this.width.toString());\n        this.setHostAttribute('height', this.height.toString());\n      }\n      this.setHostAttribute('loading', this.getLoadingBehavior());\n      this.setHostAttribute('fetchpriority', this.getFetchPriority());\n      this.setHostAttribute('decoding', this.getDecoding());\n      // The `data-ng-img` attribute flags an image as using the directive, to allow\n      // for analysis of the directive's performance.\n      this.setHostAttribute('ng-img', 'true');\n      // The `src` and `srcset` attributes should be set last since other attributes\n      // could affect the image's loading behavior.\n      const rewrittenSrcset = this.updateSrcAndSrcset();\n      if (this.sizes) {\n        if (this.getLoadingBehavior() === 'lazy') {\n          this.setHostAttribute('sizes', 'auto, ' + this.sizes);\n        } else {\n          this.setHostAttribute('sizes', this.sizes);\n        }\n      } else {\n        if (this.ngSrcset && VALID_WIDTH_DESCRIPTOR_SRCSET.test(this.ngSrcset) && this.getLoadingBehavior() === 'lazy') {\n          this.setHostAttribute('sizes', 'auto, 100vw');\n        }\n      }\n      if (typeof ngServerMode !== 'undefined' && ngServerMode && this.priority) {\n        const preloadLinkCreator = this.injector.get(PreloadLinkCreator);\n        preloadLinkCreator.createPreloadLinkTag(this.renderer, this.getRewrittenSrc(), rewrittenSrcset, this.sizes);\n      }\n    }\n    /** @docs-private */\n    ngOnChanges(changes) {\n      if (ngDevMode) {\n        assertNoPostInitInputChange(this, changes, ['ngSrcset', 'width', 'height', 'priority', 'fill', 'loading', 'sizes', 'loaderParams', 'disableOptimizedSrcset']);\n      }\n      if (changes['ngSrc'] && !changes['ngSrc'].isFirstChange()) {\n        const oldSrc = this._renderedSrc;\n        this.updateSrcAndSrcset(true);\n        if (ngDevMode) {\n          const newSrc = this._renderedSrc;\n          if (oldSrc && newSrc && oldSrc !== newSrc) {\n            const ngZone = this.injector.get(NgZone);\n            ngZone.runOutsideAngular(() => {\n              this.lcpObserver.updateImage(oldSrc, newSrc);\n            });\n          }\n        }\n      }\n      if (ngDevMode && changes['placeholder']?.currentValue && typeof ngServerMode !== 'undefined' && !ngServerMode) {\n        assertPlaceholderDimensions(this, this.imgElement);\n      }\n    }\n    callImageLoader(configWithoutCustomParams) {\n      let augmentedConfig = configWithoutCustomParams;\n      if (this.loaderParams) {\n        augmentedConfig.loaderParams = this.loaderParams;\n      }\n      return this.imageLoader(augmentedConfig);\n    }\n    getLoadingBehavior() {\n      if (!this.priority && this.loading !== undefined) {\n        return this.loading;\n      }\n      return this.priority ? 'eager' : 'lazy';\n    }\n    getFetchPriority() {\n      return this.priority ? 'high' : 'auto';\n    }\n    getDecoding() {\n      if (this.priority) {\n        // `sync` means the image is decoded immediately when it's loaded,\n        // reducing the risk of content shifting later (important for LCP).\n        // If we're marking an image as priority, we want it decoded and\n        // painted as early as possible.\n        return 'sync';\n      }\n      // Returns the value of the `decoding` attribute, defaulting to `auto`\n      // if not explicitly provided. This mimics native browser behavior and\n      // avoids breaking changes when no decoding strategy is specified.\n      return this.decoding ?? 'auto';\n    }\n    getRewrittenSrc() {\n      // ImageLoaderConfig supports setting a width property. However, we're not setting width here\n      // because if the developer uses rendered width instead of intrinsic width in the HTML width\n      // attribute, the image requested may be too small for 2x+ screens.\n      if (!this._renderedSrc) {\n        const imgConfig = {\n          src: this.ngSrc\n        };\n        // Cache calculated image src to reuse it later in the code.\n        this._renderedSrc = this.callImageLoader(imgConfig);\n      }\n      return this._renderedSrc;\n    }\n    getRewrittenSrcset() {\n      const widthSrcSet = VALID_WIDTH_DESCRIPTOR_SRCSET.test(this.ngSrcset);\n      const finalSrcs = this.ngSrcset.split(',').filter(src => src !== '').map(srcStr => {\n        srcStr = srcStr.trim();\n        const width = widthSrcSet ? parseFloat(srcStr) : parseFloat(srcStr) * this.width;\n        return `${this.callImageLoader({\n          src: this.ngSrc,\n          width\n        })} ${srcStr}`;\n      });\n      return finalSrcs.join(', ');\n    }\n    getAutomaticSrcset() {\n      if (this.sizes) {\n        return this.getResponsiveSrcset();\n      } else {\n        return this.getFixedSrcset();\n      }\n    }\n    getResponsiveSrcset() {\n      const {\n        breakpoints\n      } = this.config;\n      let filteredBreakpoints = breakpoints;\n      if (this.sizes?.trim() === '100vw') {\n        // Since this is a full-screen-width image, our srcset only needs to include\n        // breakpoints with full viewport widths.\n        filteredBreakpoints = breakpoints.filter(bp => bp >= VIEWPORT_BREAKPOINT_CUTOFF);\n      }\n      const finalSrcs = filteredBreakpoints.map(bp => `${this.callImageLoader({\n        src: this.ngSrc,\n        width: bp\n      })} ${bp}w`);\n      return finalSrcs.join(', ');\n    }\n    updateSrcAndSrcset(forceSrcRecalc = false) {\n      if (forceSrcRecalc) {\n        // Reset cached value, so that the followup `getRewrittenSrc()` call\n        // will recalculate it and update the cache.\n        this._renderedSrc = null;\n      }\n      const rewrittenSrc = this.getRewrittenSrc();\n      this.setHostAttribute('src', rewrittenSrc);\n      let rewrittenSrcset = undefined;\n      if (this.ngSrcset) {\n        rewrittenSrcset = this.getRewrittenSrcset();\n      } else if (this.shouldGenerateAutomaticSrcset()) {\n        rewrittenSrcset = this.getAutomaticSrcset();\n      }\n      if (rewrittenSrcset) {\n        this.setHostAttribute('srcset', rewrittenSrcset);\n      }\n      return rewrittenSrcset;\n    }\n    getFixedSrcset() {\n      const finalSrcs = DENSITY_SRCSET_MULTIPLIERS.map(multiplier => `${this.callImageLoader({\n        src: this.ngSrc,\n        width: this.width * multiplier\n      })} ${multiplier}x`);\n      return finalSrcs.join(', ');\n    }\n    shouldGenerateAutomaticSrcset() {\n      let oversizedImage = false;\n      if (!this.sizes) {\n        oversizedImage = this.width > FIXED_SRCSET_WIDTH_LIMIT || this.height > FIXED_SRCSET_HEIGHT_LIMIT;\n      }\n      return !this.disableOptimizedSrcset && !this.srcset && this.imageLoader !== noopImageLoader && !oversizedImage;\n    }\n    /**\n     * Returns an image url formatted for use with the CSS background-image property. Expects one of:\n     * * A base64 encoded image, which is wrapped and passed through.\n     * * A boolean. If true, calls the image loader to generate a small placeholder url.\n     */\n    generatePlaceholder(placeholderInput) {\n      const {\n        placeholderResolution\n      } = this.config;\n      if (placeholderInput === true) {\n        return `url(${this.callImageLoader({\n          src: this.ngSrc,\n          width: placeholderResolution,\n          isPlaceholder: true\n        })})`;\n      } else if (typeof placeholderInput === 'string') {\n        return `url(${placeholderInput})`;\n      }\n      return null;\n    }\n    /**\n     * Determines if blur should be applied, based on an optional boolean\n     * property `blur` within the optional configuration object `placeholderConfig`.\n     */\n    shouldBlurPlaceholder(placeholderConfig) {\n      if (!placeholderConfig || !placeholderConfig.hasOwnProperty('blur')) {\n        return true;\n      }\n      return Boolean(placeholderConfig.blur);\n    }\n    removePlaceholderOnLoad(img) {\n      const callback = () => {\n        const changeDetectorRef = this.injector.get(ChangeDetectorRef);\n        removeLoadListenerFn();\n        removeErrorListenerFn();\n        this.placeholder = false;\n        changeDetectorRef.markForCheck();\n      };\n      const removeLoadListenerFn = this.renderer.listen(img, 'load', callback);\n      const removeErrorListenerFn = this.renderer.listen(img, 'error', callback);\n      callOnLoadIfImageIsLoaded(img, callback);\n    }\n    setHostAttribute(name, value) {\n      this.renderer.setAttribute(this.imgElement, name, value);\n    }\n    static ɵfac = function NgOptimizedImage_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgOptimizedImage)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgOptimizedImage,\n      selectors: [[\"img\", \"ngSrc\", \"\"]],\n      hostVars: 18,\n      hostBindings: function NgOptimizedImage_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵstyleProp(\"position\", ctx.fill ? \"absolute\" : null)(\"width\", ctx.fill ? \"100%\" : null)(\"height\", ctx.fill ? \"100%\" : null)(\"inset\", ctx.fill ? \"0\" : null)(\"background-size\", ctx.placeholder ? \"cover\" : null)(\"background-position\", ctx.placeholder ? \"50% 50%\" : null)(\"background-repeat\", ctx.placeholder ? \"no-repeat\" : null)(\"background-image\", ctx.placeholder ? ctx.generatePlaceholder(ctx.placeholder) : null)(\"filter\", ctx.placeholder && ctx.shouldBlurPlaceholder(ctx.placeholderConfig) ? \"blur(15px)\" : null);\n        }\n      },\n      inputs: {\n        ngSrc: [2, \"ngSrc\", \"ngSrc\", unwrapSafeUrl],\n        ngSrcset: \"ngSrcset\",\n        sizes: \"sizes\",\n        width: [2, \"width\", \"width\", numberAttribute],\n        height: [2, \"height\", \"height\", numberAttribute],\n        decoding: \"decoding\",\n        loading: \"loading\",\n        priority: [2, \"priority\", \"priority\", booleanAttribute],\n        loaderParams: \"loaderParams\",\n        disableOptimizedSrcset: [2, \"disableOptimizedSrcset\", \"disableOptimizedSrcset\", booleanAttribute],\n        fill: [2, \"fill\", \"fill\", booleanAttribute],\n        placeholder: [2, \"placeholder\", \"placeholder\", booleanOrUrlAttribute],\n        placeholderConfig: \"placeholderConfig\",\n        src: \"src\",\n        srcset: \"srcset\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return NgOptimizedImage;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***** Helpers *****/\n/**\n * Sorts provided config breakpoints and uses defaults.\n */\nfunction processConfig(config) {\n  let sortedBreakpoints = {};\n  if (config.breakpoints) {\n    sortedBreakpoints.breakpoints = config.breakpoints.sort((a, b) => a - b);\n  }\n  return Object.assign({}, _IMAGE_CONFIG_DEFAULTS, config, sortedBreakpoints);\n}\n/***** Assert functions *****/\n/**\n * Verifies that there is no `src` set on a host element.\n */\nfunction assertNoConflictingSrc(dir) {\n  if (dir.src) {\n    throw new _RuntimeError(2950 /* RuntimeErrorCode.UNEXPECTED_SRC_ATTR */, `${imgDirectiveDetails(dir.ngSrc)} both \\`src\\` and \\`ngSrc\\` have been set. ` + `Supplying both of these attributes breaks lazy loading. ` + `The NgOptimizedImage directive sets \\`src\\` itself based on the value of \\`ngSrc\\`. ` + `To fix this, please remove the \\`src\\` attribute.`);\n  }\n}\n/**\n * Verifies that there is no `srcset` set on a host element.\n */\nfunction assertNoConflictingSrcset(dir) {\n  if (dir.srcset) {\n    throw new _RuntimeError(2951 /* RuntimeErrorCode.UNEXPECTED_SRCSET_ATTR */, `${imgDirectiveDetails(dir.ngSrc)} both \\`srcset\\` and \\`ngSrcset\\` have been set. ` + `Supplying both of these attributes breaks lazy loading. ` + `The NgOptimizedImage directive sets \\`srcset\\` itself based on the value of ` + `\\`ngSrcset\\`. To fix this, please remove the \\`srcset\\` attribute.`);\n  }\n}\n/**\n * Verifies that the `ngSrc` is not a Base64-encoded image.\n */\nfunction assertNotBase64Image(dir) {\n  let ngSrc = dir.ngSrc.trim();\n  if (ngSrc.startsWith('data:')) {\n    if (ngSrc.length > BASE64_IMG_MAX_LENGTH_IN_ERROR) {\n      ngSrc = ngSrc.substring(0, BASE64_IMG_MAX_LENGTH_IN_ERROR) + '...';\n    }\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc, false)} \\`ngSrc\\` is a Base64-encoded string ` + `(${ngSrc}). NgOptimizedImage does not support Base64-encoded strings. ` + `To fix this, disable the NgOptimizedImage directive for this element ` + `by removing \\`ngSrc\\` and using a standard \\`src\\` attribute instead.`);\n  }\n}\n/**\n * Verifies that the 'sizes' only includes responsive values.\n */\nfunction assertNoComplexSizes(dir) {\n  let sizes = dir.sizes;\n  if (sizes?.match(/((\\)|,)\\s|^)\\d+px/)) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc, false)} \\`sizes\\` was set to a string including ` + `pixel values. For automatic \\`srcset\\` generation, \\`sizes\\` must only include responsive ` + `values, such as \\`sizes=\"50vw\"\\` or \\`sizes=\"(min-width: 768px) 50vw, 100vw\"\\`. ` + `To fix this, modify the \\`sizes\\` attribute, or provide your own \\`ngSrcset\\` value directly.`);\n  }\n}\nfunction assertValidPlaceholder(dir, imageLoader) {\n  assertNoPlaceholderConfigWithoutPlaceholder(dir);\n  assertNoRelativePlaceholderWithoutLoader(dir, imageLoader);\n  assertNoOversizedDataUrl(dir);\n}\n/**\n * Verifies that placeholderConfig isn't being used without placeholder\n */\nfunction assertNoPlaceholderConfigWithoutPlaceholder(dir) {\n  if (dir.placeholderConfig && !dir.placeholder) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc, false)} \\`placeholderConfig\\` options were provided for an ` + `image that does not use the \\`placeholder\\` attribute, and will have no effect.`);\n  }\n}\n/**\n * Warns if a relative URL placeholder is specified, but no loader is present to provide the small\n * image.\n */\nfunction assertNoRelativePlaceholderWithoutLoader(dir, imageLoader) {\n  if (dir.placeholder === true && imageLoader === noopImageLoader) {\n    throw new _RuntimeError(2963 /* RuntimeErrorCode.MISSING_NECESSARY_LOADER */, `${imgDirectiveDetails(dir.ngSrc)} the \\`placeholder\\` attribute is set to true but ` + `no image loader is configured (i.e. the default one is being used), ` + `which would result in the same image being used for the primary image and its placeholder. ` + `To fix this, provide a loader or remove the \\`placeholder\\` attribute from the image.`);\n  }\n}\n/**\n * Warns or throws an error if an oversized dataURL placeholder is provided.\n */\nfunction assertNoOversizedDataUrl(dir) {\n  if (dir.placeholder && typeof dir.placeholder === 'string' && dir.placeholder.startsWith('data:')) {\n    if (dir.placeholder.length > DATA_URL_ERROR_LIMIT) {\n      throw new _RuntimeError(2965 /* RuntimeErrorCode.OVERSIZED_PLACEHOLDER */, `${imgDirectiveDetails(dir.ngSrc)} the \\`placeholder\\` attribute is set to a data URL which is longer ` + `than ${DATA_URL_ERROR_LIMIT} characters. This is strongly discouraged, as large inline placeholders ` + `directly increase the bundle size of Angular and hurt page load performance. To fix this, generate ` + `a smaller data URL placeholder.`);\n    }\n    if (dir.placeholder.length > DATA_URL_WARN_LIMIT) {\n      console.warn(_formatRuntimeError(2965 /* RuntimeErrorCode.OVERSIZED_PLACEHOLDER */, `${imgDirectiveDetails(dir.ngSrc)} the \\`placeholder\\` attribute is set to a data URL which is longer ` + `than ${DATA_URL_WARN_LIMIT} characters. This is discouraged, as large inline placeholders ` + `directly increase the bundle size of Angular and hurt page load performance. For better loading performance, ` + `generate a smaller data URL placeholder.`));\n    }\n  }\n}\n/**\n * Verifies that the `ngSrc` is not a Blob URL.\n */\nfunction assertNotBlobUrl(dir) {\n  const ngSrc = dir.ngSrc.trim();\n  if (ngSrc.startsWith('blob:')) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} \\`ngSrc\\` was set to a blob URL (${ngSrc}). ` + `Blob URLs are not supported by the NgOptimizedImage directive. ` + `To fix this, disable the NgOptimizedImage directive for this element ` + `by removing \\`ngSrc\\` and using a regular \\`src\\` attribute instead.`);\n  }\n}\n/**\n * Verifies that the input is set to a non-empty string.\n */\nfunction assertNonEmptyInput(dir, name, value) {\n  const isString = typeof value === 'string';\n  const isEmptyString = isString && value.trim() === '';\n  if (!isString || isEmptyString) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} \\`${name}\\` has an invalid value ` + `(\\`${value}\\`). To fix this, change the value to a non-empty string.`);\n  }\n}\n/**\n * Verifies that the `ngSrcset` is in a valid format, e.g. \"100w, 200w\" or \"1x, 2x\".\n */\nfunction assertValidNgSrcset(dir, value) {\n  if (value == null) return;\n  assertNonEmptyInput(dir, 'ngSrcset', value);\n  const stringVal = value;\n  const isValidWidthDescriptor = VALID_WIDTH_DESCRIPTOR_SRCSET.test(stringVal);\n  const isValidDensityDescriptor = VALID_DENSITY_DESCRIPTOR_SRCSET.test(stringVal);\n  if (isValidDensityDescriptor) {\n    assertUnderDensityCap(dir, stringVal);\n  }\n  const isValidSrcset = isValidWidthDescriptor || isValidDensityDescriptor;\n  if (!isValidSrcset) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} \\`ngSrcset\\` has an invalid value (\\`${value}\\`). ` + `To fix this, supply \\`ngSrcset\\` using a comma-separated list of one or more width ` + `descriptors (e.g. \"100w, 200w\") or density descriptors (e.g. \"1x, 2x\").`);\n  }\n}\nfunction assertUnderDensityCap(dir, value) {\n  const underDensityCap = value.split(',').every(num => num === '' || parseFloat(num) <= ABSOLUTE_SRCSET_DENSITY_CAP);\n  if (!underDensityCap) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} the \\`ngSrcset\\` contains an unsupported image density:` + `\\`${value}\\`. NgOptimizedImage generally recommends a max image density of ` + `${RECOMMENDED_SRCSET_DENSITY_CAP}x but supports image densities up to ` + `${ABSOLUTE_SRCSET_DENSITY_CAP}x. The human eye cannot distinguish between image densities ` + `greater than ${RECOMMENDED_SRCSET_DENSITY_CAP}x - which makes them unnecessary for ` + `most use cases. Images that will be pinch-zoomed are typically the primary use case for ` + `${ABSOLUTE_SRCSET_DENSITY_CAP}x images. Please remove the high density descriptor and try again.`);\n  }\n}\n/**\n * Creates a `RuntimeError` instance to represent a situation when an input is set after\n * the directive has initialized.\n */\nfunction postInitInputChangeError(dir, inputName) {\n  let reason;\n  if (inputName === 'width' || inputName === 'height') {\n    reason = `Changing \\`${inputName}\\` may result in different attribute value ` + `applied to the underlying image element and cause layout shifts on a page.`;\n  } else {\n    reason = `Changing the \\`${inputName}\\` would have no effect on the underlying ` + `image element, because the resource loading has already occurred.`;\n  }\n  return new _RuntimeError(2953 /* RuntimeErrorCode.UNEXPECTED_INPUT_CHANGE */, `${imgDirectiveDetails(dir.ngSrc)} \\`${inputName}\\` was updated after initialization. ` + `The NgOptimizedImage directive will not react to this input change. ${reason} ` + `To fix this, either switch \\`${inputName}\\` to a static value ` + `or wrap the image element in an @if that is gated on the necessary value.`);\n}\n/**\n * Verify that none of the listed inputs has changed.\n */\nfunction assertNoPostInitInputChange(dir, changes, inputs) {\n  inputs.forEach(input => {\n    const isUpdated = changes.hasOwnProperty(input);\n    if (isUpdated && !changes[input].isFirstChange()) {\n      if (input === 'ngSrc') {\n        // When the `ngSrc` input changes, we detect that only in the\n        // `ngOnChanges` hook, thus the `ngSrc` is already set. We use\n        // `ngSrc` in the error message, so we use a previous value, but\n        // not the updated one in it.\n        dir = {\n          ngSrc: changes[input].previousValue\n        };\n      }\n      throw postInitInputChangeError(dir, input);\n    }\n  });\n}\n/**\n * Verifies that a specified input is a number greater than 0.\n */\nfunction assertGreaterThanZero(dir, inputValue, inputName) {\n  const validNumber = typeof inputValue === 'number' && inputValue > 0;\n  const validString = typeof inputValue === 'string' && /^\\d+$/.test(inputValue.trim()) && parseInt(inputValue) > 0;\n  if (!validNumber && !validString) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} \\`${inputName}\\` has an invalid value. ` + `To fix this, provide \\`${inputName}\\` as a number greater than 0.`);\n  }\n}\n/**\n * Verifies that the rendered image is not visually distorted. Effectively this is checking:\n * - Whether the \"width\" and \"height\" attributes reflect the actual dimensions of the image.\n * - Whether image styling is \"correct\" (see below for a longer explanation).\n */\nfunction assertNoImageDistortion(dir, img, renderer) {\n  const callback = () => {\n    removeLoadListenerFn();\n    removeErrorListenerFn();\n    const computedStyle = window.getComputedStyle(img);\n    let renderedWidth = parseFloat(computedStyle.getPropertyValue('width'));\n    let renderedHeight = parseFloat(computedStyle.getPropertyValue('height'));\n    const boxSizing = computedStyle.getPropertyValue('box-sizing');\n    if (boxSizing === 'border-box') {\n      const paddingTop = computedStyle.getPropertyValue('padding-top');\n      const paddingRight = computedStyle.getPropertyValue('padding-right');\n      const paddingBottom = computedStyle.getPropertyValue('padding-bottom');\n      const paddingLeft = computedStyle.getPropertyValue('padding-left');\n      renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);\n      renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);\n    }\n    const renderedAspectRatio = renderedWidth / renderedHeight;\n    const nonZeroRenderedDimensions = renderedWidth !== 0 && renderedHeight !== 0;\n    const intrinsicWidth = img.naturalWidth;\n    const intrinsicHeight = img.naturalHeight;\n    const intrinsicAspectRatio = intrinsicWidth / intrinsicHeight;\n    const suppliedWidth = dir.width;\n    const suppliedHeight = dir.height;\n    const suppliedAspectRatio = suppliedWidth / suppliedHeight;\n    // Tolerance is used to account for the impact of subpixel rendering.\n    // Due to subpixel rendering, the rendered, intrinsic, and supplied\n    // aspect ratios of a correctly configured image may not exactly match.\n    // For example, a `width=4030 height=3020` image might have a rendered\n    // size of \"1062w, 796.48h\". (An aspect ratio of 1.334... vs. 1.333...)\n    const inaccurateDimensions = Math.abs(suppliedAspectRatio - intrinsicAspectRatio) > ASPECT_RATIO_TOLERANCE;\n    const stylingDistortion = nonZeroRenderedDimensions && Math.abs(intrinsicAspectRatio - renderedAspectRatio) > ASPECT_RATIO_TOLERANCE;\n    if (inaccurateDimensions) {\n      console.warn(_formatRuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the image does not match ` + `the aspect ratio indicated by the width and height attributes. ` + `\\nIntrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h ` + `(aspect-ratio: ${round(intrinsicAspectRatio)}). \\nSupplied width and height attributes: ` + `${suppliedWidth}w x ${suppliedHeight}h (aspect-ratio: ${round(suppliedAspectRatio)}). ` + `\\nTo fix this, update the width and height attributes.`));\n    } else if (stylingDistortion) {\n      console.warn(_formatRuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the rendered image ` + `does not match the image's intrinsic aspect ratio. ` + `\\nIntrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h ` + `(aspect-ratio: ${round(intrinsicAspectRatio)}). \\nRendered image size: ` + `${renderedWidth}w x ${renderedHeight}h (aspect-ratio: ` + `${round(renderedAspectRatio)}). \\nThis issue can occur if \"width\" and \"height\" ` + `attributes are added to an image without updating the corresponding ` + `image styling. To fix this, adjust image styling. In most cases, ` + `adding \"height: auto\" or \"width: auto\" to the image styling will fix ` + `this issue.`));\n    } else if (!dir.ngSrcset && nonZeroRenderedDimensions) {\n      // If `ngSrcset` hasn't been set, sanity check the intrinsic size.\n      const recommendedWidth = RECOMMENDED_SRCSET_DENSITY_CAP * renderedWidth;\n      const recommendedHeight = RECOMMENDED_SRCSET_DENSITY_CAP * renderedHeight;\n      const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE;\n      const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE;\n      if (oversizedWidth || oversizedHeight) {\n        console.warn(_formatRuntimeError(2960 /* RuntimeErrorCode.OVERSIZED_IMAGE */, `${imgDirectiveDetails(dir.ngSrc)} the intrinsic image is significantly ` + `larger than necessary. ` + `\\nRendered image size: ${renderedWidth}w x ${renderedHeight}h. ` + `\\nIntrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h. ` + `\\nRecommended intrinsic image size: ${recommendedWidth}w x ${recommendedHeight}h. ` + `\\nNote: Recommended intrinsic image size is calculated assuming a maximum DPR of ` + `${RECOMMENDED_SRCSET_DENSITY_CAP}. To improve loading time, resize the image ` + `or consider using the \"ngSrcset\" and \"sizes\" attributes.`));\n      }\n    }\n  };\n  const removeLoadListenerFn = renderer.listen(img, 'load', callback);\n  // We only listen to the `error` event to remove the `load` event listener because it will not be\n  // fired if the image fails to load. This is done to prevent memory leaks in development mode\n  // because image elements aren't garbage-collected properly. It happens because zone.js stores the\n  // event listener directly on the element and closures capture `dir`.\n  const removeErrorListenerFn = renderer.listen(img, 'error', () => {\n    removeLoadListenerFn();\n    removeErrorListenerFn();\n  });\n  callOnLoadIfImageIsLoaded(img, callback);\n}\n/**\n * Verifies that a specified input is set.\n */\nfunction assertNonEmptyWidthAndHeight(dir) {\n  let missingAttributes = [];\n  if (dir.width === undefined) missingAttributes.push('width');\n  if (dir.height === undefined) missingAttributes.push('height');\n  if (missingAttributes.length > 0) {\n    throw new _RuntimeError(2954 /* RuntimeErrorCode.REQUIRED_INPUT_MISSING */, `${imgDirectiveDetails(dir.ngSrc)} these required attributes ` + `are missing: ${missingAttributes.map(attr => `\"${attr}\"`).join(', ')}. ` + `Including \"width\" and \"height\" attributes will prevent image-related layout shifts. ` + `To fix this, include \"width\" and \"height\" attributes on the image tag or turn on ` + `\"fill\" mode with the \\`fill\\` attribute.`);\n  }\n}\n/**\n * Verifies that width and height are not set. Used in fill mode, where those attributes don't make\n * sense.\n */\nfunction assertEmptyWidthAndHeight(dir) {\n  if (dir.width || dir.height) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} the attributes \\`height\\` and/or \\`width\\` are present ` + `along with the \\`fill\\` attribute. Because \\`fill\\` mode causes an image to fill its containing ` + `element, the size attributes have no effect and should be removed.`);\n  }\n}\n/**\n * Verifies that the rendered image has a nonzero height. If the image is in fill mode, provides\n * guidance that this can be caused by the containing element's CSS position property.\n */\nfunction assertNonZeroRenderedHeight(dir, img, renderer) {\n  const callback = () => {\n    removeLoadListenerFn();\n    removeErrorListenerFn();\n    const renderedHeight = img.clientHeight;\n    if (dir.fill && renderedHeight === 0) {\n      console.warn(_formatRuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} the height of the fill-mode image is zero. ` + `This is likely because the containing element does not have the CSS 'position' ` + `property set to one of the following: \"relative\", \"fixed\", or \"absolute\". ` + `To fix this problem, make sure the container element has the CSS 'position' ` + `property defined and the height of the element is not zero.`));\n    }\n  };\n  const removeLoadListenerFn = renderer.listen(img, 'load', callback);\n  // See comments in the `assertNoImageDistortion`.\n  const removeErrorListenerFn = renderer.listen(img, 'error', () => {\n    removeLoadListenerFn();\n    removeErrorListenerFn();\n  });\n  callOnLoadIfImageIsLoaded(img, callback);\n}\n/**\n * Verifies that the `loading` attribute is set to a valid input &\n * is not used on priority images.\n */\nfunction assertValidLoadingInput(dir) {\n  if (dir.loading && dir.priority) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} the \\`loading\\` attribute ` + `was used on an image that was marked \"priority\". ` + `Setting \\`loading\\` on priority images is not allowed ` + `because these images will always be eagerly loaded. ` + `To fix this, remove the “loading” attribute from the priority image.`);\n  }\n  const validInputs = ['auto', 'eager', 'lazy'];\n  if (typeof dir.loading === 'string' && !validInputs.includes(dir.loading)) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} the \\`loading\\` attribute ` + `has an invalid value (\\`${dir.loading}\\`). ` + `To fix this, provide a valid value (\"lazy\", \"eager\", or \"auto\").`);\n  }\n}\n/**\n * Verifies that the `decoding` attribute is set to a valid input.\n */\nfunction assertValidDecodingInput(dir) {\n  const validInputs = ['sync', 'async', 'auto'];\n  if (typeof dir.decoding === 'string' && !validInputs.includes(dir.decoding)) {\n    throw new _RuntimeError(2952 /* RuntimeErrorCode.INVALID_INPUT */, `${imgDirectiveDetails(dir.ngSrc)} the \\`decoding\\` attribute ` + `has an invalid value (\\`${dir.decoding}\\`). ` + `To fix this, provide a valid value (\"sync\", \"async\", or \"auto\").`);\n  }\n}\n/**\n * Warns if NOT using a loader (falling back to the generic loader) and\n * the image appears to be hosted on one of the image CDNs for which\n * we do have a built-in image loader. Suggests switching to the\n * built-in loader.\n *\n * @param ngSrc Value of the ngSrc attribute\n * @param imageLoader ImageLoader provided\n */\nfunction assertNotMissingBuiltInLoader(ngSrc, imageLoader) {\n  if (imageLoader === noopImageLoader) {\n    let builtInLoaderName = '';\n    for (const loader of BUILT_IN_LOADERS) {\n      if (loader.testUrl(ngSrc)) {\n        builtInLoaderName = loader.name;\n        break;\n      }\n    }\n    if (builtInLoaderName) {\n      console.warn(_formatRuntimeError(2962 /* RuntimeErrorCode.MISSING_BUILTIN_LOADER */, `NgOptimizedImage: It looks like your images may be hosted on the ` + `${builtInLoaderName} CDN, but your app is not using Angular's ` + `built-in loader for that CDN. We recommend switching to use ` + `the built-in by calling \\`provide${builtInLoaderName}Loader()\\` ` + `in your \\`providers\\` and passing it your instance's base URL. ` + `If you don't want to use the built-in loader, define a custom ` + `loader function using IMAGE_LOADER to silence this warning.`));\n    }\n  }\n}\n/**\n * Warns if ngSrcset is present and no loader is configured (i.e. the default one is being used).\n */\nfunction assertNoNgSrcsetWithoutLoader(dir, imageLoader) {\n  if (dir.ngSrcset && imageLoader === noopImageLoader) {\n    console.warn(_formatRuntimeError(2963 /* RuntimeErrorCode.MISSING_NECESSARY_LOADER */, `${imgDirectiveDetails(dir.ngSrc)} the \\`ngSrcset\\` attribute is present but ` + `no image loader is configured (i.e. the default one is being used), ` + `which would result in the same image being used for all configured sizes. ` + `To fix this, provide a loader or remove the \\`ngSrcset\\` attribute from the image.`));\n  }\n}\n/**\n * Warns if loaderParams is present and no loader is configured (i.e. the default one is being\n * used).\n */\nfunction assertNoLoaderParamsWithoutLoader(dir, imageLoader) {\n  if (dir.loaderParams && imageLoader === noopImageLoader) {\n    console.warn(_formatRuntimeError(2963 /* RuntimeErrorCode.MISSING_NECESSARY_LOADER */, `${imgDirectiveDetails(dir.ngSrc)} the \\`loaderParams\\` attribute is present but ` + `no image loader is configured (i.e. the default one is being used), ` + `which means that the loaderParams data will not be consumed and will not affect the URL. ` + `To fix this, provide a custom loader or remove the \\`loaderParams\\` attribute from the image.`));\n  }\n}\n/**\n * Warns if the priority attribute is used too often on page load\n */\nasync function assetPriorityCountBelowThreshold(appRef) {\n  if (IMGS_WITH_PRIORITY_ATTR_COUNT === 0) {\n    IMGS_WITH_PRIORITY_ATTR_COUNT++;\n    await appRef.whenStable();\n    if (IMGS_WITH_PRIORITY_ATTR_COUNT > PRIORITY_COUNT_THRESHOLD) {\n      console.warn(_formatRuntimeError(2966 /* RuntimeErrorCode.TOO_MANY_PRIORITY_ATTRIBUTES */, `NgOptimizedImage: The \"priority\" attribute is set to true more than ${PRIORITY_COUNT_THRESHOLD} times (${IMGS_WITH_PRIORITY_ATTR_COUNT} times). ` + `Marking too many images as \"high\" priority can hurt your application's LCP (https://web.dev/lcp). ` + `\"Priority\" should only be set on the image expected to be the page's LCP element.`));\n    }\n  } else {\n    IMGS_WITH_PRIORITY_ATTR_COUNT++;\n  }\n}\n/**\n * Warns if placeholder's dimension are over a threshold.\n *\n * This assert function is meant to only run on the browser.\n */\nfunction assertPlaceholderDimensions(dir, imgElement) {\n  const computedStyle = window.getComputedStyle(imgElement);\n  let renderedWidth = parseFloat(computedStyle.getPropertyValue('width'));\n  let renderedHeight = parseFloat(computedStyle.getPropertyValue('height'));\n  if (renderedWidth > PLACEHOLDER_DIMENSION_LIMIT || renderedHeight > PLACEHOLDER_DIMENSION_LIMIT) {\n    console.warn(_formatRuntimeError(2967 /* RuntimeErrorCode.PLACEHOLDER_DIMENSION_LIMIT_EXCEEDED */, `${imgDirectiveDetails(dir.ngSrc)} it uses a placeholder image, but at least one ` + `of the dimensions attribute (height or width) exceeds the limit of ${PLACEHOLDER_DIMENSION_LIMIT}px. ` + `To fix this, use a smaller image as a placeholder.`));\n  }\n}\nfunction callOnLoadIfImageIsLoaded(img, callback) {\n  // https://html.spec.whatwg.org/multipage/embedded-content.html#dom-img-complete\n  // The spec defines that `complete` is truthy once its request state is fully available.\n  // The image may already be available if it’s loaded from the browser cache.\n  // In that case, the `load` event will not fire at all, meaning that all setup\n  // callbacks listening for the `load` event will not be invoked.\n  // In Safari, there is a known behavior where the `complete` property of an\n  // `HTMLImageElement` may sometimes return `true` even when the image is not fully loaded.\n  // Checking both `img.complete` and `img.naturalWidth` is the most reliable way to\n  // determine if an image has been fully loaded, especially in browsers where the\n  // `complete` property may return `true` prematurely.\n  if (img.complete && img.naturalWidth) {\n    callback();\n  }\n}\nfunction round(input) {\n  return Number.isInteger(input) ? input : input.toFixed(2);\n}\n// Transform function to handle SafeValue input for ngSrc. This doesn't do any sanitization,\n// as that is not needed for img.src and img.srcset. This transform is purely for compatibility.\nfunction unwrapSafeUrl(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return _unwrapSafeValue(value);\n}\n// Transform function to handle inputs which may be booleans, strings, or string representations\n// of boolean values. Used for the placeholder attribute.\nfunction booleanOrUrlAttribute(value) {\n  if (typeof value === 'string' && value !== 'true' && value !== 'false' && value !== '') {\n    return value;\n  }\n  return booleanAttribute(value);\n}\nexport { IMAGE_LOADER, NgOptimizedImage, PRECONNECT_CHECK_BLOCKLIST, VERSION, ViewportScroller, isPlatformBrowser, isPlatformServer, provideCloudflareLoader, provideCloudinaryLoader, provideImageKitLoader, provideImgixLoader, provideNetlifyLoader, registerLocaleData, NullViewportScroller as ɵNullViewportScroller, PLATFORM_BROWSER_ID as ɵPLATFORM_BROWSER_ID, PLATFORM_SERVER_ID as ɵPLATFORM_SERVER_ID };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT, ɵgetDOM as _getDOM } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, ɵRuntimeError as _RuntimeError, Injectable, Inject, APP_ID, CSP_NONCE, PLATFORM_ID, Optional, ViewEncapsulation, ɵTracingService as _TracingService, RendererStyleFlags2 } from '@angular/core';\n\n/**\n * The injection token for plugins of the `EventManager` service.\n *\n * @publicApi\n */\nconst EVENT_MANAGER_PLUGINS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'EventManagerPlugins' : '');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\nlet EventManager = /*#__PURE__*/(() => {\n  class EventManager {\n    _zone;\n    _plugins;\n    _eventNameToPlugin = new Map();\n    /**\n     * Initializes an instance of the event-manager service.\n     */\n    constructor(plugins, _zone) {\n      this._zone = _zone;\n      plugins.forEach(plugin => {\n        plugin.manager = this;\n      });\n      this._plugins = plugins.slice().reverse();\n    }\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @param options Options that configure how the event listener is bound.\n     * @returns  A callback function that can be used to remove the handler.\n     */\n    addEventListener(element, eventName, handler, options) {\n      const plugin = this._findPluginFor(eventName);\n      return plugin.addEventListener(element, eventName, handler, options);\n    }\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     */\n    getZone() {\n      return this._zone;\n    }\n    /** @internal */\n    _findPluginFor(eventName) {\n      let plugin = this._eventNameToPlugin.get(eventName);\n      if (plugin) {\n        return plugin;\n      }\n      const plugins = this._plugins;\n      plugin = plugins.find(plugin => plugin.supports(eventName));\n      if (!plugin) {\n        throw new _RuntimeError(5101 /* RuntimeErrorCode.NO_PLUGIN_FOR_EVENT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `No event manager plugin found for event ${eventName}`);\n      }\n      this._eventNameToPlugin.set(eventName, plugin);\n      return plugin;\n    }\n    static ɵfac = function EventManager_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || EventManager)(i0.ɵɵinject(EVENT_MANAGER_PLUGINS), i0.ɵɵinject(i0.NgZone));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: EventManager,\n      factory: EventManager.ɵfac\n    });\n  }\n  return EventManager;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The plugin definition for the `EventManager` class\n *\n * It can be used as a base class to create custom manager plugins, i.e. you can create your own\n * class that extends the `EventManagerPlugin` one.\n *\n * @publicApi\n */\nclass EventManagerPlugin {\n  _doc;\n  // TODO: remove (has some usage in G3)\n  constructor(_doc) {\n    this._doc = _doc;\n  }\n  // Using non-null assertion because it's set by EventManager's constructor\n  manager;\n}\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\n/**\n * Removes all provided elements from the document.\n * @param elements An array of HTML Elements.\n */\nfunction removeElements(elements) {\n  for (const element of elements) {\n    element.remove();\n  }\n}\n/**\n * Creates a `style` element with the provided inline style content.\n * @param style A string of the inline style content.\n * @param doc A DOM Document to use to create the element.\n * @returns An HTMLStyleElement instance.\n */\nfunction createStyleElement(style, doc) {\n  const styleElement = doc.createElement('style');\n  styleElement.textContent = style;\n  return styleElement;\n}\n/**\n * Searches a DOM document's head element for style elements with a matching application\n * identifier attribute (`ng-app-id`) to the provide identifier and adds usage records for each.\n * @param doc An HTML DOM document instance.\n * @param appId A string containing an Angular application identifer.\n * @param inline A Map object for tracking inline (defined via `styles` in component decorator) style usage.\n * @param external A Map object for tracking external (defined via `styleUrls` in component decorator) style usage.\n */\nfunction addServerStyles(doc, appId, inline, external) {\n  const elements = doc.head?.querySelectorAll(`style[${APP_ID_ATTRIBUTE_NAME}=\"${appId}\"],link[${APP_ID_ATTRIBUTE_NAME}=\"${appId}\"]`);\n  if (elements) {\n    for (const styleElement of elements) {\n      styleElement.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n      if (styleElement instanceof HTMLLinkElement) {\n        // Only use filename from href\n        // The href is build time generated with a unique value to prevent duplicates.\n        external.set(styleElement.href.slice(styleElement.href.lastIndexOf('/') + 1), {\n          usage: 0,\n          elements: [styleElement]\n        });\n      } else if (styleElement.textContent) {\n        inline.set(styleElement.textContent, {\n          usage: 0,\n          elements: [styleElement]\n        });\n      }\n    }\n  }\n}\n/**\n * Creates a `link` element for the provided external style URL.\n * @param url A string of the URL for the stylesheet.\n * @param doc A DOM Document to use to create the element.\n * @returns An HTMLLinkElement instance.\n */\nfunction createLinkElement(url, doc) {\n  const linkElement = doc.createElement('link');\n  linkElement.setAttribute('rel', 'stylesheet');\n  linkElement.setAttribute('href', url);\n  return linkElement;\n}\nlet SharedStylesHost = /*#__PURE__*/(() => {\n  class SharedStylesHost {\n    doc;\n    appId;\n    nonce;\n    /**\n     * Provides usage information for active inline style content and associated HTML <style> elements.\n     * Embedded styles typically originate from the `styles` metadata of a rendered component.\n     */\n    inline = new Map();\n    /**\n     * Provides usage information for active external style URLs and the associated HTML <link> elements.\n     * External styles typically originate from the `ɵɵExternalStylesFeature` of a rendered component.\n     */\n    external = new Map();\n    /**\n     * Set of host DOM nodes that will have styles attached.\n     */\n    hosts = new Set();\n    constructor(doc, appId, nonce,\n    // Cannot remove it due to backward compatibility\n    // (it seems some TGP targets might be calling this constructor directly).\n    platformId = {}) {\n      this.doc = doc;\n      this.appId = appId;\n      this.nonce = nonce;\n      addServerStyles(doc, appId, this.inline, this.external);\n      this.hosts.add(doc.head);\n    }\n    /**\n     * Adds embedded styles to the DOM via HTML `style` elements.\n     * @param styles An array of style content strings.\n     */\n    addStyles(styles, urls) {\n      for (const value of styles) {\n        this.addUsage(value, this.inline, createStyleElement);\n      }\n      urls?.forEach(value => this.addUsage(value, this.external, createLinkElement));\n    }\n    /**\n     * Removes embedded styles from the DOM that were added as HTML `style` elements.\n     * @param styles An array of style content strings.\n     */\n    removeStyles(styles, urls) {\n      for (const value of styles) {\n        this.removeUsage(value, this.inline);\n      }\n      urls?.forEach(value => this.removeUsage(value, this.external));\n    }\n    addUsage(value, usages, creator) {\n      // Attempt to get any current usage of the value\n      const record = usages.get(value);\n      // If existing, just increment the usage count\n      if (record) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && record.usage === 0) {\n          // A usage count of zero indicates a preexisting server generated style.\n          // This attribute is solely used for debugging purposes of SSR style reuse.\n          record.elements.forEach(element => element.setAttribute('ng-style-reused', ''));\n        }\n        record.usage++;\n      } else {\n        // Otherwise, create an entry to track the elements and add element for each host\n        usages.set(value, {\n          usage: 1,\n          elements: [...this.hosts].map(host => this.addElement(host, creator(value, this.doc)))\n        });\n      }\n    }\n    removeUsage(value, usages) {\n      // Attempt to get any current usage of the value\n      const record = usages.get(value);\n      // If there is a record, reduce the usage count and if no longer used,\n      // remove from DOM and delete usage record.\n      if (record) {\n        record.usage--;\n        if (record.usage <= 0) {\n          removeElements(record.elements);\n          usages.delete(value);\n        }\n      }\n    }\n    ngOnDestroy() {\n      for (const [, {\n        elements\n      }] of [...this.inline, ...this.external]) {\n        removeElements(elements);\n      }\n      this.hosts.clear();\n    }\n    /**\n     * Adds a host node to the set of style hosts and adds all existing style usage to\n     * the newly added host node.\n     *\n     * This is currently only used for Shadow DOM encapsulation mode.\n     */\n    addHost(hostNode) {\n      this.hosts.add(hostNode);\n      // Add existing styles to new host\n      for (const [style, {\n        elements\n      }] of this.inline) {\n        elements.push(this.addElement(hostNode, createStyleElement(style, this.doc)));\n      }\n      for (const [url, {\n        elements\n      }] of this.external) {\n        elements.push(this.addElement(hostNode, createLinkElement(url, this.doc)));\n      }\n    }\n    removeHost(hostNode) {\n      this.hosts.delete(hostNode);\n    }\n    addElement(host, element) {\n      // Add a nonce if present\n      if (this.nonce) {\n        element.setAttribute('nonce', this.nonce);\n      }\n      // Add application identifier when on the server to support client-side reuse\n      if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n        element.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n      }\n      // Insert the element into the DOM with the host node as parent\n      return host.appendChild(element);\n    }\n    static ɵfac = function SharedStylesHost_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SharedStylesHost)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(APP_ID), i0.ɵɵinject(CSP_NONCE, 8), i0.ɵɵinject(PLATFORM_ID));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SharedStylesHost,\n      factory: SharedStylesHost.ɵfac\n    });\n  }\n  return SharedStylesHost;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst NAMESPACE_URIS = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/Math/MathML'\n};\nconst COMPONENT_REGEX = /%COMP%/g;\nconst SOURCEMAP_URL_REGEXP = /\\/\\*#\\s*sourceMappingURL=(.+?)\\s*\\*\\//;\nconst PROTOCOL_REGEXP = /^https?:/;\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;\n/**\n * A DI token that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `true`.\n * @publicApi\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY = /*#__PURE__*/new InjectionToken(ngDevMode ? 'RemoveStylesOnCompDestroy' : '', {\n  providedIn: 'root',\n  factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT\n});\nfunction shimContentAttribute(componentShortId) {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nfunction shimHostAttribute(componentShortId) {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nfunction shimStylesContent(compId, styles) {\n  return styles.map(s => s.replace(COMPONENT_REGEX, compId));\n}\n/**\n * Prepends a baseHref to the `sourceMappingURL` within the provided CSS content.\n * If the `sourceMappingURL` contains an inline (encoded) map, the function skips processing.\n *\n * @note For inline stylesheets, the `sourceMappingURL` is relative to the page's origin\n * and not the provided baseHref. This function is needed as when accessing the page with a URL\n * containing two or more segments.\n * For example, if the baseHref is set to `/`, and you visit a URL like `http://localhost/foo/bar`,\n * the map would be requested from `http://localhost/foo/bar/comp.css.map` instead of what you'd expect,\n * which is `http://localhost/comp.css.map`. This behavior is corrected by modifying the `sourceMappingURL`\n * to ensure external source maps are loaded relative to the baseHref.\n *\n\n * @param baseHref - The base URL to prepend to the `sourceMappingURL`.\n * @param styles - An array of CSS content strings, each potentially containing a `sourceMappingURL`.\n * @returns The updated array of CSS content strings with modified `sourceMappingURL` values,\n * or the original content if no modification is needed.\n */\nfunction addBaseHrefToCssSourceMap(baseHref, styles) {\n  if (!baseHref) {\n    return styles;\n  }\n  const absoluteBaseHrefUrl = new URL(baseHref, 'http://localhost');\n  return styles.map(cssContent => {\n    if (!cssContent.includes('sourceMappingURL=')) {\n      return cssContent;\n    }\n    return cssContent.replace(SOURCEMAP_URL_REGEXP, (_, sourceMapUrl) => {\n      if (sourceMapUrl[0] === '/' || sourceMapUrl.startsWith('data:') || PROTOCOL_REGEXP.test(sourceMapUrl)) {\n        return `/*# sourceMappingURL=${sourceMapUrl} */`;\n      }\n      const {\n        pathname: resolvedSourceMapUrl\n      } = new URL(sourceMapUrl, absoluteBaseHrefUrl);\n      return `/*# sourceMappingURL=${resolvedSourceMapUrl} */`;\n    });\n  });\n}\nlet DomRendererFactory2 = /*#__PURE__*/(() => {\n  class DomRendererFactory2 {\n    eventManager;\n    sharedStylesHost;\n    appId;\n    removeStylesOnCompDestroy;\n    doc;\n    platformId;\n    ngZone;\n    nonce;\n    tracingService;\n    rendererByCompId = new Map();\n    defaultRenderer;\n    platformIsServer;\n    constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestroy, doc, platformId, ngZone, nonce = null, tracingService = null) {\n      this.eventManager = eventManager;\n      this.sharedStylesHost = sharedStylesHost;\n      this.appId = appId;\n      this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;\n      this.doc = doc;\n      this.platformId = platformId;\n      this.ngZone = ngZone;\n      this.nonce = nonce;\n      this.tracingService = tracingService;\n      this.platformIsServer = typeof ngServerMode !== 'undefined' && ngServerMode;\n      this.defaultRenderer = new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer, this.tracingService);\n    }\n    createRenderer(element, type) {\n      if (!element || !type) {\n        return this.defaultRenderer;\n      }\n      if (typeof ngServerMode !== 'undefined' && ngServerMode && type.encapsulation === ViewEncapsulation.ShadowDom) {\n        // Domino does not support shadow DOM.\n        type = {\n          ...type,\n          encapsulation: ViewEncapsulation.Emulated\n        };\n      }\n      const renderer = this.getOrCreateRenderer(element, type);\n      // Renderers have different logic due to different encapsulation behaviours.\n      // Ex: for emulated, an attribute is added to the element.\n      if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n        renderer.applyToHost(element);\n      } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n        renderer.applyStyles();\n      }\n      return renderer;\n    }\n    getOrCreateRenderer(element, type) {\n      const rendererByCompId = this.rendererByCompId;\n      let renderer = rendererByCompId.get(type.id);\n      if (!renderer) {\n        const doc = this.doc;\n        const ngZone = this.ngZone;\n        const eventManager = this.eventManager;\n        const sharedStylesHost = this.sharedStylesHost;\n        const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n        const platformIsServer = this.platformIsServer;\n        const tracingService = this.tracingService;\n        switch (type.encapsulation) {\n          case ViewEncapsulation.Emulated:\n            renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService);\n            break;\n          case ViewEncapsulation.ShadowDom:\n            return new ShadowDomRenderer(eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce, platformIsServer, tracingService);\n          default:\n            renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService);\n            break;\n        }\n        rendererByCompId.set(type.id, renderer);\n      }\n      return renderer;\n    }\n    ngOnDestroy() {\n      this.rendererByCompId.clear();\n    }\n    /**\n     * Used during HMR to clear any cached data about a component.\n     * @param componentId ID of the component that is being replaced.\n     */\n    componentReplaced(componentId) {\n      this.rendererByCompId.delete(componentId);\n    }\n    static ɵfac = function DomRendererFactory2_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DomRendererFactory2)(i0.ɵɵinject(EventManager), i0.ɵɵinject(SharedStylesHost), i0.ɵɵinject(APP_ID), i0.ɵɵinject(REMOVE_STYLES_ON_COMPONENT_DESTROY), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(CSP_NONCE), i0.ɵɵinject(_TracingService, 8));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DomRendererFactory2,\n      factory: DomRendererFactory2.ɵfac\n    });\n  }\n  return DomRendererFactory2;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass DefaultDomRenderer2 {\n  eventManager;\n  doc;\n  ngZone;\n  platformIsServer;\n  tracingService;\n  data = /*#__PURE__*/Object.create(null);\n  /**\n   * By default this renderer throws when encountering synthetic properties\n   * This can be disabled for example by the AsyncAnimationRendererFactory\n   */\n  throwOnSyntheticProps = true;\n  constructor(eventManager, doc, ngZone, platformIsServer, tracingService) {\n    this.eventManager = eventManager;\n    this.doc = doc;\n    this.ngZone = ngZone;\n    this.platformIsServer = platformIsServer;\n    this.tracingService = tracingService;\n  }\n  destroy() {}\n  destroyNode = null;\n  createElement(name, namespace) {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n    return this.doc.createElement(name);\n  }\n  createComment(value) {\n    return this.doc.createComment(value);\n  }\n  createText(value) {\n    return this.doc.createTextNode(value);\n  }\n  appendChild(parent, newChild) {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n  insertBefore(parent, newChild, refChild) {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n  removeChild(_parent, oldChild) {\n    oldChild.remove();\n  }\n  selectRootElement(selectorOrNode, preserveContent) {\n    let el = typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) : selectorOrNode;\n    if (!el) {\n      throw new _RuntimeError(-5104 /* RuntimeErrorCode.ROOT_NODE_NOT_FOUND */, (typeof ngDevMode === 'undefined' || ngDevMode) && `The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n  parentNode(node) {\n    return node.parentNode;\n  }\n  nextSibling(node) {\n    return node.nextSibling;\n  }\n  setAttribute(el, name, value, namespace) {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n  removeAttribute(el, name, namespace) {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n  addClass(el, name) {\n    el.classList.add(name);\n  }\n  removeClass(el, name) {\n    el.classList.remove(name);\n  }\n  setStyle(el, style, value, flags) {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n  removeStyle(el, style, flags) {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n  setProperty(el, name, value) {\n    if (el == null) {\n      return;\n    }\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n  setValue(node, value) {\n    node.nodeValue = value;\n  }\n  listen(target, event, callback, options) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      target = _getDOM().getGlobalEventTarget(this.doc, target);\n      if (!target) {\n        throw new _RuntimeError(5102 /* RuntimeErrorCode.UNSUPPORTED_EVENT_TARGET */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Unsupported event target ${target} for event ${event}`);\n      }\n    }\n    let wrappedCallback = this.decoratePreventDefault(callback);\n    if (this.tracingService?.wrapEventListener) {\n      wrappedCallback = this.tracingService.wrapEventListener(target, event, wrappedCallback);\n    }\n    return this.eventManager.addEventListener(target, event, wrappedCallback, options);\n  }\n  decoratePreventDefault(eventHandler) {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n    // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n    // unwrap the listener (see below).\n    return event => {\n      // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n      // debug_node can inspect the listener toString contents for the existence of this special\n      // token. Because the token is a string literal, it is ensured to not be modified by compiled\n      // code.\n      if (event === '__ngUnwrap__') {\n        return eventHandler;\n      }\n      // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n      const allowDefaultBehavior = typeof ngServerMode !== 'undefined' && ngServerMode ? this.ngZone.runGuarded(() => eventHandler(event)) : eventHandler(event);\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n      }\n      return undefined;\n    };\n  }\n}\nconst AT_CHARCODE = /*#__PURE__*/(() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name, nameKind) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new _RuntimeError(5105 /* RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY */, `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Make sure \\`provideAnimationsAsync()\\`, \\`provideAnimations()\\` or \\`provideNoopAnimations()\\` call was added to a list of providers used to bootstrap an application.\n  - There is a corresponding animation configuration named \\`${name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.dev/api/core/Component#animations).`);\n  }\n}\nfunction isTemplateNode(node) {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  sharedStylesHost;\n  hostEl;\n  shadowRoot;\n  constructor(eventManager, sharedStylesHost, hostEl, component, doc, ngZone, nonce, platformIsServer, tracingService) {\n    super(eventManager, doc, ngZone, platformIsServer, tracingService);\n    this.sharedStylesHost = sharedStylesHost;\n    this.hostEl = hostEl;\n    this.shadowRoot = hostEl.attachShadow({\n      mode: 'open'\n    });\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    let styles = component.styles;\n    if (ngDevMode) {\n      // We only do this in development, as for production users should not add CSS sourcemaps to components.\n      const baseHref = _getDOM().getBaseHref(doc) ?? '';\n      styles = addBaseHrefToCssSourceMap(baseHref, styles);\n    }\n    styles = shimStylesContent(component.id, styles);\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n      if (nonce) {\n        styleEl.setAttribute('nonce', nonce);\n      }\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n    // Apply any external component styles to the shadow root for the component's element.\n    // The ShadowDOM renderer uses an alternative execution path for component styles that\n    // does not use the SharedStylesHost that other encapsulation modes leverage. Much like\n    // the manual addition of embedded styles directly above, any external stylesheets\n    // must be manually added here to ensure ShadowDOM components are correctly styled.\n    // TODO: Consider reworking the DOM Renderers to consolidate style handling.\n    const styleUrls = component.getExternalStyles?.();\n    if (styleUrls) {\n      for (const styleUrl of styleUrls) {\n        const linkEl = createLinkElement(styleUrl, doc);\n        if (nonce) {\n          linkEl.setAttribute('nonce', nonce);\n        }\n        this.shadowRoot.appendChild(linkEl);\n      }\n    }\n  }\n  nodeOrShadowRoot(node) {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n  appendChild(parent, newChild) {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  insertBefore(parent, newChild, refChild) {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  removeChild(_parent, oldChild) {\n    return super.removeChild(null, oldChild);\n  }\n  parentNode(node) {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n  destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n}\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  sharedStylesHost;\n  removeStylesOnCompDestroy;\n  styles;\n  styleUrls;\n  constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService, compId) {\n    super(eventManager, doc, ngZone, platformIsServer, tracingService);\n    this.sharedStylesHost = sharedStylesHost;\n    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;\n    let styles = component.styles;\n    if (ngDevMode) {\n      // We only do this in development, as for production users should not add CSS sourcemaps to components.\n      const baseHref = _getDOM().getBaseHref(doc) ?? '';\n      styles = addBaseHrefToCssSourceMap(baseHref, styles);\n    }\n    this.styles = compId ? shimStylesContent(compId, styles) : styles;\n    this.styleUrls = component.getExternalStyles?.(compId);\n  }\n  applyStyles() {\n    this.sharedStylesHost.addStyles(this.styles, this.styleUrls);\n  }\n  destroy() {\n    if (!this.removeStylesOnCompDestroy) {\n      return;\n    }\n    this.sharedStylesHost.removeStyles(this.styles, this.styleUrls);\n  }\n}\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  contentAttr;\n  hostAttr;\n  constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService) {\n    const compId = appId + '-' + component.id;\n    super(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService, compId);\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n  applyToHost(element) {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n  createElement(parent, name) {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\nexport { DomRendererFactory2, EVENT_MANAGER_PLUGINS, EventManager, EventManagerPlugin, REMOVE_STYLES_ON_COMPONENT_DESTROY, SharedStylesHost };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵDomAdapter as _DomAdapter, ɵsetRootDomAdapter as _setRootDomAdapter, ɵparseCookieValue as _parseCookieValue, ɵgetDOM as _getDOM, DOCUMENT, ɵPLATFORM_BROWSER_ID as _PLATFORM_BROWSER_ID, XhrFactory, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { ɵglobal as _global, ɵRuntimeError as _RuntimeError, Injectable, Inject, ɵresolveComponentResources as _resolveComponentResources, ɵinternalCreateApplication as _internalCreateApplication, PLATFORM_ID, PLATFORM_INITIALIZER, createPlatformFactory, platformCore, InjectionToken, ɵTESTABILITY_GETTER as _TESTABILITY_GETTER, ɵTESTABILITY as _TESTABILITY, Testability, NgZone, TestabilityRegistry, ɵINJECTOR_SCOPE as _INJECTOR_SCOPE, ErrorHandler, RendererFactory2, inject, ApplicationModule, NgModule, ɵsetDocument as _setDocument } from '@angular/core';\nimport { EventManagerPlugin, EVENT_MANAGER_PLUGINS, DomRendererFactory2, SharedStylesHost, EventManager } from './dom_renderer.mjs';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nclass BrowserDomAdapter extends _DomAdapter {\n  supportsDOMEvents = true;\n  static makeCurrent() {\n    _setRootDomAdapter(new BrowserDomAdapter());\n  }\n  onAndCancel(el, evt, listener, options) {\n    el.addEventListener(evt, listener, options);\n    return () => {\n      el.removeEventListener(evt, listener, options);\n    };\n  }\n  dispatchEvent(el, evt) {\n    el.dispatchEvent(evt);\n  }\n  remove(node) {\n    node.remove();\n  }\n  createElement(tagName, doc) {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createHtmlDocument() {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument() {\n    return document;\n  }\n  isElementNode(node) {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n  isShadowRoot(node) {\n    return node instanceof DocumentFragment;\n  }\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  getGlobalEventTarget(doc, target) {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getBaseHref(doc) {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement() {\n    baseElement = null;\n  }\n  getUserAgent() {\n    return window.navigator.userAgent;\n  }\n  getCookie(name) {\n    return _parseCookieValue(document.cookie, name);\n  }\n}\nlet baseElement = null;\nfunction getBaseElementHref() {\n  baseElement = baseElement || document.head.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\nfunction relativePath(url) {\n  // The base URL doesn't really matter, we just need it so relative paths have something\n  // to resolve against. In the browser `HTMLBaseElement.href` is always absolute.\n  return new URL(url, document.baseURI).pathname;\n}\nclass BrowserGetTestability {\n  addToWindow(registry) {\n    _global['getAngularTestability'] = (elem, findInAncestors = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new _RuntimeError(5103 /* RuntimeErrorCode.TESTABILITY_NOT_FOUND */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Could not find testability for element.');\n      }\n      return testability;\n    };\n    _global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n    _global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n    const whenAllStable = callback => {\n      const testabilities = _global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      const decrement = function () {\n        count--;\n        if (count == 0) {\n          callback();\n        }\n      };\n      testabilities.forEach(testability => {\n        testability.whenStable(decrement);\n      });\n    };\n    if (!_global['frameworkStabilizers']) {\n      _global['frameworkStabilizers'] = [];\n    }\n    _global['frameworkStabilizers'].push(whenAllStable);\n  }\n  findTestabilityInTree(registry, elem, findInAncestors) {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (_getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, elem.host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\nlet BrowserXhr = /*#__PURE__*/(() => {\n  class BrowserXhr {\n    build() {\n      return new XMLHttpRequest();\n    }\n    static ɵfac = function BrowserXhr_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BrowserXhr)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: BrowserXhr,\n      factory: BrowserXhr.ɵfac\n    });\n  }\n  return BrowserXhr;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DomEventsPlugin = /*#__PURE__*/(() => {\n  class DomEventsPlugin extends EventManagerPlugin {\n    constructor(doc) {\n      super(doc);\n    }\n    // This plugin should come last in the list of plugins, because it accepts all\n    // events.\n    supports(eventName) {\n      return true;\n    }\n    addEventListener(element, eventName, handler, options) {\n      element.addEventListener(eventName, handler, options);\n      return () => this.removeEventListener(element, eventName, handler, options);\n    }\n    removeEventListener(target, eventName, callback, options) {\n      return target.removeEventListener(eventName, callback, options);\n    }\n    static ɵfac = function DomEventsPlugin_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DomEventsPlugin)(i0.ɵɵinject(DOCUMENT));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DomEventsPlugin,\n      factory: DomEventsPlugin.ɵfac\n    });\n  }\n  return DomEventsPlugin;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS = {\n  'alt': event => event.altKey,\n  'control': event => event.ctrlKey,\n  'meta': event => event.metaKey,\n  'shift': event => event.shiftKey\n};\n/**\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nlet KeyEventsPlugin = /*#__PURE__*/(() => {\n  class KeyEventsPlugin extends EventManagerPlugin {\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param doc The document in which key events will be detected.\n     */\n    constructor(doc) {\n      super(doc);\n    }\n    /**\n     * Reports whether a named key event is supported.\n     * @param eventName The event name to query.\n     * @return True if the named key event is supported.\n     */\n    supports(eventName) {\n      return KeyEventsPlugin.parseEventName(eventName) != null;\n    }\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the key event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns The key event that was registered.\n     */\n    addEventListener(element, eventName, handler, options) {\n      const parsedEvent = KeyEventsPlugin.parseEventName(eventName);\n      const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n      return this.manager.getZone().runOutsideAngular(() => {\n        return _getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler, options);\n      });\n    }\n    /**\n     * Parses the user provided full keyboard event definition and normalizes it for\n     * later internal use. It ensures the string is all lowercase, converts special\n     * characters to a standard spelling, and orders all the values consistently.\n     *\n     * @param eventName The name of the key event to listen for.\n     * @returns an object with the full, normalized string, and the dom event name\n     * or null in the case when the event doesn't match a keyboard event.\n     */\n    static parseEventName(eventName) {\n      const parts = eventName.toLowerCase().split('.');\n      const domEventName = parts.shift();\n      if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n        return null;\n      }\n      const key = KeyEventsPlugin._normalizeKey(parts.pop());\n      let fullKey = '';\n      let codeIX = parts.indexOf('code');\n      if (codeIX > -1) {\n        parts.splice(codeIX, 1);\n        fullKey = 'code.';\n      }\n      MODIFIER_KEYS.forEach(modifierName => {\n        const index = parts.indexOf(modifierName);\n        if (index > -1) {\n          parts.splice(index, 1);\n          fullKey += modifierName + '.';\n        }\n      });\n      fullKey += key;\n      if (parts.length != 0 || key.length === 0) {\n        // returning null instead of throwing to let another plugin process the event\n        return null;\n      }\n      // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n      //       The code must remain in the `result['domEventName']` form.\n      // return {domEventName, fullKey};\n      const result = {};\n      result['domEventName'] = domEventName;\n      result['fullKey'] = fullKey;\n      return result;\n    }\n    /**\n     * Determines whether the actual keys pressed match the configured key code string.\n     * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n     * event is attached to the DOM during the `addEventListener` call. This is unseen\n     * by the end user and is normalized for internal consistency and parsing.\n     *\n     * @param event The keyboard event.\n     * @param fullKeyCode The normalized user defined expected key event string\n     * @returns boolean.\n     */\n    static matchEventFullKeyCode(event, fullKeyCode) {\n      let keycode = _keyMap[event.key] || event.key;\n      let key = '';\n      if (fullKeyCode.indexOf('code.') > -1) {\n        keycode = event.code;\n        key = 'code.';\n      }\n      // the keycode could be unidentified so we have to check here\n      if (keycode == null || !keycode) return false;\n      keycode = keycode.toLowerCase();\n      if (keycode === ' ') {\n        keycode = 'space'; // for readability\n      } else if (keycode === '.') {\n        keycode = 'dot'; // because '.' is used as a separator in event names\n      }\n      MODIFIER_KEYS.forEach(modifierName => {\n        if (modifierName !== keycode) {\n          const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n          if (modifierGetter(event)) {\n            key += modifierName + '.';\n          }\n        }\n      });\n      key += keycode;\n      return key === fullKeyCode;\n    }\n    /**\n     * Configures a handler callback for a key event.\n     * @param fullKey The event name that combines all simultaneous keystrokes.\n     * @param handler The function that responds to the key event.\n     * @param zone The zone in which the event occurred.\n     * @returns A callback function.\n     */\n    static eventCallback(fullKey, handler, zone) {\n      return event => {\n        if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n          zone.runGuarded(() => handler(event));\n        }\n      };\n    }\n    /** @internal */\n    static _normalizeKey(keyName) {\n      return keyName === 'esc' ? 'escape' : keyName;\n    }\n    static ɵfac = function KeyEventsPlugin_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || KeyEventsPlugin)(i0.ɵɵinject(DOCUMENT));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: KeyEventsPlugin,\n      factory: KeyEventsPlugin.ɵfac\n    });\n  }\n  return KeyEventsPlugin;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/components/importing).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```ts\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```ts\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```ts\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nfunction bootstrapApplication(rootComponent, options) {\n  const config = {\n    rootComponent,\n    ...createProvidersConfig(options)\n  };\n  // Attempt to resolve component resources before bootstrapping in JIT mode,\n  // however don't interrupt the bootstrapping process.\n  if ((typeof ngJitMode === 'undefined' || ngJitMode) && typeof fetch === 'function') {\n    return _resolveComponentResources(fetch).catch(error => {\n      console.error(error);\n      return Promise.resolve();\n    }).then(() => _internalCreateApplication(config));\n  }\n  return _internalCreateApplication(config);\n}\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nfunction createApplication(options) {\n  return _internalCreateApplication(createProvidersConfig(options));\n}\nfunction createProvidersConfig(options) {\n  return {\n    appProviders: [...BROWSER_MODULE_PROVIDERS, ...(options?.providers ?? [])],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n  };\n}\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nfunction provideProtractorTestingSupport() {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\nfunction initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\nfunction errorHandler() {\n  return new ErrorHandler();\n}\nfunction _document() {\n  // Tell ivy about the global document\n  _setDocument(document);\n  return document;\n}\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{\n  provide: PLATFORM_ID,\n  useValue: _PLATFORM_BROWSER_ID\n}, {\n  provide: PLATFORM_INITIALIZER,\n  useValue: initDomAdapter,\n  multi: true\n}, {\n  provide: DOCUMENT,\n  useFactory: _document\n}];\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nconst platformBrowser = /*#__PURE__*/createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'BrowserModule Providers Marker' : '');\nconst TESTABILITY_PROVIDERS = [{\n  provide: _TESTABILITY_GETTER,\n  useClass: BrowserGetTestability\n}, {\n  provide: _TESTABILITY,\n  useClass: Testability,\n  deps: [NgZone, TestabilityRegistry, _TESTABILITY_GETTER]\n}, {\n  provide: Testability,\n  // Also provide as `Testability` for backwards-compatibility.\n  useClass: Testability,\n  deps: [NgZone, TestabilityRegistry, _TESTABILITY_GETTER]\n}];\nconst BROWSER_MODULE_PROVIDERS = [{\n  provide: _INJECTOR_SCOPE,\n  useValue: 'root'\n}, {\n  provide: ErrorHandler,\n  useFactory: errorHandler\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: DomEventsPlugin,\n  multi: true,\n  deps: [DOCUMENT]\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: KeyEventsPlugin,\n  multi: true,\n  deps: [DOCUMENT]\n}, DomRendererFactory2, SharedStylesHost, EventManager, {\n  provide: RendererFactory2,\n  useExisting: DomRendererFactory2\n}, {\n  provide: XhrFactory,\n  useClass: BrowserXhr\n}, typeof ngDevMode === 'undefined' || ngDevMode ? {\n  provide: BROWSER_MODULE_PROVIDERS_MARKER,\n  useValue: true\n} : []];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nlet BrowserModule = /*#__PURE__*/(() => {\n  class BrowserModule {\n    constructor() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        const providersAlreadyPresent = inject(BROWSER_MODULE_PROVIDERS_MARKER, {\n          optional: true,\n          skipSelf: true\n        });\n        if (providersAlreadyPresent) {\n          throw new _RuntimeError(5100 /* RuntimeErrorCode.BROWSER_MODULE_ALREADY_LOADED */, `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` + `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n        }\n      }\n    }\n    static ɵfac = function BrowserModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BrowserModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: BrowserModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n      imports: [CommonModule, ApplicationModule]\n    });\n  }\n  return BrowserModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { BrowserDomAdapter, BrowserGetTestability, BrowserModule, DomEventsPlugin, KeyEventsPlugin, bootstrapApplication, createApplication, platformBrowser, provideProtractorTestingSupport };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { ɵRuntimeError as _RuntimeError, Injectable, InjectionToken, inject, NgZone, DestroyRef, ɵformatRuntimeError as _formatRuntimeError, PendingTasks, ɵConsole as _Console, runInInjectionContext, DOCUMENT, Inject, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { concatMap, filter, map, finalize, switchMap } from 'rxjs/operators';\nimport { of, Observable, from } from 'rxjs';\nimport { XhrFactory, parseCookieValue } from './xhr.mjs';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  headers;\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  normalizedNames = /*#__PURE__*/new Map();\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  lazyInit;\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  lazyUpdate = null;\n  /**  Constructs a new HTTP header object with the given values.*/\n  constructor(headers) {\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const value = line.slice(index + 1).trim();\n            this.addHeaderEntry(name, value);\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map();\n      headers.forEach((value, name) => {\n        this.addHeaderEntry(name, value);\n      });\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map();\n        Object.entries(headers).forEach(([name, values]) => {\n          this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name) {\n    this.init();\n    return this.headers.has(name.toLowerCase());\n  }\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name) {\n    this.init();\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys() {\n    this.init();\n    return Array.from(this.normalizedNames.values());\n  }\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name) {\n    this.init();\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n  append(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'd'\n    });\n  }\n  maybeSetNormalizedName(name, lcName) {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n  init() {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n  copyFrom(other) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key));\n      this.normalizedNames.set(key, other.normalizedNames.get(key));\n    });\n  }\n  clone(update) {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n  applyUpdate(update) {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n  addHeaderEntry(name, value) {\n    const key = name.toLowerCase();\n    this.maybeSetNormalizedName(name, key);\n    if (this.headers.has(key)) {\n      this.headers.get(key).push(value);\n    } else {\n      this.headers.set(key, [value]);\n    }\n  }\n  setHeaderEntries(name, values) {\n    const headerValues = (Array.isArray(values) ? values : [values]).map(value => value.toString());\n    const key = name.toLowerCase();\n    this.headers.set(key, headerValues);\n    this.maybeSetNormalizedName(name, key);\n  }\n  /**\n   * @internal\n   */\n  forEach(fn) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n  }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` + `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n}\nfunction paramParser(rawParams, codec) {\n  const map = new Map();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(param => {\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/'\n};\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n  return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n  map;\n  encoder;\n  updates = null;\n  cloneFrom = null;\n  constructor(options = {}) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (options.fromString) {\n      if (options.fromObject) {\n        throw new _RuntimeError(2805 /* RuntimeErrorCode.CANNOT_SPECIFY_BOTH_FROM_STRING_AND_FROM_OBJECT */, ngDevMode && 'Cannot specify both fromString and fromObject.');\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = options.fromObject[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param) {\n    this.init();\n    return this.map.has(param);\n  }\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param) {\n    this.init();\n    const res = this.map.get(param);\n    return !!res ? res[0] : null;\n  }\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param) {\n    this.init();\n    return this.map.get(param) || null;\n  }\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys() {\n    this.init();\n    return Array.from(this.map.keys());\n  }\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params) {\n    const updates = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({\n            param,\n            value: _value,\n            op: 'a'\n          });\n        });\n      } else {\n        updates.push({\n          param,\n          value: value,\n          op: 'a'\n        });\n      }\n    });\n    return this.clone(updates);\n  }\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'd'\n    });\n  }\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString() {\n    this.init();\n    return this.keys().map(key => {\n      const eKey = this.encoder.encodeKey(key);\n      // `a: ['1']` produces `'a=1'`\n      // `b: []` produces `''`\n      // `c: ['1', '2']` produces `'c=1&c=2'`\n      return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');\n    })\n    // filter out empty values because `b: []` produces `''`\n    // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n    .filter(param => param !== '').join('&');\n  }\n  clone(update) {\n    const clone = new HttpParams({\n      encoder: this.encoder\n    });\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n  init() {\n    if (this.map === null) {\n      this.map = new Map();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n      this.updates.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value));\n            this.map.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map.set(update.param, base);\n              } else {\n                this.map.delete(update.param);\n              }\n            } else {\n              this.map.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n  defaultValue;\n  constructor(defaultValue) {\n    this.defaultValue = defaultValue;\n  }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```ts\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n  map = /*#__PURE__*/new Map();\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set(token, value) {\n    this.map.set(token, value);\n    return this;\n  }\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get(token) {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token);\n  }\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token) {\n    this.map.delete(token);\n    return this;\n  }\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n  has(token) {\n    return this.map.has(token);\n  }\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys() {\n    return this.map.keys();\n  }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * `Content-Type` is an HTTP header used to indicate the media type\n * (also known as MIME type) of the resource being sent to the client\n * or received from the server.\n */\nconst CONTENT_TYPE_HEADER = 'Content-Type';\n/**\n * The `Accept` header is an HTTP request header that indicates the media types\n * (or content types) the client is willing to receive from the server.\n */\nconst ACCEPT_HEADER = 'Accept';\n/**\n * `X-Request-URL` is a custom HTTP header used in older browser versions,\n * including Firefox (< 32), Chrome (< 37), Safari (< 8), and Internet Explorer,\n * to include the full URL of the request in cross-origin requests.\n */\nconst X_REQUEST_URL_HEADER = 'X-Request-URL';\n/**\n * `text/plain` is a content type used to indicate that the content being\n * sent is plain text with no special formatting or structured data\n * like HTML, XML, or JSON.\n */\nconst TEXT_CONTENT_TYPE = 'text/plain';\n/**\n * `application/json` is a content type used to indicate that the content\n * being sent is in the JSON format.\n */\nconst JSON_CONTENT_TYPE = 'application/json';\n/**\n * `application/json, text/plain, *\\/*` is a content negotiation string often seen in the\n * Accept header of HTTP requests. It indicates the types of content the client is willing\n * to accept from the server, with a preference for `application/json` and `text/plain`,\n * but also accepting any other type (*\\/*).\n */\nconst ACCEPT_HEADER_VALUE = `${JSON_CONTENT_TYPE}, ${TEXT_CONTENT_TYPE}, */*`;\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n  url;\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  body = null;\n  /**\n   * Outgoing headers for this request.\n   */\n  headers;\n  /**\n   * Shared and mutable context that can be used by interceptors\n   */\n  context;\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  reportProgress = false;\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  withCredentials = false;\n  /**\n   *  The credentials mode of the request, which determines how cookies and HTTP authentication are handled.\n   *  This can affect whether cookies are sent with the request, and how authentication is handled.\n   */\n  credentials;\n  /**\n   * When using the fetch implementation and set to `true`, the browser will not abort the associated request if the page that initiated it is unloaded before the request is complete.\n   */\n  keepalive = false;\n  /**\n   * Controls how the request will interact with the browser's HTTP cache.\n   * This affects whether a response is retrieved from the cache, how it is stored, or if it bypasses the cache altogether.\n   */\n  cache;\n  /**\n   * Indicates the relative priority of the request. This may be used by the browser to decide the order in which requests are dispatched and resources fetched.\n   */\n  priority;\n  /**\n   * The mode of the request, which determines how the request will interact with the browser's security model.\n   * This can affect things like CORS (Cross-Origin Resource Sharing) and same-origin policies.\n   */\n  mode;\n  /**\n   * The redirect mode of the request, which determines how redirects are handled.\n   * This can affect whether the request follows redirects automatically, or if it fails when a redirect occurs.\n   */\n  redirect;\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  responseType = 'json';\n  /**\n   * The outgoing HTTP request method.\n   */\n  method;\n  /**\n   * Outgoing URL parameters.\n   *\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\n   *\n   * ```ts\n   * new HttpParams({fromString: 'angular=awesome'})\n   * ```\n   */\n  params;\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  urlWithParams;\n  /**\n   * The HttpTransferCache option for the request\n   */\n  transferCache;\n  /**\n   * The timeout for the backend HTTP request in ms.\n   */\n  timeout;\n  constructor(method, url, third, fourth) {\n    this.url = url;\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options;\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    }\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n      this.keepalive = !!options.keepalive;\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n      // Override headers if they're provided.\n      if (options.headers) {\n        this.headers = options.headers;\n      }\n      if (options.context) {\n        this.context = options.context;\n      }\n      if (options.params) {\n        this.params = options.params;\n      }\n      if (options.priority) {\n        this.priority = options.priority;\n      }\n      if (options.cache) {\n        this.cache = options.cache;\n      }\n      if (options.credentials) {\n        this.credentials = options.credentials;\n      }\n      if (typeof options.timeout === 'number') {\n        // XHR will ignore any value below 1. AbortSignals only accept unsigned integers.\n        if (options.timeout < 1 || !Number.isInteger(options.timeout)) {\n          // TODO: create a runtime error\n          throw new Error(ngDevMode ? '`timeout` must be a positive integer value' : '');\n        }\n        this.timeout = options.timeout;\n      }\n      if (options.mode) {\n        this.mode = options.mode;\n      }\n      if (options.redirect) {\n        this.redirect = options.redirect;\n      }\n      // We do want to assign transferCache even if it's falsy (false is valid value)\n      this.transferCache = options.transferCache;\n    }\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    this.headers ??= new HttpHeaders();\n    // If no context have been passed in, construct a new HttpContext instance.\n    this.context ??= new HttpContext();\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody() {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (typeof this.body === 'string' || isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body)) {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return this.body.toString();\n  }\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader() {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return TEXT_CONTENT_TYPE;\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n      return JSON_CONTENT_TYPE;\n    }\n    // No type could be inferred.\n    return null;\n  }\n  clone(update = {}) {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n    const keepalive = update.keepalive ?? this.keepalive;\n    const priority = update.priority || this.priority;\n    const cache = update.cache || this.cache;\n    const mode = update.mode || this.mode;\n    const redirect = update.redirect || this.redirect;\n    const credentials = update.credentials || this.credentials;\n    // Carefully handle the transferCache to differentiate between\n    // `false` and `undefined` in the update args.\n    const transferCache = update.transferCache ?? this.transferCache;\n    const timeout = update.timeout ?? this.timeout;\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = update.body !== undefined ? update.body : this.body;\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials = update.withCredentials ?? this.withCredentials;\n    const reportProgress = update.reportProgress ?? this.reportProgress;\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n    }\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\n    }\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n      transferCache,\n      keepalive,\n      cache,\n      priority,\n      timeout,\n      mode,\n      redirect,\n      credentials\n    });\n  }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType = /*#__PURE__*/function (HttpEventType) {\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n  return HttpEventType;\n}(HttpEventType || {});\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  headers;\n  /**\n   * Response status code.\n   */\n  status;\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  statusText;\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  url;\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  ok;\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  type;\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init = {}) {\n    super(init);\n  }\n  type = HttpEventType.ResponseHeader;\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update = {}) {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  body;\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n  type = HttpEventType.Response;\n  clone(update = {}) {\n    return new HttpResponse({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n  name = 'HttpErrorResponse';\n  message;\n  error;\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  ok = false;\n  constructor(init) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n/**\n * We use these constant to prevent pulling the whole HttpStatusCode enum\n * Those are the only ones referenced directly by the framework\n */\nconst HTTP_STATUS_CODE_OK = 200;\nconst HTTP_STATUS_CODE_NO_CONTENT = 204;\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nvar HttpStatusCode = /*#__PURE__*/function (HttpStatusCode) {\n  HttpStatusCode[HttpStatusCode[\"Continue\"] = 100] = \"Continue\";\n  HttpStatusCode[HttpStatusCode[\"SwitchingProtocols\"] = 101] = \"SwitchingProtocols\";\n  HttpStatusCode[HttpStatusCode[\"Processing\"] = 102] = \"Processing\";\n  HttpStatusCode[HttpStatusCode[\"EarlyHints\"] = 103] = \"EarlyHints\";\n  HttpStatusCode[HttpStatusCode[\"Ok\"] = 200] = \"Ok\";\n  HttpStatusCode[HttpStatusCode[\"Created\"] = 201] = \"Created\";\n  HttpStatusCode[HttpStatusCode[\"Accepted\"] = 202] = \"Accepted\";\n  HttpStatusCode[HttpStatusCode[\"NonAuthoritativeInformation\"] = 203] = \"NonAuthoritativeInformation\";\n  HttpStatusCode[HttpStatusCode[\"NoContent\"] = 204] = \"NoContent\";\n  HttpStatusCode[HttpStatusCode[\"ResetContent\"] = 205] = \"ResetContent\";\n  HttpStatusCode[HttpStatusCode[\"PartialContent\"] = 206] = \"PartialContent\";\n  HttpStatusCode[HttpStatusCode[\"MultiStatus\"] = 207] = \"MultiStatus\";\n  HttpStatusCode[HttpStatusCode[\"AlreadyReported\"] = 208] = \"AlreadyReported\";\n  HttpStatusCode[HttpStatusCode[\"ImUsed\"] = 226] = \"ImUsed\";\n  HttpStatusCode[HttpStatusCode[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n  HttpStatusCode[HttpStatusCode[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n  HttpStatusCode[HttpStatusCode[\"Found\"] = 302] = \"Found\";\n  HttpStatusCode[HttpStatusCode[\"SeeOther\"] = 303] = \"SeeOther\";\n  HttpStatusCode[HttpStatusCode[\"NotModified\"] = 304] = \"NotModified\";\n  HttpStatusCode[HttpStatusCode[\"UseProxy\"] = 305] = \"UseProxy\";\n  HttpStatusCode[HttpStatusCode[\"Unused\"] = 306] = \"Unused\";\n  HttpStatusCode[HttpStatusCode[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n  HttpStatusCode[HttpStatusCode[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n  HttpStatusCode[HttpStatusCode[\"BadRequest\"] = 400] = \"BadRequest\";\n  HttpStatusCode[HttpStatusCode[\"Unauthorized\"] = 401] = \"Unauthorized\";\n  HttpStatusCode[HttpStatusCode[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n  HttpStatusCode[HttpStatusCode[\"Forbidden\"] = 403] = \"Forbidden\";\n  HttpStatusCode[HttpStatusCode[\"NotFound\"] = 404] = \"NotFound\";\n  HttpStatusCode[HttpStatusCode[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n  HttpStatusCode[HttpStatusCode[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n  HttpStatusCode[HttpStatusCode[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n  HttpStatusCode[HttpStatusCode[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n  HttpStatusCode[HttpStatusCode[\"Conflict\"] = 409] = \"Conflict\";\n  HttpStatusCode[HttpStatusCode[\"Gone\"] = 410] = \"Gone\";\n  HttpStatusCode[HttpStatusCode[\"LengthRequired\"] = 411] = \"LengthRequired\";\n  HttpStatusCode[HttpStatusCode[\"PreconditionFailed\"] = 412] = \"PreconditionFailed\";\n  HttpStatusCode[HttpStatusCode[\"PayloadTooLarge\"] = 413] = \"PayloadTooLarge\";\n  HttpStatusCode[HttpStatusCode[\"UriTooLong\"] = 414] = \"UriTooLong\";\n  HttpStatusCode[HttpStatusCode[\"UnsupportedMediaType\"] = 415] = \"UnsupportedMediaType\";\n  HttpStatusCode[HttpStatusCode[\"RangeNotSatisfiable\"] = 416] = \"RangeNotSatisfiable\";\n  HttpStatusCode[HttpStatusCode[\"ExpectationFailed\"] = 417] = \"ExpectationFailed\";\n  HttpStatusCode[HttpStatusCode[\"ImATeapot\"] = 418] = \"ImATeapot\";\n  HttpStatusCode[HttpStatusCode[\"MisdirectedRequest\"] = 421] = \"MisdirectedRequest\";\n  HttpStatusCode[HttpStatusCode[\"UnprocessableEntity\"] = 422] = \"UnprocessableEntity\";\n  HttpStatusCode[HttpStatusCode[\"Locked\"] = 423] = \"Locked\";\n  HttpStatusCode[HttpStatusCode[\"FailedDependency\"] = 424] = \"FailedDependency\";\n  HttpStatusCode[HttpStatusCode[\"TooEarly\"] = 425] = \"TooEarly\";\n  HttpStatusCode[HttpStatusCode[\"UpgradeRequired\"] = 426] = \"UpgradeRequired\";\n  HttpStatusCode[HttpStatusCode[\"PreconditionRequired\"] = 428] = \"PreconditionRequired\";\n  HttpStatusCode[HttpStatusCode[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n  HttpStatusCode[HttpStatusCode[\"RequestHeaderFieldsTooLarge\"] = 431] = \"RequestHeaderFieldsTooLarge\";\n  HttpStatusCode[HttpStatusCode[\"UnavailableForLegalReasons\"] = 451] = \"UnavailableForLegalReasons\";\n  HttpStatusCode[HttpStatusCode[\"InternalServerError\"] = 500] = \"InternalServerError\";\n  HttpStatusCode[HttpStatusCode[\"NotImplemented\"] = 501] = \"NotImplemented\";\n  HttpStatusCode[HttpStatusCode[\"BadGateway\"] = 502] = \"BadGateway\";\n  HttpStatusCode[HttpStatusCode[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n  HttpStatusCode[HttpStatusCode[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n  HttpStatusCode[HttpStatusCode[\"HttpVersionNotSupported\"] = 505] = \"HttpVersionNotSupported\";\n  HttpStatusCode[HttpStatusCode[\"VariantAlsoNegotiates\"] = 506] = \"VariantAlsoNegotiates\";\n  HttpStatusCode[HttpStatusCode[\"InsufficientStorage\"] = 507] = \"InsufficientStorage\";\n  HttpStatusCode[HttpStatusCode[\"LoopDetected\"] = 508] = \"LoopDetected\";\n  HttpStatusCode[HttpStatusCode[\"NotExtended\"] = 510] = \"NotExtended\";\n  HttpStatusCode[HttpStatusCode[\"NetworkAuthenticationRequired\"] = 511] = \"NetworkAuthenticationRequired\";\n  return HttpStatusCode;\n}(HttpStatusCode || {});\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n    transferCache: options.transferCache,\n    keepalive: options.keepalive,\n    priority: options.priority,\n    cache: options.cache,\n    mode: options.mode,\n    redirect: options.redirect\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @usageNotes\n *\n * ### HTTP Request Example\n *\n * ```ts\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```ts\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```ts\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```ts\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nlet HttpClient = /*#__PURE__*/(() => {\n  class HttpClient {\n    handler;\n    constructor(handler) {\n      this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n      let req;\n      // First, check whether the primary argument is an instance of `HttpRequest`.\n      if (first instanceof HttpRequest) {\n        // It is. The other arguments must be undefined (per the signatures) and can be\n        // ignored.\n        req = first;\n      } else {\n        // It's a string, so it represents a URL. Construct a request based on it,\n        // and incorporate the remaining arguments (assuming `GET` unless a method is\n        // provided.\n        // Figure out the headers.\n        let headers = undefined;\n        if (options.headers instanceof HttpHeaders) {\n          headers = options.headers;\n        } else {\n          headers = new HttpHeaders(options.headers);\n        }\n        // Sort out parameters.\n        let params = undefined;\n        if (!!options.params) {\n          if (options.params instanceof HttpParams) {\n            params = options.params;\n          } else {\n            params = new HttpParams({\n              fromObject: options.params\n            });\n          }\n        }\n        // Construct the request.\n        req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n          headers,\n          context: options.context,\n          params,\n          reportProgress: options.reportProgress,\n          // By default, JSON is assumed to be returned for all calls.\n          responseType: options.responseType || 'json',\n          withCredentials: options.withCredentials,\n          transferCache: options.transferCache,\n          keepalive: options.keepalive,\n          priority: options.priority,\n          cache: options.cache,\n          mode: options.mode,\n          redirect: options.redirect,\n          credentials: options.credentials\n        });\n      }\n      // Start with an Observable.of() the initial request, and run the handler (which\n      // includes all interceptors) inside a concatMap(). This way, the handler runs\n      // inside an Observable chain, which causes interceptors to be re-run on every\n      // subscription (this also makes retries re-run the handler, including interceptors).\n      const events$ = of(req).pipe(concatMap(req => this.handler.handle(req)));\n      // If coming via the API signature which accepts a previously constructed HttpRequest,\n      // the only option is to get the event stream. Otherwise, return the event stream if\n      // that is what was requested.\n      if (first instanceof HttpRequest || options.observe === 'events') {\n        return events$;\n      }\n      // The requested stream contains either the full response or the body. In either\n      // case, the first step is to filter the event stream to extract a stream of\n      // responses(s).\n      const res$ = events$.pipe(filter(event => event instanceof HttpResponse));\n      // Decide which stream to return.\n      switch (options.observe || 'body') {\n        case 'body':\n          // The requested stream is the body. Map the response stream to the response\n          // body. This could be done more simply, but a misbehaving interceptor might\n          // transform the response body into a different format and ignore the requested\n          // responseType. Guard against this by validating that the response is of the\n          // requested type.\n          switch (req.responseType) {\n            case 'arraybuffer':\n              return res$.pipe(map(res => {\n                // Validate that the body is an ArrayBuffer.\n                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                  throw new _RuntimeError(2806 /* RuntimeErrorCode.RESPONSE_IS_NOT_AN_ARRAY_BUFFER */, ngDevMode && 'Response is not an ArrayBuffer.');\n                }\n                return res.body;\n              }));\n            case 'blob':\n              return res$.pipe(map(res => {\n                // Validate that the body is a Blob.\n                if (res.body !== null && !(res.body instanceof Blob)) {\n                  throw new _RuntimeError(2807 /* RuntimeErrorCode.RESPONSE_IS_NOT_A_BLOB */, ngDevMode && 'Response is not a Blob.');\n                }\n                return res.body;\n              }));\n            case 'text':\n              return res$.pipe(map(res => {\n                // Validate that the body is a string.\n                if (res.body !== null && typeof res.body !== 'string') {\n                  throw new _RuntimeError(2808 /* RuntimeErrorCode.RESPONSE_IS_NOT_A_STRING */, ngDevMode && 'Response is not a string.');\n                }\n                return res.body;\n              }));\n            case 'json':\n            default:\n              // No validation needed for JSON responses, as they can be of any type.\n              return res$.pipe(map(res => res.body));\n          }\n        case 'response':\n          // The response stream was requested directly, so return it.\n          return res$;\n        default:\n          // Guard against new future observe types being added.\n          throw new _RuntimeError(2809 /* RuntimeErrorCode.UNHANDLED_OBSERVE_TYPE */, ngDevMode && `Unreachable: unhandled observe type ${options.observe}}`);\n      }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n      return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n      return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n      return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n      return this.request('JSONP', url, {\n        params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n        observe: 'body',\n        responseType: 'json'\n      });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n      return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n      return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n      return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n      return this.request('PUT', url, addBody(options, body));\n    }\n    static ɵfac = function HttpClient_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpClient)(i0.ɵɵinject(HttpHandler));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpClient,\n      factory: HttpClient.ɵfac\n    });\n  }\n  return HttpClient;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst XSSI_PREFIX$1 = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl$1(response) {\n  if (response.url) {\n    return response.url;\n  }\n  // stored as lowercase in the map\n  const xRequestUrl = X_REQUEST_URL_HEADER.toLocaleLowerCase();\n  return response.headers.get(xRequestUrl);\n}\n/**\n * An internal injection token to reference `FetchBackend` implementation\n * in a tree-shakable way.\n */\nconst FETCH_BACKEND = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'FETCH_BACKEND' : '');\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n */\nlet FetchBackend = /*#__PURE__*/(() => {\n  class FetchBackend {\n    // We use an arrow function to always reference the current global implementation of `fetch`.\n    // This is helpful for cases when the global `fetch` implementation is modified by external code,\n    // see https://github.com/angular/angular/issues/57527.\n    fetchImpl = inject(FetchFactory, {\n      optional: true\n    })?.fetch ?? ((...args) => globalThis.fetch(...args));\n    ngZone = inject(NgZone);\n    destroyRef = inject(DestroyRef);\n    destroyed = false;\n    constructor() {\n      this.destroyRef.onDestroy(() => {\n        this.destroyed = true;\n      });\n    }\n    handle(request) {\n      return new Observable(observer => {\n        const aborter = new AbortController();\n        this.doRequest(request, aborter.signal, observer).then(noop, error => observer.error(new HttpErrorResponse({\n          error\n        })));\n        let timeoutId;\n        if (request.timeout) {\n          // TODO: Replace with AbortSignal.any([aborter.signal, AbortSignal.timeout(request.timeout)])\n          // when AbortSignal.any support is Baseline widely available (NET nov. 2026)\n          timeoutId = this.ngZone.runOutsideAngular(() => setTimeout(() => {\n            if (!aborter.signal.aborted) {\n              aborter.abort(new DOMException('signal timed out', 'TimeoutError'));\n            }\n          }, request.timeout));\n        }\n        return () => {\n          if (timeoutId !== undefined) {\n            clearTimeout(timeoutId);\n          }\n          aborter.abort();\n        };\n      });\n    }\n    async doRequest(request, signal, observer) {\n      const init = this.createRequestInit(request);\n      let response;\n      try {\n        // Run fetch outside of Angular zone.\n        // This is due to Node.js fetch implementation (Undici) which uses a number of setTimeouts to check if\n        // the response should eventually timeout which causes extra CD cycles every 500ms\n        const fetchPromise = this.ngZone.runOutsideAngular(() => this.fetchImpl(request.urlWithParams, {\n          signal,\n          ...init\n        }));\n        // Make sure Zone.js doesn't trigger false-positive unhandled promise\n        // error in case the Promise is rejected synchronously. See function\n        // description for additional information.\n        silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n        // Send the `Sent` event before awaiting the response.\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        response = await fetchPromise;\n      } catch (error) {\n        observer.error(new HttpErrorResponse({\n          error,\n          status: error.status ?? 0,\n          statusText: error.statusText,\n          url: request.urlWithParams,\n          headers: error.headers\n        }));\n        return;\n      }\n      const headers = new HttpHeaders(response.headers);\n      const statusText = response.statusText;\n      const url = getResponseUrl$1(response) ?? request.urlWithParams;\n      let status = response.status;\n      let body = null;\n      if (request.reportProgress) {\n        observer.next(new HttpHeaderResponse({\n          headers,\n          status,\n          statusText,\n          url\n        }));\n      }\n      if (response.body) {\n        // Read Progress\n        const contentLength = response.headers.get('content-length');\n        const chunks = [];\n        const reader = response.body.getReader();\n        let receivedLength = 0;\n        let decoder;\n        let partialText;\n        // We have to check whether the Zone is defined in the global scope because this may be called\n        // when the zone is nooped.\n        const reqZone = typeof Zone !== 'undefined' && Zone.current;\n        let canceled = false;\n        // Perform response processing outside of Angular zone to\n        // ensure no excessive change detection runs are executed\n        // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n        await this.ngZone.runOutsideAngular(async () => {\n          while (true) {\n            // Prevent reading chunks if the app is destroyed. Otherwise, we risk doing\n            // unnecessary work or triggering side effects after teardown.\n            // This may happen if the app was explicitly destroyed before\n            // the response returned entirely.\n            if (this.destroyed) {\n              // Streams left in a pending state (due to `break` without cancel) may\n              // continue consuming or holding onto data behind the scenes.\n              // Calling `reader.cancel()` allows the browser or the underlying\n              // system to release any network or memory resources associated with the stream.\n              await reader.cancel();\n              canceled = true;\n              break;\n            }\n            const {\n              done,\n              value\n            } = await reader.read();\n            if (done) {\n              break;\n            }\n            chunks.push(value);\n            receivedLength += value.length;\n            if (request.reportProgress) {\n              partialText = request.responseType === 'text' ? (partialText ?? '') + (decoder ??= new TextDecoder()).decode(value, {\n                stream: true\n              }) : undefined;\n              const reportProgress = () => observer.next({\n                type: HttpEventType.DownloadProgress,\n                total: contentLength ? +contentLength : undefined,\n                loaded: receivedLength,\n                partialText\n              });\n              reqZone ? reqZone.run(reportProgress) : reportProgress();\n            }\n          }\n        });\n        // We need to manage the canceled state — because the Streams API does not\n        // expose a direct `.state` property on the reader.\n        // We need to `return` because `parseBody` may not be able to parse chunks\n        // that were only partially read (due to cancellation caused by app destruction).\n        if (canceled) {\n          observer.complete();\n          return;\n        }\n        // Combine all chunks.\n        const chunksAll = this.concatChunks(chunks, receivedLength);\n        try {\n          const contentType = response.headers.get(CONTENT_TYPE_HEADER) ?? '';\n          body = this.parseBody(request, chunksAll, contentType, status);\n        } catch (error) {\n          // Body loading or parsing failed\n          observer.error(new HttpErrorResponse({\n            error,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: getResponseUrl$1(response) ?? request.urlWithParams\n          }));\n          return;\n        }\n      }\n      // Same behavior as the XhrBackend\n      if (status === 0) {\n        status = body ? HTTP_STATUS_CODE_OK : 0;\n      }\n      // ok determines whether the response will be transmitted on the event or\n      // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n      // but a successful status code can still result in an error if the user\n      // asked for JSON data and the body cannot be parsed as such.\n      const ok = status >= 200 && status < 300;\n      if (ok) {\n        observer.next(new HttpResponse({\n          body,\n          headers,\n          status,\n          statusText,\n          url\n        }));\n        // The full body has been received and delivered, no further events\n        // are possible. This request is complete.\n        observer.complete();\n      } else {\n        observer.error(new HttpErrorResponse({\n          error: body,\n          headers,\n          status,\n          statusText,\n          url\n        }));\n      }\n    }\n    parseBody(request, binContent, contentType, status) {\n      switch (request.responseType) {\n        case 'json':\n          // stripping the XSSI when present\n          const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, '');\n          if (text === '') {\n            return null;\n          }\n          try {\n            return JSON.parse(text);\n          } catch (e) {\n            // Allow handling non-JSON errors (!) as plain text, same as the XHR\n            // backend. Without this special sauce, any non-JSON error would be\n            // completely inaccessible downstream as the `HttpErrorResponse.error`\n            // would be set to the `SyntaxError` from then failing `JSON.parse`.\n            if (status < 200 || status >= 300) {\n              return text;\n            }\n            throw e;\n          }\n        case 'text':\n          return new TextDecoder().decode(binContent);\n        case 'blob':\n          return new Blob([binContent], {\n            type: contentType\n          });\n        case 'arraybuffer':\n          return binContent.buffer;\n      }\n    }\n    createRequestInit(req) {\n      // We could share some of this logic with the XhrBackend\n      const headers = {};\n      let credentials;\n      // If the request has a credentials property, use it.\n      // Otherwise, if the request has withCredentials set to true, use 'include'.\n      credentials = req.credentials;\n      // If withCredentials is true should be set to 'include', for compatibility\n      if (req.withCredentials) {\n        // A warning is logged in development mode if the request has both\n        (typeof ngDevMode === 'undefined' || ngDevMode) && warningOptionsMessage(req);\n        credentials = 'include';\n      }\n      // Setting all the requested headers.\n      req.headers.forEach((name, values) => headers[name] = values.join(','));\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has(ACCEPT_HEADER)) {\n        headers[ACCEPT_HEADER] = ACCEPT_HEADER_VALUE;\n      }\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n        const detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          headers[CONTENT_TYPE_HEADER] = detectedType;\n        }\n      }\n      return {\n        body: req.serializeBody(),\n        method: req.method,\n        headers,\n        credentials,\n        keepalive: req.keepalive,\n        cache: req.cache,\n        priority: req.priority,\n        mode: req.mode,\n        redirect: req.redirect\n      };\n    }\n    concatChunks(chunks, totalLength) {\n      const chunksAll = new Uint8Array(totalLength);\n      let position = 0;\n      for (const chunk of chunks) {\n        chunksAll.set(chunk, position);\n        position += chunk.length;\n      }\n      return chunksAll;\n    }\n    static ɵfac = function FetchBackend_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FetchBackend)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: FetchBackend,\n      factory: FetchBackend.ɵfac\n    });\n  }\n  return FetchBackend;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nclass FetchFactory {}\nfunction noop() {}\nfunction warningOptionsMessage(req) {\n  if (req.credentials && req.withCredentials) {\n    console.warn(_formatRuntimeError(2819 /* RuntimeErrorCode.WITH_CREDENTIALS_OVERRIDES_EXPLICIT_CREDENTIALS */, `Angular detected that a \\`HttpClient\\` request has both \\`withCredentials: true\\` and \\`credentials: '${req.credentials}'\\` options. The \\`withCredentials\\` option is overriding the explicit \\`credentials\\` setting to 'include'. Consider removing \\`withCredentials\\` and using \\`credentials: '${req.credentials}'\\` directly for clarity.`));\n  }\n}\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise) {\n  promise.then(noop, noop);\n}\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n  return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n  });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n  return (initialRequest, finalHandlerFn) => runInInjectionContext(injector, () => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nconst HTTP_ROOT_INTERCEPTOR_FNS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n// TODO(atscott): We need a larger discussion about stability and what should contribute to stability.\n// Should the whole interceptor chain contribute to stability or just the backend request #55075?\n// Should HttpClient contribute to stability automatically at all?\nconst REQUESTS_CONTRIBUTE_TO_STABILITY = /*#__PURE__*/new InjectionToken(ngDevMode ? 'REQUESTS_CONTRIBUTE_TO_STABILITY' : '', {\n  providedIn: 'root',\n  factory: () => true\n});\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n  let chain = null;\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {\n        optional: true\n      }) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n    }\n    const pendingTasks = inject(PendingTasks);\n    const contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n    if (contributeToStability) {\n      const removeTask = pendingTasks.add();\n      return chain(req, handler).pipe(finalize(removeTask));\n    } else {\n      return chain(req, handler);\n    }\n  };\n}\nlet fetchBackendWarningDisplayed = false;\nlet HttpInterceptorHandler = /*#__PURE__*/(() => {\n  class HttpInterceptorHandler extends HttpHandler {\n    backend;\n    injector;\n    chain = null;\n    pendingTasks = inject(PendingTasks);\n    contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n    constructor(backend, injector) {\n      super();\n      this.backend = backend;\n      this.injector = injector;\n      // We strongly recommend using fetch backend for HTTP calls when SSR is used\n      // for an application. The logic below checks if that's the case and produces\n      // a warning otherwise.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n        // This flag is necessary because provideHttpClientTesting() overrides the backend\n        // even if `withFetch()` is used within the test. When the testing HTTP backend is provided,\n        // no HTTP calls are actually performed during the test, so producing a warning would be\n        // misleading.\n        const isTestingBackend = this.backend.isTestingBackend;\n        if (typeof ngServerMode !== 'undefined' && ngServerMode && !(this.backend instanceof FetchBackend) && !isTestingBackend) {\n          fetchBackendWarningDisplayed = true;\n          injector.get(_Console).warn(_formatRuntimeError(2801 /* RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR */, 'Angular detected that `HttpClient` is not configured ' + \"to use `fetch` APIs. It's strongly recommended to \" + 'enable `fetch` for applications that use Server-Side Rendering ' + 'for better performance and compatibility. ' + 'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' + 'call at the root of the application.'));\n        }\n      }\n    }\n    handle(initialRequest) {\n      if (this.chain === null) {\n        const dedupedInterceptorFns = Array.from(new Set([...this.injector.get(HTTP_INTERCEPTOR_FNS), ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, [])]));\n        // Note: interceptors are wrapped right-to-left so that final execution order is\n        // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n        // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n        // out.\n        this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n      }\n      if (this.contributeToStability) {\n        const removeTask = this.pendingTasks.add();\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest)).pipe(finalize(removeTask));\n      } else {\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\n      }\n    }\n    static ɵfac = function HttpInterceptorHandler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpInterceptorHandler)(i0.ɵɵinject(HttpBackend), i0.ɵɵinject(i0.EnvironmentInjector));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpInterceptorHandler,\n      factory: HttpInterceptorHandler.ɵfac\n    });\n  }\n  return HttpInterceptorHandler;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\nlet JsonpClientBackend = /*#__PURE__*/(() => {\n  class JsonpClientBackend {\n    callbackMap;\n    document;\n    /**\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\n     */\n    resolvedPromise = Promise.resolve();\n    constructor(callbackMap, document) {\n      this.callbackMap = callbackMap;\n      this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n      return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n      // Firstly, check both the method and response type. If either doesn't match\n      // then the request was improperly routed here and cannot be handled.\n      if (req.method !== 'JSONP') {\n        throw new _RuntimeError(2810 /* RuntimeErrorCode.JSONP_WRONG_METHOD */, ngDevMode && JSONP_ERR_WRONG_METHOD);\n      } else if (req.responseType !== 'json') {\n        throw new _RuntimeError(2811 /* RuntimeErrorCode.JSONP_WRONG_RESPONSE_TYPE */, ngDevMode && JSONP_ERR_WRONG_RESPONSE_TYPE);\n      }\n      // Check the request headers. JSONP doesn't support headers and\n      // cannot set any that were supplied.\n      if (req.headers.keys().length > 0) {\n        throw new _RuntimeError(2812 /* RuntimeErrorCode.JSONP_HEADERS_NOT_SUPPORTED */, ngDevMode && JSONP_ERR_HEADERS_NOT_SUPPORTED);\n      }\n      // Everything else happens inside the Observable boundary.\n      return new Observable(observer => {\n        // The first step to make a request is to generate the callback name, and replace the\n        // callback placeholder in the URL with the name. Care has to be taken here to ensure\n        // a trailing &, if matched, gets inserted back into the URL in the correct place.\n        const callback = this.nextCallback();\n        const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n        // Construct the <script> tag and point it at the URL.\n        const node = this.document.createElement('script');\n        node.src = url;\n        // A JSONP request requires waiting for multiple callbacks. These variables\n        // are closed over and track state across those callbacks.\n        // The response object, if one has been received, or null otherwise.\n        let body = null;\n        // Whether the response callback has been called.\n        let finished = false;\n        // Set the response callback in this.callbackMap (which will be the window\n        // object in the browser. The script being loaded via the <script> tag will\n        // eventually call this callback.\n        this.callbackMap[callback] = data => {\n          // Data has been received from the JSONP script. Firstly, delete this callback.\n          delete this.callbackMap[callback];\n          // Set state to indicate data was received.\n          body = data;\n          finished = true;\n        };\n        // cleanup() is a utility closure that removes the <script> from the page and\n        // the response callback from the window. This logic is used in both the\n        // success, error, and cancellation paths, so it's extracted out for convenience.\n        const cleanup = () => {\n          node.removeEventListener('load', onLoad);\n          node.removeEventListener('error', onError);\n          // Remove the <script> tag if it's still on the page.\n          node.remove();\n          // Remove the response callback from the callbackMap (window object in the\n          // browser).\n          delete this.callbackMap[callback];\n        };\n        // onLoad() is the success callback which runs after the response callback\n        // if the JSONP script loads successfully. The event itself is unimportant.\n        // If something went wrong, onLoad() may run without the response callback\n        // having been invoked.\n        const onLoad = () => {\n          // We wrap it in an extra Promise, to ensure the microtask\n          // is scheduled after the loaded endpoint has executed any potential microtask itself,\n          // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n          this.resolvedPromise.then(() => {\n            // Cleanup the page.\n            cleanup();\n            // Check whether the response callback has run.\n            if (!finished) {\n              // It hasn't, something went wrong with the request. Return an error via\n              // the Observable error path. All JSONP errors have status 0.\n              observer.error(new HttpErrorResponse({\n                url,\n                status: 0,\n                statusText: 'JSONP Error',\n                error: new Error(JSONP_ERR_NO_CALLBACK)\n              }));\n              return;\n            }\n            // Success. body either contains the response body or null if none was\n            // returned.\n            observer.next(new HttpResponse({\n              body,\n              status: HTTP_STATUS_CODE_OK,\n              statusText: 'OK',\n              url\n            }));\n            // Complete the stream, the response is over.\n            observer.complete();\n          });\n        };\n        // onError() is the error callback, which runs if the script returned generates\n        // a Javascript error. It emits the error via the Observable error channel as\n        // a HttpErrorResponse.\n        const onError = error => {\n          cleanup();\n          // Wrap the error in a HttpErrorResponse.\n          observer.error(new HttpErrorResponse({\n            error,\n            status: 0,\n            statusText: 'JSONP Error',\n            url\n          }));\n        };\n        // Subscribe to both the success (load) and error events on the <script> tag,\n        // and add it to the page.\n        node.addEventListener('load', onLoad);\n        node.addEventListener('error', onError);\n        this.document.body.appendChild(node);\n        // The request has now been successfully sent.\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        // Cancellation handler.\n        return () => {\n          if (!finished) {\n            this.removeListeners(node);\n          }\n          // And finally, clean up the page.\n          cleanup();\n        };\n      });\n    }\n    removeListeners(script) {\n      // Issue #34818\n      // Changing <script>'s ownerDocument will prevent it from execution.\n      // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n      foreignDocument ??= this.document.implementation.createHTMLDocument();\n      foreignDocument.adoptNode(script);\n    }\n    static ɵfac = function JsonpClientBackend_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || JsonpClientBackend)(i0.ɵɵinject(JsonpCallbackContext), i0.ɵɵinject(DOCUMENT));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: JsonpClientBackend,\n      factory: JsonpClientBackend.ɵfac\n    });\n  }\n  return JsonpClientBackend;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req);\n  }\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\nlet JsonpInterceptor = /*#__PURE__*/(() => {\n  class JsonpInterceptor {\n    injector;\n    constructor(injector) {\n      this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n      return runInInjectionContext(this.injector, () => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n    static ɵfac = function JsonpInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || JsonpInterceptor)(i0.ɵɵinject(i0.EnvironmentInjector));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: JsonpInterceptor,\n      factory: JsonpInterceptor.ɵfac\n    });\n  }\n  return JsonpInterceptor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\nconst X_REQUEST_URL_REGEXP = /*#__PURE__*/RegExp(`^${X_REQUEST_URL_HEADER}:`, 'm');\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (X_REQUEST_URL_REGEXP.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader(X_REQUEST_URL_HEADER);\n  }\n  return null;\n}\n/**\n * Validates whether the request is compatible with the XHR backend.\n * Show a warning if the request contains options that are not supported by XHR.\n */\nfunction validateXhrCompatibility(req) {\n  const unsupportedOptions = [{\n    property: 'keepalive',\n    errorCode: 2813 /* RuntimeErrorCode.KEEPALIVE_NOT_SUPPORTED_WITH_XHR */\n  }, {\n    property: 'cache',\n    errorCode: 2814 /* RuntimeErrorCode.CACHE_NOT_SUPPORTED_WITH_XHR */\n  }, {\n    property: 'priority',\n    errorCode: 2815 /* RuntimeErrorCode.PRIORITY_NOT_SUPPORTED_WITH_XHR */\n  }, {\n    property: 'mode',\n    errorCode: 2816 /* RuntimeErrorCode.MODE_NOT_SUPPORTED_WITH_XHR */\n  }, {\n    property: 'redirect',\n    errorCode: 2817 /* RuntimeErrorCode.REDIRECT_NOT_SUPPORTED_WITH_XHR */\n  }, {\n    property: 'credentials',\n    errorCode: 2818 /* RuntimeErrorCode.CREDENTIALS_NOT_SUPPORTED_WITH_XHR */\n  }];\n  // Check each unsupported option and warn if present\n  for (const {\n    property,\n    errorCode\n  } of unsupportedOptions) {\n    if (req[property]) {\n      console.warn(_formatRuntimeError(errorCode, `Angular detected that a \\`HttpClient\\` request with the \\`${property}\\` option was sent using XHR, which does not support it. To use the \\`${property}\\` option, enable Fetch API support by passing \\`withFetch()\\` as an argument to \\`provideHttpClient()\\`.`));\n    }\n  }\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\nlet HttpXhrBackend = /*#__PURE__*/(() => {\n  class HttpXhrBackend {\n    xhrFactory;\n    constructor(xhrFactory) {\n      this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n      // Quick check to give a better error message when a user attempts to use\n      // HttpClient.jsonp() without installing the HttpClientJsonpModule\n      if (req.method === 'JSONP') {\n        throw new _RuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n      }\n      // Validate that the request is compatible with the XHR backend.\n      ngDevMode && validateXhrCompatibility(req);\n      // Check whether this factory has a special function to load an XHR implementation\n      // for various non-browser environments. We currently limit it to only `ServerXhr`\n      // class, which needs to load an XHR implementation.\n      const xhrFactory = this.xhrFactory;\n      const source =\n      // Note that `ɵloadImpl` is never defined in client bundles and can be\n      // safely dropped whenever we're running in the browser.\n      // This branching is redundant.\n      // The `ngServerMode` guard also enables tree-shaking of the `from()`\n      // function from the common bundle, as it's only used in server code.\n      typeof ngServerMode !== 'undefined' && ngServerMode && xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n      return source.pipe(switchMap(() => {\n        // Everything happens on Observable subscription.\n        return new Observable(observer => {\n          // Start by setting up the XHR object with request method, URL, and withCredentials\n          // flag.\n          const xhr = xhrFactory.build();\n          xhr.open(req.method, req.urlWithParams);\n          if (req.withCredentials) {\n            xhr.withCredentials = true;\n          }\n          // Add all the requested headers.\n          req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n          // Add an Accept header if one isn't present already.\n          if (!req.headers.has(ACCEPT_HEADER)) {\n            xhr.setRequestHeader(ACCEPT_HEADER, ACCEPT_HEADER_VALUE);\n          }\n          // Auto-detect the Content-Type header if one isn't present already.\n          if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n            const detectedType = req.detectContentTypeHeader();\n            // Sometimes Content-Type detection fails.\n            if (detectedType !== null) {\n              xhr.setRequestHeader(CONTENT_TYPE_HEADER, detectedType);\n            }\n          }\n          if (req.timeout) {\n            xhr.timeout = req.timeout;\n          }\n          // Set the responseType if one was requested.\n          if (req.responseType) {\n            const responseType = req.responseType.toLowerCase();\n            // JSON responses need to be processed as text. This is because if the server\n            // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n            // xhr.response will be null, and xhr.responseText cannot be accessed to\n            // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n            // is parsed by first requesting text and then applying JSON.parse.\n            xhr.responseType = responseType !== 'json' ? responseType : 'text';\n          }\n          // Serialize the request body if one is present. If not, this will be set to null.\n          const reqBody = req.serializeBody();\n          // If progress events are enabled, response headers will be delivered\n          // in two events - the HttpHeaderResponse event and the full HttpResponse\n          // event. However, since response headers don't change in between these\n          // two events, it doesn't make sense to parse them twice. So headerResponse\n          // caches the data extracted from the response whenever it's first parsed,\n          // to ensure parsing isn't duplicated.\n          let headerResponse = null;\n          // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n          // state, and memoizes it into headerResponse.\n          const partialFromXhr = () => {\n            if (headerResponse !== null) {\n              return headerResponse;\n            }\n            const statusText = xhr.statusText || 'OK';\n            // Parse headers from XMLHttpRequest - this step is lazy.\n            const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n            // Read the response URL from the XMLHttpResponse instance and fall back on the\n            // request URL.\n            const url = getResponseUrl(xhr) || req.url;\n            // Construct the HttpHeaderResponse and memoize it.\n            headerResponse = new HttpHeaderResponse({\n              headers,\n              status: xhr.status,\n              statusText,\n              url\n            });\n            return headerResponse;\n          };\n          // Next, a few closures are defined for the various events which XMLHttpRequest can\n          // emit. This allows them to be unregistered as event listeners later.\n          // First up is the load event, which represents a response being fully available.\n          const onLoad = () => {\n            // Read response state from the memoized partial data.\n            let {\n              headers,\n              status,\n              statusText,\n              url\n            } = partialFromXhr();\n            // The body will be read out if present.\n            let body = null;\n            if (status !== HTTP_STATUS_CODE_NO_CONTENT) {\n              // Use XMLHttpRequest.response if set, responseText otherwise.\n              body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n            }\n            // Normalize another potential bug (this one comes from CORS).\n            if (status === 0) {\n              status = !!body ? HTTP_STATUS_CODE_OK : 0;\n            }\n            // ok determines whether the response will be transmitted on the event or\n            // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n            // but a successful status code can still result in an error if the user\n            // asked for JSON data and the body cannot be parsed as such.\n            let ok = status >= 200 && status < 300;\n            // Check whether the body needs to be parsed as JSON (in many cases the browser\n            // will have done that already).\n            if (req.responseType === 'json' && typeof body === 'string') {\n              // Save the original body, before attempting XSSI prefix stripping.\n              const originalBody = body;\n              body = body.replace(XSSI_PREFIX, '');\n              try {\n                // Attempt the parse. If it fails, a parse error should be delivered to the\n                // user.\n                body = body !== '' ? JSON.parse(body) : null;\n              } catch (error) {\n                // Since the JSON.parse failed, it's reasonable to assume this might not have\n                // been a JSON response. Restore the original body (including any XSSI prefix)\n                // to deliver a better error response.\n                body = originalBody;\n                // If this was an error request to begin with, leave it as a string, it\n                // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                if (ok) {\n                  // Even though the response status was 2xx, this is still an error.\n                  ok = false;\n                  // The parse error contains the text of the body that failed to parse.\n                  body = {\n                    error,\n                    text: body\n                  };\n                }\n              }\n            }\n            if (ok) {\n              // A successful response is delivered on the event stream.\n              observer.next(new HttpResponse({\n                body,\n                headers,\n                status,\n                statusText,\n                url: url || undefined\n              }));\n              // The full body has been received and delivered, no further events\n              // are possible. This request is complete.\n              observer.complete();\n            } else {\n              // An unsuccessful request is delivered on the error channel.\n              observer.error(new HttpErrorResponse({\n                // The error in this case is the response body (error from the server).\n                error: body,\n                headers,\n                status,\n                statusText,\n                url: url || undefined\n              }));\n            }\n          };\n          // The onError callback is called when something goes wrong at the network level.\n          // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n          // transmitted on the error channel.\n          const onError = error => {\n            const {\n              url\n            } = partialFromXhr();\n            const res = new HttpErrorResponse({\n              error,\n              status: xhr.status || 0,\n              statusText: xhr.statusText || 'Unknown Error',\n              url: url || undefined\n            });\n            observer.error(res);\n          };\n          let onTimeout = onError;\n          if (req.timeout) {\n            onTimeout = _ => {\n              const {\n                url\n              } = partialFromXhr();\n              const res = new HttpErrorResponse({\n                error: new DOMException('Request timed out', 'TimeoutError'),\n                status: xhr.status || 0,\n                statusText: xhr.statusText || 'Request timeout',\n                url: url || undefined\n              });\n              observer.error(res);\n            };\n          }\n          // The sentHeaders flag tracks whether the HttpResponseHeaders event\n          // has been sent on the stream. This is necessary to track if progress\n          // is enabled since the event will be sent on only the first download\n          // progress event.\n          let sentHeaders = false;\n          // The download progress event handler, which is only registered if\n          // progress events are enabled.\n          const onDownProgress = event => {\n            // Send the HttpResponseHeaders event if it hasn't been sent already.\n            if (!sentHeaders) {\n              observer.next(partialFromXhr());\n              sentHeaders = true;\n            }\n            // Start building the download progress event to deliver on the response\n            // event stream.\n            let progressEvent = {\n              type: HttpEventType.DownloadProgress,\n              loaded: event.loaded\n            };\n            // Set the total number of bytes in the event if it's available.\n            if (event.lengthComputable) {\n              progressEvent.total = event.total;\n            }\n            // If the request was for text content and a partial response is\n            // available on XMLHttpRequest, include it in the progress event\n            // to allow for streaming reads.\n            if (req.responseType === 'text' && !!xhr.responseText) {\n              progressEvent.partialText = xhr.responseText;\n            }\n            // Finally, fire the event.\n            observer.next(progressEvent);\n          };\n          // The upload progress event handler, which is only registered if\n          // progress events are enabled.\n          const onUpProgress = event => {\n            // Upload progress events are simpler. Begin building the progress\n            // event.\n            let progress = {\n              type: HttpEventType.UploadProgress,\n              loaded: event.loaded\n            };\n            // If the total number of bytes being uploaded is available, include\n            // it.\n            if (event.lengthComputable) {\n              progress.total = event.total;\n            }\n            // Send the event.\n            observer.next(progress);\n          };\n          // By default, register for load and error events.\n          xhr.addEventListener('load', onLoad);\n          xhr.addEventListener('error', onError);\n          xhr.addEventListener('timeout', onTimeout);\n          xhr.addEventListener('abort', onError);\n          // Progress events are only enabled if requested.\n          if (req.reportProgress) {\n            // Download progress is always enabled if requested.\n            xhr.addEventListener('progress', onDownProgress);\n            // Upload progress depends on whether there is a body to upload.\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.addEventListener('progress', onUpProgress);\n            }\n          }\n          // Fire the request, and notify the event stream that it was fired.\n          xhr.send(reqBody);\n          observer.next({\n            type: HttpEventType.Sent\n          });\n          // This is the return from the Observable function, which is the\n          // request cancellation handler.\n          return () => {\n            // On a cancellation, remove all registered event listeners.\n            xhr.removeEventListener('error', onError);\n            xhr.removeEventListener('abort', onError);\n            xhr.removeEventListener('load', onLoad);\n            xhr.removeEventListener('timeout', onTimeout);\n            if (req.reportProgress) {\n              xhr.removeEventListener('progress', onDownProgress);\n              if (reqBody !== null && xhr.upload) {\n                xhr.upload.removeEventListener('progress', onUpProgress);\n              }\n            }\n            // Finally, abort the in-flight request.\n            if (xhr.readyState !== xhr.DONE) {\n              xhr.abort();\n            }\n          };\n        });\n      }));\n    }\n    static ɵfac = function HttpXhrBackend_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpXhrBackend)(i0.ɵɵinject(XhrFactory));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpXhrBackend,\n      factory: HttpXhrBackend.ɵfac\n    });\n  }\n  return HttpXhrBackend;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst XSRF_ENABLED = /*#__PURE__*/new InjectionToken(ngDevMode ? 'XSRF_ENABLED' : '');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = /*#__PURE__*/new InjectionToken(ngDevMode ? 'XSRF_COOKIE_NAME' : '', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = /*#__PURE__*/new InjectionToken(ngDevMode ? 'XSRF_HEADER_NAME' : '', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nlet HttpXsrfCookieExtractor = /*#__PURE__*/(() => {\n  class HttpXsrfCookieExtractor {\n    doc;\n    cookieName;\n    lastCookieString = '';\n    lastToken = null;\n    /**\n     * @internal for testing\n     */\n    parseCount = 0;\n    constructor(doc, cookieName) {\n      this.doc = doc;\n      this.cookieName = cookieName;\n    }\n    getToken() {\n      if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n        return null;\n      }\n      const cookieString = this.doc.cookie || '';\n      if (cookieString !== this.lastCookieString) {\n        this.parseCount++;\n        this.lastToken = parseCookieValue(cookieString, this.cookieName);\n        this.lastCookieString = cookieString;\n      }\n      return this.lastToken;\n    }\n    static ɵfac = function HttpXsrfCookieExtractor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpXsrfCookieExtractor)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(XSRF_COOKIE_NAME));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpXsrfCookieExtractor,\n      factory: HttpXsrfCookieExtractor.ɵfac\n    });\n  }\n  return HttpXsrfCookieExtractor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction xsrfInterceptorFn(req, next) {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({\n      headers: req.headers.set(headerName, token)\n    });\n  }\n  return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nlet HttpXsrfInterceptor = /*#__PURE__*/(() => {\n  class HttpXsrfInterceptor {\n    injector;\n    constructor(injector) {\n      this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n      return runInInjectionContext(this.injector, () => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n    static ɵfac = function HttpXsrfInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpXsrfInterceptor)(i0.ɵɵinject(i0.EnvironmentInjector));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpXsrfInterceptor,\n      factory: HttpXsrfInterceptor.ɵfac\n    });\n  }\n  return HttpXsrfInterceptor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind = /*#__PURE__*/function (HttpFeatureKind) {\n  HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n  HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n  HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n  HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n  HttpFeatureKind[HttpFeatureKind[\"Fetch\"] = 6] = \"Fetch\";\n  return HttpFeatureKind;\n}(HttpFeatureKind || {});\nfunction makeHttpFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n * It's strongly recommended to enable\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\n *\n * ```ts\n * provideHttpClient(withFetch());\n * ```\n *\n * </div>\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nfunction provideHttpClient(...features) {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.ɵkind));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(ngDevMode ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` : '');\n    }\n  }\n  const providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {\n    provide: HttpHandler,\n    useExisting: HttpInterceptorHandler\n  }, {\n    provide: HttpBackend,\n    useFactory: () => {\n      return inject(FETCH_BACKEND, {\n        optional: true\n      }) ?? inject(HttpXhrBackend);\n    }\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: xsrfInterceptorFn,\n    multi: true\n  }, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }];\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n  return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true\n    };\n  }));\n}\nconst LEGACY_INTERCEPTOR_FN = /*#__PURE__*/new InjectionToken(ngDevMode ? 'LEGACY_INTERCEPTOR_FN' : '');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nfunction withInterceptorsFromDi() {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{\n    provide: LEGACY_INTERCEPTOR_FN,\n    useFactory: legacyInterceptorFnFactory\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useExisting: LEGACY_INTERCEPTOR_FN,\n    multi: true\n  }]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withXsrfConfiguration({\n  cookieName,\n  headerName\n}) {\n  const providers = [];\n  if (cookieName !== undefined) {\n    providers.push({\n      provide: XSRF_COOKIE_NAME,\n      useValue: cookieName\n    });\n  }\n  if (headerName !== undefined) {\n    providers.push({\n      provide: XSRF_HEADER_NAME,\n      useValue: headerName\n    });\n  }\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withNoXsrfProtection() {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{\n    provide: XSRF_ENABLED,\n    useValue: false\n  }]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nfunction withJsonpSupport() {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: jsonpInterceptorFn,\n    multi: true\n  }]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @publicApi 19.0\n */\nfunction withRequestsMadeViaParent() {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [{\n    provide: HttpBackend,\n    useFactory: () => {\n      const handlerFromParent = inject(HttpHandler, {\n        skipSelf: true,\n        optional: true\n      });\n      if (ngDevMode && handlerFromParent === null) {\n        throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n      }\n      return handlerFromParent;\n    }\n  }]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n */\nfunction withFetch() {\n  return makeHttpFeature(HttpFeatureKind.Fetch, [FetchBackend, {\n    provide: FETCH_BACKEND,\n    useExisting: FetchBackend\n  }, {\n    provide: HttpBackend,\n    useExisting: FetchBackend\n  }]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n * @deprecated Use withXsrfConfiguration({cookieName: 'XSRF-TOKEN', headerName: 'X-XSRF-TOKEN'}) as\n *     providers instead or `withNoXsrfProtection` if you want to disabled XSRF protection.\n */\nlet HttpClientXsrfModule = /*#__PURE__*/(() => {\n  class HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: [withNoXsrfProtection().ɵproviders]\n      };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: withXsrfConfiguration(options).ɵproviders\n      };\n    }\n    static ɵfac = function HttpClientXsrfModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpClientXsrfModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: HttpClientXsrfModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }).ɵproviders, {\n        provide: XSRF_ENABLED,\n        useValue: true\n      }]\n    });\n  }\n  return HttpClientXsrfModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Configures the dependency injector for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in DI token `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n * @deprecated use `provideHttpClient(withInterceptorsFromDi())` as providers instead\n */\nlet HttpClientModule = /*#__PURE__*/(() => {\n  class HttpClientModule {\n    static ɵfac = function HttpClientModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpClientModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: HttpClientModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [provideHttpClient(withInterceptorsFromDi())]\n    });\n  }\n  return HttpClientModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Configures the dependency injector for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n * @deprecated `withJsonpSupport()` as providers instead\n */\nlet HttpClientJsonpModule = /*#__PURE__*/(() => {\n  class HttpClientJsonpModule {\n    static ɵfac = function HttpClientJsonpModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpClientJsonpModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: HttpClientJsonpModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [withJsonpSupport().ɵproviders]\n    });\n  }\n  return HttpClientJsonpModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { FetchBackend, HTTP_INTERCEPTORS, HTTP_ROOT_INTERCEPTOR_FNS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpInterceptorHandler, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpStatusCode, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, REQUESTS_CONTRIBUTE_TO_STABILITY, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { HttpHeaders, HttpParams, HttpRequest, HttpEventType, HttpErrorResponse, HttpClient, HTTP_ROOT_INTERCEPTOR_FNS, HttpResponse } from './module.mjs';\nexport { FetchBackend, HTTP_INTERCEPTORS, HttpBackend, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpResponseBase, HttpStatusCode, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler, REQUESTS_CONTRIBUTE_TO_STABILITY as ɵREQUESTS_CONTRIBUTE_TO_STABILITY } from './module.mjs';\nimport { assertInInjectionContext, inject, Injector, ɵResourceImpl as _ResourceImpl, linkedSignal, computed, signal, ɵencapsulateResourceError as _encapsulateResourceError, ɵRuntimeError as _RuntimeError, InjectionToken, ɵperformanceMarkFeature as _performanceMarkFeature, APP_BOOTSTRAP_LISTENER, ApplicationRef, TransferState, makeStateKey, ɵtruncateMiddle as _truncateMiddle, ɵformatRuntimeError as _formatRuntimeError } from '@angular/core';\nimport { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport './xhr.mjs';\n\n/**\n * `httpResource` makes a reactive HTTP request and exposes the request status and response value as\n * a `WritableResource`. By default, it assumes that the backend will return JSON data. To make a\n * request that expects a different kind of data, you can use a sub-constructor of `httpResource`,\n * such as `httpResource.text`.\n *\n * @experimental 19.2\n * @initializerApiFunction\n */\nconst httpResource = /*#__PURE__*/(() => {\n  const jsonFn = makeHttpResourceFn('json');\n  jsonFn.arrayBuffer = makeHttpResourceFn('arraybuffer');\n  jsonFn.blob = makeHttpResourceFn('blob');\n  jsonFn.text = makeHttpResourceFn('text');\n  return jsonFn;\n})();\nfunction makeHttpResourceFn(responseType) {\n  return function httpResource(request, options) {\n    if (ngDevMode && !options?.injector) {\n      assertInInjectionContext(httpResource);\n    }\n    const injector = options?.injector ?? inject(Injector);\n    return new HttpResourceImpl(injector, () => normalizeRequest(request, responseType), options?.defaultValue, options?.parse, options?.equal);\n  };\n}\nfunction normalizeRequest(request, responseType) {\n  let unwrappedRequest = typeof request === 'function' ? request() : request;\n  if (unwrappedRequest === undefined) {\n    return undefined;\n  } else if (typeof unwrappedRequest === 'string') {\n    unwrappedRequest = {\n      url: unwrappedRequest\n    };\n  }\n  const headers = unwrappedRequest.headers instanceof HttpHeaders ? unwrappedRequest.headers : new HttpHeaders(unwrappedRequest.headers);\n  const params = unwrappedRequest.params instanceof HttpParams ? unwrappedRequest.params : new HttpParams({\n    fromObject: unwrappedRequest.params\n  });\n  return new HttpRequest(unwrappedRequest.method ?? 'GET', unwrappedRequest.url, unwrappedRequest.body ?? null, {\n    headers,\n    params,\n    reportProgress: unwrappedRequest.reportProgress,\n    withCredentials: unwrappedRequest.withCredentials,\n    keepalive: unwrappedRequest.keepalive,\n    cache: unwrappedRequest.cache,\n    priority: unwrappedRequest.priority,\n    mode: unwrappedRequest.mode,\n    redirect: unwrappedRequest.redirect,\n    responseType,\n    context: unwrappedRequest.context,\n    transferCache: unwrappedRequest.transferCache,\n    credentials: unwrappedRequest.credentials,\n    timeout: unwrappedRequest.timeout\n  });\n}\nclass HttpResourceImpl extends _ResourceImpl {\n  client;\n  _headers = /*#__PURE__*/linkedSignal({\n    source: this.extRequest,\n    computation: () => undefined\n  });\n  _progress = /*#__PURE__*/linkedSignal({\n    source: this.extRequest,\n    computation: () => undefined\n  });\n  _statusCode = /*#__PURE__*/linkedSignal({\n    source: this.extRequest,\n    computation: () => undefined\n  });\n  headers = /*#__PURE__*/computed(() => this.status() === 'resolved' || this.status() === 'error' ? this._headers() : undefined, ...(ngDevMode ? [{\n    debugName: \"headers\"\n  }] : []));\n  progress = /*#__PURE__*/this._progress.asReadonly();\n  statusCode = /*#__PURE__*/this._statusCode.asReadonly();\n  constructor(injector, request, defaultValue, parse, equal) {\n    super(request, ({\n      params: request,\n      abortSignal\n    }) => {\n      let sub;\n      // Track the abort listener so it can be removed if the Observable completes (as a memory\n      // optimization).\n      const onAbort = () => sub.unsubscribe();\n      abortSignal.addEventListener('abort', onAbort);\n      // Start off stream as undefined.\n      const stream = signal({\n        value: undefined\n      }, ...(ngDevMode ? [{\n        debugName: \"stream\"\n      }] : []));\n      let resolve;\n      const promise = new Promise(r => resolve = r);\n      const send = value => {\n        stream.set(value);\n        resolve?.(stream);\n        resolve = undefined;\n      };\n      sub = this.client.request(request).subscribe({\n        next: event => {\n          switch (event.type) {\n            case HttpEventType.Response:\n              this._headers.set(event.headers);\n              this._statusCode.set(event.status);\n              try {\n                send({\n                  value: parse ? parse(event.body) : event.body\n                });\n              } catch (error) {\n                send({\n                  error: _encapsulateResourceError(error)\n                });\n              }\n              break;\n            case HttpEventType.DownloadProgress:\n              this._progress.set(event);\n              break;\n          }\n        },\n        error: error => {\n          if (error instanceof HttpErrorResponse) {\n            this._headers.set(error.headers);\n            this._statusCode.set(error.status);\n          }\n          send({\n            error\n          });\n          abortSignal.removeEventListener('abort', onAbort);\n        },\n        complete: () => {\n          if (resolve) {\n            send({\n              error: new _RuntimeError(991 /* ɵRuntimeErrorCode.RESOURCE_COMPLETED_BEFORE_PRODUCING_VALUE */, ngDevMode && 'Resource completed before producing a value')\n            });\n          }\n          abortSignal.removeEventListener('abort', onAbort);\n        }\n      });\n      return promise;\n    }, defaultValue, equal, injector);\n    this.client = injector.get(HttpClient);\n  }\n  set(value) {\n    super.set(value);\n    this._headers.set(undefined);\n    this._progress.set(undefined);\n    this._statusCode.set(undefined);\n  }\n}\n\n/**\n * If your application uses different HTTP origins to make API calls (via `HttpClient`) on the server and\n * on the client, the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token allows you to establish a mapping\n * between those origins, so that `HttpTransferCache` feature can recognize those requests as the same\n * ones and reuse the data cached on the server during hydration on the client.\n *\n * **Important note**: the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token should *only* be provided in\n * the *server* code of your application (typically in the `app.server.config.ts` script). Angular throws an\n * error if it detects that the token is defined while running on the client.\n *\n * @usageNotes\n *\n * When the same API endpoint is accessed via `http://internal-domain.com:8080` on the server and\n * via `https://external-domain.com` on the client, you can use the following configuration:\n * ```ts\n * // in app.server.config.ts\n * {\n *     provide: HTTP_TRANSFER_CACHE_ORIGIN_MAP,\n *     useValue: {\n *         'http://internal-domain.com:8080': 'https://external-domain.com'\n *     }\n * }\n * ```\n *\n * @publicApi\n */\nconst HTTP_TRANSFER_CACHE_ORIGIN_MAP = /*#__PURE__*/new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_CACHE_ORIGIN_MAP' : '');\n/**\n * Keys within cached response data structure.\n */\nconst BODY = 'b';\nconst HEADERS = 'h';\nconst STATUS = 's';\nconst STATUS_TEXT = 'st';\nconst REQ_URL = 'u';\nconst RESPONSE_TYPE = 'rt';\nconst CACHE_OPTIONS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_OPTIONS' : '');\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\nfunction transferCacheInterceptorFn(req, next) {\n  const {\n    isCacheActive,\n    ...globalOptions\n  } = inject(CACHE_OPTIONS);\n  const {\n    transferCache: requestOptions,\n    method: requestMethod\n  } = req;\n  // In the following situations we do not want to cache the request\n  if (!isCacheActive || requestOptions === false ||\n  // POST requests are allowed either globally or at request level\n  requestMethod === 'POST' && !globalOptions.includePostRequests && !requestOptions || requestMethod !== 'POST' && !ALLOWED_METHODS.includes(requestMethod) ||\n  // Do not cache request that require authorization when includeRequestsWithAuthHeaders is falsey\n  !globalOptions.includeRequestsWithAuthHeaders && hasAuthHeaders(req) || globalOptions.filter?.(req) === false) {\n    return next(req);\n  }\n  const transferState = inject(TransferState);\n  const originMap = inject(HTTP_TRANSFER_CACHE_ORIGIN_MAP, {\n    optional: true\n  });\n  if (typeof ngServerMode !== 'undefined' && !ngServerMode && originMap) {\n    throw new _RuntimeError(2803 /* RuntimeErrorCode.HTTP_ORIGIN_MAP_USED_IN_CLIENT */, ngDevMode && 'Angular detected that the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token is configured and ' + 'present in the client side code. Please ensure that this token is only provided in the ' + 'server code of the application.');\n  }\n  const requestUrl = typeof ngServerMode !== 'undefined' && ngServerMode && originMap ? mapRequestOriginUrl(req.url, originMap) : req.url;\n  const storeKey = makeCacheKey(req, requestUrl);\n  const response = transferState.get(storeKey, null);\n  let headersToInclude = globalOptions.includeHeaders;\n  if (typeof requestOptions === 'object' && requestOptions.includeHeaders) {\n    // Request-specific config takes precedence over the global config.\n    headersToInclude = requestOptions.includeHeaders;\n  }\n  if (response) {\n    const {\n      [BODY]: undecodedBody,\n      [RESPONSE_TYPE]: responseType,\n      [HEADERS]: httpHeaders,\n      [STATUS]: status,\n      [STATUS_TEXT]: statusText,\n      [REQ_URL]: url\n    } = response;\n    // Request found in cache. Respond using it.\n    let body = undecodedBody;\n    switch (responseType) {\n      case 'arraybuffer':\n        body = new TextEncoder().encode(undecodedBody).buffer;\n        break;\n      case 'blob':\n        body = new Blob([undecodedBody]);\n        break;\n    }\n    // We want to warn users accessing a header provided from the cache\n    // That HttpTransferCache alters the headers\n    // The warning will be logged a single time by HttpHeaders instance\n    let headers = new HttpHeaders(httpHeaders);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Append extra logic in dev mode to produce a warning when a header\n      // that was not transferred to the client is accessed in the code via `get`\n      // and `has` calls.\n      headers = appendMissingHeadersDetection(req.url, headers, headersToInclude ?? []);\n    }\n    return of(new HttpResponse({\n      body,\n      headers,\n      status,\n      statusText,\n      url\n    }));\n  }\n  const event$ = next(req);\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // Request not found in cache. Make the request and cache it if on the server.\n    return event$.pipe(tap(event => {\n      // Only cache successful HTTP responses.\n      if (event instanceof HttpResponse) {\n        transferState.set(storeKey, {\n          [BODY]: event.body,\n          [HEADERS]: getFilteredHeaders(event.headers, headersToInclude),\n          [STATUS]: event.status,\n          [STATUS_TEXT]: event.statusText,\n          [REQ_URL]: requestUrl,\n          [RESPONSE_TYPE]: req.responseType\n        });\n      }\n    }));\n  }\n  return event$;\n}\n/** @returns true when the requests contains autorization related headers. */\nfunction hasAuthHeaders(req) {\n  return req.headers.has('authorization') || req.headers.has('proxy-authorization');\n}\nfunction getFilteredHeaders(headers, includeHeaders) {\n  if (!includeHeaders) {\n    return {};\n  }\n  const headersMap = {};\n  for (const key of includeHeaders) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n  return headersMap;\n}\nfunction sortAndConcatParams(params) {\n  return [...params.keys()].sort().map(k => `${k}=${params.getAll(k)}`).join('&');\n}\nfunction makeCacheKey(request, mappedRequestUrl) {\n  // make the params encoded same as a url so it's easy to identify\n  const {\n    params,\n    method,\n    responseType\n  } = request;\n  const encodedParams = sortAndConcatParams(params);\n  let serializedBody = request.serializeBody();\n  if (serializedBody instanceof URLSearchParams) {\n    serializedBody = sortAndConcatParams(serializedBody);\n  } else if (typeof serializedBody !== 'string') {\n    serializedBody = '';\n  }\n  const key = [method, responseType, mappedRequestUrl, serializedBody, encodedParams].join('|');\n  const hash = generateHash(key);\n  return makeStateKey(hash);\n}\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value) {\n  let hash = 0;\n  for (const char of value) {\n    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n  }\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n  return hash.toString();\n}\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nfunction withHttpTransferCache(cacheOptions) {\n  return [{\n    provide: CACHE_OPTIONS,\n    useFactory: () => {\n      _performanceMarkFeature('NgHttpTransferCache');\n      return {\n        isCacheActive: true,\n        ...cacheOptions\n      };\n    }\n  }, {\n    provide: HTTP_ROOT_INTERCEPTOR_FNS,\n    useValue: transferCacheInterceptorFn,\n    multi: true\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: () => {\n      const appRef = inject(ApplicationRef);\n      const cacheState = inject(CACHE_OPTIONS);\n      return () => {\n        appRef.whenStable().then(() => {\n          cacheState.isCacheActive = false;\n        });\n      };\n    }\n  }];\n}\n/**\n * This function will add a proxy to an HttpHeader to intercept calls to get/has\n * and log a warning if the header entry requested has been removed\n */\nfunction appendMissingHeadersDetection(url, headers, headersToInclude) {\n  const warningProduced = new Set();\n  return new Proxy(headers, {\n    get(target, prop) {\n      const value = Reflect.get(target, prop);\n      const methods = new Set(['get', 'has', 'getAll']);\n      if (typeof value !== 'function' || !methods.has(prop)) {\n        return value;\n      }\n      return headerName => {\n        // We log when the key has been removed and a warning hasn't been produced for the header\n        const key = (prop + ':' + headerName).toLowerCase(); // e.g. `get:cache-control`\n        if (!headersToInclude.includes(headerName) && !warningProduced.has(key)) {\n          warningProduced.add(key);\n          const truncatedUrl = _truncateMiddle(url);\n          // TODO: create Error guide for this warning\n          console.warn(_formatRuntimeError(2802 /* RuntimeErrorCode.HEADERS_ALTERED_BY_TRANSFER_CACHE */, `Angular detected that the \\`${headerName}\\` header is accessed, but the value of the header ` + `was not transferred from the server to the client by the HttpTransferCache. ` + `To include the value of the \\`${headerName}\\` header for the \\`${truncatedUrl}\\` request, ` + `use the \\`includeHeaders\\` list. The \\`includeHeaders\\` can be defined either ` + `on a request level by adding the \\`transferCache\\` parameter, or on an application ` + `level by adding the \\`httpCacheTransfer.includeHeaders\\` argument to the ` + `\\`provideClientHydration()\\` call. `));\n        }\n        // invoking the original method\n        return value.apply(target, [headerName]);\n      };\n    }\n  });\n}\nfunction mapRequestOriginUrl(url, originMap) {\n  const origin = new URL(url, 'resolve://').origin;\n  const mappedOrigin = originMap[origin];\n  if (!mappedOrigin) {\n    return url;\n  }\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    verifyMappedOrigin(mappedOrigin);\n  }\n  return url.replace(origin, mappedOrigin);\n}\nfunction verifyMappedOrigin(url) {\n  if (new URL(url, 'resolve://').pathname !== '/') {\n    throw new _RuntimeError(2804 /* RuntimeErrorCode.HTTP_ORIGIN_MAP_CONTAINS_PATH */, 'Angular detected a URL with a path segment in the value provided for the ' + `\\`HTTP_TRANSFER_CACHE_ORIGIN_MAP\\` token: ${url}. The map should only contain origins ` + 'without any other segments.');\n  }\n}\nexport { HTTP_TRANSFER_CACHE_ORIGIN_MAP, HttpClient, HttpErrorResponse, HttpEventType, HttpHeaders, HttpParams, HttpRequest, HttpResponse, httpResource, HTTP_ROOT_INTERCEPTOR_FNS as ɵHTTP_ROOT_INTERCEPTOR_FNS, withHttpTransferCache as ɵwithHttpTransferCache };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nexport { BrowserModule, bootstrapApplication, createApplication, platformBrowser, provideProtractorTestingSupport, BrowserDomAdapter as ɵBrowserDomAdapter, BrowserGetTestability as ɵBrowserGetTestability, DomEventsPlugin as ɵDomEventsPlugin, KeyEventsPlugin as ɵKeyEventsPlugin } from './browser.mjs';\nimport { ɵgetDOM as _getDOM, DOCUMENT } from '@angular/common';\nexport { ɵgetDOM } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ɵglobal as _global, ApplicationRef, InjectionToken, ɵConsole as _Console, Optional, Injector, NgModule, forwardRef, ɵRuntimeError as _RuntimeError, ɵXSS_SECURITY_URL as _XSS_SECURITY_URL, SecurityContext, ɵallowSanitizationBypassAndThrow as _allowSanitizationBypassAndThrow, ɵunwrapSafeValue as _unwrapSafeValue, ɵ_sanitizeUrl as __sanitizeUrl, ɵ_sanitizeHtml as __sanitizeHtml, ɵbypassSanitizationTrustHtml as _bypassSanitizationTrustHtml, ɵbypassSanitizationTrustStyle as _bypassSanitizationTrustStyle, ɵbypassSanitizationTrustScript as _bypassSanitizationTrustScript, ɵbypassSanitizationTrustUrl as _bypassSanitizationTrustUrl, ɵbypassSanitizationTrustResourceUrl as _bypassSanitizationTrustResourceUrl, ɵwithI18nSupport as _withI18nSupport, ɵwithEventReplay as _withEventReplay, ɵwithIncrementalHydration as _withIncrementalHydration, makeEnvironmentProviders, ɵwithDomHydration as _withDomHydration, ENVIRONMENT_INITIALIZER, inject, NgZone, ɵZONELESS_ENABLED as _ZONELESS_ENABLED, ɵformatRuntimeError as _formatRuntimeError, Version } from '@angular/core';\nimport { EventManagerPlugin, EVENT_MANAGER_PLUGINS } from './dom_renderer.mjs';\nexport { EventManager, REMOVE_STYLES_ON_COMPONENT_DESTROY, DomRendererFactory2 as ɵDomRendererFactory2, SharedStylesHost as ɵSharedStylesHost } from './dom_renderer.mjs';\nimport { ɵwithHttpTransferCache as _withHttpTransferCache } from '@angular/common/http';\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\nlet Meta = /*#__PURE__*/(() => {\n  class Meta {\n    _doc;\n    _dom;\n    constructor(_doc) {\n      this._doc = _doc;\n      this._dom = _getDOM();\n    }\n    /**\n     * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n     * values in the provided tag definition, and verifies that all other attribute values are equal.\n     * If an existing element is found, it is returned and is not modified in any way.\n     * @param tag The definition of a `<meta>` element to match or create.\n     * @param forceCreation True to create a new element without checking whether one already exists.\n     * @returns The existing element with the same attributes and values if found,\n     * the new element if no match is found, or `null` if the tag parameter is not defined.\n     */\n    addTag(tag, forceCreation = false) {\n      if (!tag) return null;\n      return this._getOrCreateElement(tag, forceCreation);\n    }\n    /**\n     * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n     * values in the provided tag definition, and verifies that all other attribute values are equal.\n     * @param tags An array of tag definitions to match or create.\n     * @param forceCreation True to create new elements without checking whether they already exist.\n     * @returns The matching elements if found, or the new elements.\n     */\n    addTags(tags, forceCreation = false) {\n      if (!tags) return [];\n      return tags.reduce((result, tag) => {\n        if (tag) {\n          result.push(this._getOrCreateElement(tag, forceCreation));\n        }\n        return result;\n      }, []);\n    }\n    /**\n     * Retrieves a `<meta>` tag element in the current HTML document.\n     * @param attrSelector The tag attribute and value to match against, in the format\n     * `\"tag_attribute='value string'\"`.\n     * @returns The matching element, if any.\n     */\n    getTag(attrSelector) {\n      if (!attrSelector) return null;\n      return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n    }\n    /**\n     * Retrieves a set of `<meta>` tag elements in the current HTML document.\n     * @param attrSelector The tag attribute and value to match against, in the format\n     * `\"tag_attribute='value string'\"`.\n     * @returns The matching elements, if any.\n     */\n    getTags(attrSelector) {\n      if (!attrSelector) return [];\n      const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n      return list ? [].slice.call(list) : [];\n    }\n    /**\n     * Modifies an existing `<meta>` tag element in the current HTML document.\n     * @param tag The tag description with which to replace the existing tag content.\n     * @param selector A tag attribute and value to match against, to identify\n     * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n     * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n     * replacement tag.\n     * @return The modified element.\n     */\n    updateTag(tag, selector) {\n      if (!tag) return null;\n      selector = selector || this._parseSelector(tag);\n      const meta = this.getTag(selector);\n      if (meta) {\n        return this._setMetaElementAttributes(tag, meta);\n      }\n      return this._getOrCreateElement(tag, true);\n    }\n    /**\n     * Removes an existing `<meta>` tag element from the current HTML document.\n     * @param attrSelector A tag attribute and value to match against, to identify\n     * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n     */\n    removeTag(attrSelector) {\n      this.removeTagElement(this.getTag(attrSelector));\n    }\n    /**\n     * Removes an existing `<meta>` tag element from the current HTML document.\n     * @param meta The tag definition to match against to identify an existing tag.\n     */\n    removeTagElement(meta) {\n      if (meta) {\n        this._dom.remove(meta);\n      }\n    }\n    _getOrCreateElement(meta, forceCreation = false) {\n      if (!forceCreation) {\n        const selector = this._parseSelector(meta);\n        // It's allowed to have multiple elements with the same name so it's not enough to\n        // just check that element with the same name already present on the page. We also need to\n        // check if element has tag attributes\n        const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n        if (elem !== undefined) return elem;\n      }\n      const element = this._dom.createElement('meta');\n      this._setMetaElementAttributes(meta, element);\n      const head = this._doc.getElementsByTagName('head')[0];\n      head.appendChild(element);\n      return element;\n    }\n    _setMetaElementAttributes(tag, el) {\n      Object.keys(tag).forEach(prop => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n      return el;\n    }\n    _parseSelector(tag) {\n      const attr = tag.name ? 'name' : 'property';\n      return `${attr}=\"${tag[attr]}\"`;\n    }\n    _containsAttributes(tag, elem) {\n      return Object.keys(tag).every(key => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n    }\n    _getMetaKeyMap(prop) {\n      return META_KEYS_MAP[prop] || prop;\n    }\n    static ɵfac = function Meta_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Meta)(i0.ɵɵinject(DOCUMENT));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Meta,\n      factory: Meta.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Meta;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP = {\n  httpEquiv: 'http-equiv'\n};\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\nlet Title = /*#__PURE__*/(() => {\n  class Title {\n    _doc;\n    constructor(_doc) {\n      this._doc = _doc;\n    }\n    /**\n     * Get the title of the current HTML document.\n     */\n    getTitle() {\n      return this._doc.title;\n    }\n    /**\n     * Set the title of the current HTML document.\n     * @param newTitle\n     */\n    setTitle(newTitle) {\n      this._doc.title = newTitle || '';\n    }\n    static ɵfac = function Title_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Title)(i0.ɵɵinject(DOCUMENT));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Title,\n      factory: Title.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Title;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/// <reference path=\"../../../goog.d.ts\" />\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nfunction exportNgVar(name, value) {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = _global['ng'] = _global['ng'] || {};\n    ng[name] = value;\n  }\n}\nclass ChangeDetectionPerfRecord {\n  msPerTick;\n  numTicks;\n  constructor(msPerTick, numTicks) {\n    this.msPerTick = msPerTick;\n    this.numTicks = numTicks;\n  }\n}\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nclass AngularProfiler {\n  appRef;\n  constructor(ref) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```ts\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config) {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    if (record && 'profile' in console && typeof console.profile === 'function') {\n      console.profile(profileName);\n    }\n    const start = performance.now();\n    let numTicks = 0;\n    while (numTicks < 5 || performance.now() - start < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performance.now();\n    if (record && 'profileEnd' in console && typeof console.profileEnd === 'function') {\n      console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    console.log(`ran ${numTicks} change detection cycles`);\n    console.log(`${msPerTick.toFixed(2)} ms per check`);\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\nconst PROFILER_GLOBAL_NAME = 'profiler';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nfunction enableDebugTools(ref) {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nfunction disableDebugTools() {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nclass By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all() {\n    return () => true;\n  }\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector) {\n    return debugElement => {\n      return debugElement.nativeElement != null ? elementMatches(debugElement.nativeElement, selector) : false;\n    };\n  }\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type) {\n    return debugNode => debugNode.providerTokens.indexOf(type) !== -1;\n  }\n}\nfunction elementMatches(n, selector) {\n  if (_getDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n  return false;\n}\n\n/// <reference types=\"hammerjs\" />\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see {@link HammerGestureConfig}\n *\n * @ngModule HammerModule\n * @publicApi\n *\n * @deprecated The HammerJS integration is deprecated. Replace it by your own implementation.\n */\nconst HAMMER_GESTURE_CONFIG = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'HammerGestureConfig' : '');\n/**\n * Injection token used to provide a HammerLoader to Angular.\n *\n * @see {@link HammerLoader}\n *\n * @publicApi\n *\n * @deprecated The HammerJS integration is deprecated. Replace it by your own implementation.\n */\nconst HAMMER_LOADER = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'HammerLoader' : '');\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n *\n * @deprecated The HammerJS integration is deprecated. Replace it by your own implementation.\n */\nlet HammerGestureConfig = /*#__PURE__*/(() => {\n  class HammerGestureConfig {\n    /**\n     * A set of supported event names for gestures to be used in Angular.\n     * Angular supports all built-in recognizers, as listed in\n     * [HammerJS documentation](https://hammerjs.github.io/).\n     */\n    events = [];\n    /**\n     * Maps gesture event names to a set of configuration options\n     * that specify overrides to the default values for specific properties.\n     *\n     * The key is a supported event name to be configured,\n     * and the options object contains a set of properties, with override values\n     * to be applied to the named recognizer event.\n     * For example, to disable recognition of the rotate event, specify\n     *  `{\"rotate\": {\"enable\": false}}`.\n     *\n     * Properties that are not present take the HammerJS default values.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](https://hammerjs.github.io/).\n     *\n     */\n    overrides = {};\n    /**\n     * Properties whose default values can be overridden for a given event.\n     * Different sets of properties apply to different events.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](https://hammerjs.github.io/).\n     */\n    options;\n    /**\n     * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n     * and attaches it to a given HTML element.\n     * @param element The element that will recognize gestures.\n     * @returns A HammerJS event-manager object.\n     */\n    buildHammer(element) {\n      const mc = new Hammer(element, this.options);\n      mc.get('pinch').set({\n        enable: true\n      });\n      mc.get('rotate').set({\n        enable: true\n      });\n      for (const eventName in this.overrides) {\n        mc.get(eventName).set(this.overrides[eventName]);\n      }\n      return mc;\n    }\n    static ɵfac = function HammerGestureConfig_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HammerGestureConfig)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HammerGestureConfig,\n      factory: HammerGestureConfig.ɵfac\n    });\n  }\n  return HammerGestureConfig;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\nlet HammerGesturesPlugin = /*#__PURE__*/(() => {\n  class HammerGesturesPlugin extends EventManagerPlugin {\n    _config;\n    _injector;\n    loader;\n    _loaderPromise = null;\n    constructor(doc, _config, _injector, loader) {\n      super(doc);\n      this._config = _config;\n      this._injector = _injector;\n      this.loader = loader;\n    }\n    supports(eventName) {\n      if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n        return false;\n      }\n      if (!window.Hammer && !this.loader) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Get a `Console` through an injector to tree-shake the\n          // class when it is unused in production.\n          const _console = this._injector.get(_Console);\n          _console.warn(`The \"${eventName}\" event cannot be bound because Hammer.JS is not ` + `loaded and no custom loader has been specified.`);\n        }\n        return false;\n      }\n      return true;\n    }\n    addEventListener(element, eventName, handler) {\n      const zone = this.manager.getZone();\n      eventName = eventName.toLowerCase();\n      // If Hammer is not present but a loader is specified, we defer adding the event listener\n      // until Hammer is loaded.\n      if (!window.Hammer && this.loader) {\n        this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader());\n        // This `addEventListener` method returns a function to remove the added listener.\n        // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n        // than remove anything.\n        let cancelRegistration = false;\n        let deregister = () => {\n          cancelRegistration = true;\n        };\n        zone.runOutsideAngular(() => this._loaderPromise.then(() => {\n          // If Hammer isn't actually loaded when the custom loader resolves, give up.\n          if (!window.Hammer) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n              const _console = this._injector.get(_Console);\n              _console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n            }\n            deregister = () => {};\n            return;\n          }\n          if (!cancelRegistration) {\n            // Now that Hammer is loaded and the listener is being loaded for real,\n            // the deregistration function changes from canceling registration to\n            // removal.\n            deregister = this.addEventListener(element, eventName, handler);\n          }\n        }).catch(() => {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const _console = this._injector.get(_Console);\n            _console.warn(`The \"${eventName}\" event cannot be bound because the custom ` + `Hammer.JS loader failed.`);\n          }\n          deregister = () => {};\n        }));\n        // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n        // can change the behavior of `deregister` once the listener is added. Using a closure in\n        // this way allows us to avoid any additional data structures to track listener removal.\n        return () => {\n          deregister();\n        };\n      }\n      return zone.runOutsideAngular(() => {\n        // Creating the manager bind events, must be done outside of angular\n        const mc = this._config.buildHammer(element);\n        const callback = function (eventObj) {\n          zone.runGuarded(function () {\n            handler(eventObj);\n          });\n        };\n        mc.on(eventName, callback);\n        return () => {\n          mc.off(eventName, callback);\n          // destroy mc to prevent memory leak\n          if (typeof mc.destroy === 'function') {\n            mc.destroy();\n          }\n        };\n      });\n    }\n    isCustomEvent(eventName) {\n      return this._config.events.indexOf(eventName) > -1;\n    }\n    static ɵfac = function HammerGesturesPlugin_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HammerGesturesPlugin)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(HAMMER_GESTURE_CONFIG), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(HAMMER_LOADER, 8));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HammerGesturesPlugin,\n      factory: HammerGesturesPlugin.ɵfac\n    });\n  }\n  return HammerGesturesPlugin;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's `EventManager`.\n *\n * @publicApi\n *\n * @deprecated The hammer integration is deprecated. Replace it by your own implementation.\n */\nlet HammerModule = /*#__PURE__*/(() => {\n  class HammerModule {\n    static ɵfac = function HammerModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HammerModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: HammerModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [{\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: HammerGesturesPlugin,\n        multi: true,\n        deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Injector, [new Optional(), HAMMER_LOADER]]\n      }, {\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: HammerGestureConfig\n      }]\n    });\n  }\n  return HammerModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\nlet DomSanitizer = /*#__PURE__*/(() => {\n  class DomSanitizer {\n    static ɵfac = function DomSanitizer_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DomSanitizer)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DomSanitizer,\n      factory: function DomSanitizer_Factory(__ngFactoryType__) {\n        let __ngConditionalFactory__ = null;\n        if (__ngFactoryType__) {\n          __ngConditionalFactory__ = new (__ngFactoryType__ || DomSanitizer)();\n        } else {\n          __ngConditionalFactory__ = i0.ɵɵinject(DomSanitizerImpl);\n        }\n        return __ngConditionalFactory__;\n      },\n      providedIn: 'root'\n    });\n  }\n  return DomSanitizer;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DomSanitizerImpl = /*#__PURE__*/(() => {\n  class DomSanitizerImpl extends DomSanitizer {\n    _doc;\n    constructor(_doc) {\n      super();\n      this._doc = _doc;\n    }\n    sanitize(ctx, value) {\n      if (value == null) return null;\n      switch (ctx) {\n        case SecurityContext.NONE:\n          return value;\n        case SecurityContext.HTML:\n          if (_allowSanitizationBypassAndThrow(value, \"HTML\" /* BypassType.Html */)) {\n            return _unwrapSafeValue(value);\n          }\n          return __sanitizeHtml(this._doc, String(value)).toString();\n        case SecurityContext.STYLE:\n          if (_allowSanitizationBypassAndThrow(value, \"Style\" /* BypassType.Style */)) {\n            return _unwrapSafeValue(value);\n          }\n          return value;\n        case SecurityContext.SCRIPT:\n          if (_allowSanitizationBypassAndThrow(value, \"Script\" /* BypassType.Script */)) {\n            return _unwrapSafeValue(value);\n          }\n          throw new _RuntimeError(5200 /* RuntimeErrorCode.SANITIZATION_UNSAFE_SCRIPT */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'unsafe value used in a script context');\n        case SecurityContext.URL:\n          if (_allowSanitizationBypassAndThrow(value, \"URL\" /* BypassType.Url */)) {\n            return _unwrapSafeValue(value);\n          }\n          return __sanitizeUrl(String(value));\n        case SecurityContext.RESOURCE_URL:\n          if (_allowSanitizationBypassAndThrow(value, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n            return _unwrapSafeValue(value);\n          }\n          throw new _RuntimeError(5201 /* RuntimeErrorCode.SANITIZATION_UNSAFE_RESOURCE_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `unsafe value used in a resource URL context (see ${_XSS_SECURITY_URL})`);\n        default:\n          throw new _RuntimeError(5202 /* RuntimeErrorCode.SANITIZATION_UNEXPECTED_CTX */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Unexpected SecurityContext ${ctx} (see ${_XSS_SECURITY_URL})`);\n      }\n    }\n    bypassSecurityTrustHtml(value) {\n      return _bypassSanitizationTrustHtml(value);\n    }\n    bypassSecurityTrustStyle(value) {\n      return _bypassSanitizationTrustStyle(value);\n    }\n    bypassSecurityTrustScript(value) {\n      return _bypassSanitizationTrustScript(value);\n    }\n    bypassSecurityTrustUrl(value) {\n      return _bypassSanitizationTrustUrl(value);\n    }\n    bypassSecurityTrustResourceUrl(value) {\n      return _bypassSanitizationTrustResourceUrl(value);\n    }\n    static ɵfac = function DomSanitizerImpl_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DomSanitizerImpl)(i0.ɵɵinject(DOCUMENT));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DomSanitizerImpl,\n      factory: DomSanitizerImpl.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DomSanitizerImpl;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * The list of features as an enum to uniquely type each `HydrationFeature`.\n * @see {@link HydrationFeature}\n *\n * @publicApi\n */\nvar HydrationFeatureKind = /*#__PURE__*/function (HydrationFeatureKind) {\n  HydrationFeatureKind[HydrationFeatureKind[\"NoHttpTransferCache\"] = 0] = \"NoHttpTransferCache\";\n  HydrationFeatureKind[HydrationFeatureKind[\"HttpTransferCacheOptions\"] = 1] = \"HttpTransferCacheOptions\";\n  HydrationFeatureKind[HydrationFeatureKind[\"I18nSupport\"] = 2] = \"I18nSupport\";\n  HydrationFeatureKind[HydrationFeatureKind[\"EventReplay\"] = 3] = \"EventReplay\";\n  HydrationFeatureKind[HydrationFeatureKind[\"IncrementalHydration\"] = 4] = \"IncrementalHydration\";\n  return HydrationFeatureKind;\n}(HydrationFeatureKind || {});\n/**\n * Helper function to create an object that represents a Hydration feature.\n */\nfunction hydrationFeature(ɵkind, ɵproviders = [], ɵoptions = {}) {\n  return {\n    ɵkind,\n    ɵproviders\n  };\n}\n/**\n * Disables HTTP transfer cache. Effectively causes HTTP requests to be performed twice: once on the\n * server and other one on the browser.\n *\n * @publicApi\n */\nfunction withNoHttpTransferCache() {\n  // This feature has no providers and acts as a flag that turns off\n  // HTTP transfer cache (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoHttpTransferCache);\n}\n/**\n * The function accepts an object, which allows to configure cache parameters,\n * such as which headers should be included (no headers are included by default),\n * whether POST requests should be cached or a callback function to determine if a\n * particular request should be cached.\n *\n * @publicApi\n */\nfunction withHttpTransferCacheOptions(options) {\n  // This feature has no providers and acts as a flag to pass options to the HTTP transfer cache.\n  return hydrationFeature(HydrationFeatureKind.HttpTransferCacheOptions, _withHttpTransferCache(options));\n}\n/**\n * Enables support for hydrating i18n blocks.\n *\n * @publicApi 20.0\n */\nfunction withI18nSupport() {\n  return hydrationFeature(HydrationFeatureKind.I18nSupport, _withI18nSupport());\n}\n/**\n * Enables support for replaying user events (e.g. `click`s) that happened on a page\n * before hydration logic has completed. Once an application is hydrated, all captured\n * events are replayed and relevant event listeners are executed.\n *\n * @usageNotes\n *\n * Basic example of how you can enable event replay in your application when\n * `bootstrapApplication` function is used:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration(withEventReplay())]\n * });\n * ```\n * @publicApi\n * @see {@link provideClientHydration}\n */\nfunction withEventReplay() {\n  return hydrationFeature(HydrationFeatureKind.EventReplay, _withEventReplay());\n}\n/**\n * Enables support for incremental hydration using the `hydrate` trigger syntax.\n *\n * @usageNotes\n *\n * Basic example of how you can enable incremental hydration in your application when\n * the `bootstrapApplication` function is used:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration(withIncrementalHydration())]\n * });\n * ```\n * @publicApi 20.0\n * @see {@link provideClientHydration}\n */\nfunction withIncrementalHydration() {\n  return hydrationFeature(HydrationFeatureKind.IncrementalHydration, _withIncrementalHydration());\n}\n/**\n * Returns an `ENVIRONMENT_INITIALIZER` token setup with a function\n * that verifies whether compatible ZoneJS was used in an application\n * and logs a warning in a console if it's not the case.\n */\nfunction provideZoneJsCompatibilityDetector() {\n  return [{\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      const ngZone = inject(NgZone);\n      const isZoneless = inject(_ZONELESS_ENABLED);\n      // Checking `ngZone instanceof NgZone` would be insufficient here,\n      // because custom implementations might use NgZone as a base class.\n      if (!isZoneless && ngZone.constructor !== NgZone) {\n        const console = inject(_Console);\n        const message = _formatRuntimeError(-5000 /* RuntimeErrorCode.UNSUPPORTED_ZONEJS_INSTANCE */, 'Angular detected that hydration was enabled for an application ' + 'that uses a custom or a noop Zone.js implementation. ' + 'This is not yet a fully supported configuration.');\n        console.warn(message);\n      }\n    },\n    multi: true\n  }];\n}\n/**\n * Sets up providers necessary to enable hydration functionality for the application.\n *\n * By default, the function enables the recommended set of features for the optimal\n * performance for most of the applications. It includes the following features:\n *\n * * Reconciling DOM hydration. Learn more about it [here](guide/hydration).\n * * [`HttpClient`](api/common/http/HttpClient) response caching while running on the server and\n * transferring this cache to the client to avoid extra HTTP requests. Learn more about data caching\n * [here](guide/ssr#caching-data-when-using-httpclient).\n *\n * These functions allow you to disable some of the default features or enable new ones:\n *\n * * {@link withNoHttpTransferCache} to disable HTTP transfer cache\n * * {@link withHttpTransferCacheOptions} to configure some HTTP transfer cache options\n * * {@link withI18nSupport} to enable hydration support for i18n blocks\n * * {@link withEventReplay} to enable support for replaying user events\n *\n * @usageNotes\n *\n * Basic example of how you can enable hydration in your application when\n * `bootstrapApplication` function is used:\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration()]\n * });\n * ```\n *\n * Alternatively if you are using NgModules, you would add `provideClientHydration`\n * to your root app module's provider list.\n * ```ts\n * @NgModule({\n *   declarations: [RootCmp],\n *   bootstrap: [RootCmp],\n *   providers: [provideClientHydration()],\n * })\n * export class AppModule {}\n * ```\n *\n * @see {@link withNoHttpTransferCache}\n * @see {@link withHttpTransferCacheOptions}\n * @see {@link withI18nSupport}\n * @see {@link withEventReplay}\n *\n * @param features Optional features to configure additional hydration behaviors.\n * @returns A set of providers to enable hydration.\n *\n * @publicApi 17.0\n */\nfunction provideClientHydration(...features) {\n  const providers = [];\n  const featuresKind = new Set();\n  for (const {\n    ɵproviders,\n    ɵkind\n  } of features) {\n    featuresKind.add(ɵkind);\n    if (ɵproviders.length) {\n      providers.push(ɵproviders);\n    }\n  }\n  const hasHttpTransferCacheOptions = featuresKind.has(HydrationFeatureKind.HttpTransferCacheOptions);\n  if (typeof ngDevMode !== 'undefined' && ngDevMode && featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) && hasHttpTransferCacheOptions) {\n    throw new _RuntimeError(5001 /* RuntimeErrorCode.HYDRATION_CONFLICTING_FEATURES */, 'Configuration error: found both withHttpTransferCacheOptions() and withNoHttpTransferCache() in the same call to provideClientHydration(), which is a contradiction.');\n  }\n  return makeEnvironmentProviders([typeof ngDevMode !== 'undefined' && ngDevMode ? provideZoneJsCompatibilityDetector() : [], _withDomHydration(), featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) || hasHttpTransferCacheOptions ? [] : _withHttpTransferCache({}), providers]);\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n/**\n * @publicApi\n */\nconst VERSION = /*#__PURE__*/new Version('20.1.6');\nexport { By, DomSanitizer, EVENT_MANAGER_PLUGINS, EventManagerPlugin, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerModule, HydrationFeatureKind, Meta, Title, VERSION, disableDebugTools, enableDebugTools, provideClientHydration, withEventReplay, withHttpTransferCacheOptions, withI18nSupport, withIncrementalHydration, withNoHttpTransferCache, DomSanitizerImpl as ɵDomSanitizerImpl, HammerGesturesPlugin as ɵHammerGesturesPlugin };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { ɵisPromise as _isPromise, ɵRuntimeError as _RuntimeError, Injectable, ɵisNgModule as _isNgModule, isStandalone, createEnvironmentInjector, InjectionToken, EventEmitter, input, inject, ViewContainerRef, ChangeDetectorRef, Directive, Input, Output, reflectComponentType, Component, ɵisInjectable as _isInjectable, runInInjectionContext, Compiler, NgModuleFactory, afterNextRender, EnvironmentInjector, DestroyRef, ɵConsole as _Console, ɵPendingTasksInternal as _PendingTasksInternal, ɵINTERNAL_APPLICATION_ERROR_HANDLER as _INTERNAL_APPLICATION_ERROR_HANDLER } from '@angular/core';\nimport { isObservable, from, of, BehaviorSubject, combineLatest, EmptyError, concat, defer, pipe, throwError, EMPTY, ConnectableObservable, Subject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, startWith, filter, mergeMap, first, concatMap, tap, catchError, scan, defaultIfEmpty, last as last$1, takeLast, finalize, refCount, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/platform-browser';\n\n/**\n * The primary routing outlet.\n *\n * @publicApi\n */\nconst PRIMARY_OUTLET = 'primary';\n/**\n * A private symbol used to store the value of `Route.title` inside the `Route.data` if it is a\n * static string or `Route.resolve` if anything else. This allows us to reuse the existing route\n * data/resolvers to support the title feature without new instrumentation in the `Router` pipeline.\n */\nconst RouteTitleKey = /* @__PURE__ */Symbol('RouteTitle');\nclass ParamsAsMap {\n  params;\n  constructor(params) {\n    this.params = params || {};\n  }\n  has(name) {\n    return Object.prototype.hasOwnProperty.call(this.params, name);\n  }\n  get(name) {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v[0] : v;\n    }\n    return null;\n  }\n  getAll(name) {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v : [v];\n    }\n    return [];\n  }\n  get keys() {\n    return Object.keys(this.params);\n  }\n}\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * @param params The instance to convert.\n * @returns The new map instance.\n *\n * @publicApi\n */\nfunction convertToParamMap(params) {\n  return new ParamsAsMap(params);\n}\n/**\n * Matches the route configuration (`route`) against the actual URL (`segments`).\n *\n * When no matcher is defined on a `Route`, this is the matcher used by the Router by default.\n *\n * @param segments The remaining unmatched segments in the current navigation\n * @param segmentGroup The current segment group being matched\n * @param route The `Route` to match against.\n *\n * @see {@link UrlMatchResult}\n * @see {@link Route}\n *\n * @returns The resulting match information or `null` if the `route` should not match.\n * @publicApi\n */\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\n  const parts = route.path.split('/');\n  if (parts.length > segments.length) {\n    // The actual URL is shorter than the config, no match\n    return null;\n  }\n  if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || parts.length < segments.length)) {\n    // The config is longer than the actual URL but we are looking for a full match, return null\n    return null;\n  }\n  const posParams = {};\n  // Check each config part against the actual URL\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const segment = segments[index];\n    const isParameter = part[0] === ':';\n    if (isParameter) {\n      posParams[part.substring(1)] = segment;\n    } else if (part !== segment.path) {\n      // The actual URL part does not match the config, no match\n      return null;\n    }\n  }\n  return {\n    consumed: segments.slice(0, parts.length),\n    posParams\n  };\n}\nfunction shallowEqualArrays(a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\nfunction shallowEqual(a, b) {\n  // While `undefined` should never be possible, it would sometimes be the case in IE 11\n  // and pre-chromium Edge. The check below accounts for this edge case.\n  const k1 = a ? getDataKeys(a) : undefined;\n  const k2 = b ? getDataKeys(b) : undefined;\n  if (!k1 || !k2 || k1.length != k2.length) {\n    return false;\n  }\n  let key;\n  for (let i = 0; i < k1.length; i++) {\n    key = k1[i];\n    if (!equalArraysOrString(a[key], b[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Gets the keys of an object, including `symbol` keys.\n */\nfunction getDataKeys(obj) {\n  return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];\n}\n/**\n * Test equality for arrays of strings or a string.\n */\nfunction equalArraysOrString(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    const aSorted = [...a].sort();\n    const bSorted = [...b].sort();\n    return aSorted.every((val, index) => bSorted[index] === val);\n  } else {\n    return a === b;\n  }\n}\n/**\n * Return the last element of an array.\n */\nfunction last(a) {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\nfunction wrapIntoObservable(value) {\n  if (isObservable(value)) {\n    return value;\n  }\n  if (_isPromise(value)) {\n    // Use `Promise.resolve()` to wrap promise-like instances.\n    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n    // change detection.\n    return from(Promise.resolve(value));\n  }\n  return of(value);\n}\nconst pathCompareMap = {\n  'exact': equalSegmentGroups,\n  'subset': containsSegmentGroup\n};\nconst paramCompareMap = {\n  'exact': equalParams,\n  'subset': containsParams,\n  'ignored': () => true\n};\nfunction containsTree(container, containee, options) {\n  return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === 'exact' && container.fragment !== containee.fragment);\n}\nfunction equalParams(container, containee) {\n  // TODO: This does not handle array params correctly.\n  return shallowEqual(container, containee);\n}\nfunction equalSegmentGroups(container, containee, matrixParams) {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {\n    return false;\n  }\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams)) return false;\n  }\n  return true;\n}\nfunction containsParams(container, containee) {\n  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(key => equalArraysOrString(container[key], containee[key]));\n}\nfunction containsSegmentGroup(container, containee, matrixParams) {\n  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);\n}\nfunction containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;\n    for (const c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!matrixParamsMatch(container.segments, current, matrixParams)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);\n  }\n}\nfunction matrixParamsMatch(containerPaths, containeePaths, options) {\n  return containeePaths.every((containeeSegment, i) => {\n    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);\n  });\n}\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass UrlTree {\n  root;\n  queryParams;\n  fragment;\n  /** @internal */\n  _queryParamMap;\n  constructor(/** The root segment group of the URL tree */\n  root = new UrlSegmentGroup([], {}), /** The query params of the URL */\n  queryParams = {}, /** The fragment of the URL */\n  fragment = null) {\n    this.root = root;\n    this.queryParams = queryParams;\n    this.fragment = fragment;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (root.segments.length > 0) {\n        throw new _RuntimeError(4015 /* RuntimeErrorCode.INVALID_ROOT_URL_SEGMENT */, 'The root `UrlSegmentGroup` should not contain `segments`. ' + 'Instead, these segments belong in the `children` so they can be associated with a named outlet.');\n      }\n    }\n  }\n  get queryParamMap() {\n    this._queryParamMap ??= convertToParamMap(this.queryParams);\n    return this._queryParamMap;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return DEFAULT_SERIALIZER.serialize(this);\n  }\n}\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * @publicApi\n */\nclass UrlSegmentGroup {\n  segments;\n  children;\n  /** The parent node in the url tree */\n  parent = null;\n  constructor(/** The URL segments of this group. See `UrlSegment` for more information */\n  segments, /** The list of children of this group */\n  children) {\n    this.segments = segments;\n    this.children = children;\n    Object.values(children).forEach(v => v.parent = this);\n  }\n  /** Whether the segment has child segments */\n  hasChildren() {\n    return this.numberOfChildren > 0;\n  }\n  /** Number of child segments */\n  get numberOfChildren() {\n    return Object.keys(this.children).length;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return serializePaths(this);\n  }\n}\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass UrlSegment {\n  path;\n  parameters;\n  /** @internal */\n  _parameterMap;\n  constructor(/** The path part of a URL segment */\n  path, /** The matrix parameters associated with a segment */\n  parameters) {\n    this.path = path;\n    this.parameters = parameters;\n  }\n  get parameterMap() {\n    this._parameterMap ??= convertToParamMap(this.parameters);\n    return this._parameterMap;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return serializePath(this);\n  }\n}\nfunction equalSegments(as, bs) {\n  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\nfunction equalPath(as, bs) {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path);\n}\nfunction mapChildrenIntoArray(segment, fn) {\n  let res = [];\n  Object.entries(segment.children).forEach(([childOutlet, child]) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  Object.entries(segment.children).forEach(([childOutlet, child]) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * @publicApi\n */\nlet UrlSerializer = /*#__PURE__*/(() => {\n  class UrlSerializer {\n    static ɵfac = function UrlSerializer_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UrlSerializer)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: UrlSerializer,\n      factory: () => (() => new DefaultUrlSerializer())(),\n      providedIn: 'root'\n    });\n  }\n  return UrlSerializer;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * @publicApi\n */\nclass DefaultUrlSerializer {\n  /** Parses a url into a `UrlTree` */\n  parse(url) {\n    const p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n  /** Converts a `UrlTree` into a url */\n  serialize(tree) {\n    const segment = `/${serializeSegment(tree.root, true)}`;\n    const query = serializeQueryParams(tree.queryParams);\n    const fragment = typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment)}` : '';\n    return `${segment}${query}${fragment}`;\n  }\n}\nconst DEFAULT_SERIALIZER = /*#__PURE__*/new DefaultUrlSerializer();\nfunction serializePaths(segment) {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\nfunction serializeSegment(segment, root) {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n  if (root) {\n    const primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : '';\n    const children = [];\n    Object.entries(segment.children).forEach(([k, v]) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n  } else {\n    const children = mapChildrenIntoArray(segment, (v, k) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n      return [`${k}:${serializeSegment(v, false)}`];\n    });\n    // use no parenthesis if the only child is a primary outlet route\n    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {\n      return `${serializePaths(segment)}/${children[0]}`;\n    }\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n */\nfunction encodeUriString(s) {\n  return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');\n}\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriQuery(s) {\n  return encodeUriString(s).replace(/%3B/gi, ';');\n}\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriFragment(s) {\n  return encodeURI(s);\n}\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriSegment(s) {\n  return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\nfunction decode(s) {\n  return decodeURIComponent(s);\n}\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\nfunction decodeQuery(s) {\n  return decode(s.replace(/\\+/g, '%20'));\n}\nfunction serializePath(path) {\n  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\nfunction serializeMatrixParams(params) {\n  return Object.entries(params).map(([key, value]) => `;${encodeUriSegment(key)}=${encodeUriSegment(value)}`).join('');\n}\nfunction serializeQueryParams(params) {\n  const strParams = Object.entries(params).map(([name, value]) => {\n    return Array.isArray(value) ? value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n  }).filter(s => s);\n  return strParams.length ? `?${strParams.join('&')}` : '';\n}\nconst SEGMENT_RE = /^[^\\/()?;#]+/;\nfunction matchSegments(str) {\n  const match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\nconst MATRIX_PARAM_SEGMENT_RE = /^[^\\/()?;=#]+/;\nfunction matchMatrixKeySegments(str) {\n  const match = str.match(MATRIX_PARAM_SEGMENT_RE);\n  return match ? match[0] : '';\n}\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\nfunction matchQueryParams(str) {\n  const match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\nconst QUERY_PARAM_VALUE_RE = /^[^&#]+/;\n// Return the value of the query param at the start of the string or an empty string\nfunction matchUrlQueryParamValue(str) {\n  const match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\nclass UrlParser {\n  url;\n  remaining;\n  constructor(url) {\n    this.url = url;\n    this.remaining = url;\n  }\n  parseRootSegment() {\n    this.consumeOptional('/');\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n    // The root segment group never has segments\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n  parseQueryParams() {\n    const params = {};\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n    return params;\n  }\n  parseFragment() {\n    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n  }\n  parseChildren() {\n    if (this.remaining === '') {\n      return {};\n    }\n    this.consumeOptional('/');\n    const segments = [];\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n    let children = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n    let res = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n    return res;\n  }\n  // parse a segment with its matrix parameters\n  // ie `name;k1=v1;k2`\n  parseSegment() {\n    const path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new _RuntimeError(4009 /* RuntimeErrorCode.EMPTY_PATH_WITH_PARAMS */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n  parseMatrixParams() {\n    const params = {};\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n    return params;\n  }\n  parseParam(params) {\n    const key = matchMatrixKeySegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n    params[decode(key)] = decode(value);\n  }\n  // Parse a single query parameter `name[=value]`\n  parseQueryParam(params) {\n    const key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n    const decodedKey = decodeQuery(key);\n    const decodedVal = decodeQuery(value);\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n  // parse `(a/b//outlet_name:c/d)`\n  parseParens(allowPrimary) {\n    const segments = {};\n    this.capture('(');\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      const path = matchSegments(this.remaining);\n      const next = this.remaining[path.length];\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new _RuntimeError(4010 /* RuntimeErrorCode.UNPARSABLE_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot parse url '${this.url}'`);\n      }\n      let outletName = undefined;\n      if (path.indexOf(':') > -1) {\n        outletName = path.slice(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n      const children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n    return segments;\n  }\n  peekStartsWith(str) {\n    return this.remaining.startsWith(str);\n  }\n  // Consumes the prefix when it is present and returns whether it has been consumed\n  consumeOptional(str) {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n    return false;\n  }\n  capture(str) {\n    if (!this.consumeOptional(str)) {\n      throw new _RuntimeError(4011 /* RuntimeErrorCode.UNEXPECTED_VALUE_IN_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Expected \"${str}\".`);\n    }\n  }\n}\nfunction createRoot(rootCandidate) {\n  return rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], {\n    [PRIMARY_OUTLET]: rootCandidate\n  }) : rootCandidate;\n}\n/**\n * Recursively\n * - merges primary segment children into their parents\n * - drops empty children (those which have no segments and no children themselves). This latter\n * prevents serializing a group into something like `/a(aux:)`, where `aux` is an empty child\n * segment.\n * - merges named outlets without a primary segment sibling into the children. This prevents\n * serializing a URL like `//(a:a)(b:b) instead of `/(a:a//b:b)` when the aux b route lives on the\n * root but the `a` route lives under an empty path primary route.\n */\nfunction squashSegmentGroup(segmentGroup) {\n  const newChildren = {};\n  for (const [childOutlet, child] of Object.entries(segmentGroup.children)) {\n    const childCandidate = squashSegmentGroup(child);\n    // moves named children in an empty path primary child into this group\n    if (childOutlet === PRIMARY_OUTLET && childCandidate.segments.length === 0 && childCandidate.hasChildren()) {\n      for (const [grandChildOutlet, grandChild] of Object.entries(childCandidate.children)) {\n        newChildren[grandChildOutlet] = grandChild;\n      }\n    } // don't add empty children\n    else if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {\n      newChildren[childOutlet] = childCandidate;\n    }\n  }\n  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);\n  return mergeTrivialChildren(s);\n}\n/**\n * When possible, merges the primary outlet child into the parent `UrlSegmentGroup`.\n *\n * When a segment group has only one child which is a primary outlet, merges that child into the\n * parent. That is, the child segment group's segments are merged into the `s` and the child's\n * children become the children of `s`. Think of this like a 'squash', merging the child segment\n * group into the parent.\n */\nfunction mergeTrivialChildren(s) {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n  return s;\n}\nfunction isUrlTree(v) {\n  return v instanceof UrlTree;\n}\n\n/**\n * Creates a `UrlTree` relative to an `ActivatedRouteSnapshot`.\n *\n * @publicApi\n *\n *\n * @param relativeTo The `ActivatedRouteSnapshot` to apply the commands to\n * @param commands An array of URL fragments with which to construct the new URL tree.\n * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n * segments, followed by the parameters for each segment.\n * The fragments are applied to the one provided in the `relativeTo` parameter.\n * @param queryParams The query parameters for the `UrlTree`. `null` if the `UrlTree` does not have\n *     any query parameters.\n * @param fragment The fragment for the `UrlTree`. `null` if the `UrlTree` does not have a fragment.\n *\n * @usageNotes\n *\n * ```ts\n * // create /team/33/user/11\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, 'user', 11]);\n *\n * // create /team/33;expand=true/user/11\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {expand: true}, 'user', 11]);\n *\n * // you can collapse static segments like this (this works only with the first passed-in value):\n * createUrlTreeFromSnapshot(snapshot, ['/team/33/user', userId]);\n *\n * // If the first segment can contain slashes, and you do not want the router to split it,\n * // you can do the following:\n * createUrlTreeFromSnapshot(snapshot, [{segmentPath: '/one/two'}]);\n *\n * // create /team/33/(user/11//right:chat)\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {outlets: {primary: 'user/11', right:\n * 'chat'}}], null, null);\n *\n * // remove the right secondary node\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n *\n * // For the examples below, assume the current URL is for the `/team/33/user/11` and the\n * `ActivatedRouteSnapshot` points to `user/11`:\n *\n * // navigate to /team/33/user/11/details\n * createUrlTreeFromSnapshot(snapshot, ['details']);\n *\n * // navigate to /team/33/user/22\n * createUrlTreeFromSnapshot(snapshot, ['../22']);\n *\n * // navigate to /team/44/user/22\n * createUrlTreeFromSnapshot(snapshot, ['../../team/44/user/22']);\n * ```\n */\nfunction createUrlTreeFromSnapshot(relativeTo, commands, queryParams = null, fragment = null) {\n  const relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeTo);\n  return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, queryParams, fragment);\n}\nfunction createSegmentGroupFromRoute(route) {\n  let targetGroup;\n  function createSegmentGroupFromRouteRecursive(currentRoute) {\n    const childOutlets = {};\n    for (const childSnapshot of currentRoute.children) {\n      const root = createSegmentGroupFromRouteRecursive(childSnapshot);\n      childOutlets[childSnapshot.outlet] = root;\n    }\n    const segmentGroup = new UrlSegmentGroup(currentRoute.url, childOutlets);\n    if (currentRoute === route) {\n      targetGroup = segmentGroup;\n    }\n    return segmentGroup;\n  }\n  const rootCandidate = createSegmentGroupFromRouteRecursive(route.root);\n  const rootSegmentGroup = createRoot(rootCandidate);\n  return targetGroup ?? rootSegmentGroup;\n}\nfunction createUrlTreeFromSegmentGroup(relativeTo, commands, queryParams, fragment) {\n  let root = relativeTo;\n  while (root.parent) {\n    root = root.parent;\n  }\n  // There are no commands so the `UrlTree` goes to the same path as the one created from the\n  // `UrlSegmentGroup`. All we need to do is update the `queryParams` and `fragment` without\n  // applying any other logic.\n  if (commands.length === 0) {\n    return tree(root, root, root, queryParams, fragment);\n  }\n  const nav = computeNavigation(commands);\n  if (nav.toRoot()) {\n    return tree(root, root, new UrlSegmentGroup([], {}), queryParams, fragment);\n  }\n  const position = findStartingPositionForTargetGroup(nav, root, relativeTo);\n  const newSegmentGroup = position.processChildren ? updateSegmentGroupChildren(position.segmentGroup, position.index, nav.commands) : updateSegmentGroup(position.segmentGroup, position.index, nav.commands);\n  return tree(root, position.segmentGroup, newSegmentGroup, queryParams, fragment);\n}\nfunction isMatrixParams(command) {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * Determines if a given command has an `outlets` map. When we encounter a command\n * with an outlets k/v map, we need to apply each outlet individually to the existing segment.\n */\nfunction isCommandWithOutlets(command) {\n  return typeof command === 'object' && command != null && command.outlets;\n}\nfunction tree(oldRoot, oldSegmentGroup, newSegmentGroup, queryParams, fragment) {\n  let qp = {};\n  if (queryParams) {\n    Object.entries(queryParams).forEach(([name, value]) => {\n      qp[name] = Array.isArray(value) ? value.map(v => `${v}`) : `${value}`;\n    });\n  }\n  let rootCandidate;\n  if (oldRoot === oldSegmentGroup) {\n    rootCandidate = newSegmentGroup;\n  } else {\n    rootCandidate = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);\n  }\n  const newRoot = createRoot(squashSegmentGroup(rootCandidate));\n  return new UrlTree(newRoot, qp, fragment);\n}\n/**\n * Replaces the `oldSegment` which is located in some child of the `current` with the `newSegment`.\n * This also has the effect of creating new `UrlSegmentGroup` copies to update references. This\n * shouldn't be necessary but the fallback logic for an invalid ActivatedRoute in the creation uses\n * the Router's current url tree. If we don't create new segment groups, we end up modifying that\n * value.\n */\nfunction replaceSegment(current, oldSegment, newSegment) {\n  const children = {};\n  Object.entries(current.children).forEach(([outletName, c]) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n  isAbsolute;\n  numberOfDoubleDots;\n  commands;\n  constructor(isAbsolute, numberOfDoubleDots, commands) {\n    this.isAbsolute = isAbsolute;\n    this.numberOfDoubleDots = numberOfDoubleDots;\n    this.commands = commands;\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new _RuntimeError(4003 /* RuntimeErrorCode.ROOT_SEGMENT_MATRIX_PARAMS */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Root segment cannot have matrix parameters');\n    }\n    const cmdWithOutlet = commands.find(isCommandWithOutlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new _RuntimeError(4004 /* RuntimeErrorCode.MISPLACED_OUTLETS_COMMAND */, (typeof ngDevMode === 'undefined' || ngDevMode) && '{outlets:{}} has to be the last command');\n    }\n  }\n  toRoot() {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n/** Transforms commands to a normalized `Navigation` */\nfunction computeNavigation(commands) {\n  if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n  let numberOfDoubleDots = 0;\n  let isAbsolute = false;\n  const res = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const outlets = {};\n        Object.entries(cmd.outlets).forEach(([name, commands]) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {\n          outlets\n        }];\n      }\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') ;else if (partIndex == 0 && urlPart === '') {\n          //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {\n          //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n      return res;\n    }\n    return [...res, cmd];\n  }, []);\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n  segmentGroup;\n  processChildren;\n  index;\n  constructor(segmentGroup, processChildren, index) {\n    this.segmentGroup = segmentGroup;\n    this.processChildren = processChildren;\n    this.index = index;\n  }\n}\nfunction findStartingPositionForTargetGroup(nav, root, target) {\n  if (nav.isAbsolute) {\n    return new Position(root, true, 0);\n  }\n  if (!target) {\n    // `NaN` is used only to maintain backwards compatibility with incorrectly mocked\n    // `ActivatedRouteSnapshot` in tests. In prior versions of this code, the position here was\n    // determined based on an internal property that was rarely mocked, resulting in `NaN`. In\n    // reality, this code path should _never_ be touched since `target` is not allowed to be falsey.\n    return new Position(root, false, NaN);\n  }\n  if (target.parent === null) {\n    return new Position(target, true, 0);\n  }\n  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const index = target.segments.length - 1 + modifier;\n  return createPositionApplyingDoubleDots(target, index, nav.numberOfDoubleDots);\n}\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n  let g = group;\n  let ci = index;\n  let dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent;\n    if (!g) {\n      throw new _RuntimeError(4005 /* RuntimeErrorCode.INVALID_DOUBLE_DOTS */, (typeof ngDevMode === 'undefined' || ngDevMode) && \"Invalid number of '../'\");\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\nfunction getOutlets(commands) {\n  if (isCommandWithOutlets(commands[0])) {\n    return commands[0].outlets;\n  }\n  return {\n    [PRIMARY_OUTLET]: commands\n  };\n}\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n  segmentGroup ??= new UrlSegmentGroup([], {});\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n  const m = prefixedWith(segmentGroup, startIndex, commands);\n  const slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const outlets = getOutlets(commands);\n    const children = {};\n    // If the set of commands applies to anything other than the primary outlet and the child\n    // segment is an empty path primary segment on its own, we want to apply the commands to the\n    // empty child path rather than here. The outcome is that the empty primary child is effectively\n    // removed from the final output UrlTree. Imagine the following config:\n    //\n    // {path: '', children: [{path: '**', outlet: 'popup'}]}.\n    //\n    // Navigation to /(popup:a) will activate the child outlet correctly Given a follow-up\n    // navigation with commands\n    // ['/', {outlets: {'popup': 'b'}}], we _would not_ want to apply the outlet commands to the\n    // root segment because that would result in\n    // //(popup:a)(popup:b) since the outlet command got applied one level above where it appears in\n    // the `ActivatedRoute` rather than updating the existing one.\n    //\n    // Because empty paths do not appear in the URL segments and the fact that the segments used in\n    // the output `UrlTree` are squashed to eliminate these empty paths where possible\n    // https://github.com/angular/angular/blob/13f10de40e25c6900ca55bd83b36bd533dacfa9e/packages/router/src/url_tree.ts#L755\n    // it can be hard to determine what is the right thing to do when applying commands to a\n    // `UrlSegmentGroup` that is created from an \"unsquashed\"/expanded `ActivatedRoute` tree.\n    // This code effectively \"squashes\" empty path primary routes when they have no siblings on\n    // the same level of the tree.\n    if (Object.keys(outlets).some(o => o !== PRIMARY_OUTLET) && segmentGroup.children[PRIMARY_OUTLET] && segmentGroup.numberOfChildren === 1 && segmentGroup.children[PRIMARY_OUTLET].segments.length === 0) {\n      const childrenOfEmptyChild = updateSegmentGroupChildren(segmentGroup.children[PRIMARY_OUTLET], startIndex, commands);\n      return new UrlSegmentGroup(segmentGroup.segments, childrenOfEmptyChild.children);\n    }\n    Object.entries(outlets).forEach(([outlet, commands]) => {\n      if (typeof commands === 'string') {\n        commands = [commands];\n      }\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n    Object.entries(segmentGroup.children).forEach(([childOutlet, child]) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n  let currentCommandIndex = 0;\n  let currentPathIndex = startIndex;\n  const noMatch = {\n    match: false,\n    pathIndex: 0,\n    commandIndex: 0\n  };\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const path = segmentGroup.segments[currentPathIndex];\n    const command = commands[currentCommandIndex];\n    // Do not try to consume command as part of the prefixing if it has outlets because it can\n    // contain outlets other than the one being processed. Consuming the outlets command would\n    // result in other outlets being ignored.\n    if (isCommandWithOutlets(command)) {\n      break;\n    }\n    const curr = `${command}`;\n    const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n    if (currentPathIndex > 0 && curr === undefined) break;\n    if (curr && next && typeof next === 'object' && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n  return {\n    match: true,\n    pathIndex: currentPathIndex,\n    commandIndex: currentCommandIndex\n  };\n}\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n  const paths = segmentGroup.segments.slice(0, startIndex);\n  let i = 0;\n  while (i < commands.length) {\n    const command = commands[i];\n    if (isCommandWithOutlets(command)) {\n      const children = createNewSegmentChildren(command.outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, stringify(commands[0])));\n      i++;\n      continue;\n    }\n    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;\n    const next = i < commands.length - 1 ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\nfunction createNewSegmentChildren(outlets) {\n  const children = {};\n  Object.entries(outlets).forEach(([outlet, commands]) => {\n    if (typeof commands === 'string') {\n      commands = [commands];\n    }\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\nfunction stringify(params) {\n  const res = {};\n  Object.entries(params).forEach(([k, v]) => res[k] = `${v}`);\n  return res;\n}\nfunction compare(path, params, segment) {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\nconst IMPERATIVE_NAVIGATION = 'imperative';\n/**\n * Identifies the type of a router event.\n *\n * @publicApi\n */\nvar EventType = /*#__PURE__*/function (EventType) {\n  EventType[EventType[\"NavigationStart\"] = 0] = \"NavigationStart\";\n  EventType[EventType[\"NavigationEnd\"] = 1] = \"NavigationEnd\";\n  EventType[EventType[\"NavigationCancel\"] = 2] = \"NavigationCancel\";\n  EventType[EventType[\"NavigationError\"] = 3] = \"NavigationError\";\n  EventType[EventType[\"RoutesRecognized\"] = 4] = \"RoutesRecognized\";\n  EventType[EventType[\"ResolveStart\"] = 5] = \"ResolveStart\";\n  EventType[EventType[\"ResolveEnd\"] = 6] = \"ResolveEnd\";\n  EventType[EventType[\"GuardsCheckStart\"] = 7] = \"GuardsCheckStart\";\n  EventType[EventType[\"GuardsCheckEnd\"] = 8] = \"GuardsCheckEnd\";\n  EventType[EventType[\"RouteConfigLoadStart\"] = 9] = \"RouteConfigLoadStart\";\n  EventType[EventType[\"RouteConfigLoadEnd\"] = 10] = \"RouteConfigLoadEnd\";\n  EventType[EventType[\"ChildActivationStart\"] = 11] = \"ChildActivationStart\";\n  EventType[EventType[\"ChildActivationEnd\"] = 12] = \"ChildActivationEnd\";\n  EventType[EventType[\"ActivationStart\"] = 13] = \"ActivationStart\";\n  EventType[EventType[\"ActivationEnd\"] = 14] = \"ActivationEnd\";\n  EventType[EventType[\"Scroll\"] = 15] = \"Scroll\";\n  EventType[EventType[\"NavigationSkipped\"] = 16] = \"NavigationSkipped\";\n  return EventType;\n}(EventType || {});\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * The following code shows how a class subscribes to router events.\n *\n * ```ts\n * import {Event, RouterEvent, Router} from '@angular/router';\n *\n * class MyService {\n *   constructor(public router: Router) {\n *     router.events.pipe(\n *        filter((e: Event | RouterEvent): e is RouterEvent => e instanceof RouterEvent)\n *     ).subscribe((e: RouterEvent) => {\n *       // Do something\n *     });\n *   }\n * }\n * ```\n *\n * @see {@link Event}\n * @see [Router events summary](guide/routing/router-reference#router-events)\n * @publicApi\n */\nclass RouterEvent {\n  id;\n  url;\n  constructor(/** A unique ID that the router assigns to every router navigation. */\n  id, /** The URL that is the destination for this navigation. */\n  url) {\n    this.id = id;\n    this.url = url;\n  }\n}\n/**\n * An event triggered when a navigation starts.\n *\n * @publicApi\n */\nclass NavigationStart extends RouterEvent {\n  type = EventType.NavigationStart;\n  /**\n   * Identifies the call or event that triggered the navigation.\n   * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.\n   *\n   * @see {@link NavigationEnd}\n   * @see {@link NavigationCancel}\n   * @see {@link NavigationError}\n   */\n  navigationTrigger;\n  /**\n   * The navigation state that was previously supplied to the `pushState` call,\n   * when the navigation is triggered by a `popstate` event. Otherwise null.\n   *\n   * The state object is defined by `NavigationExtras`, and contains any\n   * developer-defined state value, as well as a unique ID that\n   * the router assigns to every router transition/navigation.\n   *\n   * From the perspective of the router, the router never \"goes back\".\n   * When the user clicks on the back button in the browser,\n   * a new navigation ID is created.\n   *\n   * Use the ID in this previous-state object to differentiate between a newly created\n   * state and one returned to by a `popstate` event, so that you can restore some\n   * remembered state, such as scroll position.\n   *\n   */\n  restoredState;\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  navigationTrigger = 'imperative', /** @docsNotRequired */\n  restoredState = null) {\n    super(id, url);\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n/**\n * An event triggered when a navigation ends successfully.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationCancel}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nclass NavigationEnd extends RouterEvent {\n  urlAfterRedirects;\n  type = EventType.NavigationEnd;\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n/**\n * A code for the `NavigationCancel` event of the `Router` to indicate the\n * reason a navigation failed.\n *\n * @publicApi\n */\nvar NavigationCancellationCode = /*#__PURE__*/function (NavigationCancellationCode) {\n  /**\n   * A navigation failed because a guard returned a `UrlTree` to redirect.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"Redirect\"] = 0] = \"Redirect\";\n  /**\n   * A navigation failed because a more recent navigation started.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"SupersededByNewNavigation\"] = 1] = \"SupersededByNewNavigation\";\n  /**\n   * A navigation failed because one of the resolvers completed without emitting a value.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"NoDataFromResolver\"] = 2] = \"NoDataFromResolver\";\n  /**\n   * A navigation failed because a guard returned `false`.\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"GuardRejected\"] = 3] = \"GuardRejected\";\n  /**\n   * A navigation was aborted by the `Navigation.abort` function.\n   *\n   * @see {@link Navigation}\n   */\n  NavigationCancellationCode[NavigationCancellationCode[\"Aborted\"] = 4] = \"Aborted\";\n  return NavigationCancellationCode;\n}(NavigationCancellationCode || {});\n/**\n * A code for the `NavigationSkipped` event of the `Router` to indicate the\n * reason a navigation was skipped.\n *\n * @publicApi\n */\nvar NavigationSkippedCode = /*#__PURE__*/function (NavigationSkippedCode) {\n  /**\n   * A navigation was skipped because the navigation URL was the same as the current Router URL.\n   */\n  NavigationSkippedCode[NavigationSkippedCode[\"IgnoredSameUrlNavigation\"] = 0] = \"IgnoredSameUrlNavigation\";\n  /**\n   * A navigation was skipped because the configured `UrlHandlingStrategy` return `false` for both\n   * the current Router URL and the target of the navigation.\n   *\n   * @see {@link UrlHandlingStrategy}\n   */\n  NavigationSkippedCode[NavigationSkippedCode[\"IgnoredByUrlHandlingStrategy\"] = 1] = \"IgnoredByUrlHandlingStrategy\";\n  return NavigationSkippedCode;\n}(NavigationSkippedCode || {});\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n * This can happen for several reasons including when a route guard\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nclass NavigationCancel extends RouterEvent {\n  reason;\n  code;\n  type = EventType.NavigationCancel;\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url,\n  /**\n   * A description of why the navigation was cancelled. For debug purposes only. Use `code`\n   * instead for a stable cancellation reason that can be used in production.\n   */\n  reason,\n  /**\n   * A code to indicate why the navigation was canceled. This cancellation code is stable for\n   * the reason and can be relied on whereas the `reason` string could change and should not be\n   * used in production.\n   */\n  code) {\n    super(id, url);\n    this.reason = reason;\n    this.code = code;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n/**\n * An event triggered when a navigation is skipped.\n * This can happen for a couple reasons including onSameUrlHandling\n * is set to `ignore` and the navigation URL is not different than the\n * current state.\n *\n * @publicApi\n */\nclass NavigationSkipped extends RouterEvent {\n  reason;\n  code;\n  type = EventType.NavigationSkipped;\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url,\n  /**\n   * A description of why the navigation was skipped. For debug purposes only. Use `code`\n   * instead for a stable skipped reason that can be used in production.\n   */\n  reason,\n  /**\n   * A code to indicate why the navigation was skipped. This code is stable for\n   * the reason and can be relied on whereas the `reason` string could change and should not be\n   * used in production.\n   */\n  code) {\n    super(id, url);\n    this.reason = reason;\n    this.code = code;\n  }\n}\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationCancel}\n *\n * @publicApi\n */\nclass NavigationError extends RouterEvent {\n  error;\n  target;\n  type = EventType.NavigationError;\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  error,\n  /**\n   * The target of the navigation when the error occurred.\n   *\n   * Note that this can be `undefined` because an error could have occurred before the\n   * `RouterStateSnapshot` was created for the navigation.\n   */\n  target) {\n    super(id, url);\n    this.error = error;\n    this.target = target;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n/**\n * An event triggered when routes are recognized.\n *\n * @publicApi\n */\nclass RoutesRecognized extends RouterEvent {\n  urlAfterRedirects;\n  state;\n  type = EventType.RoutesRecognized;\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  /** @docsNotRequired */\n  toString() {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * @see {@link GuardsCheckEnd}\n *\n * @publicApi\n */\nclass GuardsCheckStart extends RouterEvent {\n  urlAfterRedirects;\n  state;\n  type = EventType.GuardsCheckStart;\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  toString() {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * @see {@link GuardsCheckStart}\n *\n * @publicApi\n */\nclass GuardsCheckEnd extends RouterEvent {\n  urlAfterRedirects;\n  state;\n  shouldActivate;\n  type = EventType.GuardsCheckEnd;\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state, /** @docsNotRequired */\n  shouldActivate) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n    this.shouldActivate = shouldActivate;\n  }\n  toString() {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n/**\n * An event triggered at the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * @see {@link ResolveEnd}\n *\n * @publicApi\n */\nclass ResolveStart extends RouterEvent {\n  urlAfterRedirects;\n  state;\n  type = EventType.ResolveStart;\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  toString() {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ResolveEnd extends RouterEvent {\n  urlAfterRedirects;\n  state;\n  type = EventType.ResolveEnd;\n  constructor(/** @docsNotRequired */\n  id, /** @docsNotRequired */\n  url, /** @docsNotRequired */\n  urlAfterRedirects, /** @docsNotRequired */\n  state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  toString() {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * @see {@link RouteConfigLoadEnd}\n *\n * @publicApi\n */\nclass RouteConfigLoadStart {\n  route;\n  type = EventType.RouteConfigLoadStart;\n  constructor(/** @docsNotRequired */\n  route) {\n    this.route = route;\n  }\n  toString() {\n    return `RouteConfigLoadStart(path: ${this.route.path})`;\n  }\n}\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * @see {@link RouteConfigLoadStart}\n *\n * @publicApi\n */\nclass RouteConfigLoadEnd {\n  route;\n  type = EventType.RouteConfigLoadEnd;\n  constructor(/** @docsNotRequired */\n  route) {\n    this.route = route;\n  }\n  toString() {\n    return `RouteConfigLoadEnd(path: ${this.route.path})`;\n  }\n}\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see {@link ChildActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ChildActivationStart {\n  snapshot;\n  type = EventType.ChildActivationStart;\n  constructor(/** @docsNotRequired */\n  snapshot) {\n    this.snapshot = snapshot;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n}\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see {@link ChildActivationStart}\n * @see {@link ResolveStart}\n * @publicApi\n */\nclass ChildActivationEnd {\n  snapshot;\n  type = EventType.ChildActivationEnd;\n  constructor(/** @docsNotRequired */\n  snapshot) {\n    this.snapshot = snapshot;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n}\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ActivationStart {\n  snapshot;\n  type = EventType.ActivationStart;\n  constructor(/** @docsNotRequired */\n  snapshot) {\n    this.snapshot = snapshot;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n}\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationStart}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nclass ActivationEnd {\n  snapshot;\n  type = EventType.ActivationEnd;\n  constructor(/** @docsNotRequired */\n  snapshot) {\n    this.snapshot = snapshot;\n  }\n  toString() {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n}\n/**\n * An event triggered by scrolling.\n *\n * @publicApi\n */\nclass Scroll {\n  routerEvent;\n  position;\n  anchor;\n  type = EventType.Scroll;\n  constructor(/** @docsNotRequired */\n  routerEvent, /** @docsNotRequired */\n  position, /** @docsNotRequired */\n  anchor) {\n    this.routerEvent = routerEvent;\n    this.position = position;\n    this.anchor = anchor;\n  }\n  toString() {\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n}\nclass BeforeActivateRoutes {}\nclass RedirectRequest {\n  url;\n  navigationBehaviorOptions;\n  constructor(url, navigationBehaviorOptions) {\n    this.url = url;\n    this.navigationBehaviorOptions = navigationBehaviorOptions;\n  }\n}\nfunction isPublicRouterEvent(e) {\n  return !(e instanceof BeforeActivateRoutes) && !(e instanceof RedirectRequest);\n}\nfunction stringifyEvent(routerEvent) {\n  switch (routerEvent.type) {\n    case EventType.ActivationEnd:\n      return `ActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ActivationStart:\n      return `ActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ChildActivationEnd:\n      return `ChildActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ChildActivationStart:\n      return `ChildActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.GuardsCheckEnd:\n      return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;\n    case EventType.GuardsCheckStart:\n      return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.NavigationCancel:\n      return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.NavigationSkipped:\n      return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.NavigationEnd:\n      return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;\n    case EventType.NavigationError:\n      return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;\n    case EventType.NavigationStart:\n      return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.ResolveEnd:\n      return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.ResolveStart:\n      return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.RouteConfigLoadEnd:\n      return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;\n    case EventType.RouteConfigLoadStart:\n      return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;\n    case EventType.RoutesRecognized:\n      return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.Scroll:\n      const pos = routerEvent.position ? `${routerEvent.position[0]}, ${routerEvent.position[1]}` : null;\n      return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;\n  }\n}\n\n/**\n * Creates an `EnvironmentInjector` if the `Route` has providers and one does not already exist\n * and returns the injector. Otherwise, if the `Route` does not have `providers`, returns the\n * `currentInjector`.\n *\n * @param route The route that might have providers\n * @param currentInjector The parent injector of the `Route`\n */\nfunction getOrCreateRouteInjectorIfNeeded(route, currentInjector) {\n  if (route.providers && !route._injector) {\n    route._injector = createEnvironmentInjector(route.providers, currentInjector, `Route: ${route.path}`);\n  }\n  return route._injector ?? currentInjector;\n}\nfunction validateConfig(config, parentPath = '', requireStandaloneComponents = false) {\n  // forEach doesn't iterate undefined values\n  for (let i = 0; i < config.length; i++) {\n    const route = config[i];\n    const fullPath = getFullPath(parentPath, route);\n    validateNode(route, fullPath, requireStandaloneComponents);\n  }\n}\nfunction assertStandalone(fullPath, component) {\n  if (component && _isNgModule(component)) {\n    throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. You are using 'loadComponent' with a module, ` + `but it must be used with standalone components. Use 'loadChildren' instead.`);\n  } else if (component && !isStandalone(component)) {\n    throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. The component must be standalone.`);\n  }\n}\nfunction validateNode(route, fullPath, requireStandaloneComponents) {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (!route) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n    }\n    if (Array.isArray(route)) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': Array cannot be specified`);\n    }\n    if (!route.redirectTo && !route.component && !route.loadComponent && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n    }\n    if (route.redirectTo && route.children) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n    }\n    if (route.redirectTo && route.loadChildren) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n    }\n    if (route.children && route.loadChildren) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n    }\n    if (route.component && route.loadComponent) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': component and loadComponent cannot be used together`);\n    }\n    if (route.redirectTo) {\n      if (route.component || route.loadComponent) {\n        throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and component/loadComponent cannot be used together`);\n      }\n      if (route.canMatch || route.canActivate) {\n        throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': redirectTo and ${route.canMatch ? 'canMatch' : 'canActivate'} cannot be used together.` + `Redirects happen before guards are executed.`);\n      }\n    }\n    if (route.path && route.matcher) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.loadComponent && !route.children && !route.loadChildren) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, loadComponent, redirectTo, children or loadChildren`);\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n      const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n      throw new _RuntimeError(4014 /* RuntimeErrorCode.INVALID_ROUTE_CONFIG */, `Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n    }\n    if (requireStandaloneComponents) {\n      assertStandalone(fullPath, route.component);\n    }\n  }\n  if (route.children) {\n    validateConfig(route.children, fullPath, requireStandaloneComponents);\n  }\n}\nfunction getFullPath(parentPath, currentRoute) {\n  if (!currentRoute) {\n    return parentPath;\n  }\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n/** Returns the `route.outlet` or PRIMARY_OUTLET if none exists. */\nfunction getOutlet(route) {\n  return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * Sorts the `routes` such that the ones with an outlet matching `outletName` come first.\n * The order of the configs is otherwise preserved.\n */\nfunction sortByMatchingOutlets(routes, outletName) {\n  const sortedConfig = routes.filter(r => getOutlet(r) === outletName);\n  sortedConfig.push(...routes.filter(r => getOutlet(r) !== outletName));\n  return sortedConfig;\n}\n/**\n * Gets the first injector in the snapshot's parent tree.\n *\n * If the `Route` has a static list of providers, the returned injector will be the one created from\n * those. If it does not exist, the returned injector may come from the parents, which may be from a\n * loaded config or their static providers.\n *\n * Returns `null` if there is neither this nor any parents have a stored injector.\n *\n * Generally used for retrieving the injector to use for getting tokens for guards/resolvers and\n * also used for getting the correct injector to use for creating components.\n */\nfunction getClosestRouteInjector(snapshot) {\n  if (!snapshot) return null;\n  // If the current route has its own injector, which is created from the static providers on the\n  // route itself, we should use that. Otherwise, we start at the parent since we do not want to\n  // include the lazy loaded injector from this route.\n  if (snapshot.routeConfig?._injector) {\n    return snapshot.routeConfig._injector;\n  }\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    // Note that the order here is important. `_loadedInjector` stored on the route with\n    // `loadChildren: () => NgModule` so it applies to child routes with priority. The `_injector`\n    // is created from the static providers on that parent route, so it applies to the children as\n    // well, but only if there is no lazy loaded NgModuleRef injector.\n    if (route?._loadedInjector) return route._loadedInjector;\n    if (route?._injector) return route._injector;\n  }\n  return null;\n}\n\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * @publicApi\n */\nclass OutletContext {\n  rootInjector;\n  outlet = null;\n  route = null;\n  children;\n  attachRef = null;\n  get injector() {\n    return getClosestRouteInjector(this.route?.snapshot) ?? this.rootInjector;\n  }\n  constructor(rootInjector) {\n    this.rootInjector = rootInjector;\n    this.children = new ChildrenOutletContexts(this.rootInjector);\n  }\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * @publicApi\n */\nlet ChildrenOutletContexts = /*#__PURE__*/(() => {\n  class ChildrenOutletContexts {\n    rootInjector;\n    // contexts for child outlets, by name.\n    contexts = new Map();\n    /** @docs-private */\n    constructor(rootInjector) {\n      this.rootInjector = rootInjector;\n    }\n    /** Called when a `RouterOutlet` directive is instantiated */\n    onChildOutletCreated(childName, outlet) {\n      const context = this.getOrCreateContext(childName);\n      context.outlet = outlet;\n      this.contexts.set(childName, context);\n    }\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     */\n    onChildOutletDestroyed(childName) {\n      const context = this.getContext(childName);\n      if (context) {\n        context.outlet = null;\n        context.attachRef = null;\n      }\n    }\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     */\n    onOutletDeactivated() {\n      const contexts = this.contexts;\n      this.contexts = new Map();\n      return contexts;\n    }\n    onOutletReAttached(contexts) {\n      this.contexts = contexts;\n    }\n    getOrCreateContext(childName) {\n      let context = this.getContext(childName);\n      if (!context) {\n        context = new OutletContext(this.rootInjector);\n        this.contexts.set(childName, context);\n      }\n      return context;\n    }\n    getContext(childName) {\n      return this.contexts.get(childName) || null;\n    }\n    static ɵfac = function ChildrenOutletContexts_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ChildrenOutletContexts)(i0.ɵɵinject(i0.EnvironmentInjector));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ChildrenOutletContexts,\n      factory: ChildrenOutletContexts.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ChildrenOutletContexts;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass Tree {\n  /** @internal */\n  _root;\n  constructor(root) {\n    this._root = root;\n  }\n  get root() {\n    return this._root.value;\n  }\n  /**\n   * @internal\n   */\n  parent(t) {\n    const p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n  /**\n   * @internal\n   */\n  children(t) {\n    const n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n  /**\n   * @internal\n   */\n  firstChild(t) {\n    const n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n  /**\n   * @internal\n   */\n  siblings(t) {\n    const p = findPath(t, this._root);\n    if (p.length < 2) return [];\n    const c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n  /**\n   * @internal\n   */\n  pathFromRoot(t) {\n    return findPath(t, this._root).map(s => s.value);\n  }\n}\n// DFS for the node matching the value\nfunction findNode(value, node) {\n  if (value === node.value) return node;\n  for (const child of node.children) {\n    const node = findNode(value, child);\n    if (node) return node;\n  }\n  return null;\n}\n// Return the path to the node with the given value using DFS\nfunction findPath(value, node) {\n  if (value === node.value) return [node];\n  for (const child of node.children) {\n    const path = findPath(value, child);\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n  return [];\n}\nclass TreeNode {\n  value;\n  children;\n  constructor(value, children) {\n    this.value = value;\n    this.children = children;\n  }\n  toString() {\n    return `TreeNode(${this.value})`;\n  }\n}\n// Return the list of T indexed by outlet name\nfunction nodeChildrenAsMap(node) {\n  const map = {};\n  if (node) {\n    node.children.forEach(child => map[child.value.outlet] = child);\n  }\n  return map;\n}\n\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * @usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * The following fragment shows how a component gets the root node\n * of the current state to establish its own route tree:\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see {@link ActivatedRoute}\n * @see [Getting route information](guide/routing/common-router-tasks#getting-route-information)\n *\n * @publicApi\n */\nclass RouterState extends Tree {\n  snapshot;\n  /** @internal */\n  constructor(root, /** The current snapshot of the router state */\n  snapshot) {\n    super(root);\n    this.snapshot = snapshot;\n    setRouterState(this, root);\n  }\n  toString() {\n    return this.snapshot.toString();\n  }\n}\nfunction createEmptyState(rootComponent) {\n  const snapshot = createEmptyStateSnapshot(rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode(activated, []), snapshot);\n}\nfunction createEmptyStateSnapshot(rootComponent) {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, {});\n  return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * The following example shows how to construct a component using information from a\n * currently activated route.\n *\n * Note: the observables in this class only emit when the current and previous values differ based\n * on shallow equality. For example, changing deeply nested properties in resolved `data` will not\n * cause the `ActivatedRoute.data` `Observable` to emit a new value.\n *\n * {@example router/activated-route/module.ts region=\"activated-route\"}\n *\n * @see [Getting route information](guide/routing/common-router-tasks#getting-route-information)\n *\n * @publicApi\n */\nclass ActivatedRoute {\n  urlSubject;\n  paramsSubject;\n  queryParamsSubject;\n  fragmentSubject;\n  dataSubject;\n  outlet;\n  component;\n  /** The current snapshot of this route */\n  snapshot;\n  /** @internal */\n  _futureSnapshot;\n  /** @internal */\n  _routerState;\n  /** @internal */\n  _paramMap;\n  /** @internal */\n  _queryParamMap;\n  /** An Observable of the resolved route title */\n  title;\n  /** An observable of the URL segments matched by this route. */\n  url;\n  /** An observable of the matrix parameters scoped to this route. */\n  params;\n  /** An observable of the query parameters shared by all the routes. */\n  queryParams;\n  /** An observable of the URL fragment shared by all the routes. */\n  fragment;\n  /** An observable of the static and resolved data of this route. */\n  data;\n  /** @internal */\n  constructor(/** @internal */\n  urlSubject, /** @internal */\n  paramsSubject, /** @internal */\n  queryParamsSubject, /** @internal */\n  fragmentSubject, /** @internal */\n  dataSubject, /** The outlet name of the route, a constant. */\n  outlet, /** The component of the route, a constant. */\n  component, futureSnapshot) {\n    this.urlSubject = urlSubject;\n    this.paramsSubject = paramsSubject;\n    this.queryParamsSubject = queryParamsSubject;\n    this.fragmentSubject = fragmentSubject;\n    this.dataSubject = dataSubject;\n    this.outlet = outlet;\n    this.component = component;\n    this._futureSnapshot = futureSnapshot;\n    this.title = this.dataSubject?.pipe(map(d => d[RouteTitleKey])) ?? of(undefined);\n    // TODO(atscott): Verify that these can be changed to `.asObservable()` with TGP.\n    this.url = urlSubject;\n    this.params = paramsSubject;\n    this.queryParams = queryParamsSubject;\n    this.fragment = fragmentSubject;\n    this.data = dataSubject;\n  }\n  /** The configuration used to match this route. */\n  get routeConfig() {\n    return this._futureSnapshot.routeConfig;\n  }\n  /** The root of the router state. */\n  get root() {\n    return this._routerState.root;\n  }\n  /** The parent of this route in the router state tree. */\n  get parent() {\n    return this._routerState.parent(this);\n  }\n  /** The first child of this route in the router state tree. */\n  get firstChild() {\n    return this._routerState.firstChild(this);\n  }\n  /** The children of this route in the router state tree. */\n  get children() {\n    return this._routerState.children(this);\n  }\n  /** The path from the root of the router state tree to this route. */\n  get pathFromRoot() {\n    return this._routerState.pathFromRoot(this);\n  }\n  /**\n   * An Observable that contains a map of the required and optional parameters\n   * specific to the route.\n   * The map supports retrieving single and multiple values from the same parameter.\n   */\n  get paramMap() {\n    this._paramMap ??= this.params.pipe(map(p => convertToParamMap(p)));\n    return this._paramMap;\n  }\n  /**\n   * An Observable that contains a map of the query parameters available to all routes.\n   * The map supports retrieving single and multiple values from the query parameter.\n   */\n  get queryParamMap() {\n    this._queryParamMap ??= this.queryParams.pipe(map(p => convertToParamMap(p)));\n    return this._queryParamMap;\n  }\n  toString() {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n/**\n * Returns the inherited params, data, and resolve for a given route.\n *\n * By default, we do not inherit parent data unless the current route is path-less or the parent\n * route is component-less.\n */\nfunction getInherited(route, parent, paramsInheritanceStrategy = 'emptyOnly') {\n  let inherited;\n  const {\n    routeConfig\n  } = route;\n  if (parent !== null && (paramsInheritanceStrategy === 'always' ||\n  // inherit parent data if route is empty path\n  routeConfig?.path === '' ||\n  // inherit parent data if parent was componentless\n  !parent.component && !parent.routeConfig?.loadComponent)) {\n    inherited = {\n      params: {\n        ...parent.params,\n        ...route.params\n      },\n      data: {\n        ...parent.data,\n        ...route.data\n      },\n      resolve: {\n        // Snapshots are created with data inherited from parent and guards (i.e. canActivate) can\n        // change data because it's not frozen...\n        // This first line could be deleted chose to break/disallow mutating the `data` object in\n        // guards.\n        // Note that data from parents still override this mutated data so anyone relying on this\n        // might be surprised that it doesn't work if parent data is inherited but otherwise does.\n        ...route.data,\n        // Ensure inherited resolved data overrides inherited static data\n        ...parent.data,\n        // static data from the current route overrides any inherited data\n        ...routeConfig?.data,\n        // resolved data from current route overrides everything\n        ...route._resolvedData\n      }\n    };\n  } else {\n    inherited = {\n      params: {\n        ...route.params\n      },\n      data: {\n        ...route.data\n      },\n      resolve: {\n        ...route.data,\n        ...(route._resolvedData ?? {})\n      }\n    };\n  }\n  if (routeConfig && hasStaticTitle(routeConfig)) {\n    inherited.resolve[RouteTitleKey] = routeConfig.title;\n  }\n  return inherited;\n}\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * The following example initializes a component with route information extracted\n * from the snapshot of the root node at the time of creation.\n *\n * ```ts\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass ActivatedRouteSnapshot {\n  url;\n  params;\n  queryParams;\n  fragment;\n  data;\n  outlet;\n  component;\n  /** The configuration used to match this route **/\n  routeConfig;\n  /** @internal */\n  _resolve;\n  /** @internal */\n  _resolvedData;\n  /** @internal */\n  _routerState;\n  /** @internal */\n  _paramMap;\n  /** @internal */\n  _queryParamMap;\n  /** The resolved route title */\n  get title() {\n    // Note: This _must_ be a getter because the data is mutated in the resolvers. Title will not be\n    // available at the time of class instantiation.\n    return this.data?.[RouteTitleKey];\n  }\n  /** @internal */\n  constructor(/** The URL segments matched by this route */\n  url,\n  /**\n   *  The matrix parameters scoped to this route.\n   *\n   *  You can compute all params (or data) in the router state or to get params outside\n   *  of an activated component by traversing the `RouterState` tree as in the following\n   *  example:\n   *  ```ts\n   *  collectRouteParams(router: Router) {\n   *    let params = {};\n   *    let stack: ActivatedRouteSnapshot[] = [router.routerState.snapshot.root];\n   *    while (stack.length > 0) {\n   *      const route = stack.pop()!;\n   *      params = {...params, ...route.params};\n   *      stack.push(...route.children);\n   *    }\n   *    return params;\n   *  }\n   *  ```\n   */\n  params, /** The query parameters shared by all the routes */\n  queryParams, /** The URL fragment shared by all the routes */\n  fragment, /** The static and resolved data of this route */\n  data, /** The outlet name of the route */\n  outlet, /** The component of the route */\n  component, routeConfig, resolve) {\n    this.url = url;\n    this.params = params;\n    this.queryParams = queryParams;\n    this.fragment = fragment;\n    this.data = data;\n    this.outlet = outlet;\n    this.component = component;\n    this.routeConfig = routeConfig;\n    this._resolve = resolve;\n  }\n  /** The root of the router state */\n  get root() {\n    return this._routerState.root;\n  }\n  /** The parent of this route in the router state tree */\n  get parent() {\n    return this._routerState.parent(this);\n  }\n  /** The first child of this route in the router state tree */\n  get firstChild() {\n    return this._routerState.firstChild(this);\n  }\n  /** The children of this route in the router state tree */\n  get children() {\n    return this._routerState.children(this);\n  }\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot() {\n    return this._routerState.pathFromRoot(this);\n  }\n  get paramMap() {\n    this._paramMap ??= convertToParamMap(this.params);\n    return this._paramMap;\n  }\n  get queryParamMap() {\n    this._queryParamMap ??= convertToParamMap(this.queryParams);\n    return this._queryParamMap;\n  }\n  toString() {\n    const url = this.url.map(segment => segment.toString()).join('/');\n    const matched = this.routeConfig ? this.routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * The following example shows how a component is initialized with information\n * from the snapshot of the root node's state at the time of creation.\n *\n * ```ts\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass RouterStateSnapshot extends Tree {\n  url;\n  /** @internal */\n  constructor(/** The url from which this snapshot was created */\n  url, root) {\n    super(root);\n    this.url = url;\n    setRouterState(this, root);\n  }\n  toString() {\n    return serializeNode(this._root);\n  }\n}\nfunction setRouterState(state, node) {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterState(state, c));\n}\nfunction serializeNode(node) {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n  return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nfunction advanceActivatedRoute(route) {\n  if (route.snapshot) {\n    const currentSnapshot = route.snapshot;\n    const nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      route.queryParamsSubject.next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      route.fragmentSubject.next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      route.paramsSubject.next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      route.urlSubject.next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      route.dataSubject.next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n    // this is for resolved data\n    route.dataSubject.next(route._futureSnapshot.data);\n  }\n}\nfunction equalParamsAndUrlSegments(a, b) {\n  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const parentsMismatch = !a.parent !== !b.parent;\n  return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));\n}\nfunction hasStaticTitle(config) {\n  return typeof config.title === 'string' || config.title === null;\n}\n\n/**\n * An `InjectionToken` provided by the `RouterOutlet` and can be set using the `routerOutletData`\n * input.\n *\n * When unset, this value is `null` by default.\n *\n * @usageNotes\n *\n * To set the data from the template of the component with `router-outlet`:\n * ```html\n * <router-outlet [routerOutletData]=\"{name: 'Angular'}\" />\n * ```\n *\n * To read the data in the routed component:\n * ```ts\n * data = inject(ROUTER_OUTLET_DATA) as Signal<{name: string}>;\n * ```\n *\n * @publicApi\n */\nconst ROUTER_OUTLET_DATA = /*#__PURE__*/new InjectionToken(ngDevMode ? 'RouterOutlet data' : '');\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```html\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * Named outlets can be the targets of secondary routes.\n * The `Route` object for a secondary route has an `outlet` property to identify the target outlet:\n *\n * `{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`\n *\n * Using named outlets and secondary routes, you can target multiple outlets in\n * the same `RouterLink` directive.\n *\n * The router keeps track of separate branches in a navigation tree for each named outlet and\n * generates a representation of that tree in the URL.\n * The URL for a secondary route uses the following syntax to specify both the primary and secondary\n * routes at the same time:\n *\n * `http://base-path/primary-route-path(outlet-name:route-path)`\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * deactivate event when a component is destroyed.\n * An attached event emits when the `RouteReuseStrategy` instructs the outlet to reattach the\n * subtree, and the detached event emits when the `RouteReuseStrategy` instructs the outlet to\n * detach the subtree.\n *\n * ```html\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'\n *   (attach)='onAttach($event)'\n *   (detach)='onDetach($event)'></router-outlet>\n * ```\n *\n * @see {@link RouterLink}\n * @see {@link Route}\n * @ngModule RouterModule\n *\n * @publicApi\n */\nlet RouterOutlet = /*#__PURE__*/(() => {\n  class RouterOutlet {\n    activated = null;\n    /** @internal */\n    get activatedComponentRef() {\n      return this.activated;\n    }\n    _activatedRoute = null;\n    /**\n     * The name of the outlet\n     *\n     */\n    name = PRIMARY_OUTLET;\n    activateEvents = new EventEmitter();\n    deactivateEvents = new EventEmitter();\n    /**\n     * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a\n     * previously detached subtree.\n     **/\n    attachEvents = new EventEmitter();\n    /**\n     * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the\n     * subtree.\n     */\n    detachEvents = new EventEmitter();\n    /**\n     * Data that will be provided to the child injector through the `ROUTER_OUTLET_DATA` token.\n     *\n     * When unset, the value of the token is `undefined` by default.\n     */\n    routerOutletData = input(undefined, ...(ngDevMode ? [{\n      debugName: \"routerOutletData\"\n    }] : []));\n    parentContexts = inject(ChildrenOutletContexts);\n    location = inject(ViewContainerRef);\n    changeDetector = inject(ChangeDetectorRef);\n    inputBinder = inject(INPUT_BINDER, {\n      optional: true\n    });\n    /** @docs-private */\n    supportsBindingToComponentInputs = true;\n    /** @docs-private */\n    ngOnChanges(changes) {\n      if (changes['name']) {\n        const {\n          firstChange,\n          previousValue\n        } = changes['name'];\n        if (firstChange) {\n          // The first change is handled by ngOnInit. Because ngOnChanges doesn't get called when no\n          // input is set at all, we need to centrally handle the first change there.\n          return;\n        }\n        // unregister with the old name\n        if (this.isTrackedInParentContexts(previousValue)) {\n          this.deactivate();\n          this.parentContexts.onChildOutletDestroyed(previousValue);\n        }\n        // register the new name\n        this.initializeOutletWithName();\n      }\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      // Ensure that the registered outlet is this one before removing it on the context.\n      if (this.isTrackedInParentContexts(this.name)) {\n        this.parentContexts.onChildOutletDestroyed(this.name);\n      }\n      this.inputBinder?.unsubscribeFromRouteData(this);\n    }\n    isTrackedInParentContexts(outletName) {\n      return this.parentContexts.getContext(outletName)?.outlet === this;\n    }\n    /** @docs-private */\n    ngOnInit() {\n      this.initializeOutletWithName();\n    }\n    initializeOutletWithName() {\n      this.parentContexts.onChildOutletCreated(this.name, this);\n      if (this.activated) {\n        return;\n      }\n      // If the outlet was not instantiated at the time the route got activated we need to populate\n      // the outlet when it is initialized (ie inside a NgIf)\n      const context = this.parentContexts.getContext(this.name);\n      if (context?.route) {\n        if (context.attachRef) {\n          // `attachRef` is populated when there is an existing component to mount\n          this.attach(context.attachRef, context.route);\n        } else {\n          // otherwise the component defined in the configuration is created\n          this.activateWith(context.route, context.injector);\n        }\n      }\n    }\n    get isActivated() {\n      return !!this.activated;\n    }\n    /**\n     * @returns The currently activated component instance.\n     * @throws An error if the outlet is not activated.\n     */\n    get component() {\n      if (!this.activated) throw new _RuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n      return this.activated.instance;\n    }\n    get activatedRoute() {\n      if (!this.activated) throw new _RuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n      return this._activatedRoute;\n    }\n    get activatedRouteData() {\n      if (this._activatedRoute) {\n        return this._activatedRoute.snapshot.data;\n      }\n      return {};\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    detach() {\n      if (!this.activated) throw new _RuntimeError(4012 /* RuntimeErrorCode.OUTLET_NOT_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated');\n      this.location.detach();\n      const cmp = this.activated;\n      this.activated = null;\n      this._activatedRoute = null;\n      this.detachEvents.emit(cmp.instance);\n      return cmp;\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    attach(ref, activatedRoute) {\n      this.activated = ref;\n      this._activatedRoute = activatedRoute;\n      this.location.insert(ref.hostView);\n      this.inputBinder?.bindActivatedRouteToOutletComponent(this);\n      this.attachEvents.emit(ref.instance);\n    }\n    deactivate() {\n      if (this.activated) {\n        const c = this.component;\n        this.activated.destroy();\n        this.activated = null;\n        this._activatedRoute = null;\n        this.deactivateEvents.emit(c);\n      }\n    }\n    activateWith(activatedRoute, environmentInjector) {\n      if (this.isActivated) {\n        throw new _RuntimeError(4013 /* RuntimeErrorCode.OUTLET_ALREADY_ACTIVATED */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Cannot activate an already activated outlet');\n      }\n      this._activatedRoute = activatedRoute;\n      const location = this.location;\n      const snapshot = activatedRoute.snapshot;\n      const component = snapshot.component;\n      const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n      const injector = new OutletInjector(activatedRoute, childContexts, location.injector, this.routerOutletData);\n      this.activated = location.createComponent(component, {\n        index: location.length,\n        injector,\n        environmentInjector: environmentInjector\n      });\n      // Calling `markForCheck` to make sure we will run the change detection when the\n      // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n      this.changeDetector.markForCheck();\n      this.inputBinder?.bindActivatedRouteToOutletComponent(this);\n      this.activateEvents.emit(this.activated.instance);\n    }\n    static ɵfac = function RouterOutlet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RouterOutlet)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: RouterOutlet,\n      selectors: [[\"router-outlet\"]],\n      inputs: {\n        name: \"name\",\n        routerOutletData: [1, \"routerOutletData\"]\n      },\n      outputs: {\n        activateEvents: \"activate\",\n        deactivateEvents: \"deactivate\",\n        attachEvents: \"attach\",\n        detachEvents: \"detach\"\n      },\n      exportAs: [\"outlet\"],\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return RouterOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass OutletInjector {\n  route;\n  childContexts;\n  parent;\n  outletData;\n  constructor(route, childContexts, parent, outletData) {\n    this.route = route;\n    this.childContexts = childContexts;\n    this.parent = parent;\n    this.outletData = outletData;\n  }\n  get(token, notFoundValue) {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    }\n    if (token === ROUTER_OUTLET_DATA) {\n      return this.outletData;\n    }\n    return this.parent.get(token, notFoundValue);\n  }\n}\nconst INPUT_BINDER = /*#__PURE__*/new InjectionToken('');\n/**\n * Injectable used as a tree-shakable provider for opting in to binding router data to component\n * inputs.\n *\n * The RouterOutlet registers itself with this service when an `ActivatedRoute` is attached or\n * activated. When this happens, the service subscribes to the `ActivatedRoute` observables (params,\n * queryParams, data) and sets the inputs of the component using `ComponentRef.setInput`.\n * Importantly, when an input does not have an item in the route data with a matching key, this\n * input is set to `undefined`. If it were not done this way, the previous information would be\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\n *\n * The `RouterOutlet` should unregister itself when destroyed via `unsubscribeFromRouteData` so that\n * the subscriptions are cleaned up.\n */\nlet RoutedComponentInputBinder = /*#__PURE__*/(() => {\n  class RoutedComponentInputBinder {\n    outletDataSubscriptions = new Map();\n    bindActivatedRouteToOutletComponent(outlet) {\n      this.unsubscribeFromRouteData(outlet);\n      this.subscribeToRouteData(outlet);\n    }\n    unsubscribeFromRouteData(outlet) {\n      this.outletDataSubscriptions.get(outlet)?.unsubscribe();\n      this.outletDataSubscriptions.delete(outlet);\n    }\n    subscribeToRouteData(outlet) {\n      const {\n        activatedRoute\n      } = outlet;\n      const dataSubscription = combineLatest([activatedRoute.queryParams, activatedRoute.params, activatedRoute.data]).pipe(switchMap(([queryParams, params, data], index) => {\n        data = {\n          ...queryParams,\n          ...params,\n          ...data\n        };\n        // Get the first result from the data subscription synchronously so it's available to\n        // the component as soon as possible (and doesn't require a second change detection).\n        if (index === 0) {\n          return of(data);\n        }\n        // Promise.resolve is used to avoid synchronously writing the wrong data when\n        // two of the Observables in the `combineLatest` stream emit one after\n        // another.\n        return Promise.resolve(data);\n      })).subscribe(data => {\n        // Outlet may have been deactivated or changed names to be associated with a different\n        // route\n        if (!outlet.isActivated || !outlet.activatedComponentRef || outlet.activatedRoute !== activatedRoute || activatedRoute.component === null) {\n          this.unsubscribeFromRouteData(outlet);\n          return;\n        }\n        const mirror = reflectComponentType(activatedRoute.component);\n        if (!mirror) {\n          this.unsubscribeFromRouteData(outlet);\n          return;\n        }\n        for (const {\n          templateName\n        } of mirror.inputs) {\n          outlet.activatedComponentRef.setInput(templateName, data[templateName]);\n        }\n      });\n      this.outletDataSubscriptions.set(outlet, dataSubscription);\n    }\n    static ɵfac = function RoutedComponentInputBinder_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RoutedComponentInputBinder)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: RoutedComponentInputBinder,\n      factory: RoutedComponentInputBinder.ɵfac\n    });\n  }\n  return RoutedComponentInputBinder;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\nlet ɵEmptyOutletComponent = /*#__PURE__*/(() => {\n  class ɵEmptyOutletComponent {\n    static ɵfac = function ɵEmptyOutletComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ɵEmptyOutletComponent)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: ɵEmptyOutletComponent,\n      selectors: [[\"ng-component\"]],\n      exportAs: [\"emptyRouterOutlet\"],\n      decls: 1,\n      vars: 0,\n      template: function _EmptyOutletComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"router-outlet\");\n        }\n      },\n      dependencies: [RouterOutlet],\n      encapsulation: 2\n    });\n  }\n  return ɵEmptyOutletComponent;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nfunction standardizeConfig(r) {\n  const children = r.children && r.children.map(standardizeConfig);\n  const c = children ? {\n    ...r,\n    children\n  } : {\n    ...r\n  };\n  if (!c.component && !c.loadComponent && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {\n    c.component = ɵEmptyOutletComponent;\n  }\n  return c;\n}\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\n  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\nfunction createNode(routeReuseStrategy, curr, prevState) {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode(value, children);\n  } else {\n    if (routeReuseStrategy.shouldAttach(curr.value)) {\n      // retrieve an activated route that is used to be displayed, but is not currently displayed\n      const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);\n      if (detachedRouteHandle !== null) {\n        const tree = detachedRouteHandle.route;\n        tree.value._futureSnapshot = curr.value;\n        tree.children = curr.children.map(c => createNode(routeReuseStrategy, c));\n        return tree;\n      }\n    }\n    const value = createActivatedRoute(curr.value);\n    const children = curr.children.map(c => createNode(routeReuseStrategy, c));\n    return new TreeNode(value, children);\n  }\n}\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n  return curr.children.map(child => {\n    for (const p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\nfunction createActivatedRoute(c) {\n  return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n\n/**\n * Can be returned by a `Router` guard to instruct the `Router` to redirect rather than continue\n * processing the path of the in-flight navigation. The `redirectTo` indicates _where_ the new\n * navigation should go to and the optional `navigationBehaviorOptions` can provide more information\n * about _how_ to perform the navigation.\n *\n * ```ts\n * const route: Route = {\n *   path: \"user/:userId\",\n *   component: User,\n *   canActivate: [\n *     () => {\n *       const router = inject(Router);\n *       const authService = inject(AuthenticationService);\n *\n *       if (!authService.isLoggedIn()) {\n *         const loginPath = router.parseUrl(\"/login\");\n *         return new RedirectCommand(loginPath, {\n *           skipLocationChange: true,\n *         });\n *       }\n *\n *       return true;\n *     },\n *   ],\n * };\n * ```\n * @see [Routing guide](guide/routing/common-router-tasks#preventing-unauthorized-access)\n *\n * @publicApi\n */\nclass RedirectCommand {\n  redirectTo;\n  navigationBehaviorOptions;\n  constructor(redirectTo, navigationBehaviorOptions) {\n    this.redirectTo = redirectTo;\n    this.navigationBehaviorOptions = navigationBehaviorOptions;\n  }\n}\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\nfunction redirectingNavigationError(urlSerializer, redirect) {\n  const {\n    redirectTo,\n    navigationBehaviorOptions\n  } = isUrlTree(redirect) ? {\n    redirectTo: redirect,\n    navigationBehaviorOptions: undefined\n  } : redirect;\n  const error = navigationCancelingError(ngDevMode && `Redirecting to \"${urlSerializer.serialize(redirectTo)}\"`, NavigationCancellationCode.Redirect);\n  error.url = redirectTo;\n  error.navigationBehaviorOptions = navigationBehaviorOptions;\n  return error;\n}\nfunction navigationCancelingError(message, code) {\n  const error = new Error(`NavigationCancelingError: ${message || ''}`);\n  error[NAVIGATION_CANCELING_ERROR] = true;\n  error.cancellationCode = code;\n  return error;\n}\nfunction isRedirectingNavigationCancelingError(error) {\n  return isNavigationCancelingError(error) && isUrlTree(error.url);\n}\nfunction isNavigationCancelingError(error) {\n  return !!error && error[NAVIGATION_CANCELING_ERROR];\n}\nlet warnedAboutUnsupportedInputBinding = false;\nconst activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent, inputBindingEnabled) => map(t => {\n  new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent, inputBindingEnabled).activate(rootContexts);\n  return t;\n});\nclass ActivateRoutes {\n  routeReuseStrategy;\n  futureState;\n  currState;\n  forwardEvent;\n  inputBindingEnabled;\n  constructor(routeReuseStrategy, futureState, currState, forwardEvent, inputBindingEnabled) {\n    this.routeReuseStrategy = routeReuseStrategy;\n    this.futureState = futureState;\n    this.currState = currState;\n    this.forwardEvent = forwardEvent;\n    this.inputBindingEnabled = inputBindingEnabled;\n  }\n  activate(parentContexts) {\n    const futureRoot = this.futureState._root;\n    const currRoot = this.currState ? this.currState._root : null;\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  }\n  // De-activate the child route that are not re-used for the future state\n  deactivateChildRoutes(futureNode, currNode, contexts) {\n    const children = nodeChildrenAsMap(currNode);\n    // Recurse on the routes active in the future state to de-activate deeper children\n    futureNode.children.forEach(futureChild => {\n      const childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    });\n    // De-activate the routes that will not be re-used\n    Object.values(children).forEach(v => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n  deactivateRoutes(futureNode, currNode, parentContext) {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContext.getContext(future.outlet);\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n  deactivateRouteAndItsChildren(route, parentContexts) {\n    // If there is no component, the Route is never attached to an outlet (because there is no\n    // component to attach).\n    if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n  detachAndStoreRouteSubtree(route, parentContexts) {\n    const context = parentContexts.getContext(route.value.outlet);\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children = nodeChildrenAsMap(route);\n    for (const treeNode of Object.values(children)) {\n      this.deactivateRouteAndItsChildren(treeNode, contexts);\n    }\n    if (context && context.outlet) {\n      const componentRef = context.outlet.detach();\n      const contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {\n        componentRef,\n        route,\n        contexts\n      });\n    }\n  }\n  deactivateRouteAndOutlet(route, parentContexts) {\n    const context = parentContexts.getContext(route.value.outlet);\n    // The context could be `null` if we are on a componentless route but there may still be\n    // children that need deactivating.\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children = nodeChildrenAsMap(route);\n    for (const treeNode of Object.values(children)) {\n      this.deactivateRouteAndItsChildren(treeNode, contexts);\n    }\n    if (context) {\n      if (context.outlet) {\n        // Destroy the component\n        context.outlet.deactivate();\n        // Destroy the contexts for all the outlets that were in the component\n        context.children.onOutletDeactivated();\n      }\n      // Clear the information about the attached component on the context but keep the reference to\n      // the outlet. Clear even if outlet was not yet activated to avoid activating later with old\n      // info\n      context.attachRef = null;\n      context.route = null;\n    }\n  }\n  activateChildRoutes(futureNode, currNode, contexts) {\n    const children = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.activateRoutes(c, children[c.value.outlet], contexts);\n      this.forwardEvent(new ActivationEnd(c.value.snapshot));\n    });\n    if (futureNode.children.length) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n    }\n  }\n  activateRoutes(futureNode, currNode, parentContexts) {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n    advanceActivatedRoute(future);\n    // reusing the node\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const stored = this.routeReuseStrategy.retrieve(future.snapshot);\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n          advanceActivatedRoute(stored.route.value);\n          this.activateChildRoutes(futureNode, null, context.children);\n        } else {\n          context.attachRef = null;\n          context.route = future;\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, context.injector);\n          }\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const context = parentContexts.getOrCreateContext(future.outlet);\n      const outlet = context.outlet;\n      if (outlet && this.inputBindingEnabled && !outlet.supportsBindingToComponentInputs && !warnedAboutUnsupportedInputBinding) {\n        console.warn(`'withComponentInputBinding' feature is enabled but ` + `this application is using an outlet that may not support binding to component inputs.`);\n        warnedAboutUnsupportedInputBinding = true;\n      }\n    }\n  }\n}\nclass CanActivate {\n  path;\n  route;\n  constructor(path) {\n    this.path = path;\n    this.route = this.path[this.path.length - 1];\n  }\n}\nclass CanDeactivate {\n  component;\n  route;\n  constructor(component, route) {\n    this.component = component;\n    this.route = route;\n  }\n}\nfunction getAllRouteGuards(future, curr, parentContexts) {\n  const futureRoot = future._root;\n  const currRoot = curr ? curr._root : null;\n  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\nfunction getCanActivateChild(p) {\n  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n  if (!canActivateChild || canActivateChild.length === 0) return null;\n  return {\n    node: p,\n    guards: canActivateChild\n  };\n}\nfunction getTokenOrFunctionIdentity(tokenOrFunction, injector) {\n  const NOT_FOUND = Symbol();\n  const result = injector.get(tokenOrFunction, NOT_FOUND);\n  if (result === NOT_FOUND) {\n    if (typeof tokenOrFunction === 'function' && !_isInjectable(tokenOrFunction)) {\n      // We think the token is just a function so return it as-is\n      return tokenOrFunction;\n    } else {\n      // This will throw the not found error\n      return injector.get(tokenOrFunction);\n    }\n  }\n  return result;\n}\nfunction getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {\n  canDeactivateChecks: [],\n  canActivateChecks: []\n}) {\n  const prevChildren = nodeChildrenAsMap(currNode);\n  // Process the children of the future route\n  futureNode.children.forEach(c => {\n    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n    delete prevChildren[c.value.outlet];\n  });\n  // Process any children left from the current route (not active for the future route)\n  Object.entries(prevChildren).forEach(([k, v]) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));\n  return checks;\n}\nfunction getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {\n  canDeactivateChecks: [],\n  canActivateChecks: []\n}) {\n  const future = futureNode.value;\n  const curr = currNode ? currNode.value : null;\n  const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n  // reusing the node\n  if (curr && future.routeConfig === curr.routeConfig) {\n    const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);\n    if (shouldRun) {\n      checks.canActivateChecks.push(new CanActivate(futurePath));\n    } else {\n      // we need to set the data\n      future.data = curr.data;\n      future._resolvedData = curr._resolvedData;\n    }\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n    }\n    if (shouldRun && context && context.outlet && context.outlet.isActivated) {\n      checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));\n    }\n  } else {\n    if (curr) {\n      deactivateRouteAndItsChildren(currNode, context, checks);\n    }\n    checks.canActivateChecks.push(new CanActivate(futurePath));\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n    }\n  }\n  return checks;\n}\nfunction shouldRunGuardsAndResolvers(curr, future, mode) {\n  if (typeof mode === 'function') {\n    return mode(curr, future);\n  }\n  switch (mode) {\n    case 'pathParamsChange':\n      return !equalPath(curr.url, future.url);\n    case 'pathParamsOrQueryParamsChange':\n      return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);\n    case 'always':\n      return true;\n    case 'paramsOrQueryParamsChange':\n      return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);\n    case 'paramsChange':\n    default:\n      return !equalParamsAndUrlSegments(curr, future);\n  }\n}\nfunction deactivateRouteAndItsChildren(route, context, checks) {\n  const children = nodeChildrenAsMap(route);\n  const r = route.value;\n  Object.entries(children).forEach(([childName, node]) => {\n    if (!r.component) {\n      deactivateRouteAndItsChildren(node, context, checks);\n    } else if (context) {\n      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n    } else {\n      deactivateRouteAndItsChildren(node, null, checks);\n    }\n  });\n  if (!r.component) {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  } else if (context && context.outlet && context.outlet.isActivated) {\n    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n  } else {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  }\n}\n\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nfunction isFunction(v) {\n  return typeof v === 'function';\n}\nfunction isBoolean(v) {\n  return typeof v === 'boolean';\n}\nfunction isCanLoad(guard) {\n  return guard && isFunction(guard.canLoad);\n}\nfunction isCanActivate(guard) {\n  return guard && isFunction(guard.canActivate);\n}\nfunction isCanActivateChild(guard) {\n  return guard && isFunction(guard.canActivateChild);\n}\nfunction isCanDeactivate(guard) {\n  return guard && isFunction(guard.canDeactivate);\n}\nfunction isCanMatch(guard) {\n  return guard && isFunction(guard.canMatch);\n}\nfunction isEmptyError(e) {\n  return e instanceof EmptyError || e?.name === 'EmptyError';\n}\nconst INITIAL_VALUE = /* @__PURE__ */Symbol('INITIAL_VALUE');\nfunction prioritizedGuardValue() {\n  return switchMap(obs => {\n    return combineLatest(obs.map(o => o.pipe(take(1), startWith(INITIAL_VALUE)))).pipe(map(results => {\n      for (const result of results) {\n        if (result === true) {\n          // If result is true, check the next one\n          continue;\n        } else if (result === INITIAL_VALUE) {\n          // If guard has not finished, we need to stop processing.\n          return INITIAL_VALUE;\n        } else if (result === false || isRedirect(result)) {\n          // Result finished and was not true. Return the result.\n          // Note that we only allow false/UrlTree/RedirectCommand. Other values are considered invalid and\n          // ignored.\n          return result;\n        }\n      }\n      // Everything resolved to true. Return true.\n      return true;\n    }), filter(item => item !== INITIAL_VALUE), take(1));\n  });\n}\nfunction isRedirect(val) {\n  return isUrlTree(val) || val instanceof RedirectCommand;\n}\nfunction checkGuards(injector, forwardEvent) {\n  return mergeMap(t => {\n    const {\n      targetSnapshot,\n      currentSnapshot,\n      guards: {\n        canActivateChecks,\n        canDeactivateChecks\n      }\n    } = t;\n    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n      return of({\n        ...t,\n        guardsResult: true\n      });\n    }\n    return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, injector).pipe(mergeMap(canDeactivate => {\n      return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, injector, forwardEvent) : of(canDeactivate);\n    }), map(guardsResult => ({\n      ...t,\n      guardsResult\n    })));\n  });\n}\nfunction runCanDeactivateChecks(checks, futureRSS, currRSS, injector) {\n  return from(checks).pipe(mergeMap(check => runCanDeactivate(check.component, check.route, currRSS, futureRSS, injector)), first(result => {\n    return result !== true;\n  }, true));\n}\nfunction runCanActivateChecks(futureSnapshot, checks, injector, forwardEvent) {\n  return from(checks).pipe(concatMap(check => {\n    return concat(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, injector), runCanActivate(futureSnapshot, check.route, injector));\n  }), first(result => {\n    return result !== true;\n  }, true));\n}\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireActivationStart(snapshot, forwardEvent) {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ActivationStart(snapshot));\n  }\n  return of(true);\n}\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireChildActivationStart(snapshot, forwardEvent) {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ChildActivationStart(snapshot));\n  }\n  return of(true);\n}\nfunction runCanActivate(futureRSS, futureARS, injector) {\n  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n  if (!canActivate || canActivate.length === 0) return of(true);\n  const canActivateObservables = canActivate.map(canActivate => {\n    return defer(() => {\n      const closestInjector = getClosestRouteInjector(futureARS) ?? injector;\n      const guard = getTokenOrFunctionIdentity(canActivate, closestInjector);\n      const guardVal = isCanActivate(guard) ? guard.canActivate(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));\n      return wrapIntoObservable(guardVal).pipe(first());\n    });\n  });\n  return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\nfunction runCanActivateChild(futureRSS, path, injector) {\n  const futureARS = path[path.length - 1];\n  const canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(p => getCanActivateChild(p)).filter(_ => _ !== null);\n  const canActivateChildGuardsMapped = canActivateChildGuards.map(d => {\n    return defer(() => {\n      const guardsMapped = d.guards.map(canActivateChild => {\n        const closestInjector = getClosestRouteInjector(d.node) ?? injector;\n        const guard = getTokenOrFunctionIdentity(canActivateChild, closestInjector);\n        const guardVal = isCanActivateChild(guard) ? guard.canActivateChild(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));\n        return wrapIntoObservable(guardVal).pipe(first());\n      });\n      return of(guardsMapped).pipe(prioritizedGuardValue());\n    });\n  });\n  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\nfunction runCanDeactivate(component, currARS, currRSS, futureRSS, injector) {\n  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n  if (!canDeactivate || canDeactivate.length === 0) return of(true);\n  const canDeactivateObservables = canDeactivate.map(c => {\n    const closestInjector = getClosestRouteInjector(currARS) ?? injector;\n    const guard = getTokenOrFunctionIdentity(c, closestInjector);\n    const guardVal = isCanDeactivate(guard) ? guard.canDeactivate(component, currARS, currRSS, futureRSS) : runInInjectionContext(closestInjector, () => guard(component, currARS, currRSS, futureRSS));\n    return wrapIntoObservable(guardVal).pipe(first());\n  });\n  return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\nfunction runCanLoadGuards(injector, route, segments, urlSerializer) {\n  const canLoad = route.canLoad;\n  if (canLoad === undefined || canLoad.length === 0) {\n    return of(true);\n  }\n  const canLoadObservables = canLoad.map(injectionToken => {\n    const guard = getTokenOrFunctionIdentity(injectionToken, injector);\n    const guardVal = isCanLoad(guard) ? guard.canLoad(route, segments) : runInInjectionContext(injector, () => guard(route, segments));\n    return wrapIntoObservable(guardVal);\n  });\n  return of(canLoadObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));\n}\nfunction redirectIfUrlTree(urlSerializer) {\n  return pipe(tap(result => {\n    if (typeof result === 'boolean') return;\n    throw redirectingNavigationError(urlSerializer, result);\n  }), map(result => result === true));\n}\nfunction runCanMatchGuards(injector, route, segments, urlSerializer) {\n  const canMatch = route.canMatch;\n  if (!canMatch || canMatch.length === 0) return of(true);\n  const canMatchObservables = canMatch.map(injectionToken => {\n    const guard = getTokenOrFunctionIdentity(injectionToken, injector);\n    const guardVal = isCanMatch(guard) ? guard.canMatch(route, segments) : runInInjectionContext(injector, () => guard(route, segments));\n    return wrapIntoObservable(guardVal);\n  });\n  return of(canMatchObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));\n}\nclass NoMatch {\n  segmentGroup;\n  constructor(segmentGroup) {\n    this.segmentGroup = segmentGroup || null;\n  }\n}\nclass AbsoluteRedirect extends Error {\n  urlTree;\n  constructor(urlTree) {\n    super();\n    this.urlTree = urlTree;\n  }\n}\nfunction noMatch$1(segmentGroup) {\n  return throwError(new NoMatch(segmentGroup));\n}\nfunction namedOutletsRedirect(redirectTo) {\n  return throwError(new _RuntimeError(4000 /* RuntimeErrorCode.NAMED_OUTLET_REDIRECT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`));\n}\nfunction canLoadFails(route) {\n  return throwError(navigationCancelingError((typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`, NavigationCancellationCode.GuardRejected));\n}\nclass ApplyRedirects {\n  urlSerializer;\n  urlTree;\n  constructor(urlSerializer, urlTree) {\n    this.urlSerializer = urlSerializer;\n    this.urlTree = urlTree;\n  }\n  lineralizeSegments(route, urlTree) {\n    let res = [];\n    let c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of(res);\n      }\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(`${route.redirectTo}`);\n      }\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n  applyRedirectCommands(segments, redirectTo, posParams, currentSnapshot, injector) {\n    return getRedirectResult(redirectTo, currentSnapshot, injector).pipe(map(redirect => {\n      if (redirect instanceof UrlTree) {\n        throw new AbsoluteRedirect(redirect);\n      }\n      const newTree = this.applyRedirectCreateUrlTree(redirect, this.urlSerializer.parse(redirect), segments, posParams);\n      if (redirect[0] === '/') {\n        throw new AbsoluteRedirect(newTree);\n      }\n      return newTree;\n    }));\n  }\n  applyRedirectCreateUrlTree(redirectTo, urlTree, segments, posParams) {\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n  }\n  createQueryParams(redirectToParams, actualParams) {\n    const res = {};\n    Object.entries(redirectToParams).forEach(([k, v]) => {\n      const copySourceValue = typeof v === 'string' && v[0] === ':';\n      if (copySourceValue) {\n        const sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n  createSegmentGroup(redirectTo, group, segments, posParams) {\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n    let children = {};\n    Object.entries(group.children).forEach(([name, child]) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n  createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {\n    return redirectToSegments.map(s => s.path[0] === ':' ? this.findPosParam(redirectTo, s, posParams) : this.findOrReturn(s, actualSegments));\n  }\n  findPosParam(redirectTo, redirectToUrlSegment, posParams) {\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos) throw new _RuntimeError(4001 /* RuntimeErrorCode.MISSING_REDIRECT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n  findOrReturn(redirectToUrlSegment, actualSegments) {\n    let idx = 0;\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\nfunction getRedirectResult(redirectTo, currentSnapshot, injector) {\n  if (typeof redirectTo === 'string') {\n    return of(redirectTo);\n  }\n  const redirectToFn = redirectTo;\n  const {\n    queryParams,\n    fragment,\n    routeConfig,\n    url,\n    outlet,\n    params,\n    data,\n    title\n  } = currentSnapshot;\n  return wrapIntoObservable(runInInjectionContext(injector, () => redirectToFn({\n    params,\n    data,\n    queryParams,\n    fragment,\n    routeConfig,\n    url,\n    outlet,\n    title\n  })));\n}\nconst noMatch = {\n  matched: false,\n  consumedSegments: [],\n  remainingSegments: [],\n  parameters: {},\n  positionalParamSegments: {}\n};\nfunction matchWithChecks(segmentGroup, route, segments, injector, urlSerializer) {\n  const result = match(segmentGroup, route, segments);\n  if (!result.matched) {\n    return of(result);\n  }\n  // Only create the Route's `EnvironmentInjector` if it matches the attempted\n  // navigation\n  injector = getOrCreateRouteInjectorIfNeeded(route, injector);\n  return runCanMatchGuards(injector, route, segments, urlSerializer).pipe(map(v => v === true ? result : {\n    ...noMatch\n  }));\n}\nfunction match(segmentGroup, route, segments) {\n  if (route.path === '**') {\n    return createWildcardMatchResult(segments);\n  }\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {\n        ...noMatch\n      };\n    }\n    return {\n      matched: true,\n      consumedSegments: [],\n      remainingSegments: segments,\n      parameters: {},\n      positionalParamSegments: {}\n    };\n  }\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n  if (!res) return {\n    ...noMatch\n  };\n  const posParams = {};\n  Object.entries(res.posParams ?? {}).forEach(([k, v]) => {\n    posParams[k] = v.path;\n  });\n  const parameters = res.consumed.length > 0 ? {\n    ...posParams,\n    ...res.consumed[res.consumed.length - 1].parameters\n  } : posParams;\n  return {\n    matched: true,\n    consumedSegments: res.consumed,\n    remainingSegments: segments.slice(res.consumed.length),\n    // TODO(atscott): investigate combining parameters and positionalParamSegments\n    parameters,\n    positionalParamSegments: res.posParams ?? {}\n  };\n}\nfunction createWildcardMatchResult(segments) {\n  return {\n    matched: true,\n    parameters: segments.length > 0 ? last(segments).parameters : {},\n    consumedSegments: segments,\n    remainingSegments: [],\n    positionalParamSegments: {}\n  };\n}\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n  if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {\n      segmentGroup: s,\n      slicedSegments: []\n    };\n  }\n  if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {\n      segmentGroup: s,\n      slicedSegments\n    };\n  }\n  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  return {\n    segmentGroup: s,\n    slicedSegments\n  };\n}\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n  const res = {};\n  for (const r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const s = new UrlSegmentGroup([], {});\n      res[getOutlet(r)] = s;\n    }\n  }\n  return {\n    ...children,\n    ...res\n  };\n}\nfunction createChildrenForEmptyPaths(routes, primarySegment) {\n  const res = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const s = new UrlSegmentGroup([], {});\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n  return r.path === '';\n}\nfunction noLeftoversInUrl(segmentGroup, segments, outlet) {\n  return segments.length === 0 && !segmentGroup.children[outlet];\n}\n\n/**\n * Class used to indicate there were no additional route config matches but that all segments of\n * the URL were consumed during matching so the route was URL matched. When this happens, we still\n * try to match child configs in case there are empty path children.\n */\nclass NoLeftoversInUrl {}\nfunction recognize$1(injector, configLoader, rootComponentType, config, urlTree, urlSerializer, paramsInheritanceStrategy = 'emptyOnly') {\n  return new Recognizer(injector, configLoader, rootComponentType, config, urlTree, paramsInheritanceStrategy, urlSerializer).recognize();\n}\nconst MAX_ALLOWED_REDIRECTS = 31;\nclass Recognizer {\n  injector;\n  configLoader;\n  rootComponentType;\n  config;\n  urlTree;\n  paramsInheritanceStrategy;\n  urlSerializer;\n  applyRedirects;\n  absoluteRedirectCount = 0;\n  allowRedirects = true;\n  constructor(injector, configLoader, rootComponentType, config, urlTree, paramsInheritanceStrategy, urlSerializer) {\n    this.injector = injector;\n    this.configLoader = configLoader;\n    this.rootComponentType = rootComponentType;\n    this.config = config;\n    this.urlTree = urlTree;\n    this.paramsInheritanceStrategy = paramsInheritanceStrategy;\n    this.urlSerializer = urlSerializer;\n    this.applyRedirects = new ApplyRedirects(this.urlSerializer, this.urlTree);\n  }\n  noMatchError(e) {\n    return new _RuntimeError(4002 /* RuntimeErrorCode.NO_MATCH */, typeof ngDevMode === 'undefined' || ngDevMode ? `Cannot match any routes. URL Segment: '${e.segmentGroup}'` : `'${e.segmentGroup}'`);\n  }\n  recognize() {\n    const rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n    return this.match(rootSegmentGroup).pipe(map(({\n      children,\n      rootSnapshot\n    }) => {\n      const rootNode = new TreeNode(rootSnapshot, children);\n      const routeState = new RouterStateSnapshot('', rootNode);\n      const tree = createUrlTreeFromSnapshot(rootSnapshot, [], this.urlTree.queryParams, this.urlTree.fragment);\n      // https://github.com/angular/angular/issues/47307\n      // Creating the tree stringifies the query params\n      // We don't want to do this here so reassign them to the original.\n      tree.queryParams = this.urlTree.queryParams;\n      routeState.url = this.urlSerializer.serialize(tree);\n      return {\n        state: routeState,\n        tree\n      };\n    }));\n  }\n  match(rootSegmentGroup) {\n    // Use Object.freeze to prevent readers of the Router state from modifying it outside\n    // of a navigation, resulting in the router being out of sync with the browser.\n    const rootSnapshot = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze({\n      ...this.urlTree.queryParams\n    }), this.urlTree.fragment, Object.freeze({}), PRIMARY_OUTLET, this.rootComponentType, null, {});\n    return this.processSegmentGroup(this.injector, this.config, rootSegmentGroup, PRIMARY_OUTLET, rootSnapshot).pipe(map(children => {\n      return {\n        children,\n        rootSnapshot\n      };\n    }), catchError(e => {\n      if (e instanceof AbsoluteRedirect) {\n        this.urlTree = e.urlTree;\n        return this.match(e.urlTree.root);\n      }\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n      throw e;\n    }));\n  }\n  processSegmentGroup(injector, config, segmentGroup, outlet, parentRoute) {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(injector, config, segmentGroup, parentRoute);\n    }\n    return this.processSegment(injector, config, segmentGroup, segmentGroup.segments, outlet, true, parentRoute).pipe(map(child => child instanceof TreeNode ? [child] : []));\n  }\n  /**\n   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if\n   * we cannot find a match for _any_ of the children.\n   *\n   * @param config - The `Routes` to match against\n   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the\n   *     config.\n   */\n  processChildren(injector, config, segmentGroup, parentRoute) {\n    // Expand outlets one at a time, starting with the primary outlet. We need to do it this way\n    // because an absolute redirect from the primary outlet takes precedence.\n    const childOutlets = [];\n    for (const child of Object.keys(segmentGroup.children)) {\n      if (child === 'primary') {\n        childOutlets.unshift(child);\n      } else {\n        childOutlets.push(child);\n      }\n    }\n    return from(childOutlets).pipe(concatMap(childOutlet => {\n      const child = segmentGroup.children[childOutlet];\n      // Sort the config so that routes with outlets that match the one being activated\n      // appear first, followed by routes for other outlets, which might match if they have\n      // an empty path.\n      const sortedConfig = sortByMatchingOutlets(config, childOutlet);\n      return this.processSegmentGroup(injector, sortedConfig, child, childOutlet, parentRoute);\n    }), scan((children, outletChildren) => {\n      children.push(...outletChildren);\n      return children;\n    }), defaultIfEmpty(null), last$1(), mergeMap(children => {\n      if (children === null) return noMatch$1(segmentGroup);\n      // Because we may have matched two outlets to the same empty path segment, we can have\n      // multiple activated results for the same outlet. We should merge the children of\n      // these results so the final return value is only one `TreeNode` per outlet.\n      const mergedChildren = mergeEmptyPathMatches(children);\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // This should really never happen - we are only taking the first match for each\n        // outlet and merge the empty path matches.\n        checkOutletNameUniqueness(mergedChildren);\n      }\n      sortActivatedRouteSnapshots(mergedChildren);\n      return of(mergedChildren);\n    }));\n  }\n  processSegment(injector, routes, segmentGroup, segments, outlet, allowRedirects, parentRoute) {\n    return from(routes).pipe(concatMap(r => {\n      return this.processSegmentAgainstRoute(r._injector ?? injector, routes, r, segmentGroup, segments, outlet, allowRedirects, parentRoute).pipe(catchError(e => {\n        if (e instanceof NoMatch) {\n          return of(null);\n        }\n        throw e;\n      }));\n    }), first(x => !!x), catchError(e => {\n      if (isEmptyError(e)) {\n        if (noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of(new NoLeftoversInUrl());\n        }\n        return noMatch$1(segmentGroup);\n      }\n      throw e;\n    }));\n  }\n  processSegmentAgainstRoute(injector, routes, route, rawSegment, segments, outlet, allowRedirects, parentRoute) {\n    // We allow matches to empty paths when the outlets differ so we can match a url like `/(b:b)` to\n    // a config like\n    // * `{path: '', children: [{path: 'b', outlet: 'b'}]}`\n    // or even\n    // * `{path: '', outlet: 'a', children: [{path: 'b', outlet: 'b'}]`\n    //\n    // The exception here is when the segment outlet is for the primary outlet. This would\n    // result in a match inside the named outlet because all children there are written as primary\n    // outlets. So we need to prevent child named outlet matches in a url like `/b` in a config like\n    // * `{path: '', outlet: 'x' children: [{path: 'b'}]}`\n    // This should only match if the url is `/(x:b)`.\n    if (getOutlet(route) !== outlet && (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {\n      return noMatch$1(rawSegment);\n    }\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute);\n    }\n    if (this.allowRedirects && allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(injector, rawSegment, routes, route, segments, outlet, parentRoute);\n    }\n    return noMatch$1(rawSegment);\n  }\n  expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet, parentRoute) {\n    const {\n      matched,\n      parameters,\n      consumedSegments,\n      positionalParamSegments,\n      remainingSegments\n    } = match(segmentGroup, route, segments);\n    if (!matched) return noMatch$1(segmentGroup);\n    // TODO(atscott): Move all of this under an if(ngDevMode) as a breaking change and allow stack\n    // size exceeded in production\n    if (typeof route.redirectTo === 'string' && route.redirectTo[0] === '/') {\n      this.absoluteRedirectCount++;\n      if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {\n        if (ngDevMode) {\n          throw new _RuntimeError(4016 /* RuntimeErrorCode.INFINITE_REDIRECT */, `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.\\n` + `This is currently a dev mode only error but will become a` + ` call stack size exceeded error in production in a future major version.`);\n        }\n        this.allowRedirects = false;\n      }\n    }\n    const currentSnapshot = new ActivatedRouteSnapshot(segments, parameters, Object.freeze({\n      ...this.urlTree.queryParams\n    }), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));\n    const inherited = getInherited(currentSnapshot, parentRoute, this.paramsInheritanceStrategy);\n    currentSnapshot.params = Object.freeze(inherited.params);\n    currentSnapshot.data = Object.freeze(inherited.data);\n    const newTree$ = this.applyRedirects.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments, currentSnapshot, injector);\n    return newTree$.pipe(switchMap(newTree => this.applyRedirects.lineralizeSegments(route, newTree)), mergeMap(newSegments => {\n      return this.processSegment(injector, routes, segmentGroup, newSegments.concat(remainingSegments), outlet, false, parentRoute);\n    }));\n  }\n  matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute) {\n    const matchResult = matchWithChecks(rawSegment, route, segments, injector, this.urlSerializer);\n    if (route.path === '**') {\n      // Prior versions of the route matching algorithm would stop matching at the wildcard route.\n      // We should investigate a better strategy for any existing children. Otherwise, these\n      // child segments are silently dropped from the navigation.\n      // https://github.com/angular/angular/issues/40089\n      rawSegment.children = {};\n    }\n    return matchResult.pipe(switchMap(result => {\n      if (!result.matched) {\n        return noMatch$1(rawSegment);\n      }\n      // If the route has an injector created from providers, we should start using that.\n      injector = route._injector ?? injector;\n      return this.getChildConfig(injector, route, segments).pipe(switchMap(({\n        routes: childConfig\n      }) => {\n        const childInjector = route._loadedInjector ?? injector;\n        const {\n          parameters,\n          consumedSegments,\n          remainingSegments\n        } = result;\n        const snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze({\n          ...this.urlTree.queryParams\n        }), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));\n        const inherited = getInherited(snapshot, parentRoute, this.paramsInheritanceStrategy);\n        snapshot.params = Object.freeze(inherited.params);\n        snapshot.data = Object.freeze(inherited.data);\n        const {\n          segmentGroup,\n          slicedSegments\n        } = split(rawSegment, consumedSegments, remainingSegments, childConfig);\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n          return this.processChildren(childInjector, childConfig, segmentGroup, snapshot).pipe(map(children => {\n            return new TreeNode(snapshot, children);\n          }));\n        }\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\n          return of(new TreeNode(snapshot, []));\n        }\n        const matchedOnOutlet = getOutlet(route) === outlet;\n        // If we matched a config due to empty path match on a different outlet, we need to\n        // continue passing the current outlet for the segment rather than switch to PRIMARY.\n        // Note that we switch to primary when we have a match because outlet configs look like\n        // this: {path: 'a', outlet: 'a', children: [\n        //  {path: 'b', component: B},\n        //  {path: 'c', component: C},\n        // ]}\n        // Notice that the children of the named outlet are configured with the primary outlet\n        return this.processSegment(childInjector, childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true, snapshot).pipe(map(child => {\n          return new TreeNode(snapshot, child instanceof TreeNode ? [child] : []);\n        }));\n      }));\n    }));\n  }\n  getChildConfig(injector, route, segments) {\n    if (route.children) {\n      // The children belong to the same module\n      return of({\n        routes: route.children,\n        injector\n      });\n    }\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedRoutes !== undefined) {\n        return of({\n          routes: route._loadedRoutes,\n          injector: route._loadedInjector\n        });\n      }\n      return runCanLoadGuards(injector, route, segments, this.urlSerializer).pipe(mergeMap(shouldLoadResult => {\n        if (shouldLoadResult) {\n          return this.configLoader.loadChildren(injector, route).pipe(tap(cfg => {\n            route._loadedRoutes = cfg.routes;\n            route._loadedInjector = cfg.injector;\n          }));\n        }\n        return canLoadFails(route);\n      }));\n    }\n    return of({\n      routes: [],\n      injector\n    });\n  }\n}\nfunction sortActivatedRouteSnapshots(nodes) {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\nfunction hasEmptyPathConfig(node) {\n  const config = node.value.routeConfig;\n  return config && config.path === '';\n}\n/**\n * Finds `TreeNode`s with matching empty path route configs and merges them into `TreeNode` with\n * the children from each duplicate. This is necessary because different outlets can match a\n * single empty path route config and the results need to then be merged.\n */\nfunction mergeEmptyPathMatches(nodes) {\n  const result = [];\n  // The set of nodes which contain children that were merged from two duplicate empty path nodes.\n  const mergedNodes = new Set();\n  for (const node of nodes) {\n    if (!hasEmptyPathConfig(node)) {\n      result.push(node);\n      continue;\n    }\n    const duplicateEmptyPathNode = result.find(resultNode => node.value.routeConfig === resultNode.value.routeConfig);\n    if (duplicateEmptyPathNode !== undefined) {\n      duplicateEmptyPathNode.children.push(...node.children);\n      mergedNodes.add(duplicateEmptyPathNode);\n    } else {\n      result.push(node);\n    }\n  }\n  // For each node which has children from multiple sources, we need to recompute a new `TreeNode`\n  // by also merging those children. This is necessary when there are multiple empty path configs\n  // in a row. Put another way: whenever we combine children of two nodes, we need to also check\n  // if any of those children can be combined into a single node as well.\n  for (const mergedNode of mergedNodes) {\n    const mergedChildren = mergeEmptyPathMatches(mergedNode.children);\n    result.push(new TreeNode(mergedNode.value, mergedChildren));\n  }\n  return result.filter(n => !mergedNodes.has(n));\n}\nfunction checkOutletNameUniqueness(nodes) {\n  const names = {};\n  nodes.forEach(n => {\n    const routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const c = n.value.url.map(s => s.toString()).join('/');\n      throw new _RuntimeError(4006 /* RuntimeErrorCode.TWO_SEGMENTS_WITH_SAME_OUTLET */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\nfunction getData(route) {\n  return route.data || {};\n}\nfunction getResolve(route) {\n  return route.resolve || {};\n}\nfunction recognize(injector, configLoader, rootComponentType, config, serializer, paramsInheritanceStrategy) {\n  return mergeMap(t => recognize$1(injector, configLoader, rootComponentType, config, t.extractedUrl, serializer, paramsInheritanceStrategy).pipe(map(({\n    state: targetSnapshot,\n    tree: urlAfterRedirects\n  }) => {\n    return {\n      ...t,\n      targetSnapshot,\n      urlAfterRedirects\n    };\n  })));\n}\nfunction resolveData(paramsInheritanceStrategy, injector) {\n  return mergeMap(t => {\n    const {\n      targetSnapshot,\n      guards: {\n        canActivateChecks\n      }\n    } = t;\n    if (!canActivateChecks.length) {\n      return of(t);\n    }\n    // Iterating a Set in javascript  happens in insertion order so it is safe to use a `Set` to\n    // preserve the correct order that the resolvers should run in.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#description\n    const routesWithResolversToRun = new Set(canActivateChecks.map(check => check.route));\n    const routesNeedingDataUpdates = new Set();\n    for (const route of routesWithResolversToRun) {\n      if (routesNeedingDataUpdates.has(route)) {\n        continue;\n      }\n      // All children under the route with a resolver to run need to recompute inherited data.\n      for (const newRoute of flattenRouteTree(route)) {\n        routesNeedingDataUpdates.add(newRoute);\n      }\n    }\n    let routesProcessed = 0;\n    return from(routesNeedingDataUpdates).pipe(concatMap(route => {\n      if (routesWithResolversToRun.has(route)) {\n        return runResolve(route, targetSnapshot, paramsInheritanceStrategy, injector);\n      } else {\n        route.data = getInherited(route, route.parent, paramsInheritanceStrategy).resolve;\n        return of(void 0);\n      }\n    }), tap(() => routesProcessed++), takeLast(1), mergeMap(_ => routesProcessed === routesNeedingDataUpdates.size ? of(t) : EMPTY));\n  });\n}\n/**\n *  Returns the `ActivatedRouteSnapshot` tree as an array, using DFS to traverse the route tree.\n */\nfunction flattenRouteTree(route) {\n  const descendants = route.children.map(child => flattenRouteTree(child)).flat();\n  return [route, ...descendants];\n}\nfunction runResolve(futureARS, futureRSS, paramsInheritanceStrategy, injector) {\n  const config = futureARS.routeConfig;\n  const resolve = futureARS._resolve;\n  if (config?.title !== undefined && !hasStaticTitle(config)) {\n    resolve[RouteTitleKey] = config.title;\n  }\n  return defer(() => {\n    futureARS.data = getInherited(futureARS, futureARS.parent, paramsInheritanceStrategy).resolve;\n    return resolveNode(resolve, futureARS, futureRSS, injector).pipe(map(resolvedData => {\n      futureARS._resolvedData = resolvedData;\n      futureARS.data = {\n        ...futureARS.data,\n        ...resolvedData\n      };\n      return null;\n    }));\n  });\n}\nfunction resolveNode(resolve, futureARS, futureRSS, injector) {\n  const keys = getDataKeys(resolve);\n  if (keys.length === 0) {\n    return of({});\n  }\n  const data = {};\n  return from(keys).pipe(mergeMap(key => getResolver(resolve[key], futureARS, futureRSS, injector).pipe(first(), tap(value => {\n    if (value instanceof RedirectCommand) {\n      throw redirectingNavigationError(new DefaultUrlSerializer(), value);\n    }\n    data[key] = value;\n  }))), takeLast(1), map(() => data), catchError(e => isEmptyError(e) ? EMPTY : throwError(e)));\n}\nfunction getResolver(injectionToken, futureARS, futureRSS, injector) {\n  const closestInjector = getClosestRouteInjector(futureARS) ?? injector;\n  const resolver = getTokenOrFunctionIdentity(injectionToken, closestInjector);\n  const resolverValue = resolver.resolve ? resolver.resolve(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => resolver(futureARS, futureRSS));\n  return wrapIntoObservable(resolverValue);\n}\n\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n */\nfunction switchTap(next) {\n  return switchMap(v => {\n    const nextResult = next(v);\n    if (nextResult) {\n      return from(nextResult).pipe(map(() => v));\n    }\n    return of(v);\n  });\n}\n\n/**\n * Provides a strategy for setting the page title after a router navigation.\n *\n * The built-in implementation traverses the router state snapshot and finds the deepest primary\n * outlet with `title` property. Given the `Routes` below, navigating to\n * `/base/child(popup:aux)` would result in the document title being set to \"child\".\n * ```ts\n * [\n *   {path: 'base', title: 'base', children: [\n *     {path: 'child', title: 'child'},\n *   ],\n *   {path: 'aux', outlet: 'popup', title: 'popupTitle'}\n * ]\n * ```\n *\n * This class can be used as a base class for custom title strategies. That is, you can create your\n * own class that extends the `TitleStrategy`. Note that in the above example, the `title`\n * from the named outlet is never used. However, a custom strategy might be implemented to\n * incorporate titles in named outlets.\n *\n * @publicApi\n * @see [Page title guide](guide/routing/common-router-tasks#setting-the-page-title)\n */\nlet TitleStrategy = /*#__PURE__*/(() => {\n  class TitleStrategy {\n    /**\n     * @returns The `title` of the deepest primary route.\n     */\n    buildTitle(snapshot) {\n      let pageTitle;\n      let route = snapshot.root;\n      while (route !== undefined) {\n        pageTitle = this.getResolvedTitleForRoute(route) ?? pageTitle;\n        route = route.children.find(child => child.outlet === PRIMARY_OUTLET);\n      }\n      return pageTitle;\n    }\n    /**\n     * Given an `ActivatedRouteSnapshot`, returns the final value of the\n     * `Route.title` property, which can either be a static string or a resolved value.\n     */\n    getResolvedTitleForRoute(snapshot) {\n      return snapshot.data[RouteTitleKey];\n    }\n    static ɵfac = function TitleStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TitleStrategy)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TitleStrategy,\n      factory: () => (() => inject(DefaultTitleStrategy))(),\n      providedIn: 'root'\n    });\n  }\n  return TitleStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The default `TitleStrategy` used by the router that updates the title using the `Title` service.\n */\nlet DefaultTitleStrategy = /*#__PURE__*/(() => {\n  class DefaultTitleStrategy extends TitleStrategy {\n    title;\n    constructor(title) {\n      super();\n      this.title = title;\n    }\n    /**\n     * Sets the title of the browser to the given value.\n     *\n     * @param title The `pageTitle` from the deepest primary route.\n     */\n    updateTitle(snapshot) {\n      const title = this.buildTitle(snapshot);\n      if (title !== undefined) {\n        this.title.setTitle(title);\n      }\n    }\n    static ɵfac = function DefaultTitleStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DefaultTitleStrategy)(i0.ɵɵinject(i1.Title));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DefaultTitleStrategy,\n      factory: DefaultTitleStrategy.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DefaultTitleStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * A DI token for the router service.\n *\n * @publicApi\n */\nconst ROUTER_CONFIGURATION = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router config' : '', {\n  providedIn: 'root',\n  factory: () => ({})\n});\n\n/**\n * The DI token for a router configuration.\n *\n * `ROUTES` is a low level API for router configuration via dependency injection.\n *\n * We recommend that in almost all cases to use higher level APIs such as `RouterModule.forRoot()`,\n * `provideRouter`, or `Router.resetConfig()`.\n *\n * @publicApi\n */\nconst ROUTES = /*#__PURE__*/new InjectionToken(ngDevMode ? 'ROUTES' : '');\nlet RouterConfigLoader = /*#__PURE__*/(() => {\n  class RouterConfigLoader {\n    componentLoaders = new WeakMap();\n    childrenLoaders = new WeakMap();\n    onLoadStartListener;\n    onLoadEndListener;\n    compiler = inject(Compiler);\n    loadComponent(injector, route) {\n      if (this.componentLoaders.get(route)) {\n        return this.componentLoaders.get(route);\n      } else if (route._loadedComponent) {\n        return of(route._loadedComponent);\n      }\n      if (this.onLoadStartListener) {\n        this.onLoadStartListener(route);\n      }\n      const loadRunner = wrapIntoObservable(runInInjectionContext(injector, () => route.loadComponent())).pipe(map(maybeUnwrapDefaultExport), tap(component => {\n        if (this.onLoadEndListener) {\n          this.onLoadEndListener(route);\n        }\n        (typeof ngDevMode === 'undefined' || ngDevMode) && assertStandalone(route.path ?? '', component);\n        route._loadedComponent = component;\n      }), finalize(() => {\n        this.componentLoaders.delete(route);\n      }));\n      // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n      const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());\n      this.componentLoaders.set(route, loader);\n      return loader;\n    }\n    loadChildren(parentInjector, route) {\n      if (this.childrenLoaders.get(route)) {\n        return this.childrenLoaders.get(route);\n      } else if (route._loadedRoutes) {\n        return of({\n          routes: route._loadedRoutes,\n          injector: route._loadedInjector\n        });\n      }\n      if (this.onLoadStartListener) {\n        this.onLoadStartListener(route);\n      }\n      const moduleFactoryOrRoutes$ = loadChildren(route, this.compiler, parentInjector, this.onLoadEndListener);\n      const loadRunner = moduleFactoryOrRoutes$.pipe(finalize(() => {\n        this.childrenLoaders.delete(route);\n      }));\n      // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n      const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());\n      this.childrenLoaders.set(route, loader);\n      return loader;\n    }\n    static ɵfac = function RouterConfigLoader_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RouterConfigLoader)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: RouterConfigLoader,\n      factory: RouterConfigLoader.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return RouterConfigLoader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Executes a `route.loadChildren` callback and converts the result to an array of child routes and\n * an injector if that callback returned a module.\n *\n * This function is used for the route discovery during prerendering\n * in @angular-devkit/build-angular. If there are any updates to the contract here, it will require\n * an update to the extractor.\n */\nfunction loadChildren(route, compiler, parentInjector, onLoadEndListener) {\n  return wrapIntoObservable(runInInjectionContext(parentInjector, () => route.loadChildren())).pipe(map(maybeUnwrapDefaultExport), mergeMap(t => {\n    if (t instanceof NgModuleFactory || Array.isArray(t)) {\n      return of(t);\n    } else {\n      return from(compiler.compileModuleAsync(t));\n    }\n  }), map(factoryOrRoutes => {\n    if (onLoadEndListener) {\n      onLoadEndListener(route);\n    }\n    // This injector comes from the `NgModuleRef` when lazy loading an `NgModule`. There is\n    // no injector associated with lazy loading a `Route` array.\n    let injector;\n    let rawRoutes;\n    let requireStandaloneComponents = false;\n    if (Array.isArray(factoryOrRoutes)) {\n      rawRoutes = factoryOrRoutes;\n      requireStandaloneComponents = true;\n    } else {\n      injector = factoryOrRoutes.create(parentInjector).injector;\n      // When loading a module that doesn't provide `RouterModule.forChild()` preloader\n      // will get stuck in an infinite loop. The child module's Injector will look to\n      // its parent `Injector` when it doesn't find any ROUTES so it will return routes\n      // for it's parent module instead.\n      rawRoutes = injector.get(ROUTES, [], {\n        optional: true,\n        self: true\n      }).flat();\n    }\n    const routes = rawRoutes.map(standardizeConfig);\n    (typeof ngDevMode === 'undefined' || ngDevMode) && validateConfig(routes, route.path, requireStandaloneComponents);\n    return {\n      routes,\n      injector\n    };\n  }));\n}\nfunction isWrappedDefaultExport(value) {\n  // We use `in` here with a string key `'default'`, because we expect `DefaultExport` objects to be\n  // dynamically imported ES modules with a spec-mandated `default` key. Thus we don't expect that\n  // `default` will be a renamed property.\n  return value && typeof value === 'object' && 'default' in value;\n}\nfunction maybeUnwrapDefaultExport(input) {\n  // As per `isWrappedDefaultExport`, the `default` key here is generated by the browser and not\n  // subject to property renaming, so we reference it with bracket access.\n  return isWrappedDefaultExport(input) ? input['default'] : input;\n}\n\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @publicApi\n */\nlet UrlHandlingStrategy = /*#__PURE__*/(() => {\n  class UrlHandlingStrategy {\n    static ɵfac = function UrlHandlingStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UrlHandlingStrategy)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: UrlHandlingStrategy,\n      factory: () => (() => inject(DefaultUrlHandlingStrategy))(),\n      providedIn: 'root'\n    });\n  }\n  return UrlHandlingStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @publicApi\n */\nlet DefaultUrlHandlingStrategy = /*#__PURE__*/(() => {\n  class DefaultUrlHandlingStrategy {\n    shouldProcessUrl(url) {\n      return true;\n    }\n    extract(url) {\n      return url;\n    }\n    merge(newUrlPart, wholeUrl) {\n      return newUrlPart;\n    }\n    static ɵfac = function DefaultUrlHandlingStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DefaultUrlHandlingStrategy)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DefaultUrlHandlingStrategy,\n      factory: DefaultUrlHandlingStrategy.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DefaultUrlHandlingStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst CREATE_VIEW_TRANSITION = /*#__PURE__*/new InjectionToken(ngDevMode ? 'view transition helper' : '');\nconst VIEW_TRANSITION_OPTIONS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'view transition options' : '');\n/**\n * A helper function for using browser view transitions. This function skips the call to\n * `startViewTransition` if the browser does not support it.\n *\n * @returns A Promise that resolves when the view transition callback begins.\n */\nfunction createViewTransition(injector, from, to) {\n  const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);\n  const document = injector.get(DOCUMENT);\n  if (!document.startViewTransition || transitionOptions.skipNextTransition) {\n    transitionOptions.skipNextTransition = false;\n    // The timing of `startViewTransition` is closer to a macrotask. It won't be called\n    // until the current event loop exits so we use a promise resolved in a timeout instead\n    // of Promise.resolve().\n    return new Promise(resolve => setTimeout(resolve));\n  }\n  let resolveViewTransitionStarted;\n  const viewTransitionStarted = new Promise(resolve => {\n    resolveViewTransitionStarted = resolve;\n  });\n  const transition = document.startViewTransition(() => {\n    resolveViewTransitionStarted();\n    // We don't actually update dom within the transition callback. The resolving of the above\n    // promise unblocks the Router navigation, which synchronously activates and deactivates\n    // routes (the DOM update). This view transition waits for the next change detection to\n    // complete (below), which includes the update phase of the routed components.\n    return createRenderPromise(injector);\n  });\n  transition.ready.catch(error => {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      console.error(error);\n    }\n  });\n  const {\n    onViewTransitionCreated\n  } = transitionOptions;\n  if (onViewTransitionCreated) {\n    runInInjectionContext(injector, () => onViewTransitionCreated({\n      transition,\n      from,\n      to\n    }));\n  }\n  return viewTransitionStarted;\n}\n/**\n * Creates a promise that resolves after next render.\n */\nfunction createRenderPromise(injector) {\n  return new Promise(resolve => {\n    // Wait for the microtask queue to empty after the next render happens (by waiting a macrotask).\n    // This ensures any follow-up renders in the microtask queue are completed before the\n    // view transition starts animating.\n    afterNextRender({\n      read: () => setTimeout(resolve)\n    }, {\n      injector\n    });\n  });\n}\nconst NAVIGATION_ERROR_HANDLER = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'navigation error handler' : '');\nlet NavigationTransitions = /*#__PURE__*/(() => {\n  class NavigationTransitions {\n    currentNavigation = null;\n    currentTransition = null;\n    lastSuccessfulNavigation = null;\n    /**\n     * These events are used to communicate back to the Router about the state of the transition. The\n     * Router wants to respond to these events in various ways. Because the `NavigationTransition`\n     * class is not public, this event subject is not publicly exposed.\n     */\n    events = new Subject();\n    /**\n     * Used to abort the current transition with an error.\n     */\n    transitionAbortWithErrorSubject = new Subject();\n    configLoader = inject(RouterConfigLoader);\n    environmentInjector = inject(EnvironmentInjector);\n    destroyRef = inject(DestroyRef);\n    urlSerializer = inject(UrlSerializer);\n    rootContexts = inject(ChildrenOutletContexts);\n    location = inject(Location);\n    inputBindingEnabled = inject(INPUT_BINDER, {\n      optional: true\n    }) !== null;\n    titleStrategy = inject(TitleStrategy);\n    options = inject(ROUTER_CONFIGURATION, {\n      optional: true\n    }) || {};\n    paramsInheritanceStrategy = this.options.paramsInheritanceStrategy || 'emptyOnly';\n    urlHandlingStrategy = inject(UrlHandlingStrategy);\n    createViewTransition = inject(CREATE_VIEW_TRANSITION, {\n      optional: true\n    });\n    navigationErrorHandler = inject(NAVIGATION_ERROR_HANDLER, {\n      optional: true\n    });\n    navigationId = 0;\n    get hasRequestedNavigation() {\n      return this.navigationId !== 0;\n    }\n    transitions;\n    /**\n     * Hook that enables you to pause navigation after the preactivation phase.\n     * Used by `RouterModule`.\n     *\n     * @internal\n     */\n    afterPreactivation = () => of(void 0);\n    /** @internal */\n    rootComponentType = null;\n    destroyed = false;\n    constructor() {\n      const onLoadStart = r => this.events.next(new RouteConfigLoadStart(r));\n      const onLoadEnd = r => this.events.next(new RouteConfigLoadEnd(r));\n      this.configLoader.onLoadEndListener = onLoadEnd;\n      this.configLoader.onLoadStartListener = onLoadStart;\n      this.destroyRef.onDestroy(() => {\n        this.destroyed = true;\n      });\n    }\n    complete() {\n      this.transitions?.complete();\n    }\n    handleNavigationRequest(request) {\n      const id = ++this.navigationId;\n      this.transitions?.next({\n        ...request,\n        extractedUrl: this.urlHandlingStrategy.extract(request.rawUrl),\n        targetSnapshot: null,\n        targetRouterState: null,\n        guards: {\n          canActivateChecks: [],\n          canDeactivateChecks: []\n        },\n        guardsResult: null,\n        abortController: new AbortController(),\n        id\n      });\n    }\n    setupNavigations(router) {\n      this.transitions = new BehaviorSubject(null);\n      return this.transitions.pipe(filter(t => t !== null),\n      // Using switchMap so we cancel executing navigations when a new one comes in\n      switchMap(overallTransitionState => {\n        let completedOrAborted = false;\n        return of(overallTransitionState).pipe(switchMap(t => {\n          // It is possible that `switchMap` fails to cancel previous navigations if a new one happens synchronously while the operator\n          // is processing the `next` notification of that previous navigation. This can happen when a new navigation (say 2) cancels a\n          // previous one (1) and yet another navigation (3) happens synchronously in response to the `NavigationCancel` event for (1).\n          // https://github.com/ReactiveX/rxjs/issues/7455\n          if (this.navigationId > overallTransitionState.id) {\n            const cancellationReason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : '';\n            this.cancelNavigationTransition(overallTransitionState, cancellationReason, NavigationCancellationCode.SupersededByNewNavigation);\n            return EMPTY;\n          }\n          this.currentTransition = overallTransitionState;\n          // Store the Navigation object\n          this.currentNavigation = {\n            id: t.id,\n            initialUrl: t.rawUrl,\n            extractedUrl: t.extractedUrl,\n            targetBrowserUrl: typeof t.extras.browserUrl === 'string' ? this.urlSerializer.parse(t.extras.browserUrl) : t.extras.browserUrl,\n            trigger: t.source,\n            extras: t.extras,\n            previousNavigation: !this.lastSuccessfulNavigation ? null : {\n              ...this.lastSuccessfulNavigation,\n              previousNavigation: null\n            },\n            abort: () => t.abortController.abort()\n          };\n          const urlTransition = !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();\n          const onSameUrlNavigation = t.extras.onSameUrlNavigation ?? router.onSameUrlNavigation;\n          if (!urlTransition && onSameUrlNavigation !== 'reload') {\n            const reason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.` : '';\n            this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.rawUrl), reason, NavigationSkippedCode.IgnoredSameUrlNavigation));\n            t.resolve(false);\n            return EMPTY;\n          }\n          if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {\n            return of(t).pipe(\n            // Fire NavigationStart event\n            switchMap(t => {\n              this.events.next(new NavigationStart(t.id, this.urlSerializer.serialize(t.extractedUrl), t.source, t.restoredState));\n              if (t.id !== this.navigationId) {\n                return EMPTY;\n              }\n              // This delay is required to match old behavior that forced\n              // navigation to always be async\n              return Promise.resolve(t);\n            }),\n            // Recognize\n            recognize(this.environmentInjector, this.configLoader, this.rootComponentType, router.config, this.urlSerializer, this.paramsInheritanceStrategy),\n            // Update URL if in `eager` update mode\n            tap(t => {\n              overallTransitionState.targetSnapshot = t.targetSnapshot;\n              overallTransitionState.urlAfterRedirects = t.urlAfterRedirects;\n              this.currentNavigation = {\n                ...this.currentNavigation,\n                finalUrl: t.urlAfterRedirects\n              };\n              // Fire RoutesRecognized\n              const routesRecognized = new RoutesRecognized(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n              this.events.next(routesRecognized);\n            }));\n          } else if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)) {\n            /* When the current URL shouldn't be processed, but the previous one\n             * was, we handle this \"error condition\" by navigating to the\n             * previously successful URL, but leaving the URL intact.*/\n            const {\n              id,\n              extractedUrl,\n              source,\n              restoredState,\n              extras\n            } = t;\n            const navStart = new NavigationStart(id, this.urlSerializer.serialize(extractedUrl), source, restoredState);\n            this.events.next(navStart);\n            const targetSnapshot = createEmptyState(this.rootComponentType).snapshot;\n            this.currentTransition = overallTransitionState = {\n              ...t,\n              targetSnapshot,\n              urlAfterRedirects: extractedUrl,\n              extras: {\n                ...extras,\n                skipLocationChange: false,\n                replaceUrl: false\n              }\n            };\n            this.currentNavigation.finalUrl = extractedUrl;\n            return of(overallTransitionState);\n          } else {\n            /* When neither the current or previous URL can be processed, do\n             * nothing other than update router's internal reference to the\n             * current \"settled\" URL. This way the next navigation will be coming\n             * from the current URL in the browser.\n             */\n            const reason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation was ignored because the UrlHandlingStrategy` + ` indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.` : '';\n            this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, NavigationSkippedCode.IgnoredByUrlHandlingStrategy));\n            t.resolve(false);\n            return EMPTY;\n          }\n        }),\n        // --- GUARDS ---\n        tap(t => {\n          const guardsStart = new GuardsCheckStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n          this.events.next(guardsStart);\n        }), map(t => {\n          this.currentTransition = overallTransitionState = {\n            ...t,\n            guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts)\n          };\n          return overallTransitionState;\n        }), checkGuards(this.environmentInjector, evt => this.events.next(evt)), tap(t => {\n          overallTransitionState.guardsResult = t.guardsResult;\n          if (t.guardsResult && typeof t.guardsResult !== 'boolean') {\n            throw redirectingNavigationError(this.urlSerializer, t.guardsResult);\n          }\n          const guardsEnd = new GuardsCheckEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);\n          this.events.next(guardsEnd);\n        }), filter(t => {\n          if (!t.guardsResult) {\n            this.cancelNavigationTransition(t, '', NavigationCancellationCode.GuardRejected);\n            return false;\n          }\n          return true;\n        }),\n        // --- RESOLVE ---\n        switchTap(t => {\n          if (t.guards.canActivateChecks.length === 0) {\n            return undefined;\n          }\n          return of(t).pipe(tap(t => {\n            const resolveStart = new ResolveStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n            this.events.next(resolveStart);\n          }), switchMap(t => {\n            let dataResolved = false;\n            return of(t).pipe(resolveData(this.paramsInheritanceStrategy, this.environmentInjector), tap({\n              next: () => dataResolved = true,\n              complete: () => {\n                if (!dataResolved) {\n                  this.cancelNavigationTransition(t, typeof ngDevMode === 'undefined' || ngDevMode ? `At least one route resolver didn't emit any value.` : '', NavigationCancellationCode.NoDataFromResolver);\n                }\n              }\n            }));\n          }), tap(t => {\n            const resolveEnd = new ResolveEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);\n            this.events.next(resolveEnd);\n          }));\n        }),\n        // --- LOAD COMPONENTS ---\n        switchTap(t => {\n          const loadComponents = route => {\n            const loaders = [];\n            if (route.routeConfig?.loadComponent && !route.routeConfig._loadedComponent) {\n              const injector = getClosestRouteInjector(route) ?? this.environmentInjector;\n              loaders.push(this.configLoader.loadComponent(injector, route.routeConfig).pipe(tap(loadedComponent => {\n                route.component = loadedComponent;\n              }), map(() => void 0)));\n            }\n            for (const child of route.children) {\n              loaders.push(...loadComponents(child));\n            }\n            return loaders;\n          };\n          return combineLatest(loadComponents(t.targetSnapshot.root)).pipe(defaultIfEmpty(null), take(1));\n        }), switchTap(() => this.afterPreactivation()), switchMap(() => {\n          const {\n            currentSnapshot,\n            targetSnapshot\n          } = overallTransitionState;\n          const viewTransitionStarted = this.createViewTransition?.(this.environmentInjector, currentSnapshot.root, targetSnapshot.root);\n          // If view transitions are enabled, block the navigation until the view\n          // transition callback starts. Otherwise, continue immediately.\n          return viewTransitionStarted ? from(viewTransitionStarted).pipe(map(() => overallTransitionState)) : of(overallTransitionState);\n        }), map(t => {\n          const targetRouterState = createRouterState(router.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);\n          this.currentTransition = overallTransitionState = {\n            ...t,\n            targetRouterState\n          };\n          this.currentNavigation.targetRouterState = targetRouterState;\n          return overallTransitionState;\n        }), tap(() => {\n          this.events.next(new BeforeActivateRoutes());\n        }), activateRoutes(this.rootContexts, router.routeReuseStrategy, evt => this.events.next(evt), this.inputBindingEnabled),\n        // Ensure that if some observable used to drive the transition doesn't\n        // complete, the navigation still finalizes This should never happen, but\n        // this is done as a safety measure to avoid surfacing this error (#49567).\n        take(1), takeUntil(new Observable(subscriber => {\n          const abortSignal = overallTransitionState.abortController.signal;\n          const handler = () => subscriber.next();\n          abortSignal.addEventListener('abort', handler);\n          return () => abortSignal.removeEventListener('abort', handler);\n        }).pipe(\n        // Ignore aborts if we are already completed, canceled, or are in the activation stage (we have targetRouterState)\n        filter(() => !completedOrAborted && !overallTransitionState.targetRouterState), tap(() => {\n          this.cancelNavigationTransition(overallTransitionState, overallTransitionState.abortController.signal.reason + '', NavigationCancellationCode.Aborted);\n        }))), tap({\n          next: t => {\n            completedOrAborted = true;\n            this.lastSuccessfulNavigation = this.currentNavigation;\n            this.events.next(new NavigationEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects)));\n            this.titleStrategy?.updateTitle(t.targetRouterState.snapshot);\n            t.resolve(true);\n          },\n          complete: () => {\n            completedOrAborted = true;\n          }\n        }),\n        // There used to be a lot more logic happening directly within the\n        // transition Observable. Some of this logic has been refactored out to\n        // other places but there may still be errors that happen there. This gives\n        // us a way to cancel the transition from the outside. This may also be\n        // required in the future to support something like the abort signal of the\n        // Navigation API where the navigation gets aborted from outside the\n        // transition.\n        takeUntil(this.transitionAbortWithErrorSubject.pipe(tap(err => {\n          throw err;\n        }))), finalize(() => {\n          /* When the navigation stream finishes either through error or success,\n           * we set the `completed` or `errored` flag. However, there are some\n           * situations where we could get here without either of those being set.\n           * For instance, a redirect during NavigationStart. Therefore, this is a\n           * catch-all to make sure the NavigationCancel event is fired when a\n           * navigation gets cancelled but not caught by other means. */\n          if (!completedOrAborted) {\n            const cancelationReason = typeof ngDevMode === 'undefined' || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : '';\n            this.cancelNavigationTransition(overallTransitionState, cancelationReason, NavigationCancellationCode.SupersededByNewNavigation);\n          }\n          // Only clear current navigation if it is still set to the one that\n          // finalized.\n          if (this.currentTransition?.id === overallTransitionState.id) {\n            this.currentNavigation = null;\n            this.currentTransition = null;\n          }\n        }), catchError(e => {\n          // If the application is already destroyed, the catch block should not\n          // execute anything in practice because other resources have already\n          // been released and destroyed.\n          if (this.destroyed) {\n            overallTransitionState.resolve(false);\n            return EMPTY;\n          }\n          completedOrAborted = true;\n          /* This error type is issued during Redirect, and is handled as a\n           * cancellation rather than an error. */\n          if (isNavigationCancelingError(e)) {\n            this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e.message, e.cancellationCode));\n            // When redirecting, we need to delay resolving the navigation\n            // promise and push it to the redirect navigation\n            if (!isRedirectingNavigationCancelingError(e)) {\n              overallTransitionState.resolve(false);\n            } else {\n              this.events.next(new RedirectRequest(e.url, e.navigationBehaviorOptions));\n            }\n            /* All other errors should reset to the router's internal URL reference\n             * to the pre-error state. */\n          } else {\n            const navigationError = new NavigationError(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e, overallTransitionState.targetSnapshot ?? undefined);\n            try {\n              const navigationErrorHandlerResult = runInInjectionContext(this.environmentInjector, () => this.navigationErrorHandler?.(navigationError));\n              if (navigationErrorHandlerResult instanceof RedirectCommand) {\n                const {\n                  message,\n                  cancellationCode\n                } = redirectingNavigationError(this.urlSerializer, navigationErrorHandlerResult);\n                this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), message, cancellationCode));\n                this.events.next(new RedirectRequest(navigationErrorHandlerResult.redirectTo, navigationErrorHandlerResult.navigationBehaviorOptions));\n              } else {\n                this.events.next(navigationError);\n                throw e;\n              }\n            } catch (ee) {\n              // TODO(atscott): consider flipping the default behavior of\n              // resolveNavigationPromiseOnError to be `resolve(false)` when\n              // undefined. This is the most sane thing to do given that\n              // applications very rarely handle the promise rejection and, as a\n              // result, would get \"unhandled promise rejection\" console logs.\n              // The vast majority of applications would not be affected by this\n              // change so omitting a migration seems reasonable. Instead,\n              // applications that rely on rejection can specifically opt-in to the\n              // old behavior.\n              if (this.options.resolveNavigationPromiseOnError) {\n                overallTransitionState.resolve(false);\n              } else {\n                overallTransitionState.reject(ee);\n              }\n            }\n          }\n          return EMPTY;\n        }));\n        // casting because `pipe` returns observable({}) when called with 8+ arguments\n      }));\n    }\n    cancelNavigationTransition(t, reason, code) {\n      const navCancel = new NavigationCancel(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, code);\n      this.events.next(navCancel);\n      t.resolve(false);\n    }\n    /**\n     * @returns Whether we're navigating to somewhere that is not what the Router is\n     * currently set to.\n     */\n    isUpdatingInternalState() {\n      // TODO(atscott): The serializer should likely be used instead of\n      // `UrlTree.toString()`. Custom serializers are often written to handle\n      // things better than the default one (objects, for example will be\n      // [Object object] with the custom serializer and be \"the same\" when they\n      // aren't).\n      // (Same for isUpdatedBrowserUrl)\n      return this.currentTransition?.extractedUrl.toString() !== this.currentTransition?.currentUrlTree.toString();\n    }\n    /**\n     * @returns Whether we're updating the browser URL to something new (navigation is going\n     * to somewhere not displayed in the URL bar and we will update the URL\n     * bar if navigation succeeds).\n     */\n    isUpdatedBrowserUrl() {\n      // The extracted URL is the part of the URL that this application cares about. `extract` may\n      // return only part of the browser URL and that part may have not changed even if some other\n      // portion of the URL did.\n      const currentBrowserUrl = this.urlHandlingStrategy.extract(this.urlSerializer.parse(this.location.path(true)));\n      const targetBrowserUrl = this.currentNavigation?.targetBrowserUrl ?? this.currentNavigation?.extractedUrl;\n      return currentBrowserUrl.toString() !== targetBrowserUrl?.toString() && !this.currentNavigation?.extras.skipLocationChange;\n    }\n    static ɵfac = function NavigationTransitions_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NavigationTransitions)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NavigationTransitions,\n      factory: NavigationTransitions.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NavigationTransitions;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction isBrowserTriggeredNavigation(source) {\n  return source !== IMPERATIVE_NAVIGATION;\n}\n\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @publicApi\n */\nlet RouteReuseStrategy = /*#__PURE__*/(() => {\n  class RouteReuseStrategy {\n    static ɵfac = function RouteReuseStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RouteReuseStrategy)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: RouteReuseStrategy,\n      factory: () => (() => inject(DefaultRouteReuseStrategy))(),\n      providedIn: 'root'\n    });\n  }\n  return RouteReuseStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n *\n * This base route reuse strategy only reuses routes when the matched router configs are\n * identical. This prevents components from being destroyed and recreated\n * when just the route parameters, query parameters or fragment change\n * (that is, the existing component is _reused_).\n *\n * This strategy does not store any routes for later reuse.\n *\n * Angular uses this strategy by default.\n *\n *\n * It can be used as a base class for custom route reuse strategies, i.e. you can create your own\n * class that extends the `BaseRouteReuseStrategy` one.\n * @publicApi\n */\nclass BaseRouteReuseStrategy {\n  /**\n   * Whether the given route should detach for later reuse.\n   * Always returns false for `BaseRouteReuseStrategy`.\n   * */\n  shouldDetach(route) {\n    return false;\n  }\n  /**\n   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.\n   */\n  store(route, detachedTree) {}\n  /** Returns `false`, meaning the route (and its subtree) is never reattached */\n  shouldAttach(route) {\n    return false;\n  }\n  /** Returns `null` because this strategy does not store routes for later re-use. */\n  retrieve(route) {\n    return null;\n  }\n  /**\n   * Determines if a route should be reused.\n   * This strategy returns `true` when the future route config and current route config are\n   * identical.\n   */\n  shouldReuseRoute(future, curr) {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\nlet DefaultRouteReuseStrategy = /*#__PURE__*/(() => {\n  class DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵDefaultRouteReuseStrategy_BaseFactory;\n      return function DefaultRouteReuseStrategy_Factory(__ngFactoryType__) {\n        return (ɵDefaultRouteReuseStrategy_BaseFactory || (ɵDefaultRouteReuseStrategy_BaseFactory = i0.ɵɵgetInheritedFactory(DefaultRouteReuseStrategy)))(__ngFactoryType__ || DefaultRouteReuseStrategy);\n      };\n    })();\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DefaultRouteReuseStrategy,\n      factory: DefaultRouteReuseStrategy.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DefaultRouteReuseStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StateManager = /*#__PURE__*/(() => {\n  class StateManager {\n    urlSerializer = inject(UrlSerializer);\n    options = inject(ROUTER_CONFIGURATION, {\n      optional: true\n    }) || {};\n    canceledNavigationResolution = this.options.canceledNavigationResolution || 'replace';\n    location = inject(Location);\n    urlHandlingStrategy = inject(UrlHandlingStrategy);\n    urlUpdateStrategy = this.options.urlUpdateStrategy || 'deferred';\n    currentUrlTree = new UrlTree();\n    /**\n     * Returns the currently activated `UrlTree`.\n     *\n     * This `UrlTree` shows only URLs that the `Router` is configured to handle (through\n     * `UrlHandlingStrategy`).\n     *\n     * The value is set after finding the route config tree to activate but before activating the\n     * route.\n     */\n    getCurrentUrlTree() {\n      return this.currentUrlTree;\n    }\n    rawUrlTree = this.currentUrlTree;\n    /**\n     * Returns a `UrlTree` that is represents what the browser is actually showing.\n     *\n     * In the life of a navigation transition:\n     * 1. When a navigation begins, the raw `UrlTree` is updated to the full URL that's being\n     * navigated to.\n     * 2. During a navigation, redirects are applied, which might only apply to _part_ of the URL (due\n     * to `UrlHandlingStrategy`).\n     * 3. Just before activation, the raw `UrlTree` is updated to include the redirects on top of the\n     * original raw URL.\n     *\n     * Note that this is _only_ here to support `UrlHandlingStrategy.extract` and\n     * `UrlHandlingStrategy.shouldProcessUrl`. Without those APIs, the current `UrlTree` would not\n     * deviated from the raw `UrlTree`.\n     *\n     * For `extract`, a raw `UrlTree` is needed because `extract` may only return part\n     * of the navigation URL. Thus, the current `UrlTree` may only represent _part_ of the browser\n     * URL. When a navigation gets cancelled and the router needs to reset the URL or a new navigation\n     * occurs, it needs to know the _whole_ browser URL, not just the part handled by\n     * `UrlHandlingStrategy`.\n     * For `shouldProcessUrl`, when the return is `false`, the router ignores the navigation but\n     * still updates the raw `UrlTree` with the assumption that the navigation was caused by the\n     * location change listener due to a URL update by the AngularJS router. In this case, the router\n     * still need to know what the browser's URL is for future navigations.\n     */\n    getRawUrlTree() {\n      return this.rawUrlTree;\n    }\n    createBrowserPath({\n      finalUrl,\n      initialUrl,\n      targetBrowserUrl\n    }) {\n      const rawUrl = finalUrl !== undefined ? this.urlHandlingStrategy.merge(finalUrl, initialUrl) : initialUrl;\n      const url = targetBrowserUrl ?? rawUrl;\n      const path = url instanceof UrlTree ? this.urlSerializer.serialize(url) : url;\n      return path;\n    }\n    commitTransition({\n      targetRouterState,\n      finalUrl,\n      initialUrl\n    }) {\n      // If we are committing the transition after having a final URL and target state, we're updating\n      // all pieces of the state. Otherwise, we likely skipped the transition (due to URL handling strategy)\n      // and only want to update the rawUrlTree, which represents the browser URL (and doesn't necessarily match router state).\n      if (finalUrl && targetRouterState) {\n        this.currentUrlTree = finalUrl;\n        this.rawUrlTree = this.urlHandlingStrategy.merge(finalUrl, initialUrl);\n        this.routerState = targetRouterState;\n      } else {\n        this.rawUrlTree = initialUrl;\n      }\n    }\n    routerState = createEmptyState(null);\n    /** Returns the current RouterState. */\n    getRouterState() {\n      return this.routerState;\n    }\n    stateMemento = this.createStateMemento();\n    updateStateMemento() {\n      this.stateMemento = this.createStateMemento();\n    }\n    createStateMemento() {\n      return {\n        rawUrlTree: this.rawUrlTree,\n        currentUrlTree: this.currentUrlTree,\n        routerState: this.routerState\n      };\n    }\n    resetInternalState({\n      finalUrl\n    }) {\n      this.routerState = this.stateMemento.routerState;\n      this.currentUrlTree = this.stateMemento.currentUrlTree;\n      // Note here that we use the urlHandlingStrategy to get the reset `rawUrlTree` because it may be\n      // configured to handle only part of the navigation URL. This means we would only want to reset\n      // the part of the navigation handled by the Angular router rather than the whole URL. In\n      // addition, the URLHandlingStrategy may be configured to specifically preserve parts of the URL\n      // when merging, such as the query params so they are not lost on a refresh.\n      this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, finalUrl ?? this.rawUrlTree);\n    }\n    static ɵfac = function StateManager_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StateManager)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: StateManager,\n      factory: () => (() => inject(HistoryStateManager))(),\n      providedIn: 'root'\n    });\n  }\n  return StateManager;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet HistoryStateManager = /*#__PURE__*/(() => {\n  class HistoryStateManager extends StateManager {\n    /**\n     * The id of the currently active page in the router.\n     * Updated to the transition's target id on a successful navigation.\n     *\n     * This is used to track what page the router last activated. When an attempted navigation fails,\n     * the router can then use this to compute how to restore the state back to the previously active\n     * page.\n     */\n    currentPageId = 0;\n    lastSuccessfulId = -1;\n    restoredState() {\n      return this.location.getState();\n    }\n    /**\n     * The ɵrouterPageId of whatever page is currently active in the browser history. This is\n     * important for computing the target page id for new navigations because we need to ensure each\n     * page id in the browser history is 1 more than the previous entry.\n     */\n    get browserPageId() {\n      if (this.canceledNavigationResolution !== 'computed') {\n        return this.currentPageId;\n      }\n      return this.restoredState()?.ɵrouterPageId ?? this.currentPageId;\n    }\n    registerNonRouterCurrentEntryChangeListener(listener) {\n      return this.location.subscribe(event => {\n        if (event['type'] === 'popstate') {\n          // The `setTimeout` was added in #12160 and is likely to support Angular/AngularJS\n          // hybrid apps.\n          setTimeout(() => {\n            listener(event['url'], event.state, 'popstate');\n          });\n        }\n      });\n    }\n    handleRouterEvent(e, currentTransition) {\n      if (e instanceof NavigationStart) {\n        this.updateStateMemento();\n      } else if (e instanceof NavigationSkipped) {\n        this.commitTransition(currentTransition);\n      } else if (e instanceof RoutesRecognized) {\n        if (this.urlUpdateStrategy === 'eager') {\n          if (!currentTransition.extras.skipLocationChange) {\n            this.setBrowserUrl(this.createBrowserPath(currentTransition), currentTransition);\n          }\n        }\n      } else if (e instanceof BeforeActivateRoutes) {\n        this.commitTransition(currentTransition);\n        if (this.urlUpdateStrategy === 'deferred' && !currentTransition.extras.skipLocationChange) {\n          this.setBrowserUrl(this.createBrowserPath(currentTransition), currentTransition);\n        }\n      } else if (e instanceof NavigationCancel && e.code !== NavigationCancellationCode.SupersededByNewNavigation && e.code !== NavigationCancellationCode.Redirect) {\n        this.restoreHistory(currentTransition);\n      } else if (e instanceof NavigationError) {\n        this.restoreHistory(currentTransition, true);\n      } else if (e instanceof NavigationEnd) {\n        this.lastSuccessfulId = e.id;\n        this.currentPageId = this.browserPageId;\n      }\n    }\n    setBrowserUrl(path, {\n      extras,\n      id\n    }) {\n      const {\n        replaceUrl,\n        state\n      } = extras;\n      if (this.location.isCurrentPathEqualTo(path) || !!replaceUrl) {\n        // replacements do not update the target page\n        const currentBrowserPageId = this.browserPageId;\n        const newState = {\n          ...state,\n          ...this.generateNgRouterState(id, currentBrowserPageId)\n        };\n        this.location.replaceState(path, '', newState);\n      } else {\n        const newState = {\n          ...state,\n          ...this.generateNgRouterState(id, this.browserPageId + 1)\n        };\n        this.location.go(path, '', newState);\n      }\n    }\n    /**\n     * Performs the necessary rollback action to restore the browser URL to the\n     * state before the transition.\n     */\n    restoreHistory(navigation, restoringFromCaughtError = false) {\n      if (this.canceledNavigationResolution === 'computed') {\n        const currentBrowserPageId = this.browserPageId;\n        const targetPagePosition = this.currentPageId - currentBrowserPageId;\n        if (targetPagePosition !== 0) {\n          this.location.historyGo(targetPagePosition);\n        } else if (this.getCurrentUrlTree() === navigation.finalUrl && targetPagePosition === 0) {\n          // We got to the activation stage (where currentUrlTree is set to the navigation's\n          // finalUrl), but we weren't moving anywhere in history (skipLocationChange or replaceUrl).\n          // We still need to reset the router state back to what it was when the navigation started.\n          this.resetInternalState(navigation);\n          this.resetUrlToCurrentUrlTree();\n        } else ;\n      } else if (this.canceledNavigationResolution === 'replace') {\n        // TODO(atscott): It seems like we should _always_ reset the state here. It would be a no-op\n        // for `deferred` navigations that haven't change the internal state yet because guards\n        // reject. For 'eager' navigations, it seems like we also really should reset the state\n        // because the navigation was cancelled. Investigate if this can be done by running TGP.\n        if (restoringFromCaughtError) {\n          this.resetInternalState(navigation);\n        }\n        this.resetUrlToCurrentUrlTree();\n      }\n    }\n    resetUrlToCurrentUrlTree() {\n      this.location.replaceState(this.urlSerializer.serialize(this.getRawUrlTree()), '', this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));\n    }\n    generateNgRouterState(navigationId, routerPageId) {\n      if (this.canceledNavigationResolution === 'computed') {\n        return {\n          navigationId,\n          ɵrouterPageId: routerPageId\n        };\n      }\n      return {\n        navigationId\n      };\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵHistoryStateManager_BaseFactory;\n      return function HistoryStateManager_Factory(__ngFactoryType__) {\n        return (ɵHistoryStateManager_BaseFactory || (ɵHistoryStateManager_BaseFactory = i0.ɵɵgetInheritedFactory(HistoryStateManager)))(__ngFactoryType__ || HistoryStateManager);\n      };\n    })();\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HistoryStateManager,\n      factory: HistoryStateManager.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return HistoryStateManager;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Performs the given action once the router finishes its next/current navigation.\n *\n * The navigation is considered complete under the following conditions:\n * - `NavigationCancel` event emits and the code is not `NavigationCancellationCode.Redirect` or\n * `NavigationCancellationCode.SupersededByNewNavigation`. In these cases, the\n * redirecting/superseding navigation must finish.\n * - `NavigationError`, `NavigationEnd`, or `NavigationSkipped` event emits\n */\nfunction afterNextNavigation(router, action) {\n  router.events.pipe(filter(e => e instanceof NavigationEnd || e instanceof NavigationCancel || e instanceof NavigationError || e instanceof NavigationSkipped), map(e => {\n    if (e instanceof NavigationEnd || e instanceof NavigationSkipped) {\n      return 0 /* NavigationResult.COMPLETE */;\n    }\n    const redirecting = e instanceof NavigationCancel ? e.code === NavigationCancellationCode.Redirect || e.code === NavigationCancellationCode.SupersededByNewNavigation : false;\n    return redirecting ? 2 /* NavigationResult.REDIRECTING */ : 1 /* NavigationResult.FAILED */;\n  }), filter(result => result !== 2 /* NavigationResult.REDIRECTING */), take(1)).subscribe(() => {\n    action();\n  });\n}\n\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `true`\n * (exact = true).\n */\nconst exactMatchOptions = {\n  paths: 'exact',\n  fragment: 'ignored',\n  matrixParams: 'ignored',\n  queryParams: 'exact'\n};\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `false`\n * (exact = false).\n */\nconst subsetMatchOptions = {\n  paths: 'subset',\n  fragment: 'ignored',\n  matrixParams: 'ignored',\n  queryParams: 'subset'\n};\n/**\n * @description\n *\n * A service that facilitates navigation among views and URL manipulation capabilities.\n * This service is provided in the root scope and configured with [provideRouter](api/router/provideRouter).\n *\n * @see {@link Route}\n * @see {@link provideRouter}\n * @see [Routing and Navigation Guide](guide/routing/common-router-tasks).\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nlet Router = /*#__PURE__*/(() => {\n  class Router {\n    get currentUrlTree() {\n      return this.stateManager.getCurrentUrlTree();\n    }\n    get rawUrlTree() {\n      return this.stateManager.getRawUrlTree();\n    }\n    disposed = false;\n    nonRouterCurrentEntryChangeSubscription;\n    console = inject(_Console);\n    stateManager = inject(StateManager);\n    options = inject(ROUTER_CONFIGURATION, {\n      optional: true\n    }) || {};\n    pendingTasks = inject(_PendingTasksInternal);\n    urlUpdateStrategy = this.options.urlUpdateStrategy || 'deferred';\n    navigationTransitions = inject(NavigationTransitions);\n    urlSerializer = inject(UrlSerializer);\n    location = inject(Location);\n    urlHandlingStrategy = inject(UrlHandlingStrategy);\n    injector = inject(EnvironmentInjector);\n    /**\n     * The private `Subject` type for the public events exposed in the getter. This is used internally\n     * to push events to. The separate field allows us to expose separate types in the public API\n     * (i.e., an Observable rather than the Subject).\n     */\n    _events = new Subject();\n    /**\n     * An event stream for routing events.\n     */\n    get events() {\n      // TODO(atscott): This _should_ be events.asObservable(). However, this change requires internal\n      // cleanup: tests are doing `(route.events as Subject<Event>).next(...)`. This isn't\n      // allowed/supported but we still have to fix these or file bugs against the teams before making\n      // the change.\n      return this._events;\n    }\n    /**\n     * The current state of routing in this NgModule.\n     */\n    get routerState() {\n      return this.stateManager.getRouterState();\n    }\n    /**\n     * True if at least one navigation event has occurred,\n     * false otherwise.\n     */\n    navigated = false;\n    /**\n     * A strategy for re-using routes.\n     *\n     * @deprecated Configure using `providers` instead:\n     *   `{provide: RouteReuseStrategy, useClass: MyStrategy}`.\n     */\n    routeReuseStrategy = inject(RouteReuseStrategy);\n    /**\n     * How to handle a navigation request to the current URL.\n     *\n     *\n     * @deprecated Configure this through `provideRouter` or `RouterModule.forRoot` instead.\n     * @see {@link withRouterConfig}\n     * @see {@link provideRouter}\n     * @see {@link RouterModule}\n     */\n    onSameUrlNavigation = this.options.onSameUrlNavigation || 'ignore';\n    config = inject(ROUTES, {\n      optional: true\n    })?.flat() ?? [];\n    /**\n     * Indicates whether the application has opted in to binding Router data to component inputs.\n     *\n     * This option is enabled by the `withComponentInputBinding` feature of `provideRouter` or\n     * `bindToComponentInputs` in the `ExtraOptions` of `RouterModule.forRoot`.\n     */\n    componentInputBindingEnabled = !!inject(INPUT_BINDER, {\n      optional: true\n    });\n    constructor() {\n      this.resetConfig(this.config);\n      this.navigationTransitions.setupNavigations(this).subscribe({\n        error: e => {\n          this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e}` : e);\n        }\n      });\n      this.subscribeToNavigationEvents();\n    }\n    eventsSubscription = new Subscription();\n    subscribeToNavigationEvents() {\n      const subscription = this.navigationTransitions.events.subscribe(e => {\n        try {\n          const currentTransition = this.navigationTransitions.currentTransition;\n          const currentNavigation = this.navigationTransitions.currentNavigation;\n          if (currentTransition !== null && currentNavigation !== null) {\n            this.stateManager.handleRouterEvent(e, currentNavigation);\n            if (e instanceof NavigationCancel && e.code !== NavigationCancellationCode.Redirect && e.code !== NavigationCancellationCode.SupersededByNewNavigation) {\n              // It seems weird that `navigated` is set to `true` when the navigation is rejected,\n              // however it's how things were written initially. Investigation would need to be done\n              // to determine if this can be removed.\n              this.navigated = true;\n            } else if (e instanceof NavigationEnd) {\n              this.navigated = true;\n            } else if (e instanceof RedirectRequest) {\n              const opts = e.navigationBehaviorOptions;\n              const mergedTree = this.urlHandlingStrategy.merge(e.url, currentTransition.currentRawUrl);\n              const extras = {\n                browserUrl: currentTransition.extras.browserUrl,\n                info: currentTransition.extras.info,\n                skipLocationChange: currentTransition.extras.skipLocationChange,\n                // The URL is already updated at this point if we have 'eager' URL\n                // updates or if the navigation was triggered by the browser (back\n                // button, URL bar, etc). We want to replace that item in history\n                // if the navigation is rejected.\n                replaceUrl: currentTransition.extras.replaceUrl || this.urlUpdateStrategy === 'eager' || isBrowserTriggeredNavigation(currentTransition.source),\n                // allow developer to override default options with RedirectCommand\n                ...opts\n              };\n              this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras, {\n                resolve: currentTransition.resolve,\n                reject: currentTransition.reject,\n                promise: currentTransition.promise\n              });\n            }\n          }\n          // Note that it's important to have the Router process the events _before_ the event is\n          // pushed through the public observable. This ensures the correct router state is in place\n          // before applications observe the events.\n          if (isPublicRouterEvent(e)) {\n            this._events.next(e);\n          }\n        } catch (e) {\n          this.navigationTransitions.transitionAbortWithErrorSubject.next(e);\n        }\n      });\n      this.eventsSubscription.add(subscription);\n    }\n    /** @internal */\n    resetRootComponentType(rootComponentType) {\n      // TODO: vsavkin router 4.0 should make the root component set to null\n      // this will simplify the lifecycle of the router.\n      this.routerState.root.component = rootComponentType;\n      this.navigationTransitions.rootComponentType = rootComponentType;\n    }\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     */\n    initialNavigation() {\n      this.setUpLocationChangeListener();\n      if (!this.navigationTransitions.hasRequestedNavigation) {\n        this.navigateToSyncWithBrowser(this.location.path(true), IMPERATIVE_NAVIGATION, this.stateManager.restoredState());\n      }\n    }\n    /**\n     * Sets up the location change listener. This listener detects navigations triggered from outside\n     * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router\n     * navigation so that the correct events, guards, etc. are triggered.\n     */\n    setUpLocationChangeListener() {\n      // Don't need to use Zone.wrap any more, because zone.js\n      // already patch onPopState, so location change callback will\n      // run into ngZone\n      this.nonRouterCurrentEntryChangeSubscription ??= this.stateManager.registerNonRouterCurrentEntryChangeListener((url, state, source) => {\n        this.navigateToSyncWithBrowser(url, source, state);\n      });\n    }\n    /**\n     * Schedules a router navigation to synchronize Router state with the browser state.\n     *\n     * This is done as a response to a popstate event and the initial navigation. These\n     * two scenarios represent times when the browser URL/state has been updated and\n     * the Router needs to respond to ensure its internal state matches.\n     */\n    navigateToSyncWithBrowser(url, source, state) {\n      const extras = {\n        replaceUrl: true\n      };\n      // TODO: restoredState should always include the entire state, regardless\n      // of navigationId. This requires a breaking change to update the type on\n      // NavigationStart’s restoredState, which currently requires navigationId\n      // to always be present. The Router used to only restore history state if\n      // a navigationId was present.\n      // The stored navigationId is used by the RouterScroller to retrieve the scroll\n      // position for the page.\n      const restoredState = state?.navigationId ? state : null;\n      // Separate to NavigationStart.restoredState, we must also restore the state to\n      // history.state and generate a new navigationId, since it will be overwritten\n      if (state) {\n        const stateCopy = {\n          ...state\n        };\n        delete stateCopy.navigationId;\n        delete stateCopy.ɵrouterPageId;\n        if (Object.keys(stateCopy).length !== 0) {\n          extras.state = stateCopy;\n        }\n      }\n      const urlTree = this.parseUrl(url);\n      this.scheduleNavigation(urlTree, source, restoredState, extras).catch(e => {\n        if (this.disposed) {\n          return;\n        }\n        this.injector.get(_INTERNAL_APPLICATION_ERROR_HANDLER)(e);\n      });\n    }\n    /** The current URL. */\n    get url() {\n      return this.serializeUrl(this.currentUrlTree);\n    }\n    /**\n     * Returns the current `Navigation` object when the router is navigating,\n     * and `null` when idle.\n     */\n    getCurrentNavigation() {\n      return this.navigationTransitions.currentNavigation;\n    }\n    /**\n     * The `Navigation` object of the most recent navigation to succeed and `null` if there\n     *     has not been a successful navigation yet.\n     */\n    get lastSuccessfulNavigation() {\n      return this.navigationTransitions.lastSuccessfulNavigation;\n    }\n    /**\n     * Resets the route configuration used for navigation and generating links.\n     *\n     * @param config The route array for the new configuration.\n     *\n     * @usageNotes\n     *\n     * ```ts\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     */\n    resetConfig(config) {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && validateConfig(config);\n      this.config = config.map(standardizeConfig);\n      this.navigated = false;\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      this.dispose();\n    }\n    /** Disposes of the router. */\n    dispose() {\n      // We call `unsubscribe()` to release observers, as users may forget to\n      // unsubscribe manually when subscribing to `router.events`. We do not call\n      // `complete()` because it is unsafe; if someone subscribes using the `first`\n      // operator and the observable completes before emitting a value,\n      // RxJS will throw an error.\n      this._events.unsubscribe();\n      this.navigationTransitions.complete();\n      if (this.nonRouterCurrentEntryChangeSubscription) {\n        this.nonRouterCurrentEntryChangeSubscription.unsubscribe();\n        this.nonRouterCurrentEntryChangeSubscription = undefined;\n      }\n      this.disposed = true;\n      this.eventsSubscription.unsubscribe();\n    }\n    /**\n     * Appends URL segments to the current URL tree to create a new URL tree.\n     *\n     * @param commands An array of URL fragments with which to construct the new URL tree.\n     * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n     * segments, followed by the parameters for each segment.\n     * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`\n     * property of the options object, if supplied.\n     * @param navigationExtras Options that control the navigation strategy.\n     * @returns The new URL tree.\n     *\n     * @usageNotes\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it,\n     * // you can do the following:\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     *\n     * Note that a value of `null` or `undefined` for `relativeTo` indicates that the\n     * tree should be created relative to the root.\n     * ```\n     */\n    createUrlTree(commands, navigationExtras = {}) {\n      const {\n        relativeTo,\n        queryParams,\n        fragment,\n        queryParamsHandling,\n        preserveFragment\n      } = navigationExtras;\n      const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n      let q = null;\n      switch (queryParamsHandling ?? this.options.defaultQueryParamsHandling) {\n        case 'merge':\n          q = {\n            ...this.currentUrlTree.queryParams,\n            ...queryParams\n          };\n          break;\n        case 'preserve':\n          q = this.currentUrlTree.queryParams;\n          break;\n        default:\n          q = queryParams || null;\n      }\n      if (q !== null) {\n        q = this.removeEmptyProps(q);\n      }\n      let relativeToUrlSegmentGroup;\n      try {\n        const relativeToSnapshot = relativeTo ? relativeTo.snapshot : this.routerState.snapshot.root;\n        relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeToSnapshot);\n      } catch (e) {\n        // This is strictly for backwards compatibility with tests that create\n        // invalid `ActivatedRoute` mocks.\n        // Note: the difference between having this fallback for invalid `ActivatedRoute` setups and\n        // just throwing is ~500 test failures. Fixing all of those tests by hand is not feasible at\n        // the moment.\n        if (typeof commands[0] !== 'string' || commands[0][0] !== '/') {\n          // Navigations that were absolute in the old way of creating UrlTrees\n          // would still work because they wouldn't attempt to match the\n          // segments in the `ActivatedRoute` to the `currentUrlTree` but\n          // instead just replace the root segment with the navigation result.\n          // Non-absolute navigations would fail to apply the commands because\n          // the logic could not find the segment to replace (so they'd act like there were no\n          // commands).\n          commands = [];\n        }\n        relativeToUrlSegmentGroup = this.currentUrlTree.root;\n      }\n      return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, q, f ?? null);\n    }\n    /**\n     * Navigates to a view using an absolute route path.\n     *\n     * @param url An absolute path for a defined route. The function does not apply any delta to the\n     *     current URL.\n     * @param extras An object containing properties that modify the navigation strategy.\n     *\n     * @returns A Promise that resolves to 'true' when navigation succeeds,\n     * to 'false' when navigation fails, or is rejected on error.\n     *\n     * @usageNotes\n     *\n     * The following calls request navigation to an absolute path.\n     *\n     * ```ts\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n     *\n     */\n    navigateByUrl(url, extras = {\n      skipLocationChange: false\n    }) {\n      const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n      const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n      return this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras);\n    }\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * @param commands An array of URL fragments with which to construct the target URL.\n     * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n     * segments, followed by the parameters for each segment.\n     * The fragments are applied to the current URL or the one provided  in the `relativeTo` property\n     * of the options object, if supplied.\n     * @param extras An options object that determines how the URL should be constructed or\n     *     interpreted.\n     *\n     * @returns A Promise that resolves to `true` when navigation succeeds, or `false` when navigation\n     *     fails. The Promise is rejected when an error occurs if `resolveNavigationPromiseOnError` is\n     * not `true`.\n     *\n     * @usageNotes\n     *\n     * The following calls request navigation to a dynamic route path relative to the current URL.\n     *\n     * ```ts\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL, overriding the default behavior\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n     *\n     */\n    navigate(commands, extras = {\n      skipLocationChange: false\n    }) {\n      validateCommands(commands);\n      return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n    }\n    /** Serializes a `UrlTree` into a string */\n    serializeUrl(url) {\n      return this.urlSerializer.serialize(url);\n    }\n    /** Parses a string into a `UrlTree` */\n    parseUrl(url) {\n      try {\n        return this.urlSerializer.parse(url);\n      } catch {\n        return this.urlSerializer.parse('/');\n      }\n    }\n    isActive(url, matchOptions) {\n      let options;\n      if (matchOptions === true) {\n        options = {\n          ...exactMatchOptions\n        };\n      } else if (matchOptions === false) {\n        options = {\n          ...subsetMatchOptions\n        };\n      } else {\n        options = matchOptions;\n      }\n      if (isUrlTree(url)) {\n        return containsTree(this.currentUrlTree, url, options);\n      }\n      const urlTree = this.parseUrl(url);\n      return containsTree(this.currentUrlTree, urlTree, options);\n    }\n    removeEmptyProps(params) {\n      return Object.entries(params).reduce((result, [key, value]) => {\n        if (value !== null && value !== undefined) {\n          result[key] = value;\n        }\n        return result;\n      }, {});\n    }\n    scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {\n      if (this.disposed) {\n        return Promise.resolve(false);\n      }\n      let resolve;\n      let reject;\n      let promise;\n      if (priorPromise) {\n        resolve = priorPromise.resolve;\n        reject = priorPromise.reject;\n        promise = priorPromise.promise;\n      } else {\n        promise = new Promise((res, rej) => {\n          resolve = res;\n          reject = rej;\n        });\n      }\n      // Indicate that the navigation is happening.\n      const taskId = this.pendingTasks.add();\n      afterNextNavigation(this, () => {\n        // Remove pending task in a microtask to allow for cancelled\n        // initial navigations and redirects within the same task.\n        queueMicrotask(() => this.pendingTasks.remove(taskId));\n      });\n      this.navigationTransitions.handleNavigationRequest({\n        source,\n        restoredState,\n        currentUrlTree: this.currentUrlTree,\n        currentRawUrl: this.currentUrlTree,\n        rawUrl,\n        extras,\n        resolve: resolve,\n        reject: reject,\n        promise,\n        currentSnapshot: this.routerState.snapshot,\n        currentRouterState: this.routerState\n      });\n      // Make sure that the error is propagated even though `processNavigations` catch\n      // handler does not rethrow\n      return promise.catch(e => {\n        return Promise.reject(e);\n      });\n    }\n    static ɵfac = function Router_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Router)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Router,\n      factory: Router.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Router;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction validateCommands(commands) {\n  for (let i = 0; i < commands.length; i++) {\n    const cmd = commands[i];\n    if (cmd == null) {\n      throw new _RuntimeError(4008 /* RuntimeErrorCode.NULLISH_COMMAND */, (typeof ngDevMode === 'undefined' || ngDevMode) && `The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\nexport { ActivatedRoute, ActivatedRouteSnapshot, ActivationEnd, ActivationStart, BaseRouteReuseStrategy, CREATE_VIEW_TRANSITION, ChildActivationEnd, ChildActivationStart, ChildrenOutletContexts, DefaultTitleStrategy, DefaultUrlSerializer, EventType, GuardsCheckEnd, GuardsCheckStart, IMPERATIVE_NAVIGATION, INPUT_BINDER, NAVIGATION_ERROR_HANDLER, NavigationCancel, NavigationCancellationCode, NavigationEnd, NavigationError, NavigationSkipped, NavigationSkippedCode, NavigationStart, NavigationTransitions, OutletContext, PRIMARY_OUTLET, ROUTER_CONFIGURATION, ROUTER_OUTLET_DATA, ROUTES, RedirectCommand, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteReuseStrategy, RoutedComponentInputBinder, Router, RouterConfigLoader, RouterEvent, RouterOutlet, RouterState, RouterStateSnapshot, RoutesRecognized, Scroll, TitleStrategy, UrlHandlingStrategy, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, VIEW_TRANSITION_OPTIONS, afterNextNavigation, convertToParamMap, createUrlTreeFromSnapshot, createViewTransition, defaultUrlMatcher, isUrlTree, loadChildren, stringifyEvent, ɵEmptyOutletComponent };\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i3 from '@angular/common';\nimport { LOCATION_INITIALIZED, ViewportScroller, LocationStrategy, HashLocationStrategy, Location, PathLocationStrategy } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { signal, untracked, inject, ɵINTERNAL_APPLICATION_ERROR_HANDLER as _INTERNAL_APPLICATION_ERROR_HANDLER, HostAttributeToken, ɵRuntimeError as _RuntimeError, booleanAttribute, Directive, Attribute, HostBinding, Input, HostListener, EventEmitter, Optional, ContentChildren, Output, Injectable, createEnvironmentInjector, InjectionToken, makeEnvironmentProviders, APP_BOOTSTRAP_LISTENER, Injector, ApplicationRef, provideAppInitializer, ɵperformanceMarkFeature as _performanceMarkFeature, ENVIRONMENT_INITIALIZER, NgZone, SkipSelf, NgModule } from '@angular/core';\nimport { ROUTER_CONFIGURATION, NavigationEnd, isUrlTree, Router, ActivatedRoute, RouterConfigLoader, IMPERATIVE_NAVIGATION, NavigationStart, NavigationSkipped, NavigationSkippedCode, Scroll, UrlSerializer, NavigationTransitions, ROUTES, afterNextNavigation, stringifyEvent, NAVIGATION_ERROR_HANDLER, RoutedComponentInputBinder, INPUT_BINDER, CREATE_VIEW_TRANSITION, createViewTransition, VIEW_TRANSITION_OPTIONS, DefaultUrlSerializer, ChildrenOutletContexts, RouterOutlet, ɵEmptyOutletComponent as _EmptyOutletComponent } from './router2.mjs';\nimport { Subject, of, from } from 'rxjs';\nimport { mergeAll, catchError, filter, concatMap, mergeMap } from 'rxjs/operators';\n\n/**\n * @description\n *\n * When applied to an element in a template, makes that element a link\n * that initiates navigation to a route. Navigation opens one or more routed components\n * in one or more `<router-outlet>` locations on the page.\n *\n * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,\n * the following creates a static link to the route:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * You can use dynamic values to generate the link.\n * For a dynamic link, pass an array of path segments,\n * followed by the params for each segment.\n * For example, `['/team', teamId, 'user', userName, {details: true}]`\n * generates a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one term and combined with dynamic segments.\n * For example, `['/team/11/user', userName, {details: true}]`\n *\n * The input that you provide to the link is treated as a delta to the current URL.\n * For instance, suppose the current URL is `/user/(box//aux:team)`.\n * The link `<a [routerLink]=\"['/user/jim']\">Jim</a>` creates the URL\n * `/user/(jim//aux:team)`.\n * See {@link Router#createUrlTree} for more information.\n *\n * @usageNotes\n *\n * You can use absolute or relative paths in a link, set query parameters,\n * control how parameters are handled, and keep a history of navigation states.\n *\n * ### Relative link paths\n *\n * The first segment name can be prepended with `/`, `./`, or `../`.\n * * If the first segment begins with `/`, the router looks up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router\n *   looks in the children of the current activated route.\n * * If the first segment begins with `../`, the router goes up one level in the route tree.\n *\n * ### Setting and handling query params and fragments\n *\n * The following link adds a query parameter and a fragment to the generated URL:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * By default, the directive constructs the new URL using the given query parameters.\n * The example generates the link: `/user/bob?debug=true#education`.\n *\n * You can instruct the directive to handle query parameters differently\n * by specifying the `queryParamsHandling` option in the link.\n * Allowed values are:\n *\n *  - `'merge'`: Merge the given `queryParams` into the current query params.\n *  - `'preserve'`: Preserve the current query params.\n *\n * For example:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * `queryParams`, `fragment`, `queryParamsHandling`, `preserveFragment`, and `relativeTo`\n * cannot be used when the `routerLink` input is a `UrlTree`.\n *\n * See {@link UrlCreationOptions#queryParamsHandling}.\n *\n * ### Preserving navigation history\n *\n * You can provide a `state` value to be persisted to the browser's\n * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).\n * For example:\n *\n * ```html\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * Use {@link Router#getCurrentNavigation} to retrieve a saved\n * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`\n * event:\n *\n * ```ts\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * ### RouterLink compatible custom elements\n *\n * In order to make a custom element work with routerLink, the corresponding custom\n * element must implement the `href` attribute and must list `href` in the array of\n * the static property/getter `observedAttributes`.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nlet RouterLink = /*#__PURE__*/(() => {\n  class RouterLink {\n    router;\n    route;\n    tabIndexAttribute;\n    renderer;\n    el;\n    locationStrategy;\n    /** @nodoc */\n    reactiveHref = signal(null, ...(ngDevMode ? [{\n      debugName: \"reactiveHref\"\n    }] : []));\n    /**\n     * Represents an `href` attribute value applied to a host element,\n     * when a host element is an `<a>`/`<area>` tag or a compatible custom element.\n     * For other tags, the value is `null`.\n     */\n    get href() {\n      return untracked(this.reactiveHref);\n    }\n    /** @deprecated */\n    set href(value) {\n      this.reactiveHref.set(value);\n    }\n    /**\n     * Represents the `target` attribute on a host element.\n     * This is only used when the host element is\n     * an `<a>`/`<area>` tag or a compatible custom element.\n     */\n    target;\n    /**\n     * Passed to {@link Router#createUrlTree} as part of the\n     * `UrlCreationOptions`.\n     * @see {@link UrlCreationOptions#queryParams}\n     * @see {@link Router#createUrlTree}\n     */\n    queryParams;\n    /**\n     * Passed to {@link Router#createUrlTree} as part of the\n     * `UrlCreationOptions`.\n     * @see {@link UrlCreationOptions#fragment}\n     * @see {@link Router#createUrlTree}\n     */\n    fragment;\n    /**\n     * Passed to {@link Router#createUrlTree} as part of the\n     * `UrlCreationOptions`.\n     * @see {@link UrlCreationOptions#queryParamsHandling}\n     * @see {@link Router#createUrlTree}\n     */\n    queryParamsHandling;\n    /**\n     * Passed to {@link Router#navigateByUrl} as part of the\n     * `NavigationBehaviorOptions`.\n     * @see {@link NavigationBehaviorOptions#state}\n     * @see {@link Router#navigateByUrl}\n     */\n    state;\n    /**\n     * Passed to {@link Router#navigateByUrl} as part of the\n     * `NavigationBehaviorOptions`.\n     * @see {@link NavigationBehaviorOptions#info}\n     * @see {@link Router#navigateByUrl}\n     */\n    info;\n    /**\n     * Passed to {@link Router#createUrlTree} as part of the\n     * `UrlCreationOptions`.\n     * Specify a value here when you do not want to use the default value\n     * for `routerLink`, which is the current activated route.\n     * Note that a value of `undefined` here will use the `routerLink` default.\n     * @see {@link UrlCreationOptions#relativeTo}\n     * @see {@link Router#createUrlTree}\n     */\n    relativeTo;\n    /** Whether a host element is an `<a>`/`<area>` tag or a compatible custom element. */\n    isAnchorElement;\n    subscription;\n    /** @internal */\n    onChanges = new Subject();\n    applicationErrorHandler = inject(_INTERNAL_APPLICATION_ERROR_HANDLER);\n    options = inject(ROUTER_CONFIGURATION, {\n      optional: true\n    });\n    constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {\n      this.router = router;\n      this.route = route;\n      this.tabIndexAttribute = tabIndexAttribute;\n      this.renderer = renderer;\n      this.el = el;\n      this.locationStrategy = locationStrategy;\n      // Set the initial href value to whatever exists on the host element already\n      this.reactiveHref.set(inject(new HostAttributeToken('href'), {\n        optional: true\n      }));\n      const tagName = el.nativeElement.tagName?.toLowerCase();\n      this.isAnchorElement = tagName === 'a' || tagName === 'area' || !!(\n      // Avoid breaking in an SSR context where customElements might not be defined.\n      typeof customElements === 'object' &&\n      // observedAttributes is an optional static property/getter on a custom element.\n      // The spec states that this must be an array of strings.\n      customElements.get(tagName)?.observedAttributes?.includes?.('href'));\n      if (!this.isAnchorElement) {\n        this.subscribeToNavigationEventsIfNecessary();\n      } else {\n        this.setTabIndexIfNotOnNativeEl('0');\n      }\n    }\n    subscribeToNavigationEventsIfNecessary() {\n      if (this.subscription !== undefined || !this.isAnchorElement) {\n        return;\n      }\n      // preserving fragment in router state\n      let createSubcription = this.preserveFragment;\n      // preserving or merging with query params in router state\n      const dependsOnRouterState = handling => handling === 'merge' || handling === 'preserve';\n      createSubcription ||= dependsOnRouterState(this.queryParamsHandling);\n      createSubcription ||= !this.queryParamsHandling && !dependsOnRouterState(this.options?.defaultQueryParamsHandling);\n      if (!createSubcription) {\n        return;\n      }\n      this.subscription = this.router.events.subscribe(s => {\n        if (s instanceof NavigationEnd) {\n          this.updateHref();\n        }\n      });\n    }\n    /**\n     * Passed to {@link Router#createUrlTree} as part of the\n     * `UrlCreationOptions`.\n     * @see {@link UrlCreationOptions#preserveFragment}\n     * @see {@link Router#createUrlTree}\n     */\n    preserveFragment = false;\n    /**\n     * Passed to {@link Router#navigateByUrl} as part of the\n     * `NavigationBehaviorOptions`.\n     * @see {@link NavigationBehaviorOptions#skipLocationChange}\n     * @see {@link Router#navigateByUrl}\n     */\n    skipLocationChange = false;\n    /**\n     * Passed to {@link Router#navigateByUrl} as part of the\n     * `NavigationBehaviorOptions`.\n     * @see {@link NavigationBehaviorOptions#replaceUrl}\n     * @see {@link Router#navigateByUrl}\n     */\n    replaceUrl = false;\n    /**\n     * Modifies the tab index if there was not a tabindex attribute on the element during\n     * instantiation.\n     */\n    setTabIndexIfNotOnNativeEl(newTabIndex) {\n      if (this.tabIndexAttribute != null /* both `null` and `undefined` */ || this.isAnchorElement) {\n        return;\n      }\n      this.applyAttributeValue('tabindex', newTabIndex);\n    }\n    /** @docs-private */\n    // TODO(atscott): Remove changes parameter in major version as a breaking change.\n    ngOnChanges(changes) {\n      if (ngDevMode && isUrlTree(this.routerLinkInput) && (this.fragment !== undefined || this.queryParams || this.queryParamsHandling || this.preserveFragment || this.relativeTo)) {\n        throw new _RuntimeError(4016 /* RuntimeErrorCode.INVALID_ROUTER_LINK_INPUTS */, 'Cannot configure queryParams or fragment when using a UrlTree as the routerLink input value.');\n      }\n      if (this.isAnchorElement) {\n        this.updateHref();\n        this.subscribeToNavigationEventsIfNecessary();\n      }\n      // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes\n      // to the RouterLinks it's tracking.\n      this.onChanges.next(this);\n    }\n    routerLinkInput = null;\n    /**\n     * Commands to pass to {@link Router#createUrlTree} or a `UrlTree`.\n     *   - **array**: commands to pass to {@link Router#createUrlTree}.\n     *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\n     *   - **UrlTree**: a `UrlTree` for this link rather than creating one from the commands\n     *     and other inputs that correspond to properties of `UrlCreationOptions`.\n     *   - **null|undefined**: effectively disables the `routerLink`\n     * @see {@link Router#createUrlTree}\n     */\n    set routerLink(commandsOrUrlTree) {\n      if (commandsOrUrlTree == null) {\n        this.routerLinkInput = null;\n        this.setTabIndexIfNotOnNativeEl(null);\n      } else {\n        if (isUrlTree(commandsOrUrlTree)) {\n          this.routerLinkInput = commandsOrUrlTree;\n        } else {\n          this.routerLinkInput = Array.isArray(commandsOrUrlTree) ? commandsOrUrlTree : [commandsOrUrlTree];\n        }\n        this.setTabIndexIfNotOnNativeEl('0');\n      }\n    }\n    /** @docs-private */\n    onClick(button, ctrlKey, shiftKey, altKey, metaKey) {\n      const urlTree = this.urlTree;\n      if (urlTree === null) {\n        return true;\n      }\n      if (this.isAnchorElement) {\n        if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n          return true;\n        }\n        if (typeof this.target === 'string' && this.target != '_self') {\n          return true;\n        }\n      }\n      const extras = {\n        skipLocationChange: this.skipLocationChange,\n        replaceUrl: this.replaceUrl,\n        state: this.state,\n        info: this.info\n      };\n      // navigateByUrl is mocked frequently in tests... Reduce breakages when adding `catch`\n      this.router.navigateByUrl(urlTree, extras)?.catch(e => {\n        this.applicationErrorHandler(e);\n      });\n      // Return `false` for `<a>` elements to prevent default action\n      // and cancel the native behavior, since the navigation is handled\n      // by the Router.\n      return !this.isAnchorElement;\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      this.subscription?.unsubscribe();\n    }\n    updateHref() {\n      const urlTree = this.urlTree;\n      this.reactiveHref.set(urlTree !== null && this.locationStrategy ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree)) ?? '' : null);\n    }\n    applyAttributeValue(attrName, attrValue) {\n      const renderer = this.renderer;\n      const nativeElement = this.el.nativeElement;\n      if (attrValue !== null) {\n        renderer.setAttribute(nativeElement, attrName, attrValue);\n      } else {\n        renderer.removeAttribute(nativeElement, attrName);\n      }\n    }\n    get urlTree() {\n      if (this.routerLinkInput === null) {\n        return null;\n      } else if (isUrlTree(this.routerLinkInput)) {\n        return this.routerLinkInput;\n      }\n      return this.router.createUrlTree(this.routerLinkInput, {\n        // If the `relativeTo` input is not defined, we want to use `this.route` by default.\n        // Otherwise, we should use the value provided by the user in the input.\n        relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,\n        queryParams: this.queryParams,\n        fragment: this.fragment,\n        queryParamsHandling: this.queryParamsHandling,\n        preserveFragment: this.preserveFragment\n      });\n    }\n    static ɵfac = function RouterLink_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RouterLink)(i0.ɵɵdirectiveInject(Router), i0.ɵɵdirectiveInject(ActivatedRoute), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.LocationStrategy));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: RouterLink,\n      selectors: [[\"\", \"routerLink\", \"\"]],\n      hostVars: 2,\n      hostBindings: function RouterLink_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function RouterLink_click_HostBindingHandler($event) {\n            return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"href\", ctx.reactiveHref(), i0.ɵɵsanitizeUrlOrResourceUrl)(\"target\", ctx.target);\n        }\n      },\n      inputs: {\n        target: \"target\",\n        queryParams: \"queryParams\",\n        fragment: \"fragment\",\n        queryParamsHandling: \"queryParamsHandling\",\n        state: \"state\",\n        info: \"info\",\n        relativeTo: \"relativeTo\",\n        preserveFragment: [2, \"preserveFragment\", \"preserveFragment\", booleanAttribute],\n        skipLocationChange: [2, \"skipLocationChange\", \"skipLocationChange\", booleanAttribute],\n        replaceUrl: [2, \"replaceUrl\", \"replaceUrl\", booleanAttribute],\n        routerLink: \"routerLink\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return RouterLink;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n *\n * @description\n *\n * Tracks whether the linked route of an element is currently active, and allows you\n * to specify one or more CSS classes to add to the element when the linked route\n * is active.\n *\n * Use this directive to create a visual distinction for elements associated with an active route.\n * For example, the following code highlights the word \"Bob\" when the router\n * activates the associated route:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * Whenever the URL is either '/user' or '/user/bob', the \"active-link\" class is\n * added to the anchor tag. If the URL changes, the class is removed.\n *\n * You can set more than one class using a space-separated string or an array.\n * For example:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * To add the classes only when the URL matches the link exactly, add the option `exact: true`:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * To directly check the `isActive` status of the link, assign the `RouterLinkActive`\n * instance to a template variable.\n * For example, the following checks the status without assigning any CSS classes:\n *\n * ```html\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.\n * For example, the following sets the active-link class on the `<div>`  parent tag\n * when the URL is either '/user/jim' or '/user/bob'.\n *\n * ```html\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * The `RouterLinkActive` directive can also be used to set the aria-current attribute\n * to provide an alternative distinction for active elements to visually impaired users.\n *\n * For example, the following code adds the 'active' class to the Home Page link when it is\n * indeed active and in such case also sets its aria-current attribute to 'page':\n *\n * ```html\n * <a routerLink=\"/\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Home Page</a>\n * ```\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nlet RouterLinkActive = /*#__PURE__*/(() => {\n  class RouterLinkActive {\n    router;\n    element;\n    renderer;\n    cdr;\n    link;\n    links;\n    classes = [];\n    routerEventsSubscription;\n    linkInputChangesSubscription;\n    _isActive = false;\n    get isActive() {\n      return this._isActive;\n    }\n    /**\n     * Options to configure how to determine if the router link is active.\n     *\n     * These options are passed to the `Router.isActive()` function.\n     *\n     * @see {@link Router#isActive}\n     */\n    routerLinkActiveOptions = {\n      exact: false\n    };\n    /**\n     * Aria-current attribute to apply when the router link is active.\n     *\n     * Possible values: `'page'` | `'step'` | `'location'` | `'date'` | `'time'` | `true` | `false`.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current}\n     */\n    ariaCurrentWhenActive;\n    /**\n     *\n     * You can use the output `isActiveChange` to get notified each time the link becomes\n     * active or inactive.\n     *\n     * Emits:\n     * true  -> Route is active\n     * false -> Route is inactive\n     *\n     * ```html\n     * <a\n     *  routerLink=\"/user/bob\"\n     *  routerLinkActive=\"active-link\"\n     *  (isActiveChange)=\"this.onRouterLinkActive($event)\">Bob</a>\n     * ```\n     */\n    isActiveChange = new EventEmitter();\n    constructor(router, element, renderer, cdr, link) {\n      this.router = router;\n      this.element = element;\n      this.renderer = renderer;\n      this.cdr = cdr;\n      this.link = link;\n      this.routerEventsSubscription = router.events.subscribe(s => {\n        if (s instanceof NavigationEnd) {\n          this.update();\n        }\n      });\n    }\n    /** @docs-private */\n    ngAfterContentInit() {\n      // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).\n      of(this.links.changes, of(null)).pipe(mergeAll()).subscribe(_ => {\n        this.update();\n        this.subscribeToEachLinkOnChanges();\n      });\n    }\n    subscribeToEachLinkOnChanges() {\n      this.linkInputChangesSubscription?.unsubscribe();\n      const allLinkChanges = [...this.links.toArray(), this.link].filter(link => !!link).map(link => link.onChanges);\n      this.linkInputChangesSubscription = from(allLinkChanges).pipe(mergeAll()).subscribe(link => {\n        if (this._isActive !== this.isLinkActive(this.router)(link)) {\n          this.update();\n        }\n      });\n    }\n    set routerLinkActive(data) {\n      const classes = Array.isArray(data) ? data : data.split(' ');\n      this.classes = classes.filter(c => !!c);\n    }\n    /** @docs-private */\n    ngOnChanges(changes) {\n      this.update();\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      this.routerEventsSubscription.unsubscribe();\n      this.linkInputChangesSubscription?.unsubscribe();\n    }\n    update() {\n      if (!this.links || !this.router.navigated) return;\n      queueMicrotask(() => {\n        const hasActiveLinks = this.hasActiveLinks();\n        this.classes.forEach(c => {\n          if (hasActiveLinks) {\n            this.renderer.addClass(this.element.nativeElement, c);\n          } else {\n            this.renderer.removeClass(this.element.nativeElement, c);\n          }\n        });\n        if (hasActiveLinks && this.ariaCurrentWhenActive !== undefined) {\n          this.renderer.setAttribute(this.element.nativeElement, 'aria-current', this.ariaCurrentWhenActive.toString());\n        } else {\n          this.renderer.removeAttribute(this.element.nativeElement, 'aria-current');\n        }\n        // Only emit change if the active state changed.\n        if (this._isActive !== hasActiveLinks) {\n          this._isActive = hasActiveLinks;\n          this.cdr.markForCheck();\n          // Emit on isActiveChange after classes are updated\n          this.isActiveChange.emit(hasActiveLinks);\n        }\n      });\n    }\n    isLinkActive(router) {\n      const options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions :\n      // While the types should disallow `undefined` here, it's possible without strict inputs\n      this.routerLinkActiveOptions.exact || false;\n      return link => {\n        const urlTree = link.urlTree;\n        return urlTree ? router.isActive(urlTree, options) : false;\n      };\n    }\n    hasActiveLinks() {\n      const isActiveCheckFn = this.isLinkActive(this.router);\n      return this.link && isActiveCheckFn(this.link) || this.links.some(isActiveCheckFn);\n    }\n    static ɵfac = function RouterLinkActive_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RouterLinkActive)(i0.ɵɵdirectiveInject(Router), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(RouterLink, 8));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: RouterLinkActive,\n      selectors: [[\"\", \"routerLinkActive\", \"\"]],\n      contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, RouterLink, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n        }\n      },\n      inputs: {\n        routerLinkActiveOptions: \"routerLinkActiveOptions\",\n        ariaCurrentWhenActive: \"ariaCurrentWhenActive\",\n        routerLinkActive: \"routerLinkActive\"\n      },\n      outputs: {\n        isActiveChange: \"isActiveChange\"\n      },\n      exportAs: [\"routerLinkActive\"],\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return RouterLinkActive;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Use instead of `'paths' in options` to be compatible with property renaming\n */\nfunction isActiveMatchOptions(options) {\n  return !!options.paths;\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nclass PreloadingStrategy {}\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```ts\n * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\nlet PreloadAllModules = /*#__PURE__*/(() => {\n  class PreloadAllModules {\n    preload(route, fn) {\n      return fn().pipe(catchError(() => of(null)));\n    }\n    static ɵfac = function PreloadAllModules_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PreloadAllModules)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: PreloadAllModules,\n      factory: PreloadAllModules.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return PreloadAllModules;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\nlet NoPreloading = /*#__PURE__*/(() => {\n  class NoPreloading {\n    preload(route, fn) {\n      return of(null);\n    }\n    static ɵfac = function NoPreloading_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NoPreloading)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NoPreloading,\n      factory: NoPreloading.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NoPreloading;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\nlet RouterPreloader = /*#__PURE__*/(() => {\n  class RouterPreloader {\n    router;\n    injector;\n    preloadingStrategy;\n    loader;\n    subscription;\n    constructor(router, injector, preloadingStrategy, loader) {\n      this.router = router;\n      this.injector = injector;\n      this.preloadingStrategy = preloadingStrategy;\n      this.loader = loader;\n    }\n    setUpPreloading() {\n      this.subscription = this.router.events.pipe(filter(e => e instanceof NavigationEnd), concatMap(() => this.preload())).subscribe(() => {});\n    }\n    preload() {\n      return this.processRoutes(this.injector, this.router.config);\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n    processRoutes(injector, routes) {\n      const res = [];\n      for (const route of routes) {\n        if (route.providers && !route._injector) {\n          route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);\n        }\n        const injectorForCurrentRoute = route._injector ?? injector;\n        const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;\n        // Note that `canLoad` is only checked as a condition that prevents `loadChildren` and not\n        // `loadComponent`. `canLoad` guards only block loading of child routes by design. This\n        // happens as a consequence of needing to descend into children for route matching immediately\n        // while component loading is deferred until route activation. Because `canLoad` guards can\n        // have side effects, we cannot execute them here so we instead skip preloading altogether\n        // when present. Lastly, it remains to be decided whether `canLoad` should behave this way\n        // at all. Code splitting and lazy loading is separate from client-side authorization checks\n        // and should not be used as a security measure to prevent loading of code.\n        if (route.loadChildren && !route._loadedRoutes && route.canLoad === undefined || route.loadComponent && !route._loadedComponent) {\n          res.push(this.preloadConfig(injectorForCurrentRoute, route));\n        }\n        if (route.children || route._loadedRoutes) {\n          res.push(this.processRoutes(injectorForChildren, route.children ?? route._loadedRoutes));\n        }\n      }\n      return from(res).pipe(mergeAll());\n    }\n    preloadConfig(injector, route) {\n      return this.preloadingStrategy.preload(route, () => {\n        let loadedChildren$;\n        if (route.loadChildren && route.canLoad === undefined) {\n          loadedChildren$ = this.loader.loadChildren(injector, route);\n        } else {\n          loadedChildren$ = of(null);\n        }\n        const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap(config => {\n          if (config === null) {\n            return of(void 0);\n          }\n          route._loadedRoutes = config.routes;\n          route._loadedInjector = config.injector;\n          // If the loaded config was a module, use that as the module/module injector going\n          // forward. Otherwise, continue using the current module/module injector.\n          return this.processRoutes(config.injector ?? injector, config.routes);\n        }));\n        if (route.loadComponent && !route._loadedComponent) {\n          const loadComponent$ = this.loader.loadComponent(injector, route);\n          return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());\n        } else {\n          return recursiveLoadChildren$;\n        }\n      });\n    }\n    static ɵfac = function RouterPreloader_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RouterPreloader)(i0.ɵɵinject(Router), i0.ɵɵinject(i0.EnvironmentInjector), i0.ɵɵinject(PreloadingStrategy), i0.ɵɵinject(RouterConfigLoader));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: RouterPreloader,\n      factory: RouterPreloader.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return RouterPreloader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst ROUTER_SCROLLER = /*#__PURE__*/new InjectionToken('');\nlet RouterScroller = /*#__PURE__*/(() => {\n  class RouterScroller {\n    urlSerializer;\n    transitions;\n    viewportScroller;\n    zone;\n    options;\n    routerEventsSubscription;\n    scrollEventsSubscription;\n    lastId = 0;\n    lastSource = IMPERATIVE_NAVIGATION;\n    restoredId = 0;\n    store = {};\n    /** @docs-private */\n    constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {\n      this.urlSerializer = urlSerializer;\n      this.transitions = transitions;\n      this.viewportScroller = viewportScroller;\n      this.zone = zone;\n      this.options = options;\n      // Default both options to 'disabled'\n      options.scrollPositionRestoration ||= 'disabled';\n      options.anchorScrolling ||= 'disabled';\n    }\n    init() {\n      // we want to disable the automatic scrolling because having two places\n      // responsible for scrolling results race conditions, especially given\n      // that browser don't implement this behavior consistently\n      if (this.options.scrollPositionRestoration !== 'disabled') {\n        this.viewportScroller.setHistoryScrollRestoration('manual');\n      }\n      this.routerEventsSubscription = this.createScrollEvents();\n      this.scrollEventsSubscription = this.consumeScrollEvents();\n    }\n    createScrollEvents() {\n      return this.transitions.events.subscribe(e => {\n        if (e instanceof NavigationStart) {\n          // store the scroll position of the current stable navigations.\n          this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n          this.lastSource = e.navigationTrigger;\n          this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n        } else if (e instanceof NavigationEnd) {\n          this.lastId = e.id;\n          this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);\n        } else if (e instanceof NavigationSkipped && e.code === NavigationSkippedCode.IgnoredSameUrlNavigation) {\n          this.lastSource = undefined;\n          this.restoredId = 0;\n          this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);\n        }\n      });\n    }\n    consumeScrollEvents() {\n      return this.transitions.events.subscribe(e => {\n        if (!(e instanceof Scroll)) return;\n        // a popstate event. The pop state event will always ignore anchor scrolling.\n        if (e.position) {\n          if (this.options.scrollPositionRestoration === 'top') {\n            this.viewportScroller.scrollToPosition([0, 0]);\n          } else if (this.options.scrollPositionRestoration === 'enabled') {\n            this.viewportScroller.scrollToPosition(e.position);\n          }\n          // imperative navigation \"forward\"\n        } else {\n          if (e.anchor && this.options.anchorScrolling === 'enabled') {\n            this.viewportScroller.scrollToAnchor(e.anchor);\n          } else if (this.options.scrollPositionRestoration !== 'disabled') {\n            this.viewportScroller.scrollToPosition([0, 0]);\n          }\n        }\n      });\n    }\n    scheduleScrollEvent(routerEvent, anchor) {\n      this.zone.runOutsideAngular(async () => {\n        // The scroll event needs to be delayed until after change detection. Otherwise, we may\n        // attempt to restore the scroll position before the router outlet has fully rendered the\n        // component by executing its update block of the template function.\n        //\n        // #57109 (we need to wait at least a macrotask before scrolling. AfterNextRender resolves in microtask event loop with Zones)\n        // We could consider _also_ waiting for a render promise though one should have already happened or been scheduled by this point\n        // and should definitely happen before rAF/setTimeout.\n        // #53985 (cannot rely solely on setTimeout because a frame may paint before the timeout)\n        await new Promise(resolve => {\n          setTimeout(resolve);\n          if (typeof requestAnimationFrame !== 'undefined') {\n            requestAnimationFrame(resolve);\n          }\n        });\n        this.zone.run(() => {\n          this.transitions.events.next(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n        });\n      });\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      this.routerEventsSubscription?.unsubscribe();\n      this.scrollEventsSubscription?.unsubscribe();\n    }\n    static ɵfac = function RouterScroller_Factory(__ngFactoryType__) {\n      i0.ɵɵinvalidFactory();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: RouterScroller,\n      factory: RouterScroller.ɵfac\n    });\n  }\n  return RouterScroller;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Sets up providers necessary to enable `Router` functionality for the application.\n * Allows to configure a set of routes as well as extra features that should be enabled.\n *\n * @usageNotes\n *\n * Basic example of how you can add a Router to your application:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent, {\n *   providers: [provideRouter(appRoutes)]\n * });\n * ```\n *\n * You can also enable optional features in the Router by adding functions from the `RouterFeatures`\n * type:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes,\n *         withDebugTracing(),\n *         withRouterConfig({paramsInheritanceStrategy: 'always'}))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link RouterFeatures}\n *\n * @publicApi\n * @param routes A set of `Route`s to use for the application routing table.\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to setup a Router.\n */\nfunction provideRouter(routes, ...features) {\n  return makeEnvironmentProviders([{\n    provide: ROUTES,\n    multi: true,\n    useValue: routes\n  }, typeof ngDevMode === 'undefined' || ngDevMode ? {\n    provide: ROUTER_IS_PROVIDED,\n    useValue: true\n  } : [], {\n    provide: ActivatedRoute,\n    useFactory: rootRoute,\n    deps: [Router]\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: getBootstrapListener\n  }, features.map(feature => feature.ɵproviders)]);\n}\nfunction rootRoute(router) {\n  return router.routerState.root;\n}\n/**\n * Helper function to create an object that represents a Router feature.\n */\nfunction routerFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\n/**\n * An Injection token used to indicate whether `provideRouter` or `RouterModule.forRoot` was ever\n * called.\n */\nconst ROUTER_IS_PROVIDED = /*#__PURE__*/new InjectionToken('', {\n  providedIn: 'root',\n  factory: () => false\n});\nconst routerIsProvidedDevModeCheck = {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useFactory() {\n    return () => {\n      if (!inject(ROUTER_IS_PROVIDED)) {\n        console.warn('`provideRoutes` was called without `provideRouter` or `RouterModule.forRoot`. ' + 'This is likely a mistake.');\n      }\n    };\n  }\n};\n/**\n * Registers a DI provider for a set of routes.\n * @param routes The route configuration to provide.\n *\n * @usageNotes\n *\n * ```ts\n * @NgModule({\n *   providers: [provideRoutes(ROUTES)]\n * })\n * class LazyLoadedChildModule {}\n * ```\n *\n * @deprecated If necessary, provide routes using the `ROUTES` `InjectionToken`.\n * @see {@link ROUTES}\n * @publicApi\n */\nfunction provideRoutes(routes) {\n  return [{\n    provide: ROUTES,\n    multi: true,\n    useValue: routes\n  }, typeof ngDevMode === 'undefined' || ngDevMode ? routerIsProvidedDevModeCheck : []];\n}\n/**\n * Enables customizable scrolling behavior for router navigations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable scrolling feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withInMemoryScrolling())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link ViewportScroller}\n *\n * @publicApi\n * @param options Set of configuration parameters to customize scrolling behavior, see\n *     `InMemoryScrollingOptions` for additional information.\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withInMemoryScrolling(options = {}) {\n  const providers = [{\n    provide: ROUTER_SCROLLER,\n    useFactory: () => {\n      const viewportScroller = inject(ViewportScroller);\n      const zone = inject(NgZone);\n      const transitions = inject(NavigationTransitions);\n      const urlSerializer = inject(UrlSerializer);\n      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, options);\n    }\n  }];\n  return routerFeature(4 /* RouterFeatureKind.InMemoryScrollingFeature */, providers);\n}\nfunction getBootstrapListener() {\n  const injector = inject(Injector);\n  return bootstrappedComponentRef => {\n    const ref = injector.get(ApplicationRef);\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n    const router = injector.get(Router);\n    const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n    if (injector.get(INITIAL_NAVIGATION) === 1 /* InitialNavigation.EnabledNonBlocking */) {\n      router.initialNavigation();\n    }\n    injector.get(ROUTER_PRELOADER, null, {\n      optional: true\n    })?.setUpPreloading();\n    injector.get(ROUTER_SCROLLER, null, {\n      optional: true\n    })?.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    if (!bootstrapDone.closed) {\n      bootstrapDone.next();\n      bootstrapDone.complete();\n      bootstrapDone.unsubscribe();\n    }\n  };\n}\n/**\n * A subject used to indicate that the bootstrapping phase is done. When initial navigation is\n * `enabledBlocking`, the first navigation waits until bootstrapping is finished before continuing\n * to the activation phase.\n */\nconst BOOTSTRAP_DONE = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'bootstrap done indicator' : '', {\n  factory: () => {\n    return new Subject();\n  }\n});\nconst INITIAL_NAVIGATION = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'initial navigation' : '', {\n  providedIn: 'root',\n  factory: () => 1 /* InitialNavigation.EnabledNonBlocking */\n});\n/**\n * Configures initial navigation to start before the root component is created.\n *\n * The bootstrap is blocked until the initial navigation is complete. This should be set in case\n * you use [server-side rendering](guide/ssr), but do not enable [hydration](guide/hydration) for\n * your application.\n *\n * @usageNotes\n *\n * Basic example of how you can enable this navigation behavior:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withEnabledBlockingInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @publicApi\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withEnabledBlockingInitialNavigation() {\n  const providers = [{\n    provide: INITIAL_NAVIGATION,\n    useValue: 0 /* InitialNavigation.EnabledBlocking */\n  }, provideAppInitializer(() => {\n    const injector = inject(Injector);\n    const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());\n    return locationInitialized.then(() => {\n      return new Promise(resolve => {\n        const router = injector.get(Router);\n        const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n        afterNextNavigation(router, () => {\n          // Unblock APP_INITIALIZER in case the initial navigation was canceled or errored\n          // without a redirect.\n          resolve(true);\n        });\n        injector.get(NavigationTransitions).afterPreactivation = () => {\n          // Unblock APP_INITIALIZER once we get to `afterPreactivation`. At this point, we\n          // assume activation will complete successfully (even though this is not\n          // guaranteed).\n          resolve(true);\n          return bootstrapDone.closed ? of(void 0) : bootstrapDone;\n        };\n        router.initialNavigation();\n      });\n    });\n  })];\n  return routerFeature(2 /* RouterFeatureKind.EnabledBlockingInitialNavigationFeature */, providers);\n}\n/**\n * Disables initial navigation.\n *\n * Use if there is a reason to have more control over when the router starts its initial navigation\n * due to some complex initialization logic.\n *\n * @usageNotes\n *\n * Basic example of how you can disable initial navigation:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDisabledInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withDisabledInitialNavigation() {\n  const providers = [provideAppInitializer(() => {\n    inject(Router).setUpLocationChangeListener();\n  }), {\n    provide: INITIAL_NAVIGATION,\n    useValue: 2 /* InitialNavigation.Disabled */\n  }];\n  return routerFeature(3 /* RouterFeatureKind.DisabledInitialNavigationFeature */, providers);\n}\n/**\n * Enables logging of all internal navigation events to the console.\n * Extra logging might be useful for debugging purposes to inspect Router event sequence.\n *\n * @usageNotes\n *\n * Basic example of how you can enable debug tracing:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDebugTracing())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withDebugTracing() {\n  let providers = [];\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    providers = [{\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useFactory: () => {\n        const router = inject(Router);\n        return () => router.events.subscribe(e => {\n          // tslint:disable:no-console\n          console.group?.(`Router Event: ${e.constructor.name}`);\n          console.log(stringifyEvent(e));\n          console.log(e);\n          console.groupEnd?.();\n          // tslint:enable:no-console\n        });\n      }\n    }];\n  } else {\n    providers = [];\n  }\n  return routerFeature(1 /* RouterFeatureKind.DebugTracingFeature */, providers);\n}\nconst ROUTER_PRELOADER = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router preloader' : '');\n/**\n * Allows to configure a preloading strategy to use. The strategy is configured by providing a\n * reference to a class that implements a `PreloadingStrategy`.\n *\n * @usageNotes\n *\n * Basic example of how you can configure preloading:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withPreloading(PreloadAllModules))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param preloadingStrategy A reference to a class that implements a `PreloadingStrategy` that\n *     should be used.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withPreloading(preloadingStrategy) {\n  const providers = [{\n    provide: ROUTER_PRELOADER,\n    useExisting: RouterPreloader\n  }, {\n    provide: PreloadingStrategy,\n    useExisting: preloadingStrategy\n  }];\n  return routerFeature(0 /* RouterFeatureKind.PreloadingFeature */, providers);\n}\n/**\n * Allows to provide extra parameters to configure Router.\n *\n * @usageNotes\n *\n * Basic example of how you can provide extra configuration options:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withRouterConfig({\n *          onSameUrlNavigation: 'reload'\n *       }))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param options A set of parameters to configure Router, see `RouterConfigOptions` for\n *     additional information.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withRouterConfig(options) {\n  const providers = [{\n    provide: ROUTER_CONFIGURATION,\n    useValue: options\n  }];\n  return routerFeature(5 /* RouterFeatureKind.RouterConfigurationFeature */, providers);\n}\n/**\n * Provides the location strategy that uses the URL fragment instead of the history API.\n *\n * @usageNotes\n *\n * Basic example of how you can use the hash location option:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withHashLocation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link /api/common/HashLocationStrategy HashLocationStrategy}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withHashLocation() {\n  const providers = [{\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  }];\n  return routerFeature(6 /* RouterFeatureKind.RouterHashLocationFeature */, providers);\n}\n/**\n * Provides a function which is called when a navigation error occurs.\n *\n * This function is run inside application's [injection context](guide/di/dependency-injection-context)\n * so you can use the [`inject`](api/core/inject) function.\n *\n * This function can return a `RedirectCommand` to convert the error to a redirect, similar to returning\n * a `UrlTree` or `RedirectCommand` from a guard. This will also prevent the `Router` from emitting\n * `NavigationError`; it will instead emit `NavigationCancel` with code NavigationCancellationCode.Redirect.\n * Return values other than `RedirectCommand` are ignored and do not change any behavior with respect to\n * how the `Router` handles the error.\n *\n * @usageNotes\n *\n * Basic example of how you can use the error handler option:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withNavigationErrorHandler((e: NavigationError) =>\n * inject(MyErrorTracker).trackError(e)))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link NavigationError}\n * @see {@link /api/core/inject inject}\n * @see {@link runInInjectionContext}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nfunction withNavigationErrorHandler(handler) {\n  const providers = [{\n    provide: NAVIGATION_ERROR_HANDLER,\n    useValue: handler\n  }];\n  return routerFeature(7 /* RouterFeatureKind.NavigationErrorHandlerFeature */, providers);\n}\n/**\n * Enables binding information from the `Router` state directly to the inputs of the component in\n * `Route` configurations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withComponentInputBinding())\n *     ]\n *   }\n * );\n * ```\n *\n * The router bindings information from any of the following sources:\n *\n *  - query parameters\n *  - path and matrix parameters\n *  - static route data\n *  - data from resolvers\n *\n * Duplicate keys are resolved in the same order from above, from least to greatest,\n * meaning that resolvers have the highest precedence and override any of the other information\n * from the route.\n *\n * Importantly, when an input does not have an item in the route data with a matching key, this\n * input is set to `undefined`. This prevents previous information from being\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\n * Default values can be provided with a resolver on the route to ensure the value is always present\n * or an input and use an input transform in the component.\n *\n * @see {@link /guide/components/inputs#input-transforms Input Transforms}\n * @returns A set of providers for use with `provideRouter`.\n */\nfunction withComponentInputBinding() {\n  const providers = [RoutedComponentInputBinder, {\n    provide: INPUT_BINDER,\n    useExisting: RoutedComponentInputBinder\n  }];\n  return routerFeature(8 /* RouterFeatureKind.ComponentInputBindingFeature */, providers);\n}\n/**\n * Enables view transitions in the Router by running the route activation and deactivation inside of\n * `document.startViewTransition`.\n *\n * Note: The View Transitions API is not available in all browsers. If the browser does not support\n * view transitions, the Router will not attempt to start a view transition and continue processing\n * the navigation as usual.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```ts\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withViewTransitions())\n *     ]\n *   }\n * );\n * ```\n *\n * @returns A set of providers for use with `provideRouter`.\n * @see https://developer.chrome.com/docs/web-platform/view-transitions/\n * @see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\n * @developerPreview 19.0\n */\nfunction withViewTransitions(options) {\n  _performanceMarkFeature('NgRouterViewTransitions');\n  const providers = [{\n    provide: CREATE_VIEW_TRANSITION,\n    useValue: createViewTransition\n  }, {\n    provide: VIEW_TRANSITION_OPTIONS,\n    useValue: {\n      skipNextTransition: !!options?.skipInitialTransition,\n      ...options\n    }\n  }];\n  return routerFeature(9 /* RouterFeatureKind.ViewTransitionsFeature */, providers);\n}\n\n/**\n * The directives defined in the `RouterModule`.\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, _EmptyOutletComponent];\n/**\n * @docsNotRequired\n */\nconst ROUTER_FORROOT_GUARD = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'router duplicate forRoot guard' : '');\n// TODO(atscott): All of these except `ActivatedRoute` are `providedIn: 'root'`. They are only kept\n// here to avoid a breaking change whereby the provider order matters based on where the\n// `RouterModule`/`RouterTestingModule` is imported. These can/should be removed as a \"breaking\"\n// change in a major version.\nconst ROUTER_PROVIDERS = [Location, {\n  provide: UrlSerializer,\n  useClass: DefaultUrlSerializer\n}, Router, ChildrenOutletContexts, {\n  provide: ActivatedRoute,\n  useFactory: rootRoute,\n  deps: [Router]\n}, RouterConfigLoader,\n// Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can\n// be removed when `provideRoutes` is removed.\ntypeof ngDevMode === 'undefined' || ngDevMode ? {\n  provide: ROUTER_IS_PROVIDED,\n  useValue: true\n} : []];\n/**\n * @description\n *\n * Adds directives and providers for in-app navigation among views defined in an application.\n * Use the Angular `Router` service to declaratively specify application states and manage state\n * transitions.\n *\n * You can import this NgModule multiple times, once for each lazy-loaded bundle.\n * However, only one `Router` service can be active.\n * To ensure this, there are two ways to register routes when importing this module:\n *\n * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given\n * routes, and the `Router` service itself.\n * * The `forChild()` method creates an `NgModule` that contains all the directives and the given\n * routes, but does not include the `Router` service.\n *\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks) for an\n * overview of how the `Router` service should be used.\n *\n * @publicApi\n */\nlet RouterModule = /*#__PURE__*/(() => {\n  class RouterModule {\n    constructor() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        inject(ROUTER_FORROOT_GUARD, {\n          optional: true\n        });\n      }\n    }\n    /**\n     * Creates and configures a module with all the router providers and directives.\n     * Optionally sets up an application listener to perform an initial navigation.\n     *\n     * When registering the NgModule at the root, import as follows:\n     *\n     * ```ts\n     * @NgModule({\n     *   imports: [RouterModule.forRoot(ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * @param routes An array of `Route` objects that define the navigation paths for the application.\n     * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\n     * @return The new `NgModule`.\n     *\n     */\n    static forRoot(routes, config) {\n      return {\n        ngModule: RouterModule,\n        providers: [ROUTER_PROVIDERS, typeof ngDevMode === 'undefined' || ngDevMode ? config?.enableTracing ? withDebugTracing().ɵproviders : [] : [], {\n          provide: ROUTES,\n          multi: true,\n          useValue: routes\n        }, typeof ngDevMode === 'undefined' || ngDevMode ? {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]]\n        } : [], config?.errorHandler ? {\n          provide: NAVIGATION_ERROR_HANDLER,\n          useValue: config.errorHandler\n        } : [], {\n          provide: ROUTER_CONFIGURATION,\n          useValue: config ? config : {}\n        }, config?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(), provideRouterScroller(), config?.preloadingStrategy ? withPreloading(config.preloadingStrategy).ɵproviders : [], config?.initialNavigation ? provideInitialNavigation(config) : [], config?.bindToComponentInputs ? withComponentInputBinding().ɵproviders : [], config?.enableViewTransitions ? withViewTransitions().ɵproviders : [], provideRouterInitializer()]\n      };\n    }\n    /**\n     * Creates a module with all the router directives and a provider registering routes,\n     * without creating a new Router service.\n     * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:\n     *\n     * ```ts\n     * @NgModule({\n     *   imports: [RouterModule.forChild(ROUTES)]\n     * })\n     * class MyNgModule {}\n     * ```\n     *\n     * @param routes An array of `Route` objects that define the navigation paths for the submodule.\n     * @return The new NgModule.\n     *\n     */\n    static forChild(routes) {\n      return {\n        ngModule: RouterModule,\n        providers: [{\n          provide: ROUTES,\n          multi: true,\n          useValue: routes\n        }]\n      };\n    }\n    static ɵfac = function RouterModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RouterModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: RouterModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return RouterModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * For internal use by `RouterModule` only. Note that this differs from `withInMemoryRouterScroller`\n * because it reads from the `ExtraOptions` which should not be used in the standalone world.\n */\nfunction provideRouterScroller() {\n  return {\n    provide: ROUTER_SCROLLER,\n    useFactory: () => {\n      const viewportScroller = inject(ViewportScroller);\n      const zone = inject(NgZone);\n      const config = inject(ROUTER_CONFIGURATION);\n      const transitions = inject(NavigationTransitions);\n      const urlSerializer = inject(UrlSerializer);\n      if (config.scrollOffset) {\n        viewportScroller.setOffset(config.scrollOffset);\n      }\n      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config);\n    }\n  };\n}\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` should\n// provide hash location directly via `{provide: LocationStrategy, useClass: HashLocationStrategy}`.\nfunction provideHashLocationStrategy() {\n  return {\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  };\n}\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` does not\n// need this at all because `PathLocationStrategy` is the default factory for `LocationStrategy`.\nfunction providePathLocationStrategy() {\n  return {\n    provide: LocationStrategy,\n    useClass: PathLocationStrategy\n  };\n}\nfunction provideForRootGuard(router) {\n  if (router) {\n    throw new _RuntimeError(4007 /* RuntimeErrorCode.FOR_ROOT_CALLED_TWICE */, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector.` + ` Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n// Note: For internal use only with `RouterModule`. Standalone router setup with `provideRouter`\n// users call `withXInitialNavigation` directly.\nfunction provideInitialNavigation(config) {\n  return [config.initialNavigation === 'disabled' ? withDisabledInitialNavigation().ɵproviders : [], config.initialNavigation === 'enabledBlocking' ? withEnabledBlockingInitialNavigation().ɵproviders : []];\n}\n// TODO(atscott): This should not be in the public API\n/**\n * A DI token for the router initializer that\n * is called after the app is bootstrapped.\n *\n * @publicApi\n */\nconst ROUTER_INITIALIZER = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'Router Initializer' : '');\nfunction provideRouterInitializer() {\n  return [\n  // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just\n  // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.\n  {\n    provide: ROUTER_INITIALIZER,\n    useFactory: getBootstrapListener\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useExisting: ROUTER_INITIALIZER\n  }];\n}\nexport { NoPreloading, PreloadAllModules, PreloadingStrategy, ROUTER_INITIALIZER, ROUTER_PROVIDERS, RouterLink, RouterLinkActive, RouterModule, RouterPreloader, provideRouter, provideRoutes, withComponentInputBinding, withDebugTracing, withDisabledInitialNavigation, withEnabledBlockingInitialNavigation, withHashLocation, withInMemoryScrolling, withNavigationErrorHandler, withPreloading, withRouterConfig, withViewTransitions };\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\n\r\nexport interface ApiResponse {\r\n  status: number;\r\n  results: string[];\r\n  message: string | null;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  private baseUrl = 'http://localhost:8080/api/v1/';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  postCommit(body: {path: string}): Observable<ApiResponse> {\r\n    const apiUrl = `${this.baseUrl}commit`;\r\n    return this.http.post<ApiResponse>(apiUrl, body);\r\n  }\r\n\r\n  postRestore(body: string[]): Observable<ApiResponse> {\r\n    const apiUrl = `${this.baseUrl}restore`;\r\n    return this.http.post<ApiResponse>(apiUrl, body);\r\n  }\r\n}\r\n","/**\n * @license Angular v20.1.6\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, forwardRef, Optional, Inject, ɵisPromise as _isPromise, ɵisSubscribable as _isSubscribable, ɵRuntimeError as _RuntimeError, Self, untracked, computed, signal, EventEmitter, Input, Host, SkipSelf, booleanAttribute, ChangeDetectorRef, Output, Injectable, inject, ApplicationRef, DestroyRef, afterNextRender, NgModule, Version } from '@angular/core';\nimport { ɵgetDOM as _getDOM } from '@angular/common';\nimport { forkJoin, from, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Base class for all ControlValueAccessor classes defined in Forms package.\n * Contains common logic and utility functions.\n *\n * Note: this is an *internal-only* class and should not be extended or used directly in\n * applications code.\n */\nlet BaseControlValueAccessor = /*#__PURE__*/(() => {\n  class BaseControlValueAccessor {\n    _renderer;\n    _elementRef;\n    /**\n     * The registered callback function called when a change or input event occurs on the input\n     * element.\n     * @docs-private\n     */\n    onChange = _ => {};\n    /**\n     * The registered callback function called when a blur event occurs on the input element.\n     * @docs-private\n     */\n    onTouched = () => {};\n    constructor(_renderer, _elementRef) {\n      this._renderer = _renderer;\n      this._elementRef = _elementRef;\n    }\n    /**\n     * Helper method that sets a property on a target element using the current Renderer\n     * implementation.\n     * @docs-private\n     */\n    setProperty(key, value) {\n      this._renderer.setProperty(this._elementRef.nativeElement, key, value);\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @docs-private\n     */\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @docs-private\n     */\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the range input element.\n     * @docs-private\n     */\n    setDisabledState(isDisabled) {\n      this.setProperty('disabled', isDisabled);\n    }\n    static ɵfac = function BaseControlValueAccessor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BaseControlValueAccessor)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: BaseControlValueAccessor\n    });\n  }\n  return BaseControlValueAccessor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Base class for all built-in ControlValueAccessor classes (except DefaultValueAccessor, which is\n * used in case no other CVAs can be found). We use this class to distinguish between default CVA,\n * built-in CVAs and custom CVAs, so that Forms logic can recognize built-in CVAs and treat custom\n * ones with higher priority (when both built-in and custom CVAs are present).\n *\n * Note: this is an *internal-only* class and should not be extended or used directly in\n * applications code.\n */\nlet BuiltInControlValueAccessor = /*#__PURE__*/(() => {\n  class BuiltInControlValueAccessor extends BaseControlValueAccessor {\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵBuiltInControlValueAccessor_BaseFactory;\n      return function BuiltInControlValueAccessor_Factory(__ngFactoryType__) {\n        return (ɵBuiltInControlValueAccessor_BaseFactory || (ɵBuiltInControlValueAccessor_BaseFactory = i0.ɵɵgetInheritedFactory(BuiltInControlValueAccessor)))(__ngFactoryType__ || BuiltInControlValueAccessor);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: BuiltInControlValueAccessor,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return BuiltInControlValueAccessor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * @publicApi\n */\nconst NG_VALUE_ACCESSOR = /*#__PURE__*/new InjectionToken(ngDevMode ? 'NgValueAccessor' : '');\nconst CHECKBOX_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => CheckboxControlValueAccessor),\n  multi: true\n};\n/**\n * @description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * @usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```html\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet CheckboxControlValueAccessor = /*#__PURE__*/(() => {\n  class CheckboxControlValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"checked\" property on the input element.\n     * @docs-private\n     */\n    writeValue(value) {\n      this.setProperty('checked', value);\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵCheckboxControlValueAccessor_BaseFactory;\n      return function CheckboxControlValueAccessor_Factory(__ngFactoryType__) {\n        return (ɵCheckboxControlValueAccessor_BaseFactory || (ɵCheckboxControlValueAccessor_BaseFactory = i0.ɵɵgetInheritedFactory(CheckboxControlValueAccessor)))(__ngFactoryType__ || CheckboxControlValueAccessor);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CheckboxControlValueAccessor,\n      selectors: [[\"input\", \"type\", \"checkbox\", \"formControlName\", \"\"], [\"input\", \"type\", \"checkbox\", \"formControl\", \"\"], [\"input\", \"type\", \"checkbox\", \"ngModel\", \"\"]],\n      hostBindings: function CheckboxControlValueAccessor_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"change\", function CheckboxControlValueAccessor_change_HostBindingHandler($event) {\n            return ctx.onChange($event.target.checked);\n          })(\"blur\", function CheckboxControlValueAccessor_blur_HostBindingHandler() {\n            return ctx.onTouched();\n          });\n        }\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([CHECKBOX_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return CheckboxControlValueAccessor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DEFAULT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => DefaultValueAccessor),\n  multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n  const userAgent = _getDOM() ? _getDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * @description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * @publicApi\n */\nconst COMPOSITION_BUFFER_MODE = /*#__PURE__*/new InjectionToken(ngDevMode ? 'CompositionEventMode' : '');\n/**\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n *\n * @usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```html\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * This value accessor is used by default for `<input type=\"text\">` and `<textarea>` elements, but\n * you could also use it for custom components that have similar behavior and do not require special\n * processing. In order to attach the default value accessor to a custom element, add the\n * `ngDefaultControl` attribute as shown below.\n *\n * ```html\n * <custom-input-component ngDefaultControl [(ngModel)]=\"value\"></custom-input-component>\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet DefaultValueAccessor = /*#__PURE__*/(() => {\n  class DefaultValueAccessor extends BaseControlValueAccessor {\n    _compositionMode;\n    /** Whether the user is creating a composition string (IME events). */\n    _composing = false;\n    constructor(renderer, elementRef, _compositionMode) {\n      super(renderer, elementRef);\n      this._compositionMode = _compositionMode;\n      if (this._compositionMode == null) {\n        this._compositionMode = !_isAndroid();\n      }\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     * @docs-private\n     */\n    writeValue(value) {\n      const normalizedValue = value == null ? '' : value;\n      this.setProperty('value', normalizedValue);\n    }\n    /** @internal */\n    _handleInput(value) {\n      if (!this._compositionMode || this._compositionMode && !this._composing) {\n        this.onChange(value);\n      }\n    }\n    /** @internal */\n    _compositionStart() {\n      this._composing = true;\n    }\n    /** @internal */\n    _compositionEnd(value) {\n      this._composing = false;\n      this._compositionMode && this.onChange(value);\n    }\n    static ɵfac = function DefaultValueAccessor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DefaultValueAccessor)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: DefaultValueAccessor,\n      selectors: [[\"input\", \"formControlName\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"formControlName\", \"\"], [\"input\", \"formControl\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"formControl\", \"\"], [\"input\", \"ngModel\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"ngModel\", \"\"], [\"\", \"ngDefaultControl\", \"\"]],\n      hostBindings: function DefaultValueAccessor_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function DefaultValueAccessor_input_HostBindingHandler($event) {\n            return ctx._handleInput($event.target.value);\n          })(\"blur\", function DefaultValueAccessor_blur_HostBindingHandler() {\n            return ctx.onTouched();\n          })(\"compositionstart\", function DefaultValueAccessor_compositionstart_HostBindingHandler() {\n            return ctx._compositionStart();\n          })(\"compositionend\", function DefaultValueAccessor_compositionend_HostBindingHandler($event) {\n            return ctx._compositionEnd($event.target.value);\n          });\n        }\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([DEFAULT_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return DefaultValueAccessor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction isEmptyInputValue(value) {\n  return value == null || lengthOrSize(value) === 0;\n}\n/**\n * Extract the length property in case it's an array or a string.\n * Extract the size property in case it's a set.\n * Return null else.\n * @param value Either an array, set or undefined.\n */\nfunction lengthOrSize(value) {\n  // non-strict comparison is intentional, to check for both `null` and `undefined` values\n  if (value == null) {\n    return null;\n  } else if (Array.isArray(value) || typeof value === 'string') {\n    return value.length;\n  } else if (value instanceof Set) {\n    return value.size;\n  }\n  return null;\n}\n/**\n * @description\n * An `InjectionToken` for registering additional synchronous validators used with\n * `AbstractControl`s.\n *\n * @see {@link NG_ASYNC_VALIDATORS}\n *\n * @usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```ts\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nconst NG_VALIDATORS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'NgValidators' : '');\n/**\n * @description\n * An `InjectionToken` for registering additional asynchronous validators used with\n * `AbstractControl`s.\n *\n * @see {@link NG_VALIDATORS}\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```ts\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Promise<ValidationErrors|null> {\n *     return Promise.resolve({'custom': true});\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nconst NG_ASYNC_VALIDATORS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'NgAsyncValidators' : '');\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\n *   punctuation symbols).\n * - `local-part` cannot begin or end with a period (`.`).\n * - `local-part` cannot be longer than 64 characters.\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\n *   `foo.com`.\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\n *   periods (`.`)).\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\n * - A `label` cannot be longer than 63 characters.\n * - The whole address cannot be longer than 254 characters.\n *\n * ## Implementation background\n *\n * This regexp was ported over from AngularJS (see there for git history):\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\n * It is based on the\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n * lengths of different parts of the address). The main differences from the WHATWG version are:\n *   - Disallow `local-part` to begin or end with a period (`.`).\n *   - Disallow `local-part` length to exceed 64 characters.\n *   - Disallow total address length to exceed 254 characters.\n *\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @publicApi\n */\nclass Validators {\n  /**\n   * @description\n   * Validator that requires the control's value to be greater than or equal to the provided number.\n   *\n   * @usageNotes\n   *\n   * ### Validate against a minimum of 3\n   *\n   * ```ts\n   * const control = new FormControl(2, Validators.min(3));\n   *\n   * console.log(control.errors); // {min: {min: 3, actual: 2}}\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `min` property if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static min(min) {\n    return minValidator(min);\n  }\n  /**\n   * @description\n   * Validator that requires the control's value to be less than or equal to the provided number.\n   *\n   * @usageNotes\n   *\n   * ### Validate against a maximum of 15\n   *\n   * ```ts\n   * const control = new FormControl(16, Validators.max(15));\n   *\n   * console.log(control.errors); // {max: {max: 15, actual: 16}}\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `max` property if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static max(max) {\n    return maxValidator(max);\n  }\n  /**\n   * @description\n   * Validator that requires the control have a non-empty value.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field is non-empty\n   *\n   * ```ts\n   * const control = new FormControl('', Validators.required);\n   *\n   * console.log(control.errors); // {required: true}\n   * ```\n   *\n   * @returns An error map with the `required` property\n   * if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static required(control) {\n    return requiredValidator(control);\n  }\n  /**\n   * @description\n   * Validator that requires the control's value be true. This validator is commonly\n   * used for required checkboxes.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field value is true\n   *\n   * ```ts\n   * const control = new FormControl('some value', Validators.requiredTrue);\n   *\n   * console.log(control.errors); // {required: true}\n   * ```\n   *\n   * @returns An error map that contains the `required` property\n   * set to `true` if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static requiredTrue(control) {\n    return requiredTrueValidator(control);\n  }\n  /**\n   * @description\n   * Validator that requires the control's value pass an email validation test.\n   *\n   * Tests the value using a [regular\n   * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n   * pattern suitable for common use cases. The pattern is based on the definition of a valid email\n   * address in the [WHATWG HTML\n   * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n   * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n   * lengths of different parts of the address).\n   *\n   * The differences from the WHATWG version include:\n   * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).\n   * - Disallow `local-part` to be longer than 64 characters.\n   * - Disallow the whole address to be longer than 254 characters.\n   *\n   * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\n   * validate the value against a different pattern.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field matches a valid email pattern\n   *\n   * ```ts\n   * const control = new FormControl('bad@', Validators.email);\n   *\n   * console.log(control.errors); // {email: true}\n   * ```\n   *\n   * @returns An error map with the `email` property\n   * if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static email(control) {\n    return emailValidator(control);\n  }\n  /**\n   * @description\n   * Validator that requires the number of items in the control's value to be greater than or equal\n   * to the provided minimum length. This validator is also provided by default if you use\n   * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used\n   * only for types that have a numeric `length` or `size` property, such as strings, arrays or\n   * sets. The `minLength` validator logic is also not invoked for values when their `length` or\n   * `size` property is 0 (for example in case of an empty string or an empty array), to support\n   * optional controls. You can use the standard `required` validator if empty values should not be\n   * considered valid.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field has a minimum of 3 characters\n   *\n   * ```ts\n   * const control = new FormControl('ng', Validators.minLength(3));\n   *\n   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n   * ```\n   *\n   * ```html\n   * <input minlength=\"5\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `minlength` property if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static minLength(minLength) {\n    return minLengthValidator(minLength);\n  }\n  /**\n   * @description\n   * Validator that requires the number of items in the control's value to be less than or equal\n   * to the provided maximum length. This validator is also provided by default if you use\n   * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used\n   * only for types that have a numeric `length` or `size` property, such as strings, arrays or\n   * sets.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field has maximum of 5 characters\n   *\n   * ```ts\n   * const control = new FormControl('Angular', Validators.maxLength(5));\n   *\n   * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n   * ```\n   *\n   * ```html\n   * <input maxlength=\"5\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `maxlength` property if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static maxLength(maxLength) {\n    return maxLengthValidator(maxLength);\n  }\n  /**\n   * @description\n   * Validator that requires the control's value to match a regex pattern. This validator is also\n   * provided by default if you use the HTML5 `pattern` attribute.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field only contains letters or spaces\n   *\n   * ```ts\n   * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n   *\n   * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n   * ```\n   *\n   * ```html\n   * <input pattern=\"[a-zA-Z ]*\">\n   * ```\n   *\n   * ### Pattern matching with the global or sticky flag\n   *\n   * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`\n   * can produce different results on the same input when validations are run consecutively. This is\n   * due to how the behavior of `RegExp.prototype.test` is\n   * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)\n   * (`RegExp` preserves the index of the last match when the global or sticky flag is used).\n   * Due to this behavior, it is recommended that when using\n   * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky\n   * flag enabled.\n   *\n   * ```ts\n   * // Not recommended (since the `g` flag is used)\n   * const controlOne = new FormControl('1', Validators.pattern(/foo/g));\n   *\n   * // Good\n   * const controlTwo = new FormControl('1', Validators.pattern(/foo/));\n   * ```\n   *\n   * @param pattern A regular expression to be used as is to test the values, or a string.\n   * If a string is passed, the `^` character is prepended and the `$` character is\n   * appended to the provided string (if not already present), and the resulting regular\n   * expression is used to test the values.\n   *\n   * @returns A validator function that returns an error map with the\n   * `pattern` property if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static pattern(pattern) {\n    return patternValidator(pattern);\n  }\n  /**\n   * @description\n   * Validator that performs no operation.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static nullValidator(control) {\n    return nullValidator();\n  }\n  static compose(validators) {\n    return compose(validators);\n  }\n  /**\n   * @description\n   * Compose multiple async validators into a single function that returns the union\n   * of the individual error objects for the provided control.\n   *\n   * @returns A validator function that returns an error map with the\n   * merged error objects of the async validators if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static composeAsync(validators) {\n    return composeAsync(validators);\n  }\n}\n/**\n * Validator that requires the control's value to be greater than or equal to the provided number.\n * See `Validators.min` for additional information.\n */\nfunction minValidator(min) {\n  return control => {\n    if (control.value == null || min == null) {\n      return null; // don't validate empty values to allow optional controls\n    }\n    const value = parseFloat(control.value);\n    // Controls with NaN values after parsing should be treated as not having a\n    // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n    return !isNaN(value) && value < min ? {\n      'min': {\n        'min': min,\n        'actual': control.value\n      }\n    } : null;\n  };\n}\n/**\n * Validator that requires the control's value to be less than or equal to the provided number.\n * See `Validators.max` for additional information.\n */\nfunction maxValidator(max) {\n  return control => {\n    if (control.value == null || max == null) {\n      return null; // don't validate empty values to allow optional controls\n    }\n    const value = parseFloat(control.value);\n    // Controls with NaN values after parsing should be treated as not having a\n    // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n    return !isNaN(value) && value > max ? {\n      'max': {\n        'max': max,\n        'actual': control.value\n      }\n    } : null;\n  };\n}\n/**\n * Validator that requires the control have a non-empty value.\n * See `Validators.required` for additional information.\n */\nfunction requiredValidator(control) {\n  return isEmptyInputValue(control.value) ? {\n    'required': true\n  } : null;\n}\n/**\n * Validator that requires the control's value be true. This validator is commonly\n * used for required checkboxes.\n * See `Validators.requiredTrue` for additional information.\n */\nfunction requiredTrueValidator(control) {\n  return control.value === true ? null : {\n    'required': true\n  };\n}\n/**\n * Validator that requires the control's value pass an email validation test.\n * See `Validators.email` for additional information.\n */\nfunction emailValidator(control) {\n  if (isEmptyInputValue(control.value)) {\n    return null; // don't validate empty values to allow optional controls\n  }\n  return EMAIL_REGEXP.test(control.value) ? null : {\n    'email': true\n  };\n}\n/**\n * Validator that requires the number of items in the control's value to be greater than or equal\n * to the provided minimum length. See `Validators.minLength` for additional information.\n *\n * The minLengthValidator respects every length property in an object, regardless of whether it's an array.\n * For example, the object {id: 1, length: 0, width: 0} should be validated.\n */\nfunction minLengthValidator(minLength) {\n  return control => {\n    const length = control.value?.length ?? lengthOrSize(control.value);\n    if (length === null || length === 0) {\n      // don't validate empty values to allow optional controls\n      // don't validate values without `length` or `size` property\n      return null;\n    }\n    return length < minLength ? {\n      'minlength': {\n        'requiredLength': minLength,\n        'actualLength': length\n      }\n    } : null;\n  };\n}\n/**\n * Validator that requires the number of items in the control's value to be less than or equal\n * to the provided maximum length. See `Validators.maxLength` for additional information.\n *\n * The maxLengthValidator respects every length property in an object, regardless of whether it's an array.\n * For example, the object {id: 1, length: 0, width: 0} should be validated.\n */\nfunction maxLengthValidator(maxLength) {\n  return control => {\n    const length = control.value?.length ?? lengthOrSize(control.value);\n    if (length !== null && length > maxLength) {\n      return {\n        'maxlength': {\n          'requiredLength': maxLength,\n          'actualLength': length\n        }\n      };\n    }\n    return null;\n  };\n}\n/**\n * Validator that requires the control's value to match a regex pattern.\n * See `Validators.pattern` for additional information.\n */\nfunction patternValidator(pattern) {\n  if (!pattern) return nullValidator;\n  let regex;\n  let regexStr;\n  if (typeof pattern === 'string') {\n    regexStr = '';\n    if (pattern.charAt(0) !== '^') regexStr += '^';\n    regexStr += pattern;\n    if (pattern.charAt(pattern.length - 1) !== '$') regexStr += '$';\n    regex = new RegExp(regexStr);\n  } else {\n    regexStr = pattern.toString();\n    regex = pattern;\n  }\n  return control => {\n    if (isEmptyInputValue(control.value)) {\n      return null; // don't validate empty values to allow optional controls\n    }\n    const value = control.value;\n    return regex.test(value) ? null : {\n      'pattern': {\n        'requiredPattern': regexStr,\n        'actualValue': value\n      }\n    };\n  };\n}\n/**\n * Function that has `ValidatorFn` shape, but performs no operation.\n */\nfunction nullValidator(control) {\n  return null;\n}\nfunction isPresent(o) {\n  return o != null;\n}\nfunction toObservable(value) {\n  const obs = _isPromise(value) ? from(value) : value;\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && !_isSubscribable(obs)) {\n    let errorMessage = `Expected async validator to return Promise or Observable.`;\n    // A synchronous validator will return object or null.\n    if (typeof value === 'object') {\n      errorMessage += ' Are you using a synchronous validator where an async validator is expected?';\n    }\n    throw new _RuntimeError(-1101 /* RuntimeErrorCode.WRONG_VALIDATOR_RETURN_TYPE */, errorMessage);\n  }\n  return obs;\n}\nfunction mergeErrors(arrayOfErrors) {\n  let res = {};\n  arrayOfErrors.forEach(errors => {\n    res = errors != null ? {\n      ...res,\n      ...errors\n    } : res;\n  });\n  return Object.keys(res).length === 0 ? null : res;\n}\nfunction executeValidators(control, validators) {\n  return validators.map(validator => validator(control));\n}\nfunction isValidatorFn(validator) {\n  return !validator.validate;\n}\n/**\n * Given the list of validators that may contain both functions as well as classes, return the list\n * of validator functions (convert validator classes into validator functions). This is needed to\n * have consistent structure in validators list before composing them.\n *\n * @param validators The set of validators that may contain validators both in plain function form\n *     as well as represented as a validator class.\n */\nfunction normalizeValidators(validators) {\n  return validators.map(validator => {\n    return isValidatorFn(validator) ? validator : c => validator.validate(c);\n  });\n}\n/**\n * Merges synchronous validators into a single validator function.\n * See `Validators.compose` for additional information.\n */\nfunction compose(validators) {\n  if (!validators) return null;\n  const presentValidators = validators.filter(isPresent);\n  if (presentValidators.length == 0) return null;\n  return function (control) {\n    return mergeErrors(executeValidators(control, presentValidators));\n  };\n}\n/**\n * Accepts a list of validators of different possible shapes (`Validator` and `ValidatorFn`),\n * normalizes the list (converts everything to `ValidatorFn`) and merges them into a single\n * validator function.\n */\nfunction composeValidators(validators) {\n  return validators != null ? compose(normalizeValidators(validators)) : null;\n}\n/**\n * Merges asynchronous validators into a single validator function.\n * See `Validators.composeAsync` for additional information.\n */\nfunction composeAsync(validators) {\n  if (!validators) return null;\n  const presentValidators = validators.filter(isPresent);\n  if (presentValidators.length == 0) return null;\n  return function (control) {\n    const observables = executeValidators(control, presentValidators).map(toObservable);\n    return forkJoin(observables).pipe(map(mergeErrors));\n  };\n}\n/**\n * Accepts a list of async validators of different possible shapes (`AsyncValidator` and\n * `AsyncValidatorFn`), normalizes the list (converts everything to `AsyncValidatorFn`) and merges\n * them into a single validator function.\n */\nfunction composeAsyncValidators(validators) {\n  return validators != null ? composeAsync(normalizeValidators(validators)) : null;\n}\n/**\n * Merges raw control validators with a given directive validator and returns the combined list of\n * validators as an array.\n */\nfunction mergeValidators(controlValidators, dirValidator) {\n  if (controlValidators === null) return [dirValidator];\n  return Array.isArray(controlValidators) ? [...controlValidators, dirValidator] : [controlValidators, dirValidator];\n}\n/**\n * Retrieves the list of raw synchronous validators attached to a given control.\n */\nfunction getControlValidators(control) {\n  return control._rawValidators;\n}\n/**\n * Retrieves the list of raw asynchronous validators attached to a given control.\n */\nfunction getControlAsyncValidators(control) {\n  return control._rawAsyncValidators;\n}\n/**\n * Accepts a singleton validator, an array, or null, and returns an array type with the provided\n * validators.\n *\n * @param validators A validator, validators, or null.\n * @returns A validators array.\n */\nfunction makeValidatorsArray(validators) {\n  if (!validators) return [];\n  return Array.isArray(validators) ? validators : [validators];\n}\n/**\n * Determines whether a validator or validators array has a given validator.\n *\n * @param validators The validator or validators to compare against.\n * @param validator The validator to check.\n * @returns Whether the validator is present.\n */\nfunction hasValidator(validators, validator) {\n  return Array.isArray(validators) ? validators.includes(validator) : validators === validator;\n}\n/**\n * Combines two arrays of validators into one. If duplicates are provided, only one will be added.\n *\n * @param validators The new validators.\n * @param currentValidators The base array of current validators.\n * @returns An array of validators.\n */\nfunction addValidators(validators, currentValidators) {\n  const current = makeValidatorsArray(currentValidators);\n  const validatorsToAdd = makeValidatorsArray(validators);\n  validatorsToAdd.forEach(v => {\n    // Note: if there are duplicate entries in the new validators array,\n    // only the first one would be added to the current list of validators.\n    // Duplicate ones would be ignored since `hasValidator` would detect\n    // the presence of a validator function and we update the current list in place.\n    if (!hasValidator(current, v)) {\n      current.push(v);\n    }\n  });\n  return current;\n}\nfunction removeValidators(validators, currentValidators) {\n  return makeValidatorsArray(currentValidators).filter(v => !hasValidator(validators, v));\n}\n\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * @publicApi\n */\nclass AbstractControlDirective {\n  /**\n   * @description\n   * Reports the value of the control if it is present, otherwise null.\n   */\n  get value() {\n    return this.control ? this.control.value : null;\n  }\n  /**\n   * @description\n   * Reports whether the control is valid. A control is considered valid if no\n   * validation errors exist with the current value.\n   * If the control is not present, null is returned.\n   */\n  get valid() {\n    return this.control ? this.control.valid : null;\n  }\n  /**\n   * @description\n   * Reports whether the control is invalid, meaning that an error exists in the input value.\n   * If the control is not present, null is returned.\n   */\n  get invalid() {\n    return this.control ? this.control.invalid : null;\n  }\n  /**\n   * @description\n   * Reports whether a control is pending, meaning that async validation is occurring and\n   * errors are not yet available for the input value. If the control is not present, null is\n   * returned.\n   */\n  get pending() {\n    return this.control ? this.control.pending : null;\n  }\n  /**\n   * @description\n   * Reports whether the control is disabled, meaning that the control is disabled\n   * in the UI and is exempt from validation checks and excluded from aggregate\n   * values of ancestor controls. If the control is not present, null is returned.\n   */\n  get disabled() {\n    return this.control ? this.control.disabled : null;\n  }\n  /**\n   * @description\n   * Reports whether the control is enabled, meaning that the control is included in ancestor\n   * calculations of validity or value. If the control is not present, null is returned.\n   */\n  get enabled() {\n    return this.control ? this.control.enabled : null;\n  }\n  /**\n   * @description\n   * Reports the control's validation errors. If the control is not present, null is returned.\n   */\n  get errors() {\n    return this.control ? this.control.errors : null;\n  }\n  /**\n   * @description\n   * Reports whether the control is pristine, meaning that the user has not yet changed\n   * the value in the UI. If the control is not present, null is returned.\n   */\n  get pristine() {\n    return this.control ? this.control.pristine : null;\n  }\n  /**\n   * @description\n   * Reports whether the control is dirty, meaning that the user has changed\n   * the value in the UI. If the control is not present, null is returned.\n   */\n  get dirty() {\n    return this.control ? this.control.dirty : null;\n  }\n  /**\n   * @description\n   * Reports whether the control is touched, meaning that the user has triggered\n   * a `blur` event on it. If the control is not present, null is returned.\n   */\n  get touched() {\n    return this.control ? this.control.touched : null;\n  }\n  /**\n   * @description\n   * Reports the validation status of the control. Possible values include:\n   * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n   * If the control is not present, null is returned.\n   */\n  get status() {\n    return this.control ? this.control.status : null;\n  }\n  /**\n   * @description\n   * Reports whether the control is untouched, meaning that the user has not yet triggered\n   * a `blur` event on it. If the control is not present, null is returned.\n   */\n  get untouched() {\n    return this.control ? this.control.untouched : null;\n  }\n  /**\n   * @description\n   * Returns a multicasting observable that emits a validation status whenever it is\n   * calculated for the control. If the control is not present, null is returned.\n   */\n  get statusChanges() {\n    return this.control ? this.control.statusChanges : null;\n  }\n  /**\n   * @description\n   * Returns a multicasting observable of value changes for the control that emits every time the\n   * value of the control changes in the UI or programmatically.\n   * If the control is not present, null is returned.\n   */\n  get valueChanges() {\n    return this.control ? this.control.valueChanges : null;\n  }\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  get path() {\n    return null;\n  }\n  /**\n   * Contains the result of merging synchronous validators into a single validator function\n   * (combined using `Validators.compose`).\n   */\n  _composedValidatorFn;\n  /**\n   * Contains the result of merging asynchronous validators into a single validator function\n   * (combined using `Validators.composeAsync`).\n   */\n  _composedAsyncValidatorFn;\n  /**\n   * Set of synchronous validators as they were provided while calling `setValidators` function.\n   * @internal\n   */\n  _rawValidators = [];\n  /**\n   * Set of asynchronous validators as they were provided while calling `setAsyncValidators`\n   * function.\n   * @internal\n   */\n  _rawAsyncValidators = [];\n  /**\n   * Sets synchronous validators for this directive.\n   * @internal\n   */\n  _setValidators(validators) {\n    this._rawValidators = validators || [];\n    this._composedValidatorFn = composeValidators(this._rawValidators);\n  }\n  /**\n   * Sets asynchronous validators for this directive.\n   * @internal\n   */\n  _setAsyncValidators(validators) {\n    this._rawAsyncValidators = validators || [];\n    this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);\n  }\n  /**\n   * @description\n   * Synchronous validator function composed of all the synchronous validators registered with this\n   * directive.\n   */\n  get validator() {\n    return this._composedValidatorFn || null;\n  }\n  /**\n   * @description\n   * Asynchronous validator function composed of all the asynchronous validators registered with\n   * this directive.\n   */\n  get asyncValidator() {\n    return this._composedAsyncValidatorFn || null;\n  }\n  /*\n   * The set of callbacks to be invoked when directive instance is being destroyed.\n   */\n  _onDestroyCallbacks = [];\n  /**\n   * Internal function to register callbacks that should be invoked\n   * when directive instance is being destroyed.\n   * @internal\n   */\n  _registerOnDestroy(fn) {\n    this._onDestroyCallbacks.push(fn);\n  }\n  /**\n   * Internal function to invoke all registered \"on destroy\" callbacks.\n   * Note: calling this function also clears the list of callbacks.\n   * @internal\n   */\n  _invokeOnDestroyCallbacks() {\n    this._onDestroyCallbacks.forEach(fn => fn());\n    this._onDestroyCallbacks = [];\n  }\n  /**\n   * @description\n   * Resets the control with the provided value if the control is present.\n   */\n  reset(value = undefined) {\n    if (this.control) this.control.reset(value);\n  }\n  /**\n   * @description\n   * Reports whether the control with the given path has the error specified.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```ts\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * If no path is given, this method checks for the error on the current control.\n   *\n   * @returns whether the given error is present in the control at the given path.\n   *\n   * If the control is not present, false is returned.\n   */\n  hasError(errorCode, path) {\n    return this.control ? this.control.hasError(errorCode, path) : false;\n  }\n  /**\n   * @description\n   * Reports error data for the control with the given path.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```ts\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * @returns error data for that particular error. If the control or error is not present,\n   * null is returned.\n   */\n  getError(errorCode, path) {\n    return this.control ? this.control.getError(errorCode, path) : null;\n  }\n}\n\n/**\n * @description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * @publicApi\n */\nclass ControlContainer extends AbstractControlDirective {\n  /**\n   * @description\n   * The name for the control\n   */\n  name;\n  /**\n   * @description\n   * The top-level form directive for the control.\n   */\n  get formDirective() {\n    return null;\n  }\n  /**\n   * @description\n   * The path to this group.\n   */\n  get path() {\n    return null;\n  }\n}\n\n/**\n * @description\n * A base class that all `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * @publicApi\n */\nclass NgControl extends AbstractControlDirective {\n  /**\n   * @description\n   * The parent form for the control.\n   *\n   * @internal\n   */\n  _parent = null;\n  /**\n   * @description\n   * The name for the control\n   */\n  name = null;\n  /**\n   * @description\n   * The value accessor for the control\n   */\n  valueAccessor = null;\n}\n\n// DO NOT REFACTOR!\n// Each status is represented by a separate function to make sure that\n// advanced Closure Compiler optimizations related to property renaming\n// can work correctly.\nclass AbstractControlStatus {\n  _cd;\n  constructor(cd) {\n    this._cd = cd;\n  }\n  get isTouched() {\n    // track the touched signal\n    this._cd?.control?._touched?.();\n    return !!this._cd?.control?.touched;\n  }\n  get isUntouched() {\n    return !!this._cd?.control?.untouched;\n  }\n  get isPristine() {\n    // track the pristine signal\n    this._cd?.control?._pristine?.();\n    return !!this._cd?.control?.pristine;\n  }\n  get isDirty() {\n    // pristine signal already tracked above\n    return !!this._cd?.control?.dirty;\n  }\n  get isValid() {\n    // track the status signal\n    this._cd?.control?._status?.();\n    return !!this._cd?.control?.valid;\n  }\n  get isInvalid() {\n    // status signal already tracked above\n    return !!this._cd?.control?.invalid;\n  }\n  get isPending() {\n    // status signal already tracked above\n    return !!this._cd?.control?.pending;\n  }\n  get isSubmitted() {\n    // track the submitted signal\n    this._cd?._submitted?.();\n    // We check for the `submitted` field from `NgForm` and `FormGroupDirective` classes, but\n    // we avoid instanceof checks to prevent non-tree-shakable references to those types.\n    return !!this._cd?.submitted;\n  }\n}\nconst ngControlStatusHost = {\n  '[class.ng-untouched]': 'isUntouched',\n  '[class.ng-touched]': 'isTouched',\n  '[class.ng-pristine]': 'isPristine',\n  '[class.ng-dirty]': 'isDirty',\n  '[class.ng-valid]': 'isValid',\n  '[class.ng-invalid]': 'isInvalid',\n  '[class.ng-pending]': 'isPending'\n};\nconst ngGroupStatusHost = {\n  ...ngControlStatusHost,\n  '[class.ng-submitted]': 'isSubmitted'\n};\n/**\n * @description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * @usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet NgControlStatus = /*#__PURE__*/(() => {\n  class NgControlStatus extends AbstractControlStatus {\n    constructor(cd) {\n      super(cd);\n    }\n    static ɵfac = function NgControlStatus_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgControlStatus)(i0.ɵɵdirectiveInject(NgControl, 2));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgControlStatus,\n      selectors: [[\"\", \"formControlName\", \"\"], [\"\", \"ngModel\", \"\"], [\"\", \"formControl\", \"\"]],\n      hostVars: 14,\n      hostBindings: function NgControlStatus_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ng-untouched\", ctx.isUntouched)(\"ng-touched\", ctx.isTouched)(\"ng-pristine\", ctx.isPristine)(\"ng-dirty\", ctx.isDirty)(\"ng-valid\", ctx.isValid)(\"ng-invalid\", ctx.isInvalid)(\"ng-pending\", ctx.isPending);\n        }\n      },\n      standalone: false,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return NgControlStatus;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc). On groups, this includes the additional\n * class ng-submitted.\n *\n * @see {@link NgControlStatus}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet NgControlStatusGroup = /*#__PURE__*/(() => {\n  class NgControlStatusGroup extends AbstractControlStatus {\n    constructor(cd) {\n      super(cd);\n    }\n    static ɵfac = function NgControlStatusGroup_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgControlStatusGroup)(i0.ɵɵdirectiveInject(ControlContainer, 10));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgControlStatusGroup,\n      selectors: [[\"\", \"formGroupName\", \"\"], [\"\", \"formArrayName\", \"\"], [\"\", \"ngModelGroup\", \"\"], [\"\", \"formGroup\", \"\"], [\"form\", 3, \"ngNoForm\", \"\"], [\"\", \"ngForm\", \"\"]],\n      hostVars: 16,\n      hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ng-untouched\", ctx.isUntouched)(\"ng-touched\", ctx.isTouched)(\"ng-pristine\", ctx.isPristine)(\"ng-dirty\", ctx.isDirty)(\"ng-valid\", ctx.isValid)(\"ng-invalid\", ctx.isInvalid)(\"ng-pending\", ctx.isPending)(\"ng-submitted\", ctx.isSubmitted);\n        }\n      },\n      standalone: false,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return NgControlStatusGroup;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst formControlNameExample = `\n  <div [formGroup]=\"myGroup\">\n    <input formControlName=\"firstName\">\n  </div>\n\n  In your class:\n\n  this.myGroup = new FormGroup({\n      firstName: new FormControl()\n  });`;\nconst formGroupNameExample = `\n  <div [formGroup]=\"myGroup\">\n      <div formGroupName=\"person\">\n        <input formControlName=\"firstName\">\n      </div>\n  </div>\n\n  In your class:\n\n  this.myGroup = new FormGroup({\n      person: new FormGroup({ firstName: new FormControl() })\n  });`;\nconst formArrayNameExample = `\n  <div [formGroup]=\"myGroup\">\n    <div formArrayName=\"cities\">\n      <div *ngFor=\"let city of cityArray.controls; index as i\">\n        <input [formControlName]=\"i\">\n      </div>\n    </div>\n  </div>\n\n  In your class:\n\n  this.cityArray = new FormArray([new FormControl('SF')]);\n  this.myGroup = new FormGroup({\n    cities: this.cityArray\n  });`;\nconst ngModelGroupExample = `\n  <form>\n      <div ngModelGroup=\"person\">\n        <input [(ngModel)]=\"person.name\" name=\"firstName\">\n      </div>\n  </form>`;\nconst ngModelWithFormGroupExample = `\n  <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n      <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n  </div>\n`;\nfunction controlParentException(nameOrIndex) {\n  return new _RuntimeError(1050 /* RuntimeErrorCode.FORM_CONTROL_NAME_MISSING_PARENT */, `formControlName must be used with a parent formGroup directive. You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      ${describeFormControl(nameOrIndex)}\n\n    Example:\n\n    ${formControlNameExample}`);\n}\nfunction describeFormControl(nameOrIndex) {\n  if (nameOrIndex == null || nameOrIndex === '') {\n    return '';\n  }\n  const valueType = typeof nameOrIndex === 'string' ? 'name' : 'index';\n  return `Affected Form Control ${valueType}: \"${nameOrIndex}\"`;\n}\nfunction ngModelGroupException() {\n  return new _RuntimeError(1051 /* RuntimeErrorCode.FORM_CONTROL_NAME_INSIDE_MODEL_GROUP */, `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n      that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n      Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n      ${formGroupNameExample}\n\n      Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n      ${ngModelGroupExample}`);\n}\nfunction missingFormException() {\n  return new _RuntimeError(1052 /* RuntimeErrorCode.FORM_GROUP_MISSING_INSTANCE */, `formGroup expects a FormGroup instance. Please pass one in.\n\n      Example:\n\n      ${formControlNameExample}`);\n}\nfunction groupParentException() {\n  return new _RuntimeError(1053 /* RuntimeErrorCode.FORM_GROUP_NAME_MISSING_PARENT */, `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n    directive and pass it an existing FormGroup instance (you can create one in your class).\n\n    Example:\n\n    ${formGroupNameExample}`);\n}\nfunction arrayParentException() {\n  return new _RuntimeError(1054 /* RuntimeErrorCode.FORM_ARRAY_NAME_MISSING_PARENT */, `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${formArrayNameExample}`);\n}\nconst disabledAttrWarning = `\n  It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n  when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n  you. We recommend using this approach to avoid 'changed after checked' errors.\n\n  Example:\n  // Specify the \\`disabled\\` property at control creation time:\n  form = new FormGroup({\n    first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n    last: new FormControl('Drew', Validators.required)\n  });\n\n  // Controls can also be enabled/disabled after creation:\n  form.get('first')?.enable();\n  form.get('last')?.disable();\n`;\nconst asyncValidatorsDroppedWithOptsWarning = `\n  It looks like you're constructing using a FormControl with both an options argument and an\n  async validators argument. Mixing these arguments will cause your async validators to be dropped.\n  You should either put all your validators in the options object, or in separate validators\n  arguments. For example:\n\n  // Using validators arguments\n  fc = new FormControl(42, Validators.required, myAsyncValidator);\n\n  // Using AbstractControlOptions\n  fc = new FormControl(42, {validators: Validators.required, asyncValidators: myAV});\n\n  // Do NOT mix them: async validators will be dropped!\n  fc = new FormControl(42, {validators: Validators.required}, /* Oops! */ myAsyncValidator);\n`;\nfunction ngModelWarning(directiveName) {\n  return `\n  It looks like you're using ngModel on the same form field as ${directiveName}.\n  Support for using the ngModel input property and ngModelChange event with\n  reactive form directives has been deprecated in Angular v6 and will be removed\n  in a future version of Angular.\n\n  For more information on this, see our API docs here:\n  https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective' : 'FormControlName'}#use-with-ngmodel\n  `;\n}\nfunction describeKey(isFormGroup, key) {\n  return isFormGroup ? `with name: '${key}'` : `at index: ${key}`;\n}\nfunction noControlsError(isFormGroup) {\n  return `\n    There are no form controls registered with this ${isFormGroup ? 'group' : 'array'} yet. If you're using ngModel,\n    you may want to check next tick (e.g. use setTimeout).\n  `;\n}\nfunction missingControlError(isFormGroup, key) {\n  return `Cannot find form control ${describeKey(isFormGroup, key)}`;\n}\nfunction missingControlValueError(isFormGroup, key) {\n  return `Must supply a value for form control ${describeKey(isFormGroup, key)}`;\n}\n\n/**\n * Reports that a control is valid, meaning that no errors exist in the input value.\n *\n * @see {@link status}\n */\nconst VALID = 'VALID';\n/**\n * Reports that a control is invalid, meaning that an error exists in the input value.\n *\n * @see {@link status}\n */\nconst INVALID = 'INVALID';\n/**\n * Reports that a control is pending, meaning that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see {@link markAsPending}\n * @see {@link status}\n */\nconst PENDING = 'PENDING';\n/**\n * Reports that a control is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see {@link markAsDisabled}\n * @see {@link status}\n */\nconst DISABLED = 'DISABLED';\n/**\n * Base class for every event sent by `AbstractControl.events()`\n *\n * @publicApi\n */\nclass ControlEvent {}\n/**\n * Event fired when the value of a control changes.\n *\n * @publicApi\n */\nclass ValueChangeEvent extends ControlEvent {\n  value;\n  source;\n  constructor(value, source) {\n    super();\n    this.value = value;\n    this.source = source;\n  }\n}\n/**\n * Event fired when the control's pristine state changes (pristine <=> dirty).\n *\n * @publicApi */\nclass PristineChangeEvent extends ControlEvent {\n  pristine;\n  source;\n  constructor(pristine, source) {\n    super();\n    this.pristine = pristine;\n    this.source = source;\n  }\n}\n/**\n * Event fired when the control's touched status changes (touched <=> untouched).\n *\n * @publicApi\n */\nclass TouchedChangeEvent extends ControlEvent {\n  touched;\n  source;\n  constructor(touched, source) {\n    super();\n    this.touched = touched;\n    this.source = source;\n  }\n}\n/**\n * Event fired when the control's status changes.\n *\n * @publicApi\n */\nclass StatusChangeEvent extends ControlEvent {\n  status;\n  source;\n  constructor(status, source) {\n    super();\n    this.status = status;\n    this.source = source;\n  }\n}\n/**\n * Event fired when a form is submitted\n *\n * @publicApi\n */\nclass FormSubmittedEvent extends ControlEvent {\n  source;\n  constructor(source) {\n    super();\n    this.source = source;\n  }\n}\n/**\n * Event fired when a form is reset.\n *\n * @publicApi\n */\nclass FormResetEvent extends ControlEvent {\n  source;\n  constructor(source) {\n    super();\n    this.source = source;\n  }\n}\n/**\n * Gets validators from either an options object or given validators.\n */\nfunction pickValidators(validatorOrOpts) {\n  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;\n}\n/**\n * Creates validator function by combining provided validators.\n */\nfunction coerceToValidator(validator) {\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * Gets async validators from either an options object or given validators.\n */\nfunction pickAsyncValidators(asyncValidator, validatorOrOpts) {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (isOptionsObj(validatorOrOpts) && asyncValidator) {\n      console.warn(asyncValidatorsDroppedWithOptsWarning);\n    }\n  }\n  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;\n}\n/**\n * Creates async validator function by combining provided async validators.\n */\nfunction coerceToAsyncValidator(asyncValidator) {\n  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator || null;\n}\nfunction isOptionsObj(validatorOrOpts) {\n  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === 'object';\n}\nfunction assertControlPresent(parent, isGroup, key) {\n  const controls = parent.controls;\n  const collection = isGroup ? Object.keys(controls) : controls;\n  if (!collection.length) {\n    throw new _RuntimeError(1000 /* RuntimeErrorCode.NO_CONTROLS */, typeof ngDevMode === 'undefined' || ngDevMode ? noControlsError(isGroup) : '');\n  }\n  if (!controls[key]) {\n    throw new _RuntimeError(1001 /* RuntimeErrorCode.MISSING_CONTROL */, typeof ngDevMode === 'undefined' || ngDevMode ? missingControlError(isGroup, key) : '');\n  }\n}\nfunction assertAllValuesPresent(control, isGroup, value) {\n  control._forEachChild((_, key) => {\n    if (value[key] === undefined) {\n      throw new _RuntimeError(1002 /* RuntimeErrorCode.MISSING_CONTROL_VALUE */, typeof ngDevMode === 'undefined' || ngDevMode ? missingControlValueError(isGroup, key) : '');\n    }\n  });\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * The first type parameter TValue represents the value type of the control (`control.value`).\n * The optional type parameter TRawValue  represents the raw value type (`control.getRawValue()`).\n *\n * @see [Forms Guide](guide/forms)\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see [Dynamic Forms Guide](guide/forms/dynamic-forms)\n *\n * @publicApi\n */\nclass AbstractControl {\n  /** @internal */\n  _pendingDirty = false;\n  /**\n   * Indicates that a control has its own pending asynchronous validation in progress.\n   * It also stores if the control should emit events when the validation status changes.\n   *\n   * @internal\n   */\n  _hasOwnPendingAsyncValidator = null;\n  /** @internal */\n  _pendingTouched = false;\n  /** @internal */\n  _onCollectionChange = () => {};\n  /** @internal */\n  _updateOn;\n  _parent = null;\n  _asyncValidationSubscription;\n  /**\n   * Contains the result of merging synchronous validators into a single validator function\n   * (combined using `Validators.compose`).\n   *\n   * @internal\n   */\n  _composedValidatorFn;\n  /**\n   * Contains the result of merging asynchronous validators into a single validator function\n   * (combined using `Validators.composeAsync`).\n   *\n   * @internal\n   */\n  _composedAsyncValidatorFn;\n  /**\n   * Synchronous validators as they were provided:\n   *  - in `AbstractControl` constructor\n   *  - as an argument while calling `setValidators` function\n   *  - while calling the setter on the `validator` field (e.g. `control.validator = validatorFn`)\n   *\n   * @internal\n   */\n  _rawValidators;\n  /**\n   * Asynchronous validators as they were provided:\n   *  - in `AbstractControl` constructor\n   *  - as an argument while calling `setAsyncValidators` function\n   *  - while calling the setter on the `asyncValidator` field (e.g. `control.asyncValidator =\n   * asyncValidatorFn`)\n   *\n   * @internal\n   */\n  _rawAsyncValidators;\n  /**\n   * The current value of the control.\n   *\n   * * For a `FormControl`, the current value.\n   * * For an enabled `FormGroup`, the values of enabled controls as an object\n   * with a key-value pair for each member of the group.\n   * * For a disabled `FormGroup`, the values of all controls as an object\n   * with a key-value pair for each member of the group.\n   * * For a `FormArray`, the values of enabled controls as an array.\n   *\n   */\n  value;\n  /**\n   * Initialize the AbstractControl instance.\n   *\n   * @param validators The function or array of functions that is used to determine the validity of\n   *     this control synchronously.\n   * @param asyncValidators The function or array of functions that is used to determine validity of\n   *     this control asynchronously.\n   */\n  constructor(validators, asyncValidators) {\n    this._assignValidators(validators);\n    this._assignAsyncValidators(asyncValidators);\n  }\n  /**\n   * Returns the function that is used to determine the validity of this control synchronously.\n   * If multiple validators have been added, this will be a single composed function.\n   * See `Validators.compose()` for additional information.\n   */\n  get validator() {\n    return this._composedValidatorFn;\n  }\n  set validator(validatorFn) {\n    this._rawValidators = this._composedValidatorFn = validatorFn;\n  }\n  /**\n   * Returns the function that is used to determine the validity of this control asynchronously.\n   * If multiple validators have been added, this will be a single composed function.\n   * See `Validators.compose()` for additional information.\n   */\n  get asyncValidator() {\n    return this._composedAsyncValidatorFn;\n  }\n  set asyncValidator(asyncValidatorFn) {\n    this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;\n  }\n  /**\n   * The parent control.\n   */\n  get parent() {\n    return this._parent;\n  }\n  /**\n   * The validation status of the control.\n   *\n   * @see {@link FormControlStatus}\n   *\n   * These status values are mutually exclusive, so a control cannot be\n   * both valid AND invalid or invalid AND disabled.\n   */\n  get status() {\n    return untracked(this.statusReactive);\n  }\n  set status(v) {\n    untracked(() => this.statusReactive.set(v));\n  }\n  /** @internal */\n  _status = /*#__PURE__*/computed(() => this.statusReactive(), ...(ngDevMode ? [{\n    debugName: \"_status\"\n  }] : []));\n  statusReactive = /*#__PURE__*/signal(undefined, ...(ngDevMode ? [{\n    debugName: \"statusReactive\"\n  }] : []));\n  /**\n   * A control is `valid` when its `status` is `VALID`.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if the control has passed all of its validation tests,\n   * false otherwise.\n   */\n  get valid() {\n    return this.status === VALID;\n  }\n  /**\n   * A control is `invalid` when its `status` is `INVALID`.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if this control has failed one or more of its validation checks,\n   * false otherwise.\n   */\n  get invalid() {\n    return this.status === INVALID;\n  }\n  /**\n   * A control is `pending` when its `status` is `PENDING`.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if this control is in the process of conducting a validation check,\n   * false otherwise.\n   */\n  get pending() {\n    return this.status == PENDING;\n  }\n  /**\n   * A control is `disabled` when its `status` is `DISABLED`.\n   *\n   * Disabled controls are exempt from validation checks and\n   * are not included in the aggregate value of their ancestor\n   * controls.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if the control is disabled, false otherwise.\n   */\n  get disabled() {\n    return this.status === DISABLED;\n  }\n  /**\n   * A control is `enabled` as long as its `status` is not `DISABLED`.\n   *\n   * @returns True if the control has any status other than 'DISABLED',\n   * false if the status is 'DISABLED'.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   */\n  get enabled() {\n    return this.status !== DISABLED;\n  }\n  /**\n   * An object containing any errors generated by failing validation,\n   * or null if there are no errors.\n   */\n  errors;\n  /**\n   * A control is `pristine` if the user has not yet changed\n   * the value in the UI.\n   *\n   * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\n   * Programmatic changes to a control's value do not mark it dirty.\n   */\n  get pristine() {\n    return untracked(this.pristineReactive);\n  }\n  set pristine(v) {\n    untracked(() => this.pristineReactive.set(v));\n  }\n  /** @internal */\n  _pristine = /*#__PURE__*/computed(() => this.pristineReactive(), ...(ngDevMode ? [{\n    debugName: \"_pristine\"\n  }] : []));\n  pristineReactive = /*#__PURE__*/signal(true, ...(ngDevMode ? [{\n    debugName: \"pristineReactive\"\n  }] : []));\n  /**\n   * A control is `dirty` if the user has changed the value\n   * in the UI.\n   *\n   * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\n   * Programmatic changes to a control's value do not mark it dirty.\n   */\n  get dirty() {\n    return !this.pristine;\n  }\n  /**\n   * True if the control is marked as `touched`.\n   *\n   * A control is marked `touched` once the user has triggered\n   * a `blur` event on it.\n   */\n  get touched() {\n    return untracked(this.touchedReactive);\n  }\n  set touched(v) {\n    untracked(() => this.touchedReactive.set(v));\n  }\n  /** @internal */\n  _touched = /*#__PURE__*/computed(() => this.touchedReactive(), ...(ngDevMode ? [{\n    debugName: \"_touched\"\n  }] : []));\n  touchedReactive = /*#__PURE__*/signal(false, ...(ngDevMode ? [{\n    debugName: \"touchedReactive\"\n  }] : []));\n  /**\n   * True if the control has not been marked as touched\n   *\n   * A control is `untouched` if the user has not yet triggered\n   * a `blur` event on it.\n   */\n  get untouched() {\n    return !this.touched;\n  }\n  /**\n   * Exposed as observable, see below.\n   *\n   * @internal\n   */\n  _events = /*#__PURE__*/new Subject();\n  /**\n   * A multicasting observable that emits an event every time the state of the control changes.\n   * It emits for value, status, pristine or touched changes.\n   *\n   * **Note**: On value change, the emit happens right after a value of this control is updated. The\n   * value of a parent control (for example if this FormControl is a part of a FormGroup) is updated\n   * later, so accessing a value of a parent control (using the `value` property) from the callback\n   * of this event might result in getting a value that has not been updated yet. Subscribe to the\n   * `events` of the parent control instead.\n   * For other event types, the events are emitted after the parent control has been updated.\n   *\n   */\n  events = /*#__PURE__*/this._events.asObservable();\n  /**\n   * A multicasting observable that emits an event every time the value of the control changes, in\n   * the UI or programmatically. It also emits an event each time you call enable() or disable()\n   * without passing along {emitEvent: false} as a function argument.\n   *\n   * **Note**: the emit happens right after a value of this control is updated. The value of a\n   * parent control (for example if this FormControl is a part of a FormGroup) is updated later, so\n   * accessing a value of a parent control (using the `value` property) from the callback of this\n   * event might result in getting a value that has not been updated yet. Subscribe to the\n   * `valueChanges` event of the parent control instead.\n   */\n  valueChanges;\n  /**\n   * A multicasting observable that emits an event every time the validation `status` of the control\n   * recalculates.\n   *\n   * @see {@link FormControlStatus}\n   * @see {@link AbstractControl.status}\n   */\n  statusChanges;\n  /**\n   * Reports the update strategy of the `AbstractControl` (meaning\n   * the event on which the control updates itself).\n   * Possible values: `'change'` | `'blur'` | `'submit'`\n   * Default value: `'change'`\n   */\n  get updateOn() {\n    return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : 'change';\n  }\n  /**\n   * Sets the synchronous validators that are active on this control.  Calling\n   * this overwrites any existing synchronous validators.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * If you want to add a new validator without affecting existing ones, consider\n   * using `addValidators()` method instead.\n   */\n  setValidators(validators) {\n    this._assignValidators(validators);\n  }\n  /**\n   * Sets the asynchronous validators that are active on this control. Calling this\n   * overwrites any existing asynchronous validators.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * If you want to add a new validator without affecting existing ones, consider\n   * using `addAsyncValidators()` method instead.\n   */\n  setAsyncValidators(validators) {\n    this._assignAsyncValidators(validators);\n  }\n  /**\n   * Add a synchronous validator or validators to this control, without affecting other validators.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * Adding a validator that already exists will have no effect. If duplicate validator functions\n   * are present in the `validators` array, only the first instance would be added to a form\n   * control.\n   *\n   * @param validators The new validator function or functions to add to this control.\n   */\n  addValidators(validators) {\n    this.setValidators(addValidators(validators, this._rawValidators));\n  }\n  /**\n   * Add an asynchronous validator or validators to this control, without affecting other\n   * validators.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * Adding a validator that already exists will have no effect.\n   *\n   * @param validators The new asynchronous validator function or functions to add to this control.\n   */\n  addAsyncValidators(validators) {\n    this.setAsyncValidators(addValidators(validators, this._rawAsyncValidators));\n  }\n  /**\n   * Remove a synchronous validator from this control, without affecting other validators.\n   * Validators are compared by function reference; you must pass a reference to the exact same\n   * validator function as the one that was originally set. If a provided validator is not found,\n   * it is ignored.\n   *\n   * @usageNotes\n   *\n   * ### Reference to a ValidatorFn\n   *\n   * ```\n   * // Reference to the RequiredValidator\n   * const ctrl = new FormControl<string | null>('', Validators.required);\n   * ctrl.removeValidators(Validators.required);\n   *\n   * // Reference to anonymous function inside MinValidator\n   * const minValidator = Validators.min(3);\n   * const ctrl = new FormControl<string | null>('', minValidator);\n   * expect(ctrl.hasValidator(minValidator)).toEqual(true)\n   * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)\n   *\n   * ctrl.removeValidators(minValidator);\n   * ```\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * @param validators The validator or validators to remove.\n   */\n  removeValidators(validators) {\n    this.setValidators(removeValidators(validators, this._rawValidators));\n  }\n  /**\n   * Remove an asynchronous validator from this control, without affecting other validators.\n   * Validators are compared by function reference; you must pass a reference to the exact same\n   * validator function as the one that was originally set. If a provided validator is not found, it\n   * is ignored.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * @param validators The asynchronous validator or validators to remove.\n   */\n  removeAsyncValidators(validators) {\n    this.setAsyncValidators(removeValidators(validators, this._rawAsyncValidators));\n  }\n  /**\n   * Check whether a synchronous validator function is present on this control. The provided\n   * validator must be a reference to the exact same function that was provided.\n   *\n   * @usageNotes\n   *\n   * ### Reference to a ValidatorFn\n   *\n   * ```\n   * // Reference to the RequiredValidator\n   * const ctrl = new FormControl<number | null>(0, Validators.required);\n   * expect(ctrl.hasValidator(Validators.required)).toEqual(true)\n   *\n   * // Reference to anonymous function inside MinValidator\n   * const minValidator = Validators.min(3);\n   * const ctrl = new FormControl<number | null>(0, minValidator);\n   * expect(ctrl.hasValidator(minValidator)).toEqual(true)\n   * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)\n   * ```\n   *\n   * @param validator The validator to check for presence. Compared by function reference.\n   * @returns Whether the provided validator was found on this control.\n   */\n  hasValidator(validator) {\n    return hasValidator(this._rawValidators, validator);\n  }\n  /**\n   * Check whether an asynchronous validator function is present on this control. The provided\n   * validator must be a reference to the exact same function that was provided.\n   *\n   * @param validator The asynchronous validator to check for presence. Compared by function\n   *     reference.\n   * @returns Whether the provided asynchronous validator was found on this control.\n   */\n  hasAsyncValidator(validator) {\n    return hasValidator(this._rawAsyncValidators, validator);\n  }\n  /**\n   * Empties out the synchronous validator list.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   */\n  clearValidators() {\n    this.validator = null;\n  }\n  /**\n   * Empties out the async validator list.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   */\n  clearAsyncValidators() {\n    this.asyncValidator = null;\n  }\n  markAsTouched(opts = {}) {\n    const changed = this.touched === false;\n    this.touched = true;\n    const sourceControl = opts.sourceControl ?? this;\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsTouched({\n        ...opts,\n        sourceControl\n      });\n    }\n    if (changed && opts.emitEvent !== false) {\n      this._events.next(new TouchedChangeEvent(true, sourceControl));\n    }\n  }\n  /**\n   * Marks the control and all its descendant controls as `dirty`.\n   * @see {@link markAsDirty()}\n   *\n   * @param opts Configuration options that determine how the control propagates changes\n   * and emits events after marking is applied.\n   * * `emitEvent`: When true or not supplied (the default), the `events`\n   * observable emits a `PristineChangeEvent` with the `pristine` property being `false`.\n   * When false, no events are emitted.\n   */\n  markAllAsDirty(opts = {}) {\n    this.markAsDirty({\n      onlySelf: true,\n      emitEvent: opts.emitEvent,\n      sourceControl: this\n    });\n    this._forEachChild(control => control.markAllAsDirty(opts));\n  }\n  /**\n   * Marks the control and all its descendant controls as `touched`.\n   * @see {@link markAsTouched()}\n   *\n   * @param opts Configuration options that determine how the control propagates changes\n   * and emits events after marking is applied.\n   * * `emitEvent`: When true or not supplied (the default), the `events`\n   * observable emits a `TouchedChangeEvent` with the `touched` property being `true`.\n   * When false, no events are emitted.\n   */\n  markAllAsTouched(opts = {}) {\n    this.markAsTouched({\n      onlySelf: true,\n      emitEvent: opts.emitEvent,\n      sourceControl: this\n    });\n    this._forEachChild(control => control.markAllAsTouched(opts));\n  }\n  markAsUntouched(opts = {}) {\n    const changed = this.touched === true;\n    this.touched = false;\n    this._pendingTouched = false;\n    const sourceControl = opts.sourceControl ?? this;\n    this._forEachChild(control => {\n      control.markAsUntouched({\n        onlySelf: true,\n        emitEvent: opts.emitEvent,\n        sourceControl\n      });\n    });\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts, sourceControl);\n    }\n    if (changed && opts.emitEvent !== false) {\n      this._events.next(new TouchedChangeEvent(false, sourceControl));\n    }\n  }\n  markAsDirty(opts = {}) {\n    const changed = this.pristine === true;\n    this.pristine = false;\n    const sourceControl = opts.sourceControl ?? this;\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsDirty({\n        ...opts,\n        sourceControl\n      });\n    }\n    if (changed && opts.emitEvent !== false) {\n      this._events.next(new PristineChangeEvent(false, sourceControl));\n    }\n  }\n  markAsPristine(opts = {}) {\n    const changed = this.pristine === false;\n    this.pristine = true;\n    this._pendingDirty = false;\n    const sourceControl = opts.sourceControl ?? this;\n    this._forEachChild(control => {\n      /** We don't propagate the source control downwards */\n      control.markAsPristine({\n        onlySelf: true,\n        emitEvent: opts.emitEvent\n      });\n    });\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts, sourceControl);\n    }\n    if (changed && opts.emitEvent !== false) {\n      this._events.next(new PristineChangeEvent(true, sourceControl));\n    }\n  }\n  markAsPending(opts = {}) {\n    this.status = PENDING;\n    const sourceControl = opts.sourceControl ?? this;\n    if (opts.emitEvent !== false) {\n      this._events.next(new StatusChangeEvent(this.status, sourceControl));\n      this.statusChanges.emit(this.status);\n    }\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsPending({\n        ...opts,\n        sourceControl\n      });\n    }\n  }\n  disable(opts = {}) {\n    // If parent has been marked artificially dirty we don't want to re-calculate the\n    // parent's dirtiness based on the children.\n    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n    this.status = DISABLED;\n    this.errors = null;\n    this._forEachChild(control => {\n      /** We don't propagate the source control downwards */\n      control.disable({\n        ...opts,\n        onlySelf: true\n      });\n    });\n    this._updateValue();\n    const sourceControl = opts.sourceControl ?? this;\n    if (opts.emitEvent !== false) {\n      this._events.next(new ValueChangeEvent(this.value, sourceControl));\n      this._events.next(new StatusChangeEvent(this.status, sourceControl));\n      this.valueChanges.emit(this.value);\n      this.statusChanges.emit(this.status);\n    }\n    this._updateAncestors({\n      ...opts,\n      skipPristineCheck\n    }, this);\n    this._onDisabledChange.forEach(changeFn => changeFn(true));\n  }\n  /**\n   * Enables the control. This means the control is included in validation checks and\n   * the aggregate value of its parent. Its status recalculates based on its value and\n   * its validators.\n   *\n   * By default, if the control has children, all children are enabled.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @param opts Configure options that control how the control propagates changes and\n   * emits events when marked as untouched\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`,\n   * `valueChanges` and `events`\n   * observables emit events with the latest status and value when the control is enabled.\n   * When false, no events are emitted.\n   */\n  enable(opts = {}) {\n    // If parent has been marked artificially dirty we don't want to re-calculate the\n    // parent's dirtiness based on the children.\n    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n    this.status = VALID;\n    this._forEachChild(control => {\n      control.enable({\n        ...opts,\n        onlySelf: true\n      });\n    });\n    this.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: opts.emitEvent\n    });\n    this._updateAncestors({\n      ...opts,\n      skipPristineCheck\n    }, this);\n    this._onDisabledChange.forEach(changeFn => changeFn(false));\n  }\n  _updateAncestors(opts, sourceControl) {\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity(opts);\n      if (!opts.skipPristineCheck) {\n        this._parent._updatePristine({}, sourceControl);\n      }\n      this._parent._updateTouched({}, sourceControl);\n    }\n  }\n  /**\n   * Sets the parent of the control\n   *\n   * @param parent The new parent.\n   */\n  setParent(parent) {\n    this._parent = parent;\n  }\n  /**\n   * The raw value of this control. For most control implementations, the raw value will include\n   * disabled children.\n   */\n  getRawValue() {\n    return this.value;\n  }\n  updateValueAndValidity(opts = {}) {\n    this._setInitialStatus();\n    this._updateValue();\n    if (this.enabled) {\n      const shouldHaveEmitted = this._cancelExistingSubscription();\n      this.errors = this._runValidator();\n      this.status = this._calculateStatus();\n      if (this.status === VALID || this.status === PENDING) {\n        // If the canceled subscription should have emitted\n        // we make sure the async validator emits the status change on completion\n        this._runAsyncValidator(shouldHaveEmitted, opts.emitEvent);\n      }\n    }\n    const sourceControl = opts.sourceControl ?? this;\n    if (opts.emitEvent !== false) {\n      this._events.next(new ValueChangeEvent(this.value, sourceControl));\n      this._events.next(new StatusChangeEvent(this.status, sourceControl));\n      this.valueChanges.emit(this.value);\n      this.statusChanges.emit(this.status);\n    }\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity({\n        ...opts,\n        sourceControl\n      });\n    }\n  }\n  /** @internal */\n  _updateTreeValidity(opts = {\n    emitEvent: true\n  }) {\n    this._forEachChild(ctrl => ctrl._updateTreeValidity(opts));\n    this.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: opts.emitEvent\n    });\n  }\n  _setInitialStatus() {\n    this.status = this._allControlsDisabled() ? DISABLED : VALID;\n  }\n  _runValidator() {\n    return this.validator ? this.validator(this) : null;\n  }\n  _runAsyncValidator(shouldHaveEmitted, emitEvent) {\n    if (this.asyncValidator) {\n      this.status = PENDING;\n      this._hasOwnPendingAsyncValidator = {\n        emitEvent: emitEvent !== false,\n        shouldHaveEmitted: shouldHaveEmitted !== false\n      };\n      const obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription = obs.subscribe(errors => {\n        this._hasOwnPendingAsyncValidator = null;\n        // This will trigger the recalculation of the validation status, which depends on\n        // the state of the asynchronous validation (whether it is in progress or not). So, it is\n        // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.\n        this.setErrors(errors, {\n          emitEvent,\n          shouldHaveEmitted\n        });\n      });\n    }\n  }\n  _cancelExistingSubscription() {\n    if (this._asyncValidationSubscription) {\n      this._asyncValidationSubscription.unsubscribe();\n      // we're cancelling the validator subscribtion, we keep if it should have emitted\n      // because we want to emit eventually if it was required at least once.\n      const shouldHaveEmitted = (this._hasOwnPendingAsyncValidator?.emitEvent || this._hasOwnPendingAsyncValidator?.shouldHaveEmitted) ?? false;\n      this._hasOwnPendingAsyncValidator = null;\n      return shouldHaveEmitted;\n    }\n    return false;\n  }\n  setErrors(errors, opts = {}) {\n    this.errors = errors;\n    this._updateControlsErrors(opts.emitEvent !== false, this, opts.shouldHaveEmitted);\n  }\n  /**\n   * Retrieves a child control given the control's name or path.\n   *\n   * @param path A dot-delimited string or array of string/number values that define the path to the\n   * control. If a string is provided, passing it as a string literal will result in improved type\n   * information. Likewise, if an array is provided, passing it `as const` will cause improved type\n   * information to be available.\n   *\n   * @usageNotes\n   * ### Retrieve a nested control\n   *\n   * For example, to get a `name` control nested within a `person` sub-group:\n   *\n   * * `this.form.get('person.name');`\n   *\n   * -OR-\n   *\n   * * `this.form.get(['person', 'name'] as const);` // `as const` gives improved typings\n   *\n   * ### Retrieve a control in a FormArray\n   *\n   * When accessing an element inside a FormArray, you can use an element index.\n   * For example, to get a `price` control from the first element in an `items` array you can use:\n   *\n   * * `this.form.get('items.0.price');`\n   *\n   * -OR-\n   *\n   * * `this.form.get(['items', 0, 'price']);`\n   */\n  get(path) {\n    let currPath = path;\n    if (currPath == null) return null;\n    if (!Array.isArray(currPath)) currPath = currPath.split('.');\n    if (currPath.length === 0) return null;\n    return currPath.reduce((control, name) => control && control._find(name), this);\n  }\n  /**\n   * @description\n   * Reports error data for the control with the given path.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```ts\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * @returns error data for that particular error. If the control or error is not present,\n   * null is returned.\n   */\n  getError(errorCode, path) {\n    const control = path ? this.get(path) : this;\n    return control && control.errors ? control.errors[errorCode] : null;\n  }\n  /**\n   * @description\n   * Reports whether the control with the given path has the error specified.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```ts\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * If no path is given, this method checks for the error on the current control.\n   *\n   * @returns whether the given error is present in the control at the given path.\n   *\n   * If the control is not present, false is returned.\n   */\n  hasError(errorCode, path) {\n    return !!this.getError(errorCode, path);\n  }\n  /**\n   * Retrieves the top-level ancestor of this control.\n   */\n  get root() {\n    let x = this;\n    while (x._parent) {\n      x = x._parent;\n    }\n    return x;\n  }\n  /** @internal */\n  _updateControlsErrors(emitEvent, changedControl, shouldHaveEmitted) {\n    this.status = this._calculateStatus();\n    if (emitEvent) {\n      this.statusChanges.emit(this.status);\n    }\n    // The Events Observable expose a slight different bevahior than the statusChanges obs\n    // An async validator will still emit a StatusChangeEvent is a previously cancelled\n    // async validator has emitEvent set to true\n    if (emitEvent || shouldHaveEmitted) {\n      this._events.next(new StatusChangeEvent(this.status, changedControl));\n    }\n    if (this._parent) {\n      this._parent._updateControlsErrors(emitEvent, changedControl, shouldHaveEmitted);\n    }\n  }\n  /** @internal */\n  _initObservables() {\n    // TODO: this should be piped from events() but is breaking in G3\n    this.valueChanges = new EventEmitter();\n    this.statusChanges = new EventEmitter();\n  }\n  _calculateStatus() {\n    if (this._allControlsDisabled()) return DISABLED;\n    if (this.errors) return INVALID;\n    if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    return VALID;\n  }\n  /** @internal */\n  _anyControlsHaveStatus(status) {\n    return this._anyControls(control => control.status === status);\n  }\n  /** @internal */\n  _anyControlsDirty() {\n    return this._anyControls(control => control.dirty);\n  }\n  /** @internal */\n  _anyControlsTouched() {\n    return this._anyControls(control => control.touched);\n  }\n  /** @internal */\n  _updatePristine(opts, changedControl) {\n    const newPristine = !this._anyControlsDirty();\n    const changed = this.pristine !== newPristine;\n    this.pristine = newPristine;\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts, changedControl);\n    }\n    if (changed) {\n      this._events.next(new PristineChangeEvent(this.pristine, changedControl));\n    }\n  }\n  /** @internal */\n  _updateTouched(opts = {}, changedControl) {\n    this.touched = this._anyControlsTouched();\n    this._events.next(new TouchedChangeEvent(this.touched, changedControl));\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts, changedControl);\n    }\n  }\n  /** @internal */\n  _onDisabledChange = [];\n  /** @internal */\n  _registerOnCollectionChange(fn) {\n    this._onCollectionChange = fn;\n  }\n  /** @internal */\n  _setUpdateStrategy(opts) {\n    if (isOptionsObj(opts) && opts.updateOn != null) {\n      this._updateOn = opts.updateOn;\n    }\n  }\n  /**\n   * Check to see if parent has been marked artificially dirty.\n   *\n   * @internal\n   */\n  _parentMarkedDirty(onlySelf) {\n    const parentDirty = this._parent && this._parent.dirty;\n    return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();\n  }\n  /** @internal */\n  _find(name) {\n    return null;\n  }\n  /**\n   * Internal implementation of the `setValidators` method. Needs to be separated out into a\n   * different method, because it is called in the constructor and it can break cases where\n   * a control is extended.\n   */\n  _assignValidators(validators) {\n    this._rawValidators = Array.isArray(validators) ? validators.slice() : validators;\n    this._composedValidatorFn = coerceToValidator(this._rawValidators);\n  }\n  /**\n   * Internal implementation of the `setAsyncValidators` method. Needs to be separated out into a\n   * different method, because it is called in the constructor and it can break cases where\n   * a control is extended.\n   */\n  _assignAsyncValidators(validators) {\n    this._rawAsyncValidators = Array.isArray(validators) ? validators.slice() : validators;\n    this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);\n  }\n}\n\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the four fundamental building blocks used to define forms in Angular,\n * along with `FormControl`, `FormArray`, and `FormRecord`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * `FormGroup` is intended for use cases where the keys are known ahead of time.\n * If you need to dynamically add and remove controls, use {@link FormRecord} instead.\n *\n * `FormGroup` accepts an optional type parameter `TControl`, which is an object type with inner\n * control types as values.\n *\n * @usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```ts\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### The type argument, and optional controls\n *\n * `FormGroup` accepts one generic argument, which is an object containing its inner controls.\n * This type will usually be inferred automatically, but you can always specify it explicitly if you\n * wish.\n *\n * If you have controls that are optional (i.e. they can be removed, you can use the `?` in the\n * type):\n *\n * ```ts\n * const form = new FormGroup<{\n *   first: FormControl<string|null>,\n *   middle?: FormControl<string|null>, // Middle name is optional.\n *   last: FormControl<string|null>,\n * }>({\n *   first: new FormControl('Nancy'),\n *   last: new FormControl('Drew'),\n * });\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```ts\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```ts\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * ### Using a FormGroup with optional controls\n *\n * It is possible to have optional controls in a FormGroup. An optional control can be removed later\n * using `removeControl`, and can be omitted when calling `reset`. Optional controls must be\n * declared optional in the group's type.\n *\n * ```ts\n * const c = new FormGroup<{one?: FormControl<string>}>({\n *   one: new FormControl('')\n * });\n * ```\n *\n * Notice that `c.value.one` has type `string|null|undefined`. This is because calling `c.reset({})`\n * without providing the optional key `one` will cause it to become `null`.\n *\n * @publicApi\n */\nclass FormGroup extends AbstractControl {\n  /**\n   * Creates a new `FormGroup` instance.\n   *\n   * @param controls A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   *\n   */\n  constructor(controls, validatorOrOpts, asyncValidator) {\n    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n    (typeof ngDevMode === 'undefined' || ngDevMode) && validateFormGroupControls(controls);\n    this.controls = controls;\n    this._initObservables();\n    this._setUpdateStrategy(validatorOrOpts);\n    this._setUpControls();\n    this.updateValueAndValidity({\n      onlySelf: true,\n      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n      // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,\n      // so we set `emitEvent` to `true` to allow that during the control creation process.\n      emitEvent: !!this.asyncValidator\n    });\n  }\n  controls;\n  registerControl(name, control) {\n    if (this.controls[name]) return this.controls[name];\n    this.controls[name] = control;\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n    return control;\n  }\n  addControl(name, control, options = {}) {\n    this.registerControl(name, control);\n    this.updateValueAndValidity({\n      emitEvent: options.emitEvent\n    });\n    this._onCollectionChange();\n  }\n  /**\n   * Remove a control from this group. In a strongly-typed group, required controls cannot be\n   * removed.\n   *\n   * This method also updates the value and validity of the control.\n   *\n   * @param name The control name to remove from the collection\n   * @param options Specifies whether this FormGroup instance should emit events after a\n   *     control is removed.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * removed. When false, no events are emitted.\n   */\n  removeControl(name, options = {}) {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete this.controls[name];\n    this.updateValueAndValidity({\n      emitEvent: options.emitEvent\n    });\n    this._onCollectionChange();\n  }\n  setControl(name, control, options = {}) {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete this.controls[name];\n    if (control) this.registerControl(name, control);\n    this.updateValueAndValidity({\n      emitEvent: options.emitEvent\n    });\n    this._onCollectionChange();\n  }\n  contains(controlName) {\n    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n  }\n  /**\n   * Sets the value of the `FormGroup`. It accepts an object that matches\n   * the structure of the group, with control names as keys.\n   *\n   * @usageNotes\n   * ### Set the complete value for the form group\n   *\n   * ```ts\n   * const form = new FormGroup({\n   *   first: new FormControl(),\n   *   last: new FormControl()\n   * });\n   *\n   * console.log(form.value);   // {first: null, last: null}\n   *\n   * form.setValue({first: 'Nancy', last: 'Drew'});\n   * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n   * ```\n   *\n   * @throws When strict checks fail, such as setting the value of a control\n   * that doesn't exist or if you exclude a value of a control that does exist.\n   *\n   * @param value The new value for the control that matches the structure of the group.\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events after the value changes.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   */\n  setValue(value, options = {}) {\n    assertAllValuesPresent(this, true, value);\n    Object.keys(value).forEach(name => {\n      assertControlPresent(this, true, name);\n      this.controls[name].setValue(value[name], {\n        onlySelf: true,\n        emitEvent: options.emitEvent\n      });\n    });\n    this.updateValueAndValidity(options);\n  }\n  /**\n   * Patches the value of the `FormGroup`. It accepts an object with control\n   * names as keys, and does its best to match the values to the correct controls\n   * in the group.\n   *\n   * It accepts both super-sets and sub-sets of the group without throwing an error.\n   *\n   * @usageNotes\n   * ### Patch the value for a form group\n   *\n   * ```ts\n   * const form = new FormGroup({\n   *    first: new FormControl(),\n   *    last: new FormControl()\n   * });\n   * console.log(form.value);   // {first: null, last: null}\n   *\n   * form.patchValue({first: 'Nancy'});\n   * console.log(form.value);   // {first: 'Nancy', last: null}\n   * ```\n   *\n   * @param value The object that matches the structure of the group.\n   * @param options Configuration options that determine how the control propagates changes and\n   * emits events after the value is patched.\n   * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n   * true.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control value\n   * is updated. When false, no events are emitted. The configuration options are passed to\n   * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.\n   */\n  patchValue(value, options = {}) {\n    // Even though the `value` argument type doesn't allow `null` and `undefined` values, the\n    // `patchValue` can be called recursively and inner data structures might have these values, so\n    // we just ignore such cases when a field containing FormGroup instance receives `null` or\n    // `undefined` as a value.\n    if (value == null /* both `null` and `undefined` */) return;\n    Object.keys(value).forEach(name => {\n      // The compiler cannot see through the uninstantiated conditional type of `this.controls`, so\n      // `as any` is required.\n      const control = this.controls[name];\n      if (control) {\n        control.patchValue(/* Guaranteed to be present, due to the outer forEach. */value[name], {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n  /**\n   * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets\n   * the value of all descendants to their default values, or null if no defaults were provided.\n   *\n   * You reset to a specific form state by passing in a map of states\n   * that matches the structure of your form, with control names as keys. The state\n   * is a standalone value or a form state object with both a value and a disabled\n   * status.\n   *\n   * @param value Resets the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events when the group is reset.\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * @usageNotes\n   *\n   * ### Reset the form group values\n   *\n   * ```ts\n   * const form = new FormGroup({\n   *   first: new FormControl('first name'),\n   *   last: new FormControl('last name')\n   * });\n   *\n   * console.log(form.value);  // {first: 'first name', last: 'last name'}\n   *\n   * form.reset({ first: 'name', last: 'last name' });\n   *\n   * console.log(form.value);  // {first: 'name', last: 'last name'}\n   * ```\n   *\n   * ### Reset the form group values and disabled status\n   *\n   * ```ts\n   * const form = new FormGroup({\n   *   first: new FormControl('first name'),\n   *   last: new FormControl('last name')\n   * });\n   *\n   * form.reset({\n   *   first: {value: 'name', disabled: true},\n   *   last: 'last'\n   * });\n   *\n   * console.log(form.value);  // {last: 'last'}\n   * console.log(form.get('first').status);  // 'DISABLED'\n   * ```\n   */\n  reset(value = {}, options = {}) {\n    this._forEachChild((control, name) => {\n      control.reset(value ? value[name] : null, {\n        onlySelf: true,\n        emitEvent: options.emitEvent\n      });\n    });\n    this._updatePristine(options, this);\n    this._updateTouched(options, this);\n    this.updateValueAndValidity(options);\n  }\n  /**\n   * The aggregate value of the `FormGroup`, including any disabled controls.\n   *\n   * Retrieves all values regardless of disabled status.\n   */\n  getRawValue() {\n    return this._reduceChildren({}, (acc, control, name) => {\n      acc[name] = control.getRawValue();\n      return acc;\n    });\n  }\n  /** @internal */\n  _syncPendingControls() {\n    let subtreeUpdated = this._reduceChildren(false, (updated, child) => {\n      return child._syncPendingControls() ? true : updated;\n    });\n    if (subtreeUpdated) this.updateValueAndValidity({\n      onlySelf: true\n    });\n    return subtreeUpdated;\n  }\n  /** @internal */\n  _forEachChild(cb) {\n    Object.keys(this.controls).forEach(key => {\n      // The list of controls can change (for ex. controls might be removed) while the loop\n      // is running (as a result of invoking Forms API in `valueChanges` subscription), so we\n      // have to null check before invoking the callback.\n      const control = this.controls[key];\n      control && cb(control, key);\n    });\n  }\n  /** @internal */\n  _setUpControls() {\n    this._forEachChild(control => {\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n    });\n  }\n  /** @internal */\n  _updateValue() {\n    this.value = this._reduceValue();\n  }\n  /** @internal */\n  _anyControls(condition) {\n    for (const [controlName, control] of Object.entries(this.controls)) {\n      if (this.contains(controlName) && condition(control)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /** @internal */\n  _reduceValue() {\n    let acc = {};\n    return this._reduceChildren(acc, (acc, control, name) => {\n      if (control.enabled || this.disabled) {\n        acc[name] = control.value;\n      }\n      return acc;\n    });\n  }\n  /** @internal */\n  _reduceChildren(initValue, fn) {\n    let res = initValue;\n    this._forEachChild((control, name) => {\n      res = fn(res, control, name);\n    });\n    return res;\n  }\n  /** @internal */\n  _allControlsDisabled() {\n    for (const controlName of Object.keys(this.controls)) {\n      if (this.controls[controlName].enabled) {\n        return false;\n      }\n    }\n    return Object.keys(this.controls).length > 0 || this.disabled;\n  }\n  /** @internal */\n  _find(name) {\n    return this.controls.hasOwnProperty(name) ? this.controls[name] : null;\n  }\n}\n/**\n * Will validate that none of the controls has a key with a dot\n * Throws other wise\n */\nfunction validateFormGroupControls(controls) {\n  const invalidKeys = Object.keys(controls).filter(key => key.includes('.'));\n  if (invalidKeys.length > 0) {\n    // TODO: make this an error once there are no more uses in G3\n    console.warn(`FormGroup keys cannot include \\`.\\`, please replace the keys for: ${invalidKeys.join(',')}.`);\n  }\n}\nconst UntypedFormGroup = FormGroup;\n/**\n * @description\n * Asserts that the given control is an instance of `FormGroup`\n *\n * @publicApi\n */\nconst isFormGroup = control => control instanceof FormGroup;\n/**\n * Tracks the value and validity state of a collection of `FormControl` instances, each of which has\n * the same value type.\n *\n * `FormRecord` is very similar to {@link FormGroup}, except it can be used with a dynamic keys,\n * with controls added and removed as needed.\n *\n * `FormRecord` accepts one generic argument, which describes the type of the controls it contains.\n *\n * @usageNotes\n *\n * ```ts\n * let numbers = new FormRecord({bill: new FormControl('415-123-456')});\n * numbers.addControl('bob', new FormControl('415-234-567'));\n * numbers.removeControl('bill');\n * ```\n *\n * @publicApi\n */\nclass FormRecord extends FormGroup {}\n/**\n * @description\n * Asserts that the given control is an instance of `FormRecord`\n *\n * @publicApi\n */\nconst isFormRecord = control => control instanceof FormRecord;\n\n/**\n * Token to provide to allow SetDisabledState to always be called when a CVA is added, regardless of\n * whether the control is disabled or enabled.\n *\n * @see {@link FormsModule#withconfig}\n */\nconst CALL_SET_DISABLED_STATE = /*#__PURE__*/new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'CallSetDisabledState' : '', {\n  providedIn: 'root',\n  factory: () => setDisabledStateDefault\n});\n/**\n * Whether to use the fixed setDisabledState behavior by default.\n */\nconst setDisabledStateDefault = 'always';\nfunction controlPath(name, parent) {\n  return [...parent.path, name];\n}\n/**\n * Links a Form control and a Form directive by setting up callbacks (such as `onChange`) on both\n * instances. This function is typically invoked when form directive is being initialized.\n *\n * @param control Form control instance that should be linked.\n * @param dir Directive that should be linked with a given control.\n */\nfunction setUpControl(control, dir, callSetDisabledState = setDisabledStateDefault) {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (!control) _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor) _throwMissingValueAccessorError(dir);\n  }\n  setUpValidators(control, dir);\n  dir.valueAccessor.writeValue(control.value);\n  // The legacy behavior only calls the CVA's `setDisabledState` if the control is disabled.\n  // If the `callSetDisabledState` option is set to `always`, then this bug is fixed and\n  // the method is always called.\n  if (control.disabled || callSetDisabledState === 'always') {\n    dir.valueAccessor.setDisabledState?.(control.disabled);\n  }\n  setUpViewChangePipeline(control, dir);\n  setUpModelChangePipeline(control, dir);\n  setUpBlurPipeline(control, dir);\n  setUpDisabledChangeHandler(control, dir);\n}\n/**\n * Reverts configuration performed by the `setUpControl` control function.\n * Effectively disconnects form control with a given form directive.\n * This function is typically invoked when corresponding form directive is being destroyed.\n *\n * @param control Form control which should be cleaned up.\n * @param dir Directive that should be disconnected from a given control.\n * @param validateControlPresenceOnChange Flag that indicates whether onChange handler should\n *     contain asserts to verify that it's not called once directive is destroyed. We need this flag\n *     to avoid potentially breaking changes caused by better control cleanup introduced in #39235.\n */\nfunction cleanUpControl(control, dir, validateControlPresenceOnChange = true) {\n  const noop = () => {\n    if (validateControlPresenceOnChange && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      _noControlError(dir);\n    }\n  };\n  // The `valueAccessor` field is typically defined on FromControl and FormControlName directive\n  // instances and there is a logic in `selectValueAccessor` function that throws if it's not the\n  // case. We still check the presence of `valueAccessor` before invoking its methods to make sure\n  // that cleanup works correctly if app code or tests are setup to ignore the error thrown from\n  // `selectValueAccessor`. See https://github.com/angular/angular/issues/40521.\n  if (dir.valueAccessor) {\n    dir.valueAccessor.registerOnChange(noop);\n    dir.valueAccessor.registerOnTouched(noop);\n  }\n  cleanUpValidators(control, dir);\n  if (control) {\n    dir._invokeOnDestroyCallbacks();\n    control._registerOnCollectionChange(() => {});\n  }\n}\nfunction registerOnValidatorChange(validators, onChange) {\n  validators.forEach(validator => {\n    if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(onChange);\n  });\n}\n/**\n * Sets up disabled change handler function on a given form control if ControlValueAccessor\n * associated with a given directive instance supports the `setDisabledState` call.\n *\n * @param control Form control where disabled change handler should be setup.\n * @param dir Corresponding directive instance associated with this control.\n */\nfunction setUpDisabledChangeHandler(control, dir) {\n  if (dir.valueAccessor.setDisabledState) {\n    const onDisabledChange = isDisabled => {\n      dir.valueAccessor.setDisabledState(isDisabled);\n    };\n    control.registerOnDisabledChange(onDisabledChange);\n    // Register a callback function to cleanup disabled change handler\n    // from a control instance when a directive is destroyed.\n    dir._registerOnDestroy(() => {\n      control._unregisterOnDisabledChange(onDisabledChange);\n    });\n  }\n}\n/**\n * Sets up sync and async directive validators on provided form control.\n * This function merges validators from the directive into the validators of the control.\n *\n * @param control Form control where directive validators should be setup.\n * @param dir Directive instance that contains validators to be setup.\n */\nfunction setUpValidators(control, dir) {\n  const validators = getControlValidators(control);\n  if (dir.validator !== null) {\n    control.setValidators(mergeValidators(validators, dir.validator));\n  } else if (typeof validators === 'function') {\n    // If sync validators are represented by a single validator function, we force the\n    // `Validators.compose` call to happen by executing the `setValidators` function with\n    // an array that contains that function. We need this to avoid possible discrepancies in\n    // validators behavior, so sync validators are always processed by the `Validators.compose`.\n    // Note: we should consider moving this logic inside the `setValidators` function itself, so we\n    // have consistent behavior on AbstractControl API level. The same applies to the async\n    // validators logic below.\n    control.setValidators([validators]);\n  }\n  const asyncValidators = getControlAsyncValidators(control);\n  if (dir.asyncValidator !== null) {\n    control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));\n  } else if (typeof asyncValidators === 'function') {\n    control.setAsyncValidators([asyncValidators]);\n  }\n  // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n  const onValidatorChange = () => control.updateValueAndValidity();\n  registerOnValidatorChange(dir._rawValidators, onValidatorChange);\n  registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);\n}\n/**\n * Cleans up sync and async directive validators on provided form control.\n * This function reverts the setup performed by the `setUpValidators` function, i.e.\n * removes directive-specific validators from a given control instance.\n *\n * @param control Form control from where directive validators should be removed.\n * @param dir Directive instance that contains validators to be removed.\n * @returns true if a control was updated as a result of this action.\n */\nfunction cleanUpValidators(control, dir) {\n  let isControlUpdated = false;\n  if (control !== null) {\n    if (dir.validator !== null) {\n      const validators = getControlValidators(control);\n      if (Array.isArray(validators) && validators.length > 0) {\n        // Filter out directive validator function.\n        const updatedValidators = validators.filter(validator => validator !== dir.validator);\n        if (updatedValidators.length !== validators.length) {\n          isControlUpdated = true;\n          control.setValidators(updatedValidators);\n        }\n      }\n    }\n    if (dir.asyncValidator !== null) {\n      const asyncValidators = getControlAsyncValidators(control);\n      if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {\n        // Filter out directive async validator function.\n        const updatedAsyncValidators = asyncValidators.filter(asyncValidator => asyncValidator !== dir.asyncValidator);\n        if (updatedAsyncValidators.length !== asyncValidators.length) {\n          isControlUpdated = true;\n          control.setAsyncValidators(updatedAsyncValidators);\n        }\n      }\n    }\n  }\n  // Clear onValidatorChange callbacks by providing a noop function.\n  const noop = () => {};\n  registerOnValidatorChange(dir._rawValidators, noop);\n  registerOnValidatorChange(dir._rawAsyncValidators, noop);\n  return isControlUpdated;\n}\nfunction setUpViewChangePipeline(control, dir) {\n  dir.valueAccessor.registerOnChange(newValue => {\n    control._pendingValue = newValue;\n    control._pendingChange = true;\n    control._pendingDirty = true;\n    if (control.updateOn === 'change') updateControl(control, dir);\n  });\n}\nfunction setUpBlurPipeline(control, dir) {\n  dir.valueAccessor.registerOnTouched(() => {\n    control._pendingTouched = true;\n    if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);\n    if (control.updateOn !== 'submit') control.markAsTouched();\n  });\n}\nfunction updateControl(control, dir) {\n  if (control._pendingDirty) control.markAsDirty();\n  control.setValue(control._pendingValue, {\n    emitModelToViewChange: false\n  });\n  dir.viewToModelUpdate(control._pendingValue);\n  control._pendingChange = false;\n}\nfunction setUpModelChangePipeline(control, dir) {\n  const onChange = (newValue, emitModelEvent) => {\n    // control -> view\n    dir.valueAccessor.writeValue(newValue);\n    // control -> ngModel\n    if (emitModelEvent) dir.viewToModelUpdate(newValue);\n  };\n  control.registerOnChange(onChange);\n  // Register a callback function to cleanup onChange handler\n  // from a control instance when a directive is destroyed.\n  dir._registerOnDestroy(() => {\n    control._unregisterOnChange(onChange);\n  });\n}\n/**\n * Links a FormGroup or FormArray instance and corresponding Form directive by setting up validators\n * present in the view.\n *\n * @param control FormGroup or FormArray instance that should be linked.\n * @param dir Directive that provides view validators.\n */\nfunction setUpFormContainer(control, dir) {\n  if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'Cannot find control with');\n  setUpValidators(control, dir);\n}\n/**\n * Reverts the setup performed by the `setUpFormContainer` function.\n *\n * @param control FormGroup or FormArray instance that should be cleaned up.\n * @param dir Directive that provided view validators.\n * @returns true if a control was updated as a result of this action.\n */\nfunction cleanUpFormContainer(control, dir) {\n  return cleanUpValidators(control, dir);\n}\nfunction _noControlError(dir) {\n  return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\nfunction _throwError(dir, message) {\n  const messageEnd = _describeControlLocation(dir);\n  throw new Error(`${message} ${messageEnd}`);\n}\nfunction _describeControlLocation(dir) {\n  const path = dir.path;\n  if (path && path.length > 1) return `path: '${path.join(' -> ')}'`;\n  if (path?.[0]) return `name: '${path}'`;\n  return 'unspecified name attribute';\n}\nfunction _throwMissingValueAccessorError(dir) {\n  const loc = _describeControlLocation(dir);\n  throw new _RuntimeError(-1203 /* RuntimeErrorCode.NG_MISSING_VALUE_ACCESSOR */, `No value accessor for form control ${loc}.`);\n}\nfunction _throwInvalidValueAccessorError(dir) {\n  const loc = _describeControlLocation(dir);\n  throw new _RuntimeError(1200 /* RuntimeErrorCode.NG_VALUE_ACCESSOR_NOT_PROVIDED */, `Value accessor was not provided as an array for form control with ${loc}. ` + `Check that the \\`NG_VALUE_ACCESSOR\\` token is configured as a \\`multi: true\\` provider.`);\n}\nfunction isPropertyUpdated(changes, viewModel) {\n  if (!changes.hasOwnProperty('model')) return false;\n  const change = changes['model'];\n  if (change.isFirstChange()) return true;\n  return !Object.is(viewModel, change.currentValue);\n}\nfunction isBuiltInAccessor(valueAccessor) {\n  // Check if a given value accessor is an instance of a class that directly extends\n  // `BuiltInControlValueAccessor` one.\n  return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;\n}\nfunction syncPendingControls(form, directives) {\n  form._syncPendingControls();\n  directives.forEach(dir => {\n    const control = dir.control;\n    if (control.updateOn === 'submit' && control._pendingChange) {\n      dir.viewToModelUpdate(control._pendingValue);\n      control._pendingChange = false;\n    }\n  });\n}\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\nfunction selectValueAccessor(dir, valueAccessors) {\n  if (!valueAccessors) return null;\n  if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwInvalidValueAccessorError(dir);\n  let defaultAccessor = undefined;\n  let builtinAccessor = undefined;\n  let customAccessor = undefined;\n  valueAccessors.forEach(v => {\n    if (v.constructor === DefaultValueAccessor) {\n      defaultAccessor = v;\n    } else if (isBuiltInAccessor(v)) {\n      if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'More than one built-in value accessor matches form control with');\n      builtinAccessor = v;\n    } else {\n      if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'More than one custom value accessor matches form control with');\n      customAccessor = v;\n    }\n  });\n  if (customAccessor) return customAccessor;\n  if (builtinAccessor) return builtinAccessor;\n  if (defaultAccessor) return defaultAccessor;\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    _throwError(dir, 'No valid value accessor for form control with');\n  }\n  return null;\n}\nfunction removeListItem$1(list, el) {\n  const index = list.indexOf(el);\n  if (index > -1) list.splice(index, 1);\n}\n// TODO(kara): remove after deprecation period\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n  if (warningConfig === 'never') return;\n  if ((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce || warningConfig === 'always' && !instance._ngModelWarningSent) {\n    console.warn(ngModelWarning(name));\n    type._ngModelWarningSentOnce = true;\n    instance._ngModelWarningSent = true;\n  }\n}\nconst formDirectiveProvider$1 = {\n  provide: ControlContainer,\n  useExisting: /*#__PURE__*/forwardRef(() => NgForm)\n};\nconst resolvedPromise$1 = /*#__PURE__*/(() => Promise.resolve())();\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nlet NgForm = /*#__PURE__*/(() => {\n  class NgForm extends ControlContainer {\n    callSetDisabledState;\n    /**\n     * @description\n     * Returns whether the form submission has been triggered.\n     */\n    get submitted() {\n      return untracked(this.submittedReactive);\n    }\n    /** @internal */\n    _submitted = computed(() => this.submittedReactive(), ...(ngDevMode ? [{\n      debugName: \"_submitted\"\n    }] : []));\n    submittedReactive = signal(false, ...(ngDevMode ? [{\n      debugName: \"submittedReactive\"\n    }] : []));\n    _directives = new Set();\n    /**\n     * @description\n     * The `FormGroup` instance created for this form.\n     */\n    form;\n    /**\n     * @description\n     * Event emitter for the \"ngSubmit\" event\n     */\n    ngSubmit = new EventEmitter();\n    /**\n     * @description\n     * Tracks options for the `NgForm` instance.\n     *\n     * **updateOn**: Sets the default `updateOn` value for all child `NgModels` below it\n     * unless explicitly set by a child `NgModel` using `ngModelOptions`). Defaults to 'change'.\n     * Possible values: `'change'` | `'blur'` | `'submit'`.\n     *\n     */\n    options;\n    constructor(validators, asyncValidators, callSetDisabledState) {\n      super();\n      this.callSetDisabledState = callSetDisabledState;\n      this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /** @docs-private */\n    ngAfterViewInit() {\n      this._setUpdateStrategy();\n    }\n    /**\n     * @description\n     * The directive instance.\n     */\n    get formDirective() {\n      return this;\n    }\n    /**\n     * @description\n     * The internal `FormGroup` instance.\n     */\n    get control() {\n      return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     */\n    get path() {\n      return [];\n    }\n    /**\n     * @description\n     * Returns a map of the controls in this group.\n     */\n    get controls() {\n      return this.form.controls;\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    addControl(dir) {\n      resolvedPromise$1.then(() => {\n        const container = this._findContainer(dir.path);\n        dir.control = container.registerControl(dir.name, dir.control);\n        setUpControl(dir.control, dir, this.callSetDisabledState);\n        dir.control.updateValueAndValidity({\n          emitEvent: false\n        });\n        this._directives.add(dir);\n      });\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    getControl(dir) {\n      return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    removeControl(dir) {\n      resolvedPromise$1.then(() => {\n        const container = this._findContainer(dir.path);\n        if (container) {\n          container.removeControl(dir.name);\n        }\n        this._directives.delete(dir);\n      });\n    }\n    /**\n     * @description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    addFormGroup(dir) {\n      resolvedPromise$1.then(() => {\n        const container = this._findContainer(dir.path);\n        const group = new FormGroup({});\n        setUpFormContainer(group, dir);\n        container.registerControl(dir.name, group);\n        group.updateValueAndValidity({\n          emitEvent: false\n        });\n      });\n    }\n    /**\n     * @description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    removeFormGroup(dir) {\n      resolvedPromise$1.then(() => {\n        const container = this._findContainer(dir.path);\n        if (container) {\n          container.removeControl(dir.name);\n        }\n      });\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    getFormGroup(dir) {\n      return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param dir The `NgControl` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n      resolvedPromise$1.then(() => {\n        const ctrl = this.form.get(dir.path);\n        ctrl.setValue(value);\n      });\n    }\n    /**\n     * @description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param value The new value\n     */\n    setValue(value) {\n      this.control.setValue(value);\n    }\n    /**\n     * @description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n      this.submittedReactive.set(true);\n      syncPendingControls(this.form, this._directives);\n      this.ngSubmit.emit($event);\n      this.form._events.next(new FormSubmittedEvent(this.control));\n      // Forms with `method=\"dialog\"` have some special behavior\n      // that won't reload the page and that shouldn't be prevented.\n      return $event?.target?.method === 'dialog';\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n      this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n      this.form.reset(value);\n      this.submittedReactive.set(false);\n      this.form._events.next(new FormResetEvent(this.form));\n    }\n    _setUpdateStrategy() {\n      if (this.options && this.options.updateOn != null) {\n        this.form._updateOn = this.options.updateOn;\n      }\n    }\n    _findContainer(path) {\n      path.pop();\n      return path.length ? this.form.get(path) : this.form;\n    }\n    static ɵfac = function NgForm_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgForm)(i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(CALL_SET_DISABLED_STATE, 8));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgForm,\n      selectors: [[\"form\", 3, \"ngNoForm\", \"\", 3, \"formGroup\", \"\"], [\"ng-form\"], [\"\", \"ngForm\", \"\"]],\n      hostBindings: function NgForm_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"submit\", function NgForm_submit_HostBindingHandler($event) {\n            return ctx.onSubmit($event);\n          })(\"reset\", function NgForm_reset_HostBindingHandler() {\n            return ctx.onReset();\n          });\n        }\n      },\n      inputs: {\n        options: [0, \"ngFormOptions\", \"options\"]\n      },\n      outputs: {\n        ngSubmit: \"ngSubmit\"\n      },\n      exportAs: [\"ngForm\"],\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([formDirectiveProvider$1]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return NgForm;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction removeListItem(list, el) {\n  const index = list.indexOf(el);\n  if (index > -1) list.splice(index, 1);\n}\nfunction isFormControlState(formState) {\n  return typeof formState === 'object' && formState !== null && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n}\nconst FormControl = class FormControl extends AbstractControl {\n  /** @publicApi */\n  defaultValue = null;\n  /** @internal */\n  _onChange = [];\n  /** @internal */\n  _pendingValue;\n  /** @internal */\n  _pendingChange = false;\n  constructor(\n  // formState and defaultValue will only be null if T is nullable\n  formState = null, validatorOrOpts, asyncValidator) {\n    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n    this._applyFormState(formState);\n    this._setUpdateStrategy(validatorOrOpts);\n    this._initObservables();\n    this.updateValueAndValidity({\n      onlySelf: true,\n      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n      // `VALID` or `INVALID`.\n      // The status should be broadcasted via the `statusChanges` observable, so we set\n      // `emitEvent` to `true` to allow that during the control creation process.\n      emitEvent: !!this.asyncValidator\n    });\n    if (isOptionsObj(validatorOrOpts) && (validatorOrOpts.nonNullable || validatorOrOpts.initialValueIsDefault)) {\n      if (isFormControlState(formState)) {\n        this.defaultValue = formState.value;\n      } else {\n        this.defaultValue = formState;\n      }\n    }\n  }\n  setValue(value, options = {}) {\n    this.value = this._pendingValue = value;\n    if (this._onChange.length && options.emitModelToViewChange !== false) {\n      this._onChange.forEach(changeFn => changeFn(this.value, options.emitViewToModelChange !== false));\n    }\n    this.updateValueAndValidity(options);\n  }\n  patchValue(value, options = {}) {\n    this.setValue(value, options);\n  }\n  reset(formState = this.defaultValue, options = {}) {\n    this._applyFormState(formState);\n    this.markAsPristine(options);\n    this.markAsUntouched(options);\n    this.setValue(this.value, options);\n    this._pendingChange = false;\n  }\n  /**  @internal */\n  _updateValue() {}\n  /**  @internal */\n  _anyControls(condition) {\n    return false;\n  }\n  /**  @internal */\n  _allControlsDisabled() {\n    return this.disabled;\n  }\n  registerOnChange(fn) {\n    this._onChange.push(fn);\n  }\n  /** @internal */\n  _unregisterOnChange(fn) {\n    removeListItem(this._onChange, fn);\n  }\n  registerOnDisabledChange(fn) {\n    this._onDisabledChange.push(fn);\n  }\n  /** @internal */\n  _unregisterOnDisabledChange(fn) {\n    removeListItem(this._onDisabledChange, fn);\n  }\n  /** @internal */\n  _forEachChild(cb) {}\n  /** @internal */\n  _syncPendingControls() {\n    if (this.updateOn === 'submit') {\n      if (this._pendingDirty) this.markAsDirty();\n      if (this._pendingTouched) this.markAsTouched();\n      if (this._pendingChange) {\n        this.setValue(this._pendingValue, {\n          onlySelf: true,\n          emitModelToViewChange: false\n        });\n        return true;\n      }\n    }\n    return false;\n  }\n  _applyFormState(formState) {\n    if (isFormControlState(formState)) {\n      this.value = this._pendingValue = formState.value;\n      formState.disabled ? this.disable({\n        onlySelf: true,\n        emitEvent: false\n      }) : this.enable({\n        onlySelf: true,\n        emitEvent: false\n      });\n    } else {\n      this.value = this._pendingValue = formState;\n    }\n  }\n};\nconst UntypedFormControl = FormControl;\n/**\n * @description\n * Asserts that the given control is an instance of `FormControl`\n *\n * @publicApi\n */\nconst isFormControl = control => control instanceof FormControl;\n\n/**\n * @description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * @publicApi\n */\nlet AbstractFormGroupDirective = /*#__PURE__*/(() => {\n  class AbstractFormGroupDirective extends ControlContainer {\n    /**\n     * @description\n     * The parent control for the group\n     *\n     * @internal\n     */\n    _parent;\n    /** @docs-private */\n    ngOnInit() {\n      this._checkParentType();\n      // Register the group with its parent group.\n      this.formDirective.addFormGroup(this);\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      if (this.formDirective) {\n        // Remove the group from its parent group.\n        this.formDirective.removeFormGroup(this);\n      }\n    }\n    /**\n     * @description\n     * The `FormGroup` bound to this directive.\n     */\n    get control() {\n      return this.formDirective.getFormGroup(this);\n    }\n    /**\n     * @description\n     * The path to this group from the top-level directive.\n     */\n    get path() {\n      return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n      return this._parent ? this._parent.formDirective : null;\n    }\n    /** @internal */\n    _checkParentType() {}\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵAbstractFormGroupDirective_BaseFactory;\n      return function AbstractFormGroupDirective_Factory(__ngFactoryType__) {\n        return (ɵAbstractFormGroupDirective_BaseFactory || (ɵAbstractFormGroupDirective_BaseFactory = i0.ɵɵgetInheritedFactory(AbstractFormGroupDirective)))(__ngFactoryType__ || AbstractFormGroupDirective);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: AbstractFormGroupDirective,\n      standalone: false,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return AbstractFormGroupDirective;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction modelParentException() {\n  return new _RuntimeError(1350 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP */, `\n    ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n    formGroup's partner directive \"formControlName\" instead.  Example:\n\n    ${formControlNameExample}\n\n    Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n    Example:\n\n    ${ngModelWithFormGroupExample}`);\n}\nfunction formGroupNameException() {\n  return new _RuntimeError(1351 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP_NAME */, `\n    ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n    Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n    ${formGroupNameExample}\n\n    Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n    ${ngModelGroupExample}`);\n}\nfunction missingNameException() {\n  return new _RuntimeError(1352 /* RuntimeErrorCode.NGMODEL_WITHOUT_NAME */, `If ngModel is used within a form tag, either the name attribute must be set or the form\n    control must be defined as 'standalone' in ngModelOptions.\n\n    Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n    Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n}\nfunction modelGroupParentException() {\n  return new _RuntimeError(1353 /* RuntimeErrorCode.NGMODELGROUP_IN_FORM_GROUP */, `\n    ngModelGroup cannot be used with a parent formGroup directive.\n\n    Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n    ${formGroupNameExample}\n\n    Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n    ${ngModelGroupExample}`);\n}\nconst modelGroupProvider = {\n  provide: ControlContainer,\n  useExisting: /*#__PURE__*/forwardRef(() => NgModelGroup)\n};\n/**\n * @description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * @usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\nlet NgModelGroup = /*#__PURE__*/(() => {\n  class NgModelGroup extends AbstractFormGroupDirective {\n    /**\n     * @description\n     * Tracks the name of the `NgModelGroup` bound to the directive. The name corresponds\n     * to a key in the parent `NgForm`.\n     */\n    name = '';\n    constructor(parent, validators, asyncValidators) {\n      super();\n      this._parent = parent;\n      this._setValidators(validators);\n      this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n      if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw modelGroupParentException();\n      }\n    }\n    static ɵfac = function NgModelGroup_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgModelGroup)(i0.ɵɵdirectiveInject(ControlContainer, 5), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgModelGroup,\n      selectors: [[\"\", \"ngModelGroup\", \"\"]],\n      inputs: {\n        name: [0, \"ngModelGroup\", \"name\"]\n      },\n      exportAs: [\"ngModelGroup\"],\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([modelGroupProvider]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return NgModelGroup;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst formControlBinding$1 = {\n  provide: NgControl,\n  useExisting: /*#__PURE__*/forwardRef(() => NgModel)\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```html\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have an old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel`s have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = /*#__PURE__*/(() => Promise.resolve())();\n/**\n * @description\n * Creates a `FormControl` instance from a [domain\n * model](https://en.wikipedia.org/wiki/Domain_model) and binds it to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the domain model's value in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like the validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex:\n * `#myVar=\"ngModel\"`). You can then access the control using the directive's `control` property.\n * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control\n * for direct access. See a full list of properties directly available in\n * `AbstractControlDirective`.\n *\n * @see {@link RadioControlValueAccessor}\n * @see {@link SelectControlValueAccessor}\n *\n * @usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel `name` attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. Here,\n * an attribute identified as name is used within a custom form control component. To still be able\n * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.\n *\n * ```html\n * <form>\n *   <my-custom-form-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-custom-form-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nlet NgModel = /*#__PURE__*/(() => {\n  class NgModel extends NgControl {\n    _changeDetectorRef;\n    callSetDisabledState;\n    control = new FormControl();\n    // At runtime we coerce arbitrary values assigned to the \"disabled\" input to a \"boolean\".\n    // This is not reflected in the type of the property because outside of templates, consumers\n    // should only deal with booleans. In templates, a string is allowed for convenience and to\n    // match the native \"disabled attribute\" semantics which can be observed on input elements.\n    // This static member tells the compiler that values of type \"string\" can also be assigned\n    // to the input in a template.\n    /** @docs-private */\n    static ngAcceptInputType_isDisabled;\n    /** @internal */\n    _registered = false;\n    /**\n     * Internal reference to the view model value.\n     * @docs-private\n     */\n    viewModel;\n    /**\n     * @description\n     * Tracks the name bound to the directive. If a parent form exists, it\n     * uses this name as a key to retrieve this control's value.\n     */\n    name = '';\n    /**\n     * @description\n     * Tracks whether the control is disabled.\n     */\n    isDisabled;\n    /**\n     * @description\n     * Tracks the value bound to this directive.\n     */\n    model;\n    /**\n     * @description\n     * Tracks the configuration options for this `ngModel` instance.\n     *\n     * **name**: An alternative to setting the name attribute on the form control element. See\n     * the [example](api/forms/NgModel#using-ngmodel-on-a-standalone-control) for using `NgModel`\n     * as a standalone control.\n     *\n     * **standalone**: When set to true, the `ngModel` will not register itself with its parent form,\n     * and acts as if it's not in the form. Defaults to false. If no parent form exists, this option\n     * has no effect.\n     *\n     * **updateOn**: Defines the event upon which the form control value and validity update.\n     * Defaults to 'change'. Possible values: `'change'` | `'blur'` | `'submit'`.\n     *\n     */\n    options;\n    /**\n     * @description\n     * Event emitter for producing the `ngModelChange` event after\n     * the view model updates.\n     */\n    update = new EventEmitter();\n    constructor(parent, validators, asyncValidators, valueAccessors, _changeDetectorRef, callSetDisabledState) {\n      super();\n      this._changeDetectorRef = _changeDetectorRef;\n      this.callSetDisabledState = callSetDisabledState;\n      this._parent = parent;\n      this._setValidators(validators);\n      this._setAsyncValidators(asyncValidators);\n      this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @docs-private */\n    ngOnChanges(changes) {\n      this._checkForErrors();\n      if (!this._registered || 'name' in changes) {\n        if (this._registered) {\n          this._checkName();\n          if (this.formDirective) {\n            // We can't call `formDirective.removeControl(this)`, because the `name` has already been\n            // changed. We also can't reset the name temporarily since the logic in `removeControl`\n            // is inside a promise and it won't run immediately. We work around it by giving it an\n            // object with the same shape instead.\n            const oldName = changes['name'].previousValue;\n            this.formDirective.removeControl({\n              name: oldName,\n              path: this._getPath(oldName)\n            });\n          }\n        }\n        this._setUpControl();\n      }\n      if ('isDisabled' in changes) {\n        this._updateDisabled(changes);\n      }\n      if (isPropertyUpdated(changes, this.viewModel)) {\n        this._updateValue(this.model);\n        this.viewModel = this.model;\n      }\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      this.formDirective && this.formDirective.removeControl(this);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n      return this._getPath(this.name);\n    }\n    /**\n     * @description\n     * The top-level directive for this control if present, otherwise null.\n     */\n    get formDirective() {\n      return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value emitted by `ngModelChange`.\n     */\n    viewToModelUpdate(newValue) {\n      this.viewModel = newValue;\n      this.update.emit(newValue);\n    }\n    _setUpControl() {\n      this._setUpdateStrategy();\n      this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);\n      this._registered = true;\n    }\n    _setUpdateStrategy() {\n      if (this.options && this.options.updateOn != null) {\n        this.control._updateOn = this.options.updateOn;\n      }\n    }\n    _isStandalone() {\n      return !this._parent || !!(this.options && this.options.standalone);\n    }\n    _setUpStandalone() {\n      setUpControl(this.control, this, this.callSetDisabledState);\n      this.control.updateValueAndValidity({\n        emitEvent: false\n      });\n    }\n    _checkForErrors() {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._isStandalone()) {\n        checkParentType$1(this._parent);\n      }\n      this._checkName();\n    }\n    _checkName() {\n      if (this.options && this.options.name) this.name = this.options.name;\n      if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw missingNameException();\n      }\n    }\n    _updateValue(value) {\n      resolvedPromise.then(() => {\n        this.control.setValue(value, {\n          emitViewToModelChange: false\n        });\n        this._changeDetectorRef?.markForCheck();\n      });\n    }\n    _updateDisabled(changes) {\n      const disabledValue = changes['isDisabled'].currentValue;\n      // checking for 0 to avoid breaking change\n      const isDisabled = disabledValue !== 0 && booleanAttribute(disabledValue);\n      resolvedPromise.then(() => {\n        if (isDisabled && !this.control.disabled) {\n          this.control.disable();\n        } else if (!isDisabled && this.control.disabled) {\n          this.control.enable();\n        }\n        this._changeDetectorRef?.markForCheck();\n      });\n    }\n    _getPath(controlName) {\n      return this._parent ? controlPath(controlName, this._parent) : [controlName];\n    }\n    static ɵfac = function NgModel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgModel)(i0.ɵɵdirectiveInject(ControlContainer, 9), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef, 8), i0.ɵɵdirectiveInject(CALL_SET_DISABLED_STATE, 8));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgModel,\n      selectors: [[\"\", \"ngModel\", \"\", 3, \"formControlName\", \"\", 3, \"formControl\", \"\"]],\n      inputs: {\n        name: \"name\",\n        isDisabled: [0, \"disabled\", \"isDisabled\"],\n        model: [0, \"ngModel\", \"model\"],\n        options: [0, \"ngModelOptions\", \"options\"]\n      },\n      outputs: {\n        update: \"ngModelChange\"\n      },\n      exportAs: [\"ngModel\"],\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([formControlBinding$1]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return NgModel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction checkParentType$1(parent) {\n  if (!(parent instanceof NgModelGroup) && parent instanceof AbstractFormGroupDirective) {\n    throw formGroupNameException();\n  } else if (!(parent instanceof NgModelGroup) && !(parent instanceof NgForm)) {\n    throw modelParentException();\n  }\n}\n\n/**\n * @description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```html\n * <form ngNativeValidate></form>\n * ```\n *\n * @publicApi\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\nlet ɵNgNoValidate = /*#__PURE__*/(() => {\n  class ɵNgNoValidate {\n    static ɵfac = function ɵNgNoValidate_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ɵNgNoValidate)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ɵNgNoValidate,\n      selectors: [[\"form\", 3, \"ngNoForm\", \"\", 3, \"ngNativeValidate\", \"\"]],\n      hostAttrs: [\"novalidate\", \"\"],\n      standalone: false\n    });\n  }\n  return ɵNgNoValidate;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst NUMBER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => NumberValueAccessor),\n  multi: true\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```html\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet NumberValueAccessor = /*#__PURE__*/(() => {\n  class NumberValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"value\" property on the input element.\n     * @docs-private\n     */\n    writeValue(value) {\n      // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n      const normalizedValue = value == null ? '' : value;\n      this.setProperty('value', normalizedValue);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @docs-private\n     */\n    registerOnChange(fn) {\n      this.onChange = value => {\n        fn(value == '' ? null : parseFloat(value));\n      };\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵNumberValueAccessor_BaseFactory;\n      return function NumberValueAccessor_Factory(__ngFactoryType__) {\n        return (ɵNumberValueAccessor_BaseFactory || (ɵNumberValueAccessor_BaseFactory = i0.ɵɵgetInheritedFactory(NumberValueAccessor)))(__ngFactoryType__ || NumberValueAccessor);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NumberValueAccessor,\n      selectors: [[\"input\", \"type\", \"number\", \"formControlName\", \"\"], [\"input\", \"type\", \"number\", \"formControl\", \"\"], [\"input\", \"type\", \"number\", \"ngModel\", \"\"]],\n      hostBindings: function NumberValueAccessor_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function NumberValueAccessor_input_HostBindingHandler($event) {\n            return ctx.onChange($event.target.value);\n          })(\"blur\", function NumberValueAccessor_blur_HostBindingHandler() {\n            return ctx.onTouched();\n          });\n        }\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([NUMBER_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return NumberValueAccessor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst RADIO_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\nfunction throwNameError() {\n  throw new _RuntimeError(1202 /* RuntimeErrorCode.NAME_AND_FORM_CONTROL_NAME_MUST_MATCH */, `\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n}\n/**\n * @description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nlet RadioControlRegistry = /*#__PURE__*/(() => {\n  class RadioControlRegistry {\n    _accessors = [];\n    /**\n     * @description\n     * Adds a control to the internal registry. For internal use only.\n     */\n    add(control, accessor) {\n      this._accessors.push([control, accessor]);\n    }\n    /**\n     * @description\n     * Removes a control from the internal registry. For internal use only.\n     */\n    remove(accessor) {\n      for (let i = this._accessors.length - 1; i >= 0; --i) {\n        if (this._accessors[i][1] === accessor) {\n          this._accessors.splice(i, 1);\n          return;\n        }\n      }\n    }\n    /**\n     * @description\n     * Selects a radio button. For internal use only.\n     */\n    select(accessor) {\n      this._accessors.forEach(c => {\n        if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n          c[1].fireUncheck(accessor.value);\n        }\n      });\n    }\n    _isSameGroup(controlPair, accessor) {\n      if (!controlPair[0].control) return false;\n      return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;\n    }\n    static ɵfac = function RadioControlRegistry_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RadioControlRegistry)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: RadioControlRegistry,\n      factory: RadioControlRegistry.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return RadioControlRegistry;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet RadioControlValueAccessor = /*#__PURE__*/(() => {\n  class RadioControlValueAccessor extends BuiltInControlValueAccessor {\n    _registry;\n    _injector;\n    /** @internal */\n    _state;\n    /** @internal */\n    _control;\n    /** @internal */\n    _fn;\n    setDisabledStateFired = false;\n    /**\n     * The registered callback function called when a change event occurs on the input element.\n     * Note: we declare `onChange` here (also used as host listener) as a function with no arguments\n     * to override the `onChange` function (which expects 1 argument) in the parent\n     * `BaseControlValueAccessor` class.\n     * @docs-private\n     */\n    onChange = () => {};\n    /**\n     * @description\n     * Tracks the name of the radio input element.\n     */\n    name;\n    /**\n     * @description\n     * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     */\n    formControlName;\n    /**\n     * @description\n     * Tracks the value of the radio input element\n     */\n    value;\n    callSetDisabledState = inject(CALL_SET_DISABLED_STATE, {\n      optional: true\n    }) ?? setDisabledStateDefault;\n    constructor(renderer, elementRef, _registry, _injector) {\n      super(renderer, elementRef);\n      this._registry = _registry;\n      this._injector = _injector;\n    }\n    /** @docs-private */\n    ngOnInit() {\n      this._control = this._injector.get(NgControl);\n      this._checkName();\n      this._registry.add(this._control, this);\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      this._registry.remove(this);\n    }\n    /**\n     * Sets the \"checked\" property value on the radio input element.\n     * @docs-private\n     */\n    writeValue(value) {\n      this._state = value === this.value;\n      this.setProperty('checked', this._state);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @docs-private\n     */\n    registerOnChange(fn) {\n      this._fn = fn;\n      this.onChange = () => {\n        fn(this.value);\n        this._registry.select(this);\n      };\n    }\n    /** @docs-private */\n    setDisabledState(isDisabled) {\n      /**\n       * `setDisabledState` is supposed to be called whenever the disabled state of a control changes,\n       * including upon control creation. However, a longstanding bug caused the method to not fire\n       * when an *enabled* control was attached. This bug was fixed in v15 in #47576.\n       *\n       * This had a side effect: previously, it was possible to instantiate a reactive form control\n       * with `[attr.disabled]=true`, even though the corresponding control was enabled in the\n       * model. This resulted in a mismatch between the model and the DOM. Now, because\n       * `setDisabledState` is always called, the value in the DOM will be immediately overwritten\n       * with the \"correct\" enabled value.\n       *\n       * However, the fix also created an exceptional case: radio buttons. Because Reactive Forms\n       * models the entire group of radio buttons as a single `FormControl`, there is no way to\n       * control the disabled state for individual radios, so they can no longer be configured as\n       * disabled. Thus, we keep the old behavior for radio buttons, so that `[attr.disabled]`\n       * continues to work. Specifically, we drop the first call to `setDisabledState` if `disabled`\n       * is `false`, and we are not in legacy mode.\n       */\n      if (this.setDisabledStateFired || isDisabled || this.callSetDisabledState === 'whenDisabledForLegacyCode') {\n        this.setProperty('disabled', isDisabled);\n      }\n      this.setDisabledStateFired = true;\n    }\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param value\n     */\n    fireUncheck(value) {\n      this.writeValue(value);\n    }\n    _checkName() {\n      if (this.name && this.formControlName && this.name !== this.formControlName && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwNameError();\n      }\n      if (!this.name && this.formControlName) this.name = this.formControlName;\n    }\n    static ɵfac = function RadioControlValueAccessor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RadioControlValueAccessor)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(RadioControlRegistry), i0.ɵɵdirectiveInject(i0.Injector));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: RadioControlValueAccessor,\n      selectors: [[\"input\", \"type\", \"radio\", \"formControlName\", \"\"], [\"input\", \"type\", \"radio\", \"formControl\", \"\"], [\"input\", \"type\", \"radio\", \"ngModel\", \"\"]],\n      hostBindings: function RadioControlValueAccessor_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"change\", function RadioControlValueAccessor_change_HostBindingHandler() {\n            return ctx.onChange();\n          })(\"blur\", function RadioControlValueAccessor_blur_HostBindingHandler() {\n            return ctx.onTouched();\n          });\n        }\n      },\n      inputs: {\n        name: \"name\",\n        formControlName: \"formControlName\",\n        value: \"value\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([RADIO_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return RadioControlValueAccessor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst RANGE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => RangeValueAccessor),\n  multi: true\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```html\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet RangeValueAccessor = /*#__PURE__*/(() => {\n  class RangeValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"value\" property on the input element.\n     * @docs-private\n     */\n    writeValue(value) {\n      this.setProperty('value', parseFloat(value));\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @docs-private\n     */\n    registerOnChange(fn) {\n      this.onChange = value => {\n        fn(value == '' ? null : parseFloat(value));\n      };\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵRangeValueAccessor_BaseFactory;\n      return function RangeValueAccessor_Factory(__ngFactoryType__) {\n        return (ɵRangeValueAccessor_BaseFactory || (ɵRangeValueAccessor_BaseFactory = i0.ɵɵgetInheritedFactory(RangeValueAccessor)))(__ngFactoryType__ || RangeValueAccessor);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: RangeValueAccessor,\n      selectors: [[\"input\", \"type\", \"range\", \"formControlName\", \"\"], [\"input\", \"type\", \"range\", \"formControl\", \"\"], [\"input\", \"type\", \"range\", \"ngModel\", \"\"]],\n      hostBindings: function RangeValueAccessor_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"change\", function RangeValueAccessor_change_HostBindingHandler($event) {\n            return ctx.onChange($event.target.value);\n          })(\"input\", function RangeValueAccessor_input_HostBindingHandler($event) {\n            return ctx.onChange($event.target.value);\n          })(\"blur\", function RangeValueAccessor_blur_HostBindingHandler() {\n            return ctx.onTouched();\n          });\n        }\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([RANGE_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return RangeValueAccessor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nconst NG_MODEL_WITH_FORM_CONTROL_WARNING = /*#__PURE__*/new InjectionToken(ngDevMode ? 'NgModelWithFormControlWarning' : '');\nconst formControlBinding = {\n  provide: NgControl,\n  useExisting: /*#__PURE__*/forwardRef(() => FormControlDirective)\n};\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link FormControl}\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nlet FormControlDirective = /*#__PURE__*/(() => {\n  class FormControlDirective extends NgControl {\n    _ngModelWarningConfig;\n    callSetDisabledState;\n    /**\n     * Internal reference to the view model value.\n     * @docs-private\n     */\n    viewModel;\n    /**\n     * @description\n     * Tracks the `FormControl` instance bound to the directive.\n     */\n    form;\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        console.warn(disabledAttrWarning);\n      }\n    }\n    // TODO(kara): remove next 4 properties once deprecation period is over\n    /** @deprecated as of v6 */\n    model;\n    /** @deprecated as of v6 */\n    update = new EventEmitter();\n    /**\n     * @description\n     * Static property used to track whether any ngModel warnings have been sent across\n     * all instances of FormControlDirective. Used to support warning config of \"once\".\n     *\n     * @internal\n     */\n    static _ngModelWarningSentOnce = false;\n    /**\n     * @description\n     * Instance property used to track whether an ngModel warning has been sent out for this\n     * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n     *\n     * @internal\n     */\n    _ngModelWarningSent = false;\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig, callSetDisabledState) {\n      super();\n      this._ngModelWarningConfig = _ngModelWarningConfig;\n      this.callSetDisabledState = callSetDisabledState;\n      this._setValidators(validators);\n      this._setAsyncValidators(asyncValidators);\n      this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @docs-private */\n    ngOnChanges(changes) {\n      if (this._isControlChanged(changes)) {\n        const previousForm = changes['form'].previousValue;\n        if (previousForm) {\n          cleanUpControl(previousForm, this, /* validateControlPresenceOnChange */false);\n        }\n        setUpControl(this.form, this, this.callSetDisabledState);\n        this.form.updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n      if (isPropertyUpdated(changes, this.viewModel)) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n        }\n        this.form.setValue(this.model);\n        this.viewModel = this.model;\n      }\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      if (this.form) {\n        cleanUpControl(this.form, this, /* validateControlPresenceOnChange */false);\n      }\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n      return [];\n    }\n    /**\n     * @description\n     * The `FormControl` bound to this directive.\n     */\n    get control() {\n      return this.form;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n      this.viewModel = newValue;\n      this.update.emit(newValue);\n    }\n    _isControlChanged(changes) {\n      return changes.hasOwnProperty('form');\n    }\n    static ɵfac = function FormControlDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FormControlDirective)(i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), i0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8), i0.ɵɵdirectiveInject(CALL_SET_DISABLED_STATE, 8));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: FormControlDirective,\n      selectors: [[\"\", \"formControl\", \"\"]],\n      inputs: {\n        form: [0, \"formControl\", \"form\"],\n        isDisabled: [0, \"disabled\", \"isDisabled\"],\n        model: [0, \"ngModel\", \"model\"]\n      },\n      outputs: {\n        update: \"ngModelChange\"\n      },\n      exportAs: [\"ngForm\"],\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([formControlBinding]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return FormControlDirective;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst formDirectiveProvider = {\n  provide: ControlContainer,\n  useExisting: /*#__PURE__*/forwardRef(() => FormGroupDirective)\n};\n/**\n * @description\n *\n * Binds an existing `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`/`FormRecord`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link AbstractControl}\n *\n * @usageNotes\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nlet FormGroupDirective = /*#__PURE__*/(() => {\n  class FormGroupDirective extends ControlContainer {\n    callSetDisabledState;\n    /**\n     * @description\n     * Reports whether the form submission has been triggered.\n     */\n    get submitted() {\n      return untracked(this._submittedReactive);\n    }\n    // TODO(atscott): Remove once invalid API usage is cleaned up internally\n    set submitted(value) {\n      this._submittedReactive.set(value);\n    }\n    /** @internal */\n    _submitted = computed(() => this._submittedReactive(), ...(ngDevMode ? [{\n      debugName: \"_submitted\"\n    }] : []));\n    _submittedReactive = signal(false, ...(ngDevMode ? [{\n      debugName: \"_submittedReactive\"\n    }] : []));\n    /**\n     * Reference to an old form group input value, which is needed to cleanup\n     * old instance in case it was replaced with a new one.\n     */\n    _oldForm;\n    /**\n     * Callback that should be invoked when controls in FormGroup or FormArray collection change\n     * (added or removed). This callback triggers corresponding DOM updates.\n     */\n    _onCollectionChange = () => this._updateDomValue();\n    /**\n     * @description\n     * Tracks the list of added `FormControlName` instances\n     */\n    directives = [];\n    /**\n     * @description\n     * Tracks the `FormGroup` bound to this directive.\n     */\n    form = null;\n    /**\n     * @description\n     * Emits an event when the form submission has been triggered.\n     */\n    ngSubmit = new EventEmitter();\n    constructor(validators, asyncValidators, callSetDisabledState) {\n      super();\n      this.callSetDisabledState = callSetDisabledState;\n      this._setValidators(validators);\n      this._setAsyncValidators(asyncValidators);\n    }\n    /** @docs-private */\n    ngOnChanges(changes) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this.form) {\n        throw missingFormException();\n      }\n      if (changes.hasOwnProperty('form')) {\n        this._updateValidators();\n        this._updateDomValue();\n        this._updateRegistrations();\n        this._oldForm = this.form;\n      }\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      if (this.form) {\n        cleanUpValidators(this.form, this);\n        // Currently the `onCollectionChange` callback is rewritten each time the\n        // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should\n        // happen *only* when the `onCollectionChange` callback was set by this directive instance.\n        // Otherwise it might cause overriding a callback of some other directive instances. We should\n        // consider updating this logic later to make it similar to how `onChange` callbacks are\n        // handled, see https://github.com/angular/angular/issues/39732 for additional info.\n        if (this.form._onCollectionChange === this._onCollectionChange) {\n          this.form._registerOnCollectionChange(() => {});\n        }\n      }\n    }\n    /**\n     * @description\n     * Returns this directive's instance.\n     */\n    get formDirective() {\n      return this;\n    }\n    /**\n     * @description\n     * Returns the `FormGroup` bound to this directive.\n     */\n    get control() {\n      return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     */\n    get path() {\n      return [];\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    addControl(dir) {\n      const ctrl = this.form.get(dir.path);\n      setUpControl(ctrl, dir, this.callSetDisabledState);\n      ctrl.updateValueAndValidity({\n        emitEvent: false\n      });\n      this.directives.push(dir);\n      return ctrl;\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    getControl(dir) {\n      return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    removeControl(dir) {\n      cleanUpControl(dir.control || null, dir, /* validateControlPresenceOnChange */false);\n      removeListItem$1(this.directives, dir);\n    }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    addFormGroup(dir) {\n      this._setUpFormContainer(dir);\n    }\n    /**\n     * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the\n     * view.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    removeFormGroup(dir) {\n      this._cleanUpFormContainer(dir);\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    getFormGroup(dir) {\n      return this.form.get(dir.path);\n    }\n    /**\n     * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    addFormArray(dir) {\n      this._setUpFormContainer(dir);\n    }\n    /**\n     * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the\n     * view.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    removeFormArray(dir) {\n      this._cleanUpFormContainer(dir);\n    }\n    /**\n     * @description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    getFormArray(dir) {\n      return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param dir The `FormControlName` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n      const ctrl = this.form.get(dir.path);\n      ctrl.setValue(value);\n    }\n    /**\n     * @description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n      this._submittedReactive.set(true);\n      syncPendingControls(this.form, this.directives);\n      this.ngSubmit.emit($event);\n      this.form._events.next(new FormSubmittedEvent(this.control));\n      // Forms with `method=\"dialog\"` have some special behavior that won't reload the page and that\n      // shouldn't be prevented. Note that we need to null check the `event` and the `target`, because\n      // some internal apps call this method directly with the wrong arguments.\n      return $event?.target?.method === 'dialog';\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n      this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form, `undefined` by default\n     */\n    resetForm(value = undefined, options = {}) {\n      this.form.reset(value, options);\n      this._submittedReactive.set(false);\n      if (options?.emitEvent !== false) {\n        this.form._events.next(new FormResetEvent(this.form));\n      }\n    }\n    /** @internal */\n    _updateDomValue() {\n      this.directives.forEach(dir => {\n        const oldCtrl = dir.control;\n        const newCtrl = this.form.get(dir.path);\n        if (oldCtrl !== newCtrl) {\n          // Note: the value of the `dir.control` may not be defined, for example when it's a first\n          // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).\n          cleanUpControl(oldCtrl || null, dir);\n          // Check whether new control at the same location inside the corresponding `FormGroup` is an\n          // instance of `FormControl` and perform control setup only if that's the case.\n          // Note: we don't need to clear the list of directives (`this.directives`) here, it would be\n          // taken care of in the `removeControl` method invoked when corresponding `formControlName`\n          // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).\n          if (isFormControl(newCtrl)) {\n            setUpControl(newCtrl, dir, this.callSetDisabledState);\n            dir.control = newCtrl;\n          }\n        }\n      });\n      this.form._updateTreeValidity({\n        emitEvent: false\n      });\n    }\n    _setUpFormContainer(dir) {\n      const ctrl = this.form.get(dir.path);\n      setUpFormContainer(ctrl, dir);\n      // NOTE: this operation looks unnecessary in case no new validators were added in\n      // `setUpFormContainer` call. Consider updating this code to match the logic in\n      // `_cleanUpFormContainer` function.\n      ctrl.updateValueAndValidity({\n        emitEvent: false\n      });\n    }\n    _cleanUpFormContainer(dir) {\n      if (this.form) {\n        const ctrl = this.form.get(dir.path);\n        if (ctrl) {\n          const isControlUpdated = cleanUpFormContainer(ctrl, dir);\n          if (isControlUpdated) {\n            // Run validity check only in case a control was updated (i.e. view validators were\n            // removed) as removing view validators might cause validity to change.\n            ctrl.updateValueAndValidity({\n              emitEvent: false\n            });\n          }\n        }\n      }\n    }\n    _updateRegistrations() {\n      this.form._registerOnCollectionChange(this._onCollectionChange);\n      if (this._oldForm) {\n        this._oldForm._registerOnCollectionChange(() => {});\n      }\n    }\n    _updateValidators() {\n      setUpValidators(this.form, this);\n      if (this._oldForm) {\n        cleanUpValidators(this._oldForm, this);\n      }\n    }\n    static ɵfac = function FormGroupDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FormGroupDirective)(i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(CALL_SET_DISABLED_STATE, 8));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: FormGroupDirective,\n      selectors: [[\"\", \"formGroup\", \"\"]],\n      hostBindings: function FormGroupDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"submit\", function FormGroupDirective_submit_HostBindingHandler($event) {\n            return ctx.onSubmit($event);\n          })(\"reset\", function FormGroupDirective_reset_HostBindingHandler() {\n            return ctx.onReset();\n          });\n        }\n      },\n      inputs: {\n        form: [0, \"formGroup\", \"form\"]\n      },\n      outputs: {\n        ngSubmit: \"ngSubmit\"\n      },\n      exportAs: [\"ngForm\"],\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([formDirectiveProvider]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return FormGroupDirective;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst formGroupNameProvider = {\n  provide: ControlContainer,\n  useExisting: /*#__PURE__*/forwardRef(() => FormGroupName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` or `FormRecord` to link, and\n * looks for a `FormGroup` or `FormRecord` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the `AbstractControl.get` method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the `AbstractControl.get` method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nlet FormGroupName = /*#__PURE__*/(() => {\n  class FormGroupName extends AbstractFormGroupDirective {\n    /**\n     * @description\n     * Tracks the name of the `FormGroup` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * Accepts a name as a string or a number.\n     * The name in the form of a string is useful for individual forms,\n     * while the numerical form allows for form groups to be bound\n     * to indices when iterating over groups in a `FormArray`.\n     */\n    name = null;\n    constructor(parent, validators, asyncValidators) {\n      super();\n      this._parent = parent;\n      this._setValidators(validators);\n      this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n      if (hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw groupParentException();\n      }\n    }\n    static ɵfac = function FormGroupName_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FormGroupName)(i0.ɵɵdirectiveInject(ControlContainer, 13), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: FormGroupName,\n      selectors: [[\"\", \"formGroupName\", \"\"]],\n      inputs: {\n        name: [0, \"formGroupName\", \"name\"]\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([formGroupNameProvider]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return FormGroupName;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst formArrayNameProvider = {\n  provide: ControlContainer,\n  useExisting: /*#__PURE__*/forwardRef(() => FormArrayName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nlet FormArrayName = /*#__PURE__*/(() => {\n  class FormArrayName extends ControlContainer {\n    /** @internal */\n    _parent;\n    /**\n     * @description\n     * Tracks the name of the `FormArray` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * Accepts a name as a string or a number.\n     * The name in the form of a string is useful for individual forms,\n     * while the numerical form allows for form arrays to be bound\n     * to indices when iterating over arrays in a `FormArray`.\n     */\n    name = null;\n    constructor(parent, validators, asyncValidators) {\n      super();\n      this._parent = parent;\n      this._setValidators(validators);\n      this._setAsyncValidators(asyncValidators);\n    }\n    /**\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     * @throws If the directive does not have a valid parent.\n     * @docs-private\n     */\n    ngOnInit() {\n      if (hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw arrayParentException();\n      }\n      this.formDirective.addFormArray(this);\n    }\n    /**\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @docs-private\n     */\n    ngOnDestroy() {\n      this.formDirective?.removeFormArray(this);\n    }\n    /**\n     * @description\n     * The `FormArray` bound to this directive.\n     */\n    get control() {\n      return this.formDirective.getFormArray(this);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n      return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n      return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    static ɵfac = function FormArrayName_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FormArrayName)(i0.ɵɵdirectiveInject(ControlContainer, 13), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: FormArrayName,\n      selectors: [[\"\", \"formArrayName\", \"\"]],\n      inputs: {\n        name: [0, \"formArrayName\", \"name\"]\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([formArrayNameProvider]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return FormArrayName;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction hasInvalidParent(parent) {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);\n}\nconst controlNameBinding = {\n  provide: NgControl,\n  useExisting: /*#__PURE__*/forwardRef(() => FormControlName)\n};\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link FormControl}\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nlet FormControlName = /*#__PURE__*/(() => {\n  class FormControlName extends NgControl {\n    _ngModelWarningConfig;\n    _added = false;\n    /**\n     * Internal reference to the view model value.\n     * @internal\n     */\n    viewModel;\n    /**\n     * @description\n     * Tracks the `FormControl` instance bound to the directive.\n     */\n    control;\n    /**\n     * @description\n     * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * Accepts a name as a string or a number.\n     * The name in the form of a string is useful for individual forms,\n     * while the numerical form allows for form controls to be bound\n     * to indices when iterating over controls in a `FormArray`.\n     */\n    name = null;\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        console.warn(disabledAttrWarning);\n      }\n    }\n    // TODO(kara): remove next 4 properties once deprecation period is over\n    /** @deprecated as of v6 */\n    model;\n    /** @deprecated as of v6 */\n    update = new EventEmitter();\n    /**\n     * @description\n     * Static property used to track whether any ngModel warnings have been sent across\n     * all instances of FormControlName. Used to support warning config of \"once\".\n     *\n     * @internal\n     */\n    static _ngModelWarningSentOnce = false;\n    /**\n     * @description\n     * Instance property used to track whether an ngModel warning has been sent out for this\n     * particular FormControlName instance. Used to support warning config of \"always\".\n     *\n     * @internal\n     */\n    _ngModelWarningSent = false;\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n      super();\n      this._ngModelWarningConfig = _ngModelWarningConfig;\n      this._parent = parent;\n      this._setValidators(validators);\n      this._setAsyncValidators(asyncValidators);\n      this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @docs-private */\n    ngOnChanges(changes) {\n      if (!this._added) this._setUpControl();\n      if (isPropertyUpdated(changes, this.viewModel)) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n        }\n        this.viewModel = this.model;\n        this.formDirective.updateModel(this, this.model);\n      }\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      if (this.formDirective) {\n        this.formDirective.removeControl(this);\n      }\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n      this.viewModel = newValue;\n      this.update.emit(newValue);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n      return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n      return this._parent ? this._parent.formDirective : null;\n    }\n    _setUpControl() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        checkParentType(this._parent, this.name);\n      }\n      this.control = this.formDirective.addControl(this);\n      this._added = true;\n    }\n    static ɵfac = function FormControlName_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FormControlName)(i0.ɵɵdirectiveInject(ControlContainer, 13), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), i0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: FormControlName,\n      selectors: [[\"\", \"formControlName\", \"\"]],\n      inputs: {\n        name: [0, \"formControlName\", \"name\"],\n        isDisabled: [0, \"disabled\", \"isDisabled\"],\n        model: [0, \"ngModel\", \"model\"]\n      },\n      outputs: {\n        update: \"ngModelChange\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([controlNameBinding]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return FormControlName;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction checkParentType(parent, name) {\n  if (!(parent instanceof FormGroupName) && parent instanceof AbstractFormGroupDirective) {\n    throw ngModelGroupException();\n  } else if (!(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName)) {\n    throw controlParentException(name);\n  }\n}\nconst SELECT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => SelectControlValueAccessor),\n  multi: true\n};\nfunction _buildValueString$1(id, value) {\n  if (id == null) return `${value}`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId$1(valueString) {\n  return valueString.split(':')[0];\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```html\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *    @for(country of countries; track $index) {\n *        <option[ngValue]=\"country\">{{country.name}}</option>\n *    }\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in IE, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event#browser_compatibility\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet SelectControlValueAccessor = /*#__PURE__*/(() => {\n  class SelectControlValueAccessor extends BuiltInControlValueAccessor {\n    /** @docs-private */\n    value;\n    /** @internal */\n    _optionMap = new Map();\n    /** @internal */\n    _idCounter = 0;\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new _RuntimeError(1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);\n      }\n      this._compareWith = fn;\n    }\n    _compareWith = Object.is;\n    // We need this because we might be in the process of destroying the root\n    // injector, which is marked as destroyed before running destroy hooks.\n    // Attempting to use afterNextRender with the node injector would evntually\n    // run into that already destroyed injector.\n    appRefInjector = inject(ApplicationRef).injector;\n    destroyRef = inject(DestroyRef);\n    cdr = inject(ChangeDetectorRef);\n    _queuedWrite = false;\n    /**\n     * This is needed to efficiently set the select value when adding/removing options. If\n     * writeValue is instead called for every added/removed option, this results in exponentially\n     * more _compareValue calls than the number of option elements (issue #41330).\n     *\n     * Secondly, calling writeValue when rendering individual option elements instead of after they\n     * are all rendered caused an issue in Safari and IE 11 where the first option element failed\n     * to be deselected when no option matched the select ngModel. This was because Angular would\n     * set the select element's value property before appending the option's child text node to the\n     * DOM (issue #14505).\n     *\n     * Finally, this approach is necessary to avoid an issue with delayed element removal when\n     * using the animations module (in all browsers). Otherwise when a selected option is removed\n     * (so no option matches the ngModel anymore), Angular would change the select element value\n     * before actually removing the option from the DOM. Then when the option is finally removed\n     * from the DOM, the browser would change the select value to that of the first option, even\n     * though it doesn't match the ngModel (issue #18430).\n     *\n     * @internal\n     */\n    _writeValueAfterRender() {\n      if (this._queuedWrite || this.appRefInjector.destroyed) {\n        return;\n      }\n      this._queuedWrite = true;\n      afterNextRender({\n        write: () => {\n          if (this.destroyRef.destroyed) {\n            return;\n          }\n          this._queuedWrite = false;\n          this.writeValue(this.value);\n        }\n      }, {\n        injector: this.appRefInjector\n      });\n    }\n    /**\n     * Sets the \"value\" property on the select element.\n     * @docs-private\n     */\n    writeValue(value) {\n      // TODO(atscott): This could likely be optimized more by only marking for check if the value is changed\n      // note that this needs to include both the internal value and the value in the DOM.\n      this.cdr.markForCheck();\n      this.value = value;\n      const id = this._getOptionId(value);\n      const valueString = _buildValueString$1(id, value);\n      this.setProperty('value', valueString);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @docs-private\n     */\n    registerOnChange(fn) {\n      this.onChange = valueString => {\n        this.value = this._getOptionValue(valueString);\n        fn(this.value);\n      };\n    }\n    /** @internal */\n    _registerOption() {\n      return (this._idCounter++).toString();\n    }\n    /** @internal */\n    _getOptionId(value) {\n      for (const id of this._optionMap.keys()) {\n        if (this._compareWith(this._optionMap.get(id), value)) return id;\n      }\n      return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n      const id = _extractId$1(valueString);\n      return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵSelectControlValueAccessor_BaseFactory;\n      return function SelectControlValueAccessor_Factory(__ngFactoryType__) {\n        return (ɵSelectControlValueAccessor_BaseFactory || (ɵSelectControlValueAccessor_BaseFactory = i0.ɵɵgetInheritedFactory(SelectControlValueAccessor)))(__ngFactoryType__ || SelectControlValueAccessor);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: SelectControlValueAccessor,\n      selectors: [[\"select\", \"formControlName\", \"\", 3, \"multiple\", \"\"], [\"select\", \"formControl\", \"\", 3, \"multiple\", \"\"], [\"select\", \"ngModel\", \"\", 3, \"multiple\", \"\"]],\n      hostBindings: function SelectControlValueAccessor_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"change\", function SelectControlValueAccessor_change_HostBindingHandler($event) {\n            return ctx.onChange($event.target.value);\n          })(\"blur\", function SelectControlValueAccessor_blur_HostBindingHandler() {\n            return ctx.onTouched();\n          });\n        }\n      },\n      inputs: {\n        compareWith: \"compareWith\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([SELECT_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return SelectControlValueAccessor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see {@link SelectControlValueAccessor}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet NgSelectOption = /*#__PURE__*/(() => {\n  class NgSelectOption {\n    _element;\n    _renderer;\n    _select;\n    /**\n     * @description\n     * ID of the option element\n     */\n    id;\n    constructor(_element, _renderer, _select) {\n      this._element = _element;\n      this._renderer = _renderer;\n      this._select = _select;\n      if (this._select) this.id = this._select._registerOption();\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n      if (this._select == null) return;\n      this._select._optionMap.set(this.id, value);\n      this._setElementValue(_buildValueString$1(this.id, value));\n      this._select._writeValueAfterRender();\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n      this._setElementValue(value);\n      if (this._select) this._select._writeValueAfterRender();\n    }\n    /** @internal */\n    _setElementValue(value) {\n      this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      if (this._select) {\n        this._select._optionMap.delete(this.id);\n        this._select._writeValueAfterRender();\n      }\n    }\n    static ɵfac = function NgSelectOption_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgSelectOption)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(SelectControlValueAccessor, 9));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgSelectOption,\n      selectors: [[\"option\"]],\n      inputs: {\n        ngValue: \"ngValue\",\n        value: \"value\"\n      },\n      standalone: false\n    });\n  }\n  return NgSelectOption;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => SelectMultipleControlValueAccessor),\n  multi: true\n};\nfunction _buildValueString(id, value) {\n  if (id == null) return `${value}`;\n  if (typeof value === 'string') value = `'${value}'`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId(valueString) {\n  return valueString.split(':')[0];\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select\n * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @see {@link SelectControlValueAccessor}\n *\n * @usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```html\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   @for(country of countries; track $index) {\n *      <option [ngValue]=\"country\">{{ country.name }}</option>\n *   }\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet SelectMultipleControlValueAccessor = /*#__PURE__*/(() => {\n  class SelectMultipleControlValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * The current value.\n     * @docs-private\n     */\n    value;\n    /** @internal */\n    _optionMap = new Map();\n    /** @internal */\n    _idCounter = 0;\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new _RuntimeError(1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);\n      }\n      this._compareWith = fn;\n    }\n    _compareWith = Object.is;\n    /**\n     * Sets the \"value\" property on one or of more of the select's options.\n     * @docs-private\n     */\n    writeValue(value) {\n      this.value = value;\n      let optionSelectedStateSetter;\n      if (Array.isArray(value)) {\n        // convert values to ids\n        const ids = value.map(v => this._getOptionId(v));\n        optionSelectedStateSetter = (opt, o) => {\n          opt._setSelected(ids.indexOf(o.toString()) > -1);\n        };\n      } else {\n        optionSelectedStateSetter = (opt, o) => {\n          opt._setSelected(false);\n        };\n      }\n      this._optionMap.forEach(optionSelectedStateSetter);\n    }\n    /**\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     * @docs-private\n     */\n    registerOnChange(fn) {\n      this.onChange = element => {\n        const selected = [];\n        const selectedOptions = element.selectedOptions;\n        if (selectedOptions !== undefined) {\n          const options = selectedOptions;\n          for (let i = 0; i < options.length; i++) {\n            const opt = options[i];\n            const val = this._getOptionValue(opt.value);\n            selected.push(val);\n          }\n        }\n        // Degrade to use `options` when `selectedOptions` property is not available.\n        // Note: the `selectedOptions` is available in all supported browsers, but the Domino lib\n        // doesn't have it currently, see https://github.com/fgnass/domino/issues/177.\n        else {\n          const options = element.options;\n          for (let i = 0; i < options.length; i++) {\n            const opt = options[i];\n            if (opt.selected) {\n              const val = this._getOptionValue(opt.value);\n              selected.push(val);\n            }\n          }\n        }\n        this.value = selected;\n        fn(selected);\n      };\n    }\n    /** @internal */\n    _registerOption(value) {\n      const id = (this._idCounter++).toString();\n      this._optionMap.set(id, value);\n      return id;\n    }\n    /** @internal */\n    _getOptionId(value) {\n      for (const id of this._optionMap.keys()) {\n        if (this._compareWith(this._optionMap.get(id)._value, value)) return id;\n      }\n      return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n      const id = _extractId(valueString);\n      return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵSelectMultipleControlValueAccessor_BaseFactory;\n      return function SelectMultipleControlValueAccessor_Factory(__ngFactoryType__) {\n        return (ɵSelectMultipleControlValueAccessor_BaseFactory || (ɵSelectMultipleControlValueAccessor_BaseFactory = i0.ɵɵgetInheritedFactory(SelectMultipleControlValueAccessor)))(__ngFactoryType__ || SelectMultipleControlValueAccessor);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: SelectMultipleControlValueAccessor,\n      selectors: [[\"select\", \"multiple\", \"\", \"formControlName\", \"\"], [\"select\", \"multiple\", \"\", \"formControl\", \"\"], [\"select\", \"multiple\", \"\", \"ngModel\", \"\"]],\n      hostBindings: function SelectMultipleControlValueAccessor_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"change\", function SelectMultipleControlValueAccessor_change_HostBindingHandler($event) {\n            return ctx.onChange($event.target);\n          })(\"blur\", function SelectMultipleControlValueAccessor_blur_HostBindingHandler() {\n            return ctx.onTouched();\n          });\n        }\n      },\n      inputs: {\n        compareWith: \"compareWith\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([SELECT_MULTIPLE_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return SelectMultipleControlValueAccessor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see {@link SelectMultipleControlValueAccessor}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet ɵNgSelectMultipleOption = /*#__PURE__*/(() => {\n  class ɵNgSelectMultipleOption {\n    _element;\n    _renderer;\n    _select;\n    id;\n    /** @internal */\n    _value;\n    constructor(_element, _renderer, _select) {\n      this._element = _element;\n      this._renderer = _renderer;\n      this._select = _select;\n      if (this._select) {\n        this.id = this._select._registerOption(this);\n      }\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n      if (this._select == null) return;\n      this._value = value;\n      this._setElementValue(_buildValueString(this.id, value));\n      this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n      if (this._select) {\n        this._value = value;\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n      } else {\n        this._setElementValue(value);\n      }\n    }\n    /** @internal */\n    _setElementValue(value) {\n      this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @internal */\n    _setSelected(selected) {\n      this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    }\n    /** @docs-private */\n    ngOnDestroy() {\n      if (this._select) {\n        this._select._optionMap.delete(this.id);\n        this._select.writeValue(this._select.value);\n      }\n    }\n    static ɵfac = function ɵNgSelectMultipleOption_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ɵNgSelectMultipleOption)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(SelectMultipleControlValueAccessor, 9));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ɵNgSelectMultipleOption,\n      selectors: [[\"option\"]],\n      inputs: {\n        ngValue: \"ngValue\",\n        value: \"value\"\n      },\n      standalone: false\n    });\n  }\n  return ɵNgSelectMultipleOption;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Method that updates string to integer if not already a number\n *\n * @param value The value to convert to integer.\n * @returns value of parameter converted to number or integer.\n */\nfunction toInteger(value) {\n  return typeof value === 'number' ? value : parseInt(value, 10);\n}\n/**\n * Method that ensures that provided value is a float (and converts it to float if needed).\n *\n * @param value The value to convert to float.\n * @returns value of parameter converted to number or float.\n */\nfunction toFloat(value) {\n  return typeof value === 'number' ? value : parseFloat(value);\n}\n/**\n * A base class for Validator-based Directives. The class contains common logic shared across such\n * Directives.\n *\n * For internal use only, this class is not intended for use outside of the Forms package.\n */\nlet AbstractValidatorDirective = /*#__PURE__*/(() => {\n  class AbstractValidatorDirective {\n    _validator = nullValidator;\n    _onChange;\n    /**\n     * A flag that tracks whether this validator is enabled.\n     *\n     * Marking it `internal` (vs `protected`), so that this flag can be used in host bindings of\n     * directive classes that extend this base class.\n     * @internal\n     */\n    _enabled;\n    /** @docs-private */\n    ngOnChanges(changes) {\n      if (this.inputName in changes) {\n        const input = this.normalizeInput(changes[this.inputName].currentValue);\n        this._enabled = this.enabled(input);\n        this._validator = this._enabled ? this.createValidator(input) : nullValidator;\n        if (this._onChange) {\n          this._onChange();\n        }\n      }\n    }\n    /** @docs-private */\n    validate(control) {\n      return this._validator(control);\n    }\n    /** @docs-private */\n    registerOnValidatorChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * @description\n     * Determines whether this validator should be active or not based on an input.\n     * Base class implementation checks whether an input is defined (if the value is different from\n     * `null` and `undefined`). Validator classes that extend this base class can override this\n     * function with the logic specific to a particular validator directive.\n     */\n    enabled(input) {\n      return input != null /* both `null` and `undefined` */;\n    }\n    static ɵfac = function AbstractValidatorDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AbstractValidatorDirective)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: AbstractValidatorDirective,\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return AbstractValidatorDirective;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Provider which adds `MaxValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MAX_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(() => MaxValidator),\n  multi: true\n};\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `max` attribute.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a max validator\n *\n * The following example shows how to add a max validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel max=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet MaxValidator = /*#__PURE__*/(() => {\n  class MaxValidator extends AbstractValidatorDirective {\n    /**\n     * @description\n     * Tracks changes to the max bound to this directive.\n     */\n    max;\n    /** @internal */\n    inputName = 'max';\n    /** @internal */\n    normalizeInput = input => toFloat(input);\n    /** @internal */\n    createValidator = max => maxValidator(max);\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMaxValidator_BaseFactory;\n      return function MaxValidator_Factory(__ngFactoryType__) {\n        return (ɵMaxValidator_BaseFactory || (ɵMaxValidator_BaseFactory = i0.ɵɵgetInheritedFactory(MaxValidator)))(__ngFactoryType__ || MaxValidator);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MaxValidator,\n      selectors: [[\"input\", \"type\", \"number\", \"max\", \"\", \"formControlName\", \"\"], [\"input\", \"type\", \"number\", \"max\", \"\", \"formControl\", \"\"], [\"input\", \"type\", \"number\", \"max\", \"\", \"ngModel\", \"\"]],\n      hostVars: 1,\n      hostBindings: function MaxValidator_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"max\", ctx._enabled ? ctx.max : null);\n        }\n      },\n      inputs: {\n        max: \"max\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([MAX_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MaxValidator;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Provider which adds `MinValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MIN_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(() => MinValidator),\n  multi: true\n};\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a min validator\n *\n * The following example shows how to add a min validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel min=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet MinValidator = /*#__PURE__*/(() => {\n  class MinValidator extends AbstractValidatorDirective {\n    /**\n     * @description\n     * Tracks changes to the min bound to this directive.\n     */\n    min;\n    /** @internal */\n    inputName = 'min';\n    /** @internal */\n    normalizeInput = input => toFloat(input);\n    /** @internal */\n    createValidator = min => minValidator(min);\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMinValidator_BaseFactory;\n      return function MinValidator_Factory(__ngFactoryType__) {\n        return (ɵMinValidator_BaseFactory || (ɵMinValidator_BaseFactory = i0.ɵɵgetInheritedFactory(MinValidator)))(__ngFactoryType__ || MinValidator);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MinValidator,\n      selectors: [[\"input\", \"type\", \"number\", \"min\", \"\", \"formControlName\", \"\"], [\"input\", \"type\", \"number\", \"min\", \"\", \"formControl\", \"\"], [\"input\", \"type\", \"number\", \"min\", \"\", \"ngModel\", \"\"]],\n      hostVars: 1,\n      hostBindings: function MinValidator_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"min\", ctx._enabled ? ctx.min : null);\n        }\n      },\n      inputs: {\n        min: \"min\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([MIN_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MinValidator;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(() => RequiredValidator),\n  multi: true\n};\n/**\n * @description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(() => CheckboxRequiredValidator),\n  multi: true\n};\n/**\n * @description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```html\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nlet RequiredValidator = /*#__PURE__*/(() => {\n  class RequiredValidator extends AbstractValidatorDirective {\n    /**\n     * @description\n     * Tracks changes to the required attribute bound to this directive.\n     */\n    required;\n    /** @internal */\n    inputName = 'required';\n    /** @internal */\n    normalizeInput = booleanAttribute;\n    /** @internal */\n    createValidator = input => requiredValidator;\n    /** @docs-private */\n    enabled(input) {\n      return input;\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵRequiredValidator_BaseFactory;\n      return function RequiredValidator_Factory(__ngFactoryType__) {\n        return (ɵRequiredValidator_BaseFactory || (ɵRequiredValidator_BaseFactory = i0.ɵɵgetInheritedFactory(RequiredValidator)))(__ngFactoryType__ || RequiredValidator);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: RequiredValidator,\n      selectors: [[\"\", \"required\", \"\", \"formControlName\", \"\", 3, \"type\", \"checkbox\"], [\"\", \"required\", \"\", \"formControl\", \"\", 3, \"type\", \"checkbox\"], [\"\", \"required\", \"\", \"ngModel\", \"\", 3, \"type\", \"checkbox\"]],\n      hostVars: 1,\n      hostBindings: function RequiredValidator_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"required\", ctx._enabled ? \"\" : null);\n        }\n      },\n      inputs: {\n        required: \"required\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([REQUIRED_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return RequiredValidator;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nlet CheckboxRequiredValidator = /*#__PURE__*/(() => {\n  class CheckboxRequiredValidator extends RequiredValidator {\n    /** @internal */\n    createValidator = input => requiredTrueValidator;\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵCheckboxRequiredValidator_BaseFactory;\n      return function CheckboxRequiredValidator_Factory(__ngFactoryType__) {\n        return (ɵCheckboxRequiredValidator_BaseFactory || (ɵCheckboxRequiredValidator_BaseFactory = i0.ɵɵgetInheritedFactory(CheckboxRequiredValidator)))(__ngFactoryType__ || CheckboxRequiredValidator);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CheckboxRequiredValidator,\n      selectors: [[\"input\", \"type\", \"checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"input\", \"type\", \"checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"input\", \"type\", \"checkbox\", \"required\", \"\", \"ngModel\", \"\"]],\n      hostVars: 1,\n      hostBindings: function CheckboxRequiredValidator_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"required\", ctx._enabled ? \"\" : null);\n        }\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([CHECKBOX_REQUIRED_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return CheckboxRequiredValidator;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst EMAIL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(() => EmailValidator),\n  multi: true\n};\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * The email validation is based on the WHATWG HTML specification with some enhancements to\n * incorporate more RFC rules. More information can be found on the [Validators.email\n * page](api/forms/Validators#email).\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel\n * binding.\n *\n * ```html\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nlet EmailValidator = /*#__PURE__*/(() => {\n  class EmailValidator extends AbstractValidatorDirective {\n    /**\n     * @description\n     * Tracks changes to the email attribute bound to this directive.\n     */\n    email;\n    /** @internal */\n    inputName = 'email';\n    /** @internal */\n    normalizeInput = booleanAttribute;\n    /** @internal */\n    createValidator = input => emailValidator;\n    /** @docs-private */\n    enabled(input) {\n      return input;\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵEmailValidator_BaseFactory;\n      return function EmailValidator_Factory(__ngFactoryType__) {\n        return (ɵEmailValidator_BaseFactory || (ɵEmailValidator_BaseFactory = i0.ɵɵgetInheritedFactory(EmailValidator)))(__ngFactoryType__ || EmailValidator);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: EmailValidator,\n      selectors: [[\"\", \"email\", \"\", \"formControlName\", \"\"], [\"\", \"email\", \"\", \"formControl\", \"\"], [\"\", \"email\", \"\", \"ngModel\", \"\"]],\n      inputs: {\n        email: \"email\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([EMAIL_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return EmailValidator;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MIN_LENGTH_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(() => MinLengthValidator),\n  multi: true\n};\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet MinLengthValidator = /*#__PURE__*/(() => {\n  class MinLengthValidator extends AbstractValidatorDirective {\n    /**\n     * @description\n     * Tracks changes to the minimum length bound to this directive.\n     */\n    minlength;\n    /** @internal */\n    inputName = 'minlength';\n    /** @internal */\n    normalizeInput = input => toInteger(input);\n    /** @internal */\n    createValidator = minlength => minLengthValidator(minlength);\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMinLengthValidator_BaseFactory;\n      return function MinLengthValidator_Factory(__ngFactoryType__) {\n        return (ɵMinLengthValidator_BaseFactory || (ɵMinLengthValidator_BaseFactory = i0.ɵɵgetInheritedFactory(MinLengthValidator)))(__ngFactoryType__ || MinLengthValidator);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MinLengthValidator,\n      selectors: [[\"\", \"minlength\", \"\", \"formControlName\", \"\"], [\"\", \"minlength\", \"\", \"formControl\", \"\"], [\"\", \"minlength\", \"\", \"ngModel\", \"\"]],\n      hostVars: 1,\n      hostBindings: function MinLengthValidator_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"minlength\", ctx._enabled ? ctx.minlength : null);\n        }\n      },\n      inputs: {\n        minlength: \"minlength\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([MIN_LENGTH_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MinLengthValidator;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MAX_LENGTH_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n/**\n * A directive that adds maximum length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet MaxLengthValidator = /*#__PURE__*/(() => {\n  class MaxLengthValidator extends AbstractValidatorDirective {\n    /**\n     * @description\n     * Tracks changes to the maximum length bound to this directive.\n     */\n    maxlength;\n    /** @internal */\n    inputName = 'maxlength';\n    /** @internal */\n    normalizeInput = input => toInteger(input);\n    /** @internal */\n    createValidator = maxlength => maxLengthValidator(maxlength);\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMaxLengthValidator_BaseFactory;\n      return function MaxLengthValidator_Factory(__ngFactoryType__) {\n        return (ɵMaxLengthValidator_BaseFactory || (ɵMaxLengthValidator_BaseFactory = i0.ɵɵgetInheritedFactory(MaxLengthValidator)))(__ngFactoryType__ || MaxLengthValidator);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MaxLengthValidator,\n      selectors: [[\"\", \"maxlength\", \"\", \"formControlName\", \"\"], [\"\", \"maxlength\", \"\", \"formControl\", \"\"], [\"\", \"maxlength\", \"\", \"ngModel\", \"\"]],\n      hostVars: 1,\n      hostBindings: function MaxLengthValidator_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"maxlength\", ctx._enabled ? ctx.maxlength : null);\n        }\n      },\n      inputs: {\n        maxlength: \"maxlength\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([MAX_LENGTH_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MaxLengthValidator;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst PATTERN_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(() => PatternValidator),\n  multi: true\n};\n/**\n * @description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nlet PatternValidator = /*#__PURE__*/(() => {\n  class PatternValidator extends AbstractValidatorDirective {\n    /**\n     * @description\n     * Tracks changes to the pattern bound to this directive.\n     */\n    pattern; // This input is always defined, since the name matches selector.\n    /** @internal */\n    inputName = 'pattern';\n    /** @internal */\n    normalizeInput = input => input;\n    /** @internal */\n    createValidator = input => patternValidator(input);\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵPatternValidator_BaseFactory;\n      return function PatternValidator_Factory(__ngFactoryType__) {\n        return (ɵPatternValidator_BaseFactory || (ɵPatternValidator_BaseFactory = i0.ɵɵgetInheritedFactory(PatternValidator)))(__ngFactoryType__ || PatternValidator);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: PatternValidator,\n      selectors: [[\"\", \"pattern\", \"\", \"formControlName\", \"\"], [\"\", \"pattern\", \"\", \"formControl\", \"\"], [\"\", \"pattern\", \"\", \"ngModel\", \"\"]],\n      hostVars: 1,\n      hostBindings: function PatternValidator_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"pattern\", ctx._enabled ? ctx.pattern : null);\n        }\n      },\n      inputs: {\n        pattern: \"pattern\"\n      },\n      standalone: false,\n      features: [i0.ɵɵProvidersFeature([PATTERN_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return PatternValidator;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst SHARED_FORM_DIRECTIVES = [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator];\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nconst REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nlet ɵInternalFormsSharedModule = /*#__PURE__*/(() => {\n  class ɵInternalFormsSharedModule {\n    static ɵfac = function ɵInternalFormsSharedModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ɵInternalFormsSharedModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ɵInternalFormsSharedModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return ɵInternalFormsSharedModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` accepts one generic argument, which is the type of the controls inside.\n * If you need a heterogenous array, use {@link UntypedFormArray}.\n *\n * `FormArray` is one of the four fundamental building blocks used to define forms in Angular,\n * along with `FormControl`, `FormGroup`, and `FormRecord`.\n *\n * @usageNotes\n *\n * ### Create an array of form controls\n *\n * ```ts\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```ts\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * @publicApi\n */\nclass FormArray extends AbstractControl {\n  /**\n   * Creates a new `FormArray` instance.\n   *\n   * @param controls An array of child controls. Each child control is given an index\n   * where it is registered.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   *\n   */\n  constructor(controls, validatorOrOpts, asyncValidator) {\n    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n    this.controls = controls;\n    this._initObservables();\n    this._setUpdateStrategy(validatorOrOpts);\n    this._setUpControls();\n    this.updateValueAndValidity({\n      onlySelf: true,\n      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n      // `VALID` or `INVALID`.\n      // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`\n      // to `true` to allow that during the control creation process.\n      emitEvent: !!this.asyncValidator\n    });\n  }\n  controls;\n  /**\n   * Get the `AbstractControl` at the given `index` in the array.\n   *\n   * @param index Index in the array to retrieve the control. If `index` is negative, it will wrap\n   *     around from the back, and if index is greatly negative (less than `-length`), the result is\n   * undefined. This behavior is the same as `Array.at(index)`.\n   */\n  at(index) {\n    return this.controls[this._adjustIndex(index)];\n  }\n  /**\n   * Insert a new `AbstractControl` at the end of the array.\n   *\n   * @param control Form control to be inserted\n   * @param options Specifies whether this FormArray instance should emit events after a new\n   *     control is added.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * inserted. When false, no events are emitted.\n   */\n  push(control, options = {}) {\n    this.controls.push(control);\n    this._registerControl(control);\n    this.updateValueAndValidity({\n      emitEvent: options.emitEvent\n    });\n    this._onCollectionChange();\n  }\n  /**\n   * Insert a new `AbstractControl` at the given `index` in the array.\n   *\n   * @param index Index in the array to insert the control. If `index` is negative, wraps around\n   *     from the back. If `index` is greatly negative (less than `-length`), prepends to the array.\n   * This behavior is the same as `Array.splice(index, 0, control)`.\n   * @param control Form control to be inserted\n   * @param options Specifies whether this FormArray instance should emit events after a new\n   *     control is inserted.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * inserted. When false, no events are emitted.\n   */\n  insert(index, control, options = {}) {\n    this.controls.splice(index, 0, control);\n    this._registerControl(control);\n    this.updateValueAndValidity({\n      emitEvent: options.emitEvent\n    });\n  }\n  /**\n   * Remove the control at the given `index` in the array.\n   *\n   * @param index Index in the array to remove the control.  If `index` is negative, wraps around\n   *     from the back. If `index` is greatly negative (less than `-length`), removes the first\n   *     element. This behavior is the same as `Array.splice(index, 1)`.\n   * @param options Specifies whether this FormArray instance should emit events after a\n   *     control is removed.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * removed. When false, no events are emitted.\n   */\n  removeAt(index, options = {}) {\n    // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.\n    let adjustedIndex = this._adjustIndex(index);\n    if (adjustedIndex < 0) adjustedIndex = 0;\n    if (this.controls[adjustedIndex]) this.controls[adjustedIndex]._registerOnCollectionChange(() => {});\n    this.controls.splice(adjustedIndex, 1);\n    this.updateValueAndValidity({\n      emitEvent: options.emitEvent\n    });\n  }\n  /**\n   * Replace an existing control.\n   *\n   * @param index Index in the array to replace the control. If `index` is negative, wraps around\n   *     from the back. If `index` is greatly negative (less than `-length`), replaces the first\n   *     element. This behavior is the same as `Array.splice(index, 1, control)`.\n   * @param control The `AbstractControl` control to replace the existing control\n   * @param options Specifies whether this FormArray instance should emit events after an\n   *     existing control is replaced with a new one.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * replaced with a new one. When false, no events are emitted.\n   */\n  setControl(index, control, options = {}) {\n    // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.\n    let adjustedIndex = this._adjustIndex(index);\n    if (adjustedIndex < 0) adjustedIndex = 0;\n    if (this.controls[adjustedIndex]) this.controls[adjustedIndex]._registerOnCollectionChange(() => {});\n    this.controls.splice(adjustedIndex, 1);\n    if (control) {\n      this.controls.splice(adjustedIndex, 0, control);\n      this._registerControl(control);\n    }\n    this.updateValueAndValidity({\n      emitEvent: options.emitEvent\n    });\n    this._onCollectionChange();\n  }\n  /**\n   * Length of the control array.\n   */\n  get length() {\n    return this.controls.length;\n  }\n  /**\n   * Sets the value of the `FormArray`. It accepts an array that matches\n   * the structure of the control.\n   *\n   * This method performs strict checks, and throws an error if you try\n   * to set the value of a control that doesn't exist or if you exclude the\n   * value of a control.\n   *\n   * @usageNotes\n   * ### Set the values for the controls in the form array\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *   new FormControl(),\n   *   new FormControl()\n   * ]);\n   * console.log(arr.value);   // [null, null]\n   *\n   * arr.setValue(['Nancy', 'Drew']);\n   * console.log(arr.value);   // ['Nancy', 'Drew']\n   * ```\n   *\n   * @param value Array of values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  setValue(value, options = {}) {\n    assertAllValuesPresent(this, false, value);\n    value.forEach((newValue, index) => {\n      assertControlPresent(this, false, index);\n      this.at(index).setValue(newValue, {\n        onlySelf: true,\n        emitEvent: options.emitEvent\n      });\n    });\n    this.updateValueAndValidity(options);\n  }\n  /**\n   * Patches the value of the `FormArray`. It accepts an array that matches the\n   * structure of the control, and does its best to match the values to the correct\n   * controls in the group.\n   *\n   * It accepts both super-sets and sub-sets of the array without throwing an error.\n   *\n   * @usageNotes\n   * ### Patch the values for controls in a form array\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * console.log(arr.value);   // [null, null]\n   *\n   * arr.patchValue(['Nancy']);\n   * console.log(arr.value);   // ['Nancy', null]\n   * ```\n   *\n   * @param value Array of latest values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control\n   * value is updated. When false, no events are emitted. The configuration options are passed to\n   * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.\n   */\n  patchValue(value, options = {}) {\n    // Even though the `value` argument type doesn't allow `null` and `undefined` values, the\n    // `patchValue` can be called recursively and inner data structures might have these values,\n    // so we just ignore such cases when a field containing FormArray instance receives `null` or\n    // `undefined` as a value.\n    if (value == null /* both `null` and `undefined` */) return;\n    value.forEach((newValue, index) => {\n      if (this.at(index)) {\n        this.at(index).patchValue(newValue, {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n  /**\n   * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n   * value of all descendants to null or null maps.\n   *\n   * You reset to a specific form state by passing in an array of states\n   * that matches the structure of the control. The state is a standalone value\n   * or a form state object with both a value and a disabled status.\n   *\n   * @usageNotes\n   * ### Reset the values in a form array\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * arr.reset(['name', 'last name']);\n   *\n   * console.log(arr.value);  // ['name', 'last name']\n   * ```\n   *\n   * ### Reset the values in a form array and the disabled status for the first control\n   *\n   * ```ts\n   * arr.reset([\n   *   {value: 'name', disabled: true},\n   *   'last'\n   * ]);\n   *\n   * console.log(arr.value);  // ['last']\n   * console.log(arr.at(0).status);  // 'DISABLED'\n   * ```\n   *\n   * @param value Array of values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  reset(value = [], options = {}) {\n    this._forEachChild((control, index) => {\n      control.reset(value[index], {\n        onlySelf: true,\n        emitEvent: options.emitEvent\n      });\n    });\n    this._updatePristine(options, this);\n    this._updateTouched(options, this);\n    this.updateValueAndValidity(options);\n  }\n  /**\n   * The aggregate value of the array, including any disabled controls.\n   *\n   * Reports all values regardless of disabled status.\n   */\n  getRawValue() {\n    return this.controls.map(control => control.getRawValue());\n  }\n  /**\n   * Remove all controls in the `FormArray`.\n   *\n   * @param options Specifies whether this FormArray instance should emit events after all\n   *     controls are removed.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when all controls\n   * in this FormArray instance are removed. When false, no events are emitted.\n   *\n   * @usageNotes\n   * ### Remove all elements from a FormArray\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * console.log(arr.length);  // 2\n   *\n   * arr.clear();\n   * console.log(arr.length);  // 0\n   * ```\n   *\n   * It's a simpler and more efficient alternative to removing all elements one by one:\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   *\n   * while (arr.length) {\n   *    arr.removeAt(0);\n   * }\n   * ```\n   */\n  clear(options = {}) {\n    if (this.controls.length < 1) return;\n    this._forEachChild(control => control._registerOnCollectionChange(() => {}));\n    this.controls.splice(0);\n    this.updateValueAndValidity({\n      emitEvent: options.emitEvent\n    });\n  }\n  /**\n   * Adjusts a negative index by summing it with the length of the array. For very negative\n   * indices, the result may remain negative.\n   * @internal\n   */\n  _adjustIndex(index) {\n    return index < 0 ? index + this.length : index;\n  }\n  /** @internal */\n  _syncPendingControls() {\n    let subtreeUpdated = this.controls.reduce((updated, child) => {\n      return child._syncPendingControls() ? true : updated;\n    }, false);\n    if (subtreeUpdated) this.updateValueAndValidity({\n      onlySelf: true\n    });\n    return subtreeUpdated;\n  }\n  /** @internal */\n  _forEachChild(cb) {\n    this.controls.forEach((control, index) => {\n      cb(control, index);\n    });\n  }\n  /** @internal */\n  _updateValue() {\n    this.value = this.controls.filter(control => control.enabled || this.disabled).map(control => control.value);\n  }\n  /** @internal */\n  _anyControls(condition) {\n    return this.controls.some(control => control.enabled && condition(control));\n  }\n  /** @internal */\n  _setUpControls() {\n    this._forEachChild(control => this._registerControl(control));\n  }\n  /** @internal */\n  _allControlsDisabled() {\n    for (const control of this.controls) {\n      if (control.enabled) return false;\n    }\n    return this.controls.length > 0 || this.disabled;\n  }\n  _registerControl(control) {\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n  }\n  /** @internal */\n  _find(name) {\n    return this.at(name) ?? null;\n  }\n}\nconst UntypedFormArray = FormArray;\n/**\n * @description\n * Asserts that the given control is an instance of `FormArray`\n *\n * @publicApi\n */\nconst isFormArray = control => control instanceof FormArray;\nfunction isAbstractControlOptions(options) {\n  return !!options && (options.asyncValidators !== undefined || options.validators !== undefined || options.updateOn !== undefined);\n}\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a\n * `FormControl`, `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to\n * build complex forms.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n *\n * @publicApi\n */\nlet FormBuilder = /*#__PURE__*/(() => {\n  class FormBuilder {\n    useNonNullable = false;\n    /**\n     * @description\n     * Returns a FormBuilder in which automatically constructed `FormControl` elements\n     * have `{nonNullable: true}` and are non-nullable.\n     *\n     * **Constructing non-nullable controls**\n     *\n     * When constructing a control, it will be non-nullable, and will reset to its initial value.\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * let name = nnfb.control('Alex'); // FormControl<string>\n     * name.reset();\n     * console.log(name); // 'Alex'\n     * ```\n     *\n     * **Constructing non-nullable groups or arrays**\n     *\n     * When constructing a group or array, all automatically created inner controls will be\n     * non-nullable, and will reset to their initial values.\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * let name = nnfb.group({who: 'Alex'}); // FormGroup<{who: FormControl<string>}>\n     * name.reset();\n     * console.log(name); // {who: 'Alex'}\n     * ```\n     * **Constructing *nullable* fields on groups or arrays**\n     *\n     * It is still possible to have a nullable field. In particular, any `FormControl` which is\n     * *already* constructed will not be altered. For example:\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * // FormGroup<{who: FormControl<string|null>}>\n     * let name = nnfb.group({who: new FormControl('Alex')});\n     * name.reset(); console.log(name); // {who: null}\n     * ```\n     *\n     * Because the inner control is constructed explicitly by the caller, the builder has\n     * no control over how it is created, and cannot exclude the `null`.\n     */\n    get nonNullable() {\n      const nnfb = new FormBuilder();\n      nnfb.useNonNullable = true;\n      return nnfb;\n    }\n    group(controls, options = null) {\n      const reducedControls = this._reduceControls(controls);\n      let newOptions = {};\n      if (isAbstractControlOptions(options)) {\n        // `options` are `AbstractControlOptions`\n        newOptions = options;\n      } else if (options !== null) {\n        // `options` are legacy form group options\n        newOptions.validators = options.validator;\n        newOptions.asyncValidators = options.asyncValidator;\n      }\n      return new FormGroup(reducedControls, newOptions);\n    }\n    /**\n     * @description\n     * Constructs a new `FormRecord` instance. Accepts a single generic argument, which is an object\n     * containing all the keys and corresponding inner control types.\n     *\n     * @param controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param options Configuration options object for the `FormRecord`. The object should have the\n     * `AbstractControlOptions` type and might contain the following fields:\n     * * `validators`: A synchronous validator function, or an array of validator functions.\n     * * `asyncValidators`: A single async validator or array of async validator functions.\n     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'\n     * | submit').\n     */\n    record(controls, options = null) {\n      const reducedControls = this._reduceControls(controls);\n      // Cast to `any` because the inferred types are not as specific as Element.\n      return new FormRecord(reducedControls, options);\n    }\n    /**\n     * @description\n     * Constructs a new `FormControl` with the given state, validators and options. Sets\n     * `{nonNullable: true}` in the options to get a non-nullable control. Otherwise, the\n     * control will be nullable. Accepts a single generic argument, which is the type  of the\n     * control's value.\n     *\n     * @param formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or a `FormControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * @usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * {@example forms/ts/formBuilder/form_builder_example.ts region='disabled-control'}\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n      let newOptions = {};\n      if (!this.useNonNullable) {\n        return new FormControl(formState, validatorOrOpts, asyncValidator);\n      }\n      if (isAbstractControlOptions(validatorOrOpts)) {\n        // If the second argument is options, then they are copied.\n        newOptions = validatorOrOpts;\n      } else {\n        // If the other arguments are validators, they are copied into an options object.\n        newOptions.validators = validatorOrOpts;\n        newOptions.asyncValidators = asyncValidator;\n      }\n      return new FormControl(formState, {\n        ...newOptions,\n        nonNullable: true\n      });\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options. Accepts a single generic argument, which is the type of each control\n     * inside the array.\n     *\n     * @param controls An array of child controls or control configs. Each child control is given an\n     *     index when it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of such functions, or an\n     *     `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions.\n     */\n    array(controls, validatorOrOpts, asyncValidator) {\n      const createdControls = controls.map(c => this._createControl(c));\n      // Cast to `any` because the inferred types are not as specific as Element.\n      return new FormArray(createdControls, validatorOrOpts, asyncValidator);\n    }\n    /** @internal */\n    _reduceControls(controls) {\n      const createdControls = {};\n      Object.keys(controls).forEach(controlName => {\n        createdControls[controlName] = this._createControl(controls[controlName]);\n      });\n      return createdControls;\n    }\n    /** @internal */\n    _createControl(controls) {\n      if (controls instanceof FormControl) {\n        return controls;\n      } else if (controls instanceof AbstractControl) {\n        // A control; just return it\n        return controls;\n      } else if (Array.isArray(controls)) {\n        // ControlConfig Tuple\n        const value = controls[0];\n        const validator = controls.length > 1 ? controls[1] : null;\n        const asyncValidator = controls.length > 2 ? controls[2] : null;\n        return this.control(value, validator, asyncValidator);\n      } else {\n        // T or FormControlState<T>\n        return this.control(controls);\n      }\n    }\n    static ɵfac = function FormBuilder_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FormBuilder)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: FormBuilder,\n      factory: FormBuilder.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return FormBuilder;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @description\n * `NonNullableFormBuilder` is similar to {@link FormBuilder}, but automatically constructed\n * {@link FormControl} elements have `{nonNullable: true}` and are non-nullable.\n *\n * @publicApi\n */\nlet NonNullableFormBuilder = /*#__PURE__*/(() => {\n  class NonNullableFormBuilder {\n    static ɵfac = function NonNullableFormBuilder_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NonNullableFormBuilder)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NonNullableFormBuilder,\n      factory: () => (() => inject(FormBuilder).nonNullable)(),\n      providedIn: 'root'\n    });\n  }\n  return NonNullableFormBuilder;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * UntypedFormBuilder is the same as `FormBuilder`, but it provides untyped controls.\n */\nlet UntypedFormBuilder = /*#__PURE__*/(() => {\n  class UntypedFormBuilder extends FormBuilder {\n    group(controlsConfig, options = null) {\n      return super.group(controlsConfig, options);\n    }\n    /**\n     * Like `FormBuilder#control`, except the resulting control is untyped.\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n      return super.control(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Like `FormBuilder#array`, except the resulting array is untyped.\n     */\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n      return super.array(controlsConfig, validatorOrOpts, asyncValidator);\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵUntypedFormBuilder_BaseFactory;\n      return function UntypedFormBuilder_Factory(__ngFactoryType__) {\n        return (ɵUntypedFormBuilder_BaseFactory || (ɵUntypedFormBuilder_BaseFactory = i0.ɵɵgetInheritedFactory(UntypedFormBuilder)))(__ngFactoryType__ || UntypedFormBuilder);\n      };\n    })();\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: UntypedFormBuilder,\n      factory: UntypedFormBuilder.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UntypedFormBuilder;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the forms package.\n */\n/**\n * @publicApi\n */\nconst VERSION = /*#__PURE__*/new Version('20.1.6');\n\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](guide/forms)\n * @see [Template-driven Forms Guide](guide/forms)\n *\n * @publicApi\n */\nlet FormsModule = /*#__PURE__*/(() => {\n  class FormsModule {\n    /**\n     * @description\n     * Provides options for configuring the forms module.\n     *\n     * @param opts An object of configuration options\n     * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more\n     * correct, or to only call it `whenDisabled`, which is the legacy behavior.\n     */\n    static withConfig(opts) {\n      return {\n        ngModule: FormsModule,\n        providers: [{\n          provide: CALL_SET_DISABLED_STATE,\n          useValue: opts.callSetDisabledState ?? setDisabledStateDefault\n        }]\n      };\n    }\n    static ɵfac = function FormsModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FormsModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: FormsModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [ɵInternalFormsSharedModule]\n    });\n  }\n  return FormsModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](guide/forms)\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n *\n * @publicApi\n */\nlet ReactiveFormsModule = /*#__PURE__*/(() => {\n  class ReactiveFormsModule {\n    /**\n     * @description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more\n     * correct, or to only call it `whenDisabled`, which is the legacy behavior.\n     */\n    static withConfig(opts) {\n      return {\n        ngModule: ReactiveFormsModule,\n        providers: [{\n          provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n          useValue: opts.warnOnNgModelWithFormControl ?? 'always'\n        }, {\n          provide: CALL_SET_DISABLED_STATE,\n          useValue: opts.callSetDisabledState ?? setDisabledStateDefault\n        }]\n      };\n    }\n    static ɵfac = function ReactiveFormsModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ReactiveFormsModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ReactiveFormsModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [ɵInternalFormsSharedModule]\n    });\n  }\n  return ReactiveFormsModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { AbstractControl, AbstractControlDirective, AbstractFormGroupDirective, COMPOSITION_BUFFER_MODE, CheckboxControlValueAccessor, CheckboxRequiredValidator, ControlContainer, ControlEvent, DefaultValueAccessor, EmailValidator, FormArray, FormArrayName, FormBuilder, FormControl, FormControlDirective, FormControlName, FormGroup, FormGroupDirective, FormGroupName, FormRecord, FormResetEvent, FormSubmittedEvent, FormsModule, MaxLengthValidator, MaxValidator, MinLengthValidator, MinValidator, NG_ASYNC_VALIDATORS, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, NgSelectOption, NonNullableFormBuilder, NumberValueAccessor, PatternValidator, PristineChangeEvent, RadioControlValueAccessor, RangeValueAccessor, ReactiveFormsModule, RequiredValidator, SelectControlValueAccessor, SelectMultipleControlValueAccessor, StatusChangeEvent, TouchedChangeEvent, UntypedFormArray, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, VERSION, Validators, ValueChangeEvent, isFormArray, isFormControl, isFormGroup, isFormRecord, ɵInternalFormsSharedModule, ɵNgNoValidate, ɵNgSelectMultipleOption };\n","import {Component} from '@angular/core';\r\nimport {ApiResponse, ApiService} from '../../../services/api-service';\r\nimport {NgForm} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-commit-component',\r\n  templateUrl: './commit-component.html',\r\n  styleUrl: './commit-component.css',\r\n  standalone: false\r\n})\r\nexport class CommitComponent {\r\n  constructor(private apiService: ApiService, private router: Router) {}\r\n\r\n  submit(form: NgForm) {\r\n    if (!form.valid) {\r\n      return;\r\n    }\r\n\r\n    const path = form.value.directoryPath;\r\n\r\n    this.apiService.postCommit({path}).subscribe(\r\n      (response: ApiResponse) => {\r\n        void this.router.navigate(['/success'], {state: {data: response}});\r\n      },\r\n      (error) => {\r\n        if (error.status === 409 || error.status === 400 || error.status === 500) {\r\n          void this.router.navigate(['/request_error'], {state: {data: error.error}});\r\n        } else {\r\n          void this.router.navigate(['/request_error'], {state: {data: error}});\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n","<nav>\r\n  <form (ngSubmit)=\"submit(form)\" #form=\"ngForm\">\r\n  <div>\r\n    <label for=\"inputBox\">Enter the absolute path of the directory you want to commit:</label>\r\n    <input class=\"u-full-width\" type=\"text\" name=\"directoryPath\" ngModel #directoryPath=\"ngModel\" id=\"inputBox\" placeholder=\"Absolute Folder Path\" required>\r\n    <div *ngIf=\"form.submitted && directoryPath.invalid\" class=\"error\">\r\n      Directory path is required.\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <button type=\"submit\" class=\"button\">Submit</button>\r\n  </div>\r\n  </form>\r\n</nav>\r\n","import {Component, inject} from '@angular/core';\r\nimport {ApiService} from '../../../services/api-service';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-homepage-component',\r\n  templateUrl: './homepage-component.html',\r\n  styleUrl: './homepage-component.css',\r\n  standalone: false\r\n})\r\nexport class HomepageComponent {\r\n  constructor(private apiService: ApiService, private router: Router) {\r\n    this.router = inject(Router);\r\n  }\r\n\r\n  callCommit() {\r\n    void this.router.navigateByUrl('commit');\r\n  }\r\n\r\n  callRestore() {\r\n    void this.router.navigateByUrl('restore');\r\n  }\r\n}\r\n","<div>\r\n  <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\r\n    <button (click)=\"callCommit()\">Commit</button>\r\n    <button (click)=\"callRestore()\">Restore</button>\r\n  </nav>\r\n\r\n  <div>\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ApiResponse} from '../../services/api-service';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-results-success-component',\r\n  templateUrl: './results-success-component.html',\r\n  styleUrl: './results-success-component.css',\r\n  standalone: false\r\n})\r\nexport class ResultsSuccessComponent implements OnInit {\r\n  responseData?: ApiResponse;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.responseData = history.state.data;\r\n  }\r\n}\r\n","<p>Success</p>\r\n\r\n<ul *ngIf=\"responseData?.results?.length ?? 0 > 0; else noData\">\r\n  <li *ngFor=\"let result of responseData?.results\">{{result}}</li>\r\n</ul>\r\n<p>Message: {{ responseData?.message ? responseData?.message : '' }}</p>\r\n\r\n<ng-template #noData>\r\n  <p>No results found.</p>\r\n</ng-template>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ApiResponse} from '../../services/api-service';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-results-error-component',\r\n  templateUrl: './results-error-component.html',\r\n  styleUrl: './results-error-component.css',\r\n  standalone: false\r\n})\r\nexport class ResultsErrorComponent implements OnInit {\r\n  responseData?: ApiResponse;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.responseData = history.state.data;\r\n  }\r\n}\r\n","<h2>Error</h2>\r\n<p>Status: {{responseData?.status ?? 0}}</p>\r\n<ul *ngIf=\"responseData?.results?.length ?? 0 > 0; else noData\">\r\n  <li *ngFor=\"let result of responseData?.results\">{{result}}</li>\r\n</ul>\r\n<p>Message: {{ responseData?.message ? responseData?.message : '' }}</p>\r\n\r\n<ng-template #noData>\r\n  <p>No results found.</p>\r\n</ng-template>\r\n","import {Component} from '@angular/core';\r\nimport {ApiResponse, ApiService} from '../../../services/api-service';\r\nimport {NgForm} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-restore-component',\r\n  templateUrl: './restore-component.html',\r\n  styleUrl: './restore-component.css',\r\n  standalone: false\r\n})\r\nexport class RestoreComponent {\r\n  constructor(private apiService: ApiService, private router: Router) {}\r\n\r\n  submit(form: NgForm) {\r\n    if (!form.valid) {\r\n      return;\r\n    }\r\n\r\n    const vcPath = form.value.vcPath;\r\n    const destinationPath = form.value.destinationPath;\r\n\r\n    const paths = [vcPath, destinationPath];\r\n\r\n    this.apiService.postRestore(paths).subscribe(\r\n      (response: ApiResponse) => {\r\n        void this.router.navigate(['/success'], {state: {data: response}});\r\n      },\r\n      (error) => {\r\n        if (error.status === 409 || error.status === 400 || error.status === 500) {\r\n          void this.router.navigate(['/request_error'], {state: {data: error.error}});\r\n        } else {\r\n          void this.router.navigate(['/request_error'], {state: {data: error}});\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n","<nav>\r\n  <form (ngSubmit)=\"submit(form)\" #form=\"ngForm\">\r\n    <div>\r\n      <label for=\"inputBox1\">Enter the absolute path of the version control directory you want to restore:</label>\r\n      <input class=\"u-full-width\" type=\"text\" name=\"vcPath\" ngModel #vcPath=\"ngModel\" id=\"inputBox1\" placeholder=\"Absolute Folder Path\" required>\r\n      <div *ngIf=\"form.submitted && vcPath.invalid\" class=\"error\">\r\n        A version control directory path is required.\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <label for=\"inputBox2\">Enter the absolute path of the destination directory:</label>\r\n      <input class=\"u-full-width\" type=\"text\" name=\"destinationPath\" ngModel #destinationPath=\"ngModel\" id=\"inputBox2\" placeholder=\"Absolute Folder Path\" required>\r\n      <div *ngIf=\"form.submitted && destinationPath.invalid\" class=\"error\">\r\n        A destination directory path is required.\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\" class=\"button\">Submit</button>\r\n    </div>\r\n  </form>\r\n</nav>\r\n","import { Routes } from '@angular/router';\r\nimport { CommitComponent } from './api/features/commit/commit-component/commit-component';\r\nimport { HomepageComponent } from './api/features/home/homepage-component/homepage-component';\r\nimport {ResultsSuccessComponent} from './api/shared/results-success-component/results-success-component';\r\nimport {ResultsErrorComponent} from './api/shared/results-error-component/results-error-component';\r\nimport {RestoreComponent} from './api/features/restore/restore-component/restore-component';\r\n\r\n\r\nexport const routes: Routes = [\r\n  { path: '', component: HomepageComponent },\r\n  { path: 'commit', component: CommitComponent },\r\n  { path: 'restore', component: RestoreComponent },\r\n  { path: 'success', component: ResultsSuccessComponent },\r\n  { path: 'request_error', component: ResultsErrorComponent },\r\n  { path: '**', redirectTo: '' }\r\n];\r\n","import { ApplicationConfig, provideBrowserGlobalErrorListeners, provideZonelessChangeDetection } from '@angular/core';\r\nimport { provideRouter } from '@angular/router';\r\n\r\nimport { routes } from './app.routes';\r\nimport { provideClientHydration, withEventReplay } from '@angular/platform-browser';\r\nimport {provideHttpClient, withFetch} from '@angular/common/http';\r\n\r\nexport const appConfig: ApplicationConfig = {\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZonelessChangeDetection(),\r\n    provideRouter(routes), provideClientHydration(withEventReplay()),\r\n    provideHttpClient(withFetch())\r\n  ]\r\n};\r\n","import {Component, signal} from '@angular/core';\r\nimport {RouterModule} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterModule],\r\n  templateUrl: './app.html',\r\n  styleUrl: './app.css',\r\n  standalone: true\r\n})\r\nexport class App {\r\n  protected readonly title = signal('angular-app');\r\n}\r\n","<div>\r\n  <nav>\r\n        <a routerLink=\"\"></a>\r\n  </nav>\r\n\r\n  <div>\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n","import { bootstrapApplication } from '@angular/platform-browser';\r\nimport { appConfig } from './app/app.config';\r\nimport { App } from './app/app';\r\n\r\nbootstrapApplication(App, appConfig)\r\n  .catch((err) => console.error(err));\r\n"],"mappings":"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","names":["_currentInjector","getCurrentInjector","setCurrentInjector","injector","former","NOT_FOUND","isNotFound","NOT_FOUND","defaultEquals","a","b","activeConsumer","inNotificationPhase","epoch","postProducerCreatedFn","SIGNAL","setActiveConsumer","consumer","prev","getActiveConsumer","REACTIVE_NODE","producerAccessed","node","inNotificationPhase","activeConsumer","prevProducerLink","nextProducerLink","isRecomputing","prevConsumerLink","isValidLink","isLive","consumerIsLive","newLink","producerAddLiveConsumer","producerIncrementEpoch","epoch","producerUpdateValueVersion","consumerPollProducersForChange","producerMarkClean","producerNotifyConsumers","prev","link","consumer","consumerMarkDirty","producerUpdatesAllowed","consumerBeforeComputation","setActiveConsumer","consumerAfterComputation","prevConsumer","producersTail","toRemove","producerRemoveLiveConsumerLink","producer","seenVersion","consumerDestroy","consumersTail","wasLive","nextProducer","nextConsumer","producerLink","runPostProducerCreatedFn","postProducerCreatedFn","isValidLink","checkLink","consumer","producersTail","link","createComputed","computation","equal","node","COMPUTED_NODE","computed","producerUpdateValueVersion","producerAccessed","ERRORED","SIGNAL","runPostProducerCreatedFn","UNSET","COMPUTING","__spreadProps","__spreadValues","REACTIVE_NODE","defaultEquals","oldValue","prevConsumer","consumerBeforeComputation","newValue","wasEqual","setActiveConsumer","err","consumerAfterComputation","defaultThrowError","throwInvalidWriteToSignalErrorFn","throwInvalidWriteToSignalError","setThrowInvalidWriteToSignalError","fn","postSignalSetFn","createSignal","initialValue","SIGNAL_NODE","getter","signalGetFn","signalSetFn","updateFn","signalUpdateFn","signalGetFn","node","producerAccessed","signalSetFn","newValue","producerUpdatesAllowed","throwInvalidWriteToSignalError","signalValueChanged","signalUpdateFn","updater","SIGNAL_NODE","__spreadProps","__spreadValues","REACTIVE_NODE","defaultEquals","signalValueChanged","node","producerIncrementEpoch","producerNotifyConsumers","postSignalSetFn","isFunction","value","createErrorClass","createImpl","ctorFunc","instance","UnsubscriptionError","createErrorClass","_super","errors","err","i","arrRemove","arr","item","index","Subscription","_Subscription","initialTeardown","errors","_parentage","parent","initialFinalizer","isFunction","e","UnsubscriptionError","_finalizers","finalizer","execFinalizer","err","teardown","_a","arrRemove","empty","EMPTY_SUBSCRIPTION","isSubscription","value","config","timeoutProvider","handler","timeout","args","delegate","handle","reportUnhandledError","err","timeoutProvider","onUnhandledError","config","noop","COMPLETE_NOTIFICATION","createNotification","errorNotification","error","nextNotification","value","kind","context","errorContext","cb","config","isRoot","errorThrown","error","captureError","err","Subscriber","Subscription","destination","isSubscription","EMPTY_OBSERVER","next","error","complete","SafeSubscriber","value","handleStoppedNotification","nextNotification","err","errorNotification","COMPLETE_NOTIFICATION","_bind","bind","fn","thisArg","ConsumerObserver","partialObserver","handleUnhandledError","observerOrNext","isFunction","context","config","captureError","reportUnhandledError","defaultErrorHandler","notification","subscriber","onStoppedNotification","timeoutProvider","noop","observable","identity","x","pipe","fns","pipeFromArray","identity","input","prev","fn","Observable","subscribe","operator","observable","observerOrNext","error","complete","subscriber","isSubscriber","SafeSubscriber","errorContext","source","sink","err","next","promiseCtor","getPromiseCtor","resolve","reject","value","_a","operations","pipeFromArray","x","config","isObserver","isFunction","Subscriber","isSubscription","hasLift","source","isFunction","operate","init","liftedSource","err","createOperatorSubscriber","destination","onNext","onComplete","onError","onFinalize","OperatorSubscriber","Subscriber","shouldUnsubscribe","value","err","_a","closed","refCount","operate","source","subscriber","connection","refCounter","createOperatorSubscriber","sharedConnection","conn","ConnectableObservable","Observable","source","subjectFactory","hasLift","subscriber","subject","_connection","connection","Subscription","createOperatorSubscriber","err","refCount","ObjectUnsubscribedError","createErrorClass","_super","Subject","Observable","operator","subject","AnonymousSubject","ObjectUnsubscribedError","value","errorContext","observer","err","observers","_a","subscriber","hasError","isStopped","EMPTY_SUBSCRIPTION","Subscription","arrRemove","thrownError","observable","destination","source","_b","BehaviorSubject","Subject","_value","subscriber","subscription","hasError","thrownError","value","EMPTY","Observable","subscriber","isScheduler","value","isFunction","last","arr","popResultSelector","args","isFunction","popScheduler","isScheduler","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","reject","fulfilled","step","e","rejected","result","__values","o","s","m","i","__await","v","__asyncGenerator","thisArg","_arguments","generator","g","i","q","verb","awaitReturn","reject","n","f","a","b","resume","step","e","settle","r","fulfill","value","__asyncValues","o","m","i","__values","verb","n","v","resolve","reject","settle","d","isArrayLike","x","isPromise","value","isFunction","isInteropObservable","input","isFunction","observable","isAsyncIterable","obj","isFunction","createInvalidObservableTypeError","input","getSymbolIterator","iterator","isIterable","input","isFunction","iterator","readableStreamLikeToAsyncGenerator","readableStream","__asyncGenerator","reader","value","done","__await","isReadableStreamLike","obj","isFunction","innerFrom","input","Observable","isInteropObservable","fromInteropObservable","isArrayLike","fromArrayLike","isPromise","fromPromise","isAsyncIterable","fromAsyncIterable","isIterable","fromIterable","isReadableStreamLike","fromReadableStreamLike","createInvalidObservableTypeError","obj","subscriber","obs","observable","isFunction","array","i","promise","value","err","reportUnhandledError","iterable","asyncIterable","process","readableStream","readableStreamLikeToAsyncGenerator","asyncIterable_1","asyncIterable_1_1","e_1","_a","__awaiter","__asyncValues","e_1_1","executeSchedule","parentSubscription","scheduler","work","delay","repeat","scheduleSubscription","observeOn","scheduler","delay","operate","source","subscriber","createOperatorSubscriber","value","executeSchedule","err","subscribeOn","scheduler","delay","operate","source","subscriber","scheduleObservable","input","scheduler","innerFrom","subscribeOn","observeOn","schedulePromise","input","scheduler","innerFrom","subscribeOn","observeOn","scheduleArray","input","scheduler","Observable","subscriber","i","scheduleIterable","input","scheduler","Observable","subscriber","iterator","executeSchedule","value","done","err","isFunction","scheduleAsyncIterable","input","scheduler","Observable","subscriber","executeSchedule","iterator","result","scheduleReadableStreamLike","input","scheduler","scheduleAsyncIterable","readableStreamLikeToAsyncGenerator","scheduled","input","scheduler","isInteropObservable","scheduleObservable","isArrayLike","scheduleArray","isPromise","schedulePromise","isAsyncIterable","scheduleAsyncIterable","isIterable","scheduleIterable","isReadableStreamLike","scheduleReadableStreamLike","createInvalidObservableTypeError","from","input","scheduler","scheduled","innerFrom","of","args","scheduler","popScheduler","from","throwError","errorOrErrorFactory","scheduler","errorFactory","isFunction","init","subscriber","Observable","isObservable","obj","Observable","isFunction","EmptyError","createErrorClass","_super","map","project","thisArg","operate","source","subscriber","index","createOperatorSubscriber","value","isArray","callOrApply","fn","args","mapOneOrManyArgs","map","isArray","getPrototypeOf","objectProto","getKeys","argsArgArrayOrObject","args","first","isPOJO","keys","key","obj","createObject","keys","values","result","key","i","combineLatest","args","scheduler","popScheduler","resultSelector","popResultSelector","observables","keys","argsArgArrayOrObject","from","result","Observable","combineLatestInit","values","createObject","identity","mapOneOrManyArgs","valueTransform","subscriber","maybeSchedule","length","active","remainingFirstValues","i","source","hasFirstValue","createOperatorSubscriber","value","execute","subscription","executeSchedule","mergeInternals","source","subscriber","project","concurrent","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","index","isComplete","checkComplete","outerNext","value","doInnerSub","innerComplete","innerFrom","createOperatorSubscriber","innerValue","bufferedValue","executeSchedule","err","mergeMap","project","resultSelector","concurrent","isFunction","a","i","map","b","ii","innerFrom","operate","source","subscriber","mergeInternals","mergeAll","concurrent","mergeMap","identity","concatAll","mergeAll","concat","args","concatAll","from","popScheduler","defer","observableFactory","Observable","subscriber","innerFrom","forkJoin","args","resultSelector","popResultSelector","sources","keys","argsArgArrayOrObject","result","Observable","subscriber","length","values","remainingCompletions","remainingEmissions","sourceIndex","hasValue","innerFrom","createOperatorSubscriber","value","createObject","mapOneOrManyArgs","filter","predicate","thisArg","operate","source","subscriber","index","createOperatorSubscriber","value","catchError","selector","operate","source","subscriber","innerSub","syncUnsub","handledResult","createOperatorSubscriber","err","innerFrom","scanInternals","accumulator","seed","hasSeed","emitOnNext","emitBeforeComplete","source","subscriber","hasState","state","index","createOperatorSubscriber","value","i","concatMap","project","resultSelector","isFunction","mergeMap","defaultIfEmpty","defaultValue","operate","source","subscriber","hasValue","createOperatorSubscriber","value","take","count","EMPTY","operate","source","subscriber","seen","createOperatorSubscriber","value","throwIfEmpty","errorFactory","defaultErrorFactory","operate","source","subscriber","hasValue","createOperatorSubscriber","value","EmptyError","finalize","callback","operate","source","subscriber","first","predicate","defaultValue","hasDefaultValue","source","filter","v","identity","take","defaultIfEmpty","throwIfEmpty","EmptyError","takeLast","count","EMPTY","operate","source","subscriber","buffer","createOperatorSubscriber","value","last","predicate","defaultValue","hasDefaultValue","source","filter","v","identity","takeLast","defaultIfEmpty","throwIfEmpty","EmptyError","scan","accumulator","seed","operate","scanInternals","startWith","values","scheduler","popScheduler","operate","source","subscriber","concat","switchMap","project","resultSelector","operate","source","subscriber","innerSubscriber","index","isComplete","checkComplete","createOperatorSubscriber","value","innerIndex","outerIndex","innerFrom","innerValue","takeUntil","notifier","operate","source","subscriber","innerFrom","createOperatorSubscriber","noop","tap","observerOrNext","error","complete","tapObserver","isFunction","operate","source","subscriber","_a","isUnsub","createOperatorSubscriber","value","err","_b","identity","untracked","nonReactiveReadsFn","prevConsumer","setActiveConsumer","XSS_SECURITY_URL","RuntimeError","code","message","formatRuntimeError","formatRuntimeErrorCode","_global","getClosureSafeProperty","objWithPropertyToExtract","key","fillProperties","target","source","stringify","token","name","result","newLineIndex","concatStringsWithSpace","before","after","__forward_ref__","getClosureSafeProperty","forwardRef","forwardRefFn","stringify","resolveForwardRef","type","isForwardRef","fn","assertDefined","actual","msg","throwError","expected","comparison","ɵɵdefineInjectable","opts","ɵɵdefineInjector","options","getInjectableDef","type","getOwnDefinition","NG_PROV_DEF","isInjectable","field","getInheritedInjectableDef","def","getInjectorDef","NG_INJ_DEF","getClosureSafeProperty","InjectionToken","_desc","ɵɵdefineInjectable","isEnvironmentProviders","value","NG_COMP_DEF","getClosureSafeProperty","NG_DIR_DEF","NG_PIPE_DEF","NG_MOD_DEF","NG_FACTORY_DEF","NG_ELEMENT_ID","NG_ENV_ID","renderStringify","stringifyForError","NG_RUNTIME_ERROR_CODE","getClosureSafeProperty","NG_RUNTIME_ERROR_MESSAGE","NG_TOKEN_PATH","cyclicDependencyError","token","path","createRuntimeError","throwProviderNotFoundError","token","injectorName","RuntimeError","prependTokenToDependencyPath","error","NG_TOKEN_PATH","currentPath","pathStr","assertDefined","stringifyForError","augmentRuntimeError","source","tokenPath","errorCode","NG_RUNTIME_ERROR_CODE","message","NG_RUNTIME_ERROR_MESSAGE","formatErrorMessage","createRuntimeError","code","path","getRuntimeErrorCode","text","pathDetails","sourceDetails","formatRuntimeError","_injectImplementation","getInjectImplementation","setInjectImplementation","impl","previous","injectRootLimpMode","notFoundValue","flags","injectableDef","getInjectableDef","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","DI_DECORATOR_FLAG","RetrievingInjector","injector","token","options","flags","convertToBitFlags","e","isNotFound","injectInjectorOnly","currentInjector","getCurrentInjector","RuntimeError","injectRootLimpMode","convertToInjectOptions","value","ɵɵinject","getInjectImplementation","resolveForwardRef","inject","token","options","ɵɵinject","convertToBitFlags","flags","convertToInjectOptions","injectArgs","types","args","i","arg","resolveForwardRef","RuntimeError","type","j","meta","flag","getInjectFlag","attachInjectFlag","decorator","DI_DECORATOR_FLAG","getFactoryDef","throwNotFound","hasFactoryDef","NG_FACTORY_DEF","deepForEach","input","fn","value","addToArray","arr","index","removeFromArray","arrayInsert2","array","index","value1","value2","end","previousEnd","keyValueArraySet","keyValueArray","key","value","keyValueArrayIndexOf","keyValueArrayGet","_arrayIndexOfSorted","shift","start","middle","current","EMPTY_OBJ","EMPTY_ARRAY","ENVIRONMENT_INITIALIZER","InjectionToken","INJECTOR$1","INJECTOR_DEF_TYPES","NullInjector","token","notFoundValue","THROW_IF_NOT_FOUND","error","createRuntimeError","getNgModuleDef","type","NG_MOD_DEF","getComponentDef","type","NG_COMP_DEF","getDirectiveDef","type","NG_DIR_DEF","getPipeDef","NG_PIPE_DEF","makeEnvironmentProviders","providers","provideEnvironmentInitializer","initializerFn","ENVIRONMENT_INITIALIZER","importProvidersFrom","sources","internalImportProvidersFrom","checkForStandaloneCmp","providersOut","dedup","injectorTypesWithProviders","collectProviders","provider","deepForEach","source","internalSource","walkProviderTree","processInjectorTypesWithProviders","typesWithProviders","visitor","i","ngModule","deepForEachProvider","container","parents","resolveForwardRef","defType","injDef","getInjectorDef","cmpDef","getComponentDef","isDuplicate","deps","dep","importTypesWithProviders","imported","factory","getFactoryDef","EMPTY_ARRAY","INJECTOR_DEF_TYPES","ɵɵinject","defProviders","injectorType","deepForEachProvider","providers","fn","provider","isEnvironmentProviders","USE_VALUE","getClosureSafeProperty","isValueProvider","value","isExistingProvider","isFactoryProvider","isTypeProvider","isClassProvider","INJECTOR_SCOPE","InjectionToken","NOT_YET","CIRCULAR","NULL_INJECTOR","getNullInjector","NullInjector","EnvironmentInjector","R3Injector","parent","source","scopes","forEachSingleProvider","INJECTOR$1","makeRecord","record","INJECTOR_DEF_TYPES","EMPTY_ARRAY","token","options","flags","convertToBitFlags","THROW_IF_NOT_FOUND","e","isNotFound","assertNotDestroyed","prevConsumer","setActiveConsumer","service","onDestroyHooks","hook","callback","previousInjector","setCurrentInjector","previousInjectImplementation","setInjectImplementation","prevInjectContext","notFoundValue","NG_ENV_ID","def","couldBeInjectableType","getInjectableDef","injectableDefOrInjectorDefFactory","nextInjector","error","errorCode","getRuntimeErrorCode","RuntimeError","initializers","ENVIRONMENT_INITIALIZER","initializer","tokens","records","stringify","resolveForwardRef","providerToRecord","multiRecord","injectArgs","cyclicDependencyError","hasOnDestroy","providedIn","destroyCBIdx","injectableDef","factory","getFactoryDef","getUndecoratedInjectableFactory","inheritedInjectableDef","getInheritedInjectableDef","providerToFactory","ngModuleType","unwrappedProvider","_","ɵɵinject","classRef","hasDeps","injector","multi","runInInjectionContext","internalInjector","RetrievingInjector","prevInjectorProfilerContext","prevInjector","isInInjectionContext","getInjectImplementation","getCurrentInjector","HOST","TVIEW","FLAGS","PARENT","NEXT","T_HOST","HYDRATION","CLEANUP","CONTEXT","INJECTOR","ENVIRONMENT","RENDERER","CHILD_HEAD","CHILD_TAIL","DECLARATION_VIEW","DECLARATION_COMPONENT_VIEW","DECLARATION_LCONTAINER","PREORDER_HOOK_FLAGS","QUERIES","ID","EMBEDDED_VIEW_INJECTOR","ON_DESTROY_HOOKS","EFFECTS_TO_SCHEDULE","EFFECTS","REACTIVE_TEMPLATE_CONSUMER","AFTER_RENDER_SEQUENCES_TO_ADD","HEADER_OFFSET","TYPE","DEHYDRATED_VIEWS","NATIVE","VIEW_REFS","MOVED_VIEWS","CONTAINER_HEADER_OFFSET","isLView","value","isLContainer","isContentQueryHost","tNode","isComponentHost","isDirectiveHost","isComponentDef","def","isRootView","target","isDestroyed","lView","FLAGS","SVG_NAMESPACE","MATH_ML_NAMESPACE","unwrapRNode","value","HOST","getNativeByIndex","index","lView","unwrapRNode","getNativeByTNode","tNode","getTNode","tView","index","load","view","getComponentLViewByIndex","nodeIndex","hostView","slotValue","isLView","HOST","viewAttachedToChangeDetector","view","FLAGS","viewAttachedToContainer","isLContainer","PARENT","getConstant","consts","index","resetPreOrderHookFlags","lView","PREORDER_HOOK_FLAGS","markViewForRefresh","markAncestorsForTraversal","walkUpViews","nestingLevel","currentView","DECLARATION_VIEW","requiresRefreshOrTraversal","REACTIVE_TEMPLATE_CONSUMER","updateAncestorTraversalFlagsOnAttach","ENVIRONMENT","parent","getLViewParent","storeLViewOnDestroy","onDestroyCallback","isDestroyed","RuntimeError","ON_DESTROY_HOOKS","removeLViewOnDestroy","destroyCBIdx","getOrCreateLViewCleanup","CLEANUP","getOrCreateTViewCleanup","tView","instructionState","createLFrame","CheckNoChangesMode","_checkNoChangesMode","_isRefreshingViews","getElementDepthCount","increaseElementDepthCount","decreaseElementDepthCount","getBindingsEnabled","isInSkipHydrationBlock","isSkipHydrationRootTNode","tNode","enterSkipHydrationBlock","tNode","instructionState","leaveSkipHydrationBlock","instructionState","getLView","getTView","ɵɵrestoreView","viewToRestore","CONTEXT","ɵɵresetView","value","getCurrentTNode","currentTNode","getCurrentTNodePlaceholderOk","getCurrentParentTNode","lFrame","setCurrentTNode","tNode","isParent","isCurrentTNodeParent","setCurrentTNodeAsNotParent","getContextLView","setIsInCheckNoChangesMode","mode","throwError","_checkNoChangesMode","isRefreshingViews","_isRefreshingViews","setIsRefreshingViews","prev","setBindingIndex","value","instructionState","nextBindingIndex","incrementBindingIndex","count","lFrame","index","isInI18nBlock","setBindingRootForHostBindings","bindingRootIndex","currentDirectiveIndex","lFrame","instructionState","setCurrentDirectiveIndex","getCurrentDirectiveIndex","getCurrentDirectiveDef","tData","setCurrentQueryIndex","value","instructionState","getDeclarationTNode","lView","tView","TVIEW","T_HOST","enterDI","tNode","flags","parentTNode","parentLView","DECLARATION_VIEW","lFrame","allocLFrame","enterView","newView","newLFrame","currentLFrame","childLFrame","createLFrame","parent","leaveViewLight","oldLFrame","leaveDI","leaveView","nextContextImpl","level","walkUpViews","CONTEXT","getSelectedIndex","setSelectedIndex","index","getSelectedTNode","getTNode","getNamespace","instructionState","_wasLastNodeCreated","wasLastNodeCreated","lastNodeWasCreated","flag","createInjector","defType","parent","additionalProviders","name","injector","createInjectorWithoutInjectorInstances","scopes","providers","EMPTY_ARRAY","importProvidersFrom","stringify","R3Injector","getNullInjector","Injector","_Injector","THROW_IF_NOT_FOUND","NullInjector","options","ɵɵdefineInjectable","ɵɵinject","INJECTOR$1","DOCUMENT","InjectionToken","DestroyRef","injectDestroyRef","NodeInjectorDestroyRef","_lView","isDestroyed","callback","lView","storeLViewOnDestroy","removeLViewOnDestroy","getLView","ErrorHandler","error","INTERNAL_APPLICATION_ERROR_HANDLER","inject","EnvironmentInjector","userErrorHandler","e","errorHandlerEnvironmentInitializer","ENVIRONMENT_INITIALIZER","globalErrorListeners","window","errorHandler","rejectionListener","errorListener","setupEventListeners","provideBrowserGlobalErrorListeners","makeEnvironmentProviders","provideEnvironmentInitializer","signal","initialValue","options","get","set","update","createSignal","signalFn","node","SIGNAL","signalAsReadonlyFn","readonlyFn","ChangeDetectionScheduler","ZONELESS_ENABLED","InjectionToken","ZONELESS_SCHEDULER_DISABLED","InjectionToken","SCHEDULE_IN_ROOT_ZONE","ViewContext","view","node","injectViewContext","getLView","getCurrentTNode","PendingTasksInternal","BehaviorSubject","Observable","subscriber","taskId","ɵɵdefineInjectable","PendingTasks","inject","ChangeDetectionScheduler","INTERNAL_APPLICATION_ERROR_HANDLER","fn","removeTask","noop","args","EffectScheduler","ZoneAwareEffectScheduler","handle","zone","queue","ranOneEffect","Attribute","noSideEffects","fn","PARAMETERS","makeMetadataCtor","props","args","values","propName","makeParamDecorator","name","parentClass","noSideEffects","metaCtor","ParamDecoratorFactory","annotationInstance","ParamDecorator","cls","unusedKey","index","parameters","PARAMETERS","Optional","attachInjectFlag","makeParamDecorator","SkipSelf","attachInjectFlag","makeParamDecorator","isType","v","SimpleChange","previousValue","currentValue","firstChange","applyValueToInputField","instance","inputSignalNode","privateName","value","ɵɵNgOnChangesFeature","ɵɵNgOnChangesFeatureImpl","NgOnChangesFeatureImpl","definition","ngOnChangesSetInput","rememberChangeHistoryAndInvokeOnChangesHook","simpleChangesStore","getSimpleChangesStore","current","previous","EMPTY_OBJ","key","publicName","declaredName","setSimpleChangesStore","previousChange","SIMPLE_CHANGES_STORE","store","profilerCallbacks","profiler","event","instance","eventFn","i","profilerCallbacks","profilerCallback","registerPreOrderHooks","directiveIndex","directiveDef","tView","ngOnChanges","ngOnInit","ngDoCheck","wrappedOnChanges","NgOnChangesFeatureImpl","registerPostOrderHooks","tNode","end","lifecycleHooks","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnDestroy","executeCheckHooks","lView","hooks","nodeIndex","callHooks","executeInitAndCheckHooks","initPhase","FLAGS","incrementInitPhaseFlags","flags","currentView","arr","currentNodeIndex","startIndex","PREORDER_HOOK_FLAGS","nodeIndexLimit","max","lastNodeIndexFound","callHook","callHookInternal","directive","hook","prevConsumer","setActiveConsumer","isInitHook","NO_PARENT_INJECTOR","NodeInjectorFactory","factory","isViewProvider","injectImplementation","name","hasClassInput","tNode","hasStyleInput","setUpAttributes","renderer","native","attrs","i","value","namespaceURI","attrName","attrVal","isAnimationProp","isNameOnlyAttributeMarker","marker","name","mergeHostAttrs","dst","src","srcMarker","item","mergeHostAttribute","key1","key2","markerInsertPosition","dstValue","hasParentInjector","parentLocation","NO_PARENT_INJECTOR","getParentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","location","startView","viewOffset","parentView","DECLARATION_VIEW","includeViewProviders","setIncludeViewProviders","v","oldValue","BLOOM_SIZE","BLOOM_MASK","BLOOM_BUCKET_BITS","nextNgElementId","NOT_FOUND","bloomAdd","injectorIndex","tView","type","id","NG_ELEMENT_ID","bloomHash","mask","getOrCreateNodeInjectorForNode","tNode","lView","existingInjectorIndex","getInjectorIndex","TVIEW","insertBloom","parentLoc","getParentInjectorLocation","parentIndex","parentLView","parentData","arr","footer","declarationViewOffset","parentTNode","lViewCursor","getTNodeFromLView","diPublicInInjector","token","injectAttributeImpl","attrNameToInject","attrsLength","notFoundValueOrThrow","notFoundValue","flags","throwProviderNotFoundError","lookupTokenUsingModuleInjector","moduleInjector","INJECTOR","previousInjectImplementation","setInjectImplementation","injectRootLimpMode","getOrCreateInjectable","FLAGS","embeddedInjectorValue","lookupTokenUsingEmbeddedInjector","lookupTokenUsingNodeInjector","bloomHashBitOrFactory","enterDI","leaveDI","previousTView","hostTElementNode","DECLARATION_COMPONENT_VIEW","T_HOST","shouldSearchParent","bloomHasToken","instance","searchTokensOnInjector","currentTView","canAccessViewProviders","isComponentHost","isHostSpecialCase","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","nodeProviderIndexes","tInjectables","injectablesStart","directivesStart","directiveEnd","cptViewProvidersCount","startingIndex","endIndex","providerTokenOrDef","dirDef","isComponentDef","getNodeInjectable","lView","tView","index","tNode","flags","value","tData","NodeInjectorFactory","factory","token","stringifyForError","cyclicDependencyError","previousIncludeViewProviders","setIncludeViewProviders","prevInjectContext","previousInjectImplementation","setInjectImplementation","success","enterDI","registerPreOrderHooks","leaveDI","bloomHashBitOrFactory","tokenId","NG_ELEMENT_ID","BLOOM_MASK","createNodeInjector","bloomHasToken","bloomHash","injectorIndex","injectorView","mask","BLOOM_BUCKET_BITS","shouldSearchParent","isFirstHostTNode","NodeInjector","_tNode","_lView","token","notFoundValue","flags","getOrCreateInjectable","convertToBitFlags","createNodeInjector","getCurrentTNode","getLView","ɵɵgetInheritedFactory","type","noSideEffects","ownConstructor","ownFactory","NG_FACTORY_DEF","getFactoryOf","objectPrototype","parent","factory","t","isForwardRef","resolveForwardRef","getFactoryDef","lookupTokenUsingEmbeddedInjector","tNode","lView","currentTNode","currentLView","FLAGS","isRootView","nodeInjectorValue","lookupTokenUsingNodeInjector","NOT_FOUND","parentTNode","embeddedViewInjector","EMBEDDED_VIEW_INJECTOR","embeddedViewInjectorValue","getTNodeFromLView","DECLARATION_VIEW","tView","TVIEW","tViewType","T_HOST","ɵɵinjectAttribute","attrNameToInject","injectAttributeImpl","injectElementRef","createElementRef","getCurrentTNode","getLView","tNode","lView","ElementRef","getNativeByTNode","nativeElement","SKIP_HYDRATION_ATTR_NAME","SKIP_HYDRATION_ATTR_NAME_LOWER_CASE","hasSkipHydrationAttrOnTNode","tNode","attrs","i","value","hasSkipHydrationAttrOnRElement","rNode","hasInSkipHydrationBlockFlag","isInSkipHydrationBlock","currentTNode","ChangeDetectionStrategy","TRACKED_LVIEWS","uniqueIdCounter","getUniqueLViewId","registerLView","lView","ID","unregisterLView","lView","TRACKED_LVIEWS","ID","MONKEY_PATCH_KEY_NAME","attachPatchData","target","data","isLView","ID","registerLView","getFirstLContainer","lView","getNearestLContainer","CHILD_HEAD","getNextLContainer","container","NEXT","viewOrContainer","isLContainer","DOCUMENT","setDocument","document","getDocument","RuntimeError","APP_ID","InjectionToken","DEFAULT_APP_ID","PLATFORM_INITIALIZER","PLATFORM_ID","CSP_NONCE","InjectionToken","getDocument","initTransferState","transferState","TransferState","retrieveTransferredState","getDocument","inject","APP_ID","ɵɵdefineInjectable","key","defaultValue","value","callback","e","doc","appId","script","REFERENCE_NODE_HOST","REFERENCE_NODE_BODY","NODE_NAVIGATION_STEP_FIRST_CHILD","NODE_NAVIGATION_STEP_NEXT_SIBLING","ELEMENT_CONTAINERS","TEMPLATES","CONTAINERS","MULTIPLIER","NUM_ROOT_NODES","TEMPLATE_ID","NODES","DISCONNECTED_NODES","DEFER_BLOCK_ID","DEFER_BLOCK_STATE$1","DEFER_PARENT_BLOCK_ID","IS_HYDRATION_DOM_REUSE_ENABLED","InjectionToken","PRESERVE_HOST_CONTENT_DEFAULT","PRESERVE_HOST_CONTENT","IS_EVENT_REPLAY_ENABLED","InjectionToken","EVENT_REPLAY_ENABLED_DEFAULT","IS_INCREMENTAL_HYDRATION_ENABLED","JSACTION_BLOCK_ELEMENT_MAP","DEFER_BLOCK_SSR_ID_ATTRIBUTE","sharedStashFunction","rEl","eventType","listenerFn","el","eventListenerMap","eventListeners","sharedMapFunction","jsActionMap","blockName","DEFER_BLOCK_SSR_ID_ATTRIBUTE","blockSet","removeListeners","el","Attribute","DEFER_BLOCK_SSR_ID_ATTRIBUTE","JSACTION_EVENT_CONTRACT","InjectionToken","invokeListeners","event","currentTarget","handlerFns","handler","stashEventListeners","setStashFn","appId","fn","isStashEventListenerImplEnabled","_stashEventListenerImpl","lView","target","eventName","wrappedListener","stashEventListenerImpl","enableStashEventListenerImpl","INJECTOR","APP_ID","DEHYDRATED_BLOCK_REGISTRY","isDetachedByI18n","tNode","TRANSFER_STATE_TOKEN_ID","NGH_DATA_KEY","TRANSFER_STATE_DEFER_BLOCKS_INFO","NGH_DEFER_BLOCKS_KEY","NGH_ATTR_NAME","SSR_CONTENT_INTEGRITY_MARKER","_retrieveHydrationInfoImpl","retrieveHydrationInfoImpl","rNode","injector","isRootView","nghAttrValue","componentViewNgh","rootViewNgh","rootNgh","remainingNgh","data","transferState","TransferState","NGH_DATA_KEY","dehydratedView","setSegmentHead","enableRetrieveHydrationInfoImpl","retrieveHydrationInfo","getLNodeForHydration","viewRef","lView","TVIEW","HEADER_OFFSET","getTextNodeContent","node","processTextNodeMarkersBeforeHydration","doc","getDocument","commentNodesIterator","content","currentNode","nodes","setSegmentHead","hydrationInfo","index","node","getSegmentHead","isIncrementalHydrationEnabled","injector","IS_INCREMENTAL_HYDRATION_ENABLED","getNgContainerSize","hydrationInfo","index","data","size","ELEMENT_CONTAINERS","CONTAINERS","calcSerializedContainerSize","getSerializedContainerViews","hydrationInfo","index","CONTAINERS","calcSerializedContainerSize","views","numNodes","view","NUM_ROOT_NODES","MULTIPLIER","initDisconnectedNodes","nodeIds","DISCONNECTED_NODES","isDisconnectedNode$1","canHydrateNode","lView","tNode","HYDRATION","isInSkipHydrationBlock","isDetachedByI18n","HEADER_OFFSET","getParentBlockHydrationQueue","deferBlockId","injector","dehydratedBlockRegistry","DEHYDRATED_BLOCK_REGISTRY","deferBlockParents","TransferState","NGH_DEFER_BLOCKS_KEY","isTopMostDeferBlock","currentBlockId","parentBlockPromise","hydrationQueue","hydratingParentBlock","DEFER_PARENT_BLOCK_ID","isSsrContentsIntegrity","node","SSR_CONTENT_INTEGRITY_MARKER","skipTextNodes","verifySsrContentsIntegrity","doc","beforeBody","endOfHead","RuntimeError","refreshContentQueries","tView","lView","contentQueries","prevConsumer","setActiveConsumer","i","queryStartIdx","directiveDefIdx","directiveDef","setCurrentQueryIndex","executeViewQueryFn","flags","viewQueryFn","component","executeContentQueries","tNode","isContentQueryHost","start","end","directiveIndex","def","directiveInstance","ViewEncapsulation","policy","getPolicy","_global","s","trustedScriptURLFromStringBypass","url","getPolicy","SafeValueImpl","changingThisBreaksApplicationSecurity","XSS_SECURITY_URL","unwrapSafeValue","value","SafeValueImpl","allowSanitizationBypassAndThrow","type","actualType","getSanitizationBypassType","XSS_SECURITY_URL","SAFE_URL_PATTERN","_sanitizeUrl","url","SecurityContext","ɵɵsanitizeUrl","unsafeUrl","sanitizer","getSanitizer","SecurityContext","allowSanitizationBypassAndThrow","unwrapSafeValue","_sanitizeUrl","renderStringify","ɵɵsanitizeResourceUrl","unsafeResourceUrl","trustedScriptURLFromStringBypass","RuntimeError","getUrlSanitizer","tag","prop","ɵɵsanitizeResourceUrl","ɵɵsanitizeUrl","ɵɵsanitizeUrlOrResourceUrl","unsafeUrl","getSanitizer","lView","getLView","ENVIRONMENT","COMMENT_DISALLOWED","COMMENT_DELIMITER","COMMENT_DELIMITER_ESCAPED","escapeCommentText","value","text","ɵɵresolveBody","element","maybeUnwrapFn","value","classIndexOf","className","classToSearch","startingIndex","end","foundIndex","length","NG_TEMPLATE_SELECTOR","isCssClassMatching","tNode","attrs","cssClassToMatch","isProjectionMode","i","isInlineTemplate","item","hasTagAndTypeMatch","currentSelector","tagNameToCompare","isNodeMatchingSelector","selector","mode","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","current","isPositive","selectorAttrValue","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","name","bindingsMode","maybeAttrName","value","matchTemplateAttribute","isNodeMatchingSelectorList","getNameOnlyMarkerIndex","nodeAttrs","i","nodeAttr","isNameOnlyAttributeMarker","matchTemplateAttribute","attrs","name","attr","maybeWrapInNotSelector","isNegativeMode","chunk","stringifyCSSSelector","selector","result","i","mode","currentChunk","valueOrMarker","attrValue","isPositive","stringifyCSSSelectorList","selectorList","extractAttrsAndClassesFromSelector","attrs","classes","NO_CHANGE","createTextNode","renderer","value","updateTextNode","rNode","createCommentNode","escapeCommentText","createElementNode","name","namespace","nativeInsertBefore","parent","child","beforeNode","isMove","nativeAppendChild","nativeAppendOrInsertBefore","nativeRemoveNode","isHostElement","clearElementContents","rElement","writeDirectStyle","element","newValue","writeDirectClass","setupStaticAttributes","tNode","mergedAttrs","styles","setUpAttributes","createTView","type","declTNode","templateFn","decls","vars","directives","pipes","viewQuery","schemas","constsOrFactory","ssrId","bindingStartIndex","HEADER_OFFSET","initialViewLength","blueprint","createViewBlueprint","consts","TVIEW","getOrCreateComponentTView","def","tView","createLView","parentLView","context","flags","host","tHostNode","environment","injector","embeddedViewInjector","hydrationInfo","lView","HOST","FLAGS","resetPreOrderHookFlags","PARENT","DECLARATION_VIEW","CONTEXT","ENVIRONMENT","RENDERER","INJECTOR","T_HOST","ID","getUniqueLViewId","HYDRATION","EMBEDDED_VIEW_INJECTOR","DECLARATION_COMPONENT_VIEW","createComponentLView","hostTNode","native","getNativeByTNode","rendererFactory","componentView","addToEndOfViewTree","getInitialLViewFlagsFromDef","allocExpando","numSlotsToAlloc","initialValue","allocIdx","lViewOrLContainer","CHILD_HEAD","CHILD_TAIL","NEXT","ɵɵadvance","delta","selectIndexInternal","getTView","getLView","getSelectedIndex","index","checkNoChangesMode","preOrderCheckHooks","executeCheckHooks","preOrderHooks","executeInitAndCheckHooks","setSelectedIndex","InputFlags","writeToDirectiveInput","instance","publicName","prevConsumer","setActiveConsumer","privateName","transform","inputSignalNode","SIGNAL","applyValueToInputField","RendererStyleFlags2","_icuContainerIterate","icuContainerIterate","tIcuContainerNode","applyToElementOrContainer","action","renderer","parent","lNodeToHandle","beforeNode","lContainer","isComponent","isLContainer","isLView","HOST","rNode","unwrapRNode","nativeAppendChild","nativeInsertBefore","nativeRemoveNode","applyContainer","removeViewFromDOM","tView","lView","detachViewFromDOM","T_HOST","addViewToDOM","parentTNode","parentNativeNode","applyView","ENVIRONMENT","RENDERER","destroyViewTree","rootView","lViewOrLContainer","CHILD_HEAD","cleanUpView","TVIEW","next","firstView","CONTAINER_HEADER_OFFSET","NEXT","PARENT","detachMovedView","declarationContainer","movedViews","MOVED_VIEWS","declarationViewIndex","destroyLView","isDestroyed","prevConsumer","setActiveConsumer","FLAGS","REACTIVE_TEMPLATE_CONSUMER","consumerDestroy","executeOnDestroys","processCleanups","DECLARATION_LCONTAINER","lQueries","QUERIES","unregisterLView","tCleanup","lCleanup","CLEANUP","i","targetIdx","context","destroyHooks","ON_DESTROY_HOOKS","destroyHooksFn","effects","EFFECTS","effect","NodeInjectorFactory","toCall","j","callContext","hook","profiler","getParentRElement","tNode","getClosestRElement","isComponentHost","encapsulation","ViewEncapsulation","getNativeByTNode","getInsertInFrontOfRNode","currentTNode","_getInsertInFrontOfRNodeWithI18n","getInsertInFrontOfRNodeWithNoI18n","_processI18nInsertBefore","appendChild","tView","lView","childRNode","childTNode","parentRNode","getParentRElement","renderer","RENDERER","parentTNode","T_HOST","anchorNode","getInsertInFrontOfRNode","i","nativeAppendOrInsertBefore","_processI18nInsertBefore","getFirstNativeNode","tNode","tNodeType","getNativeByTNode","getBeforeNodeForView","elIcuContainerChild","rNodeOrLContainer","isLContainer","unwrapRNode","icuContainerIterate","projectionNodes","getProjectionNodes","parentView","getLViewParent","DECLARATION_COMPONENT_VIEW","componentHost","slotIdx","viewIndexInContainer","lContainer","nextViewIndex","CONTAINER_HEADER_OFFSET","firstTNodeOfView","TVIEW","NATIVE","applyNodes","action","parentRElement","beforeNode","isProjection","rawSlotValue","attachPatchData","isDetachedByI18n","applyToElementOrContainer","nextRNode","rNode","applyProjectionRecursive","applyView","applyProjectionRecursive","renderer","action","lView","tProjectionNode","parentRElement","beforeNode","componentLView","DECLARATION_COMPONENT_VIEW","nodeToProjectOrRNodes","T_HOST","i","rNode","applyToElementOrContainer","nodeToProject","projectedComponentLView","PARENT","hasInSkipHydrationBlockFlag","applyNodes","applyContainer","lContainer","anchor","NATIVE","native","unwrapRNode","CONTAINER_HEADER_OFFSET","applyView","TVIEW","applyStyling","isClassBased","prop","value","flags","RendererStyleFlags2","executeTemplate","tView","templateFn","rf","context","prevSelectedIndex","getSelectedIndex","isUpdatePhase","setSelectedIndex","HEADER_OFFSET","selectIndexInternal","profiler","createDirectivesInstances","tNode","instantiateAllDirectives","invokeDirectivesHostBindings","saveResolvedLocalsInData","viewData","localRefExtractor","getNativeByTNode","localNames","localIndex","index","locateHostElement","elementOrSelector","encapsulation","injector","preserveContent","PRESERVE_HOST_CONTENT","PRESERVE_HOST_CONTENT_DEFAULT","ViewEncapsulation","rootElement","applyRootElementTransform","_applyRootElementTransformImpl","applyRootElementTransformImpl","hasSkipHydrationAttrOnRElement","clearElementContents","processTextNodeMarkersBeforeHydration","enableApplyRootElementTransformImpl","mapPropName","name","setPropertyAndInputs","propName","sanitizer","setAllInputsForProperty","isComponentHost","markDirtyIfOnPush","setDomProperty","element","viewIndex","childComponentLView","getComponentLViewByIndex","FLAGS","instantiateAllDirectives","tView","lView","tNode","start","end","isComponentHost","createComponentLView","getOrCreateNodeInjectorForNode","initialInputs","i","def","directive","getNodeInjectable","attachPatchData","setInputsFromAttrs","isComponentDef","componentView","getComponentLViewByIndex","CONTEXT","invokeDirectivesHostBindings","elementIndex","currentDirectiveIndex","getCurrentDirectiveIndex","setSelectedIndex","dirIndex","setCurrentDirectiveIndex","invokeHostBindingsInCreationMode","findDirectiveDefMatches","registry","matches","isNodeMatchingSelectorList","elementAttributeInternal","name","value","sanitizer","namespace","element","getNativeByTNode","setElementAttribute","RENDERER","renderer","tagName","strValue","renderStringify","directiveIndex","instance","initialInputData","lookupName","writeToDirectiveInput","elementLikeStartShared","index","locateOrCreateNativeNode","adjustedIndex","HEADER_OFFSET","TVIEW","native","setCurrentTNode","isElement","setupStaticAttributes","getElementDepthCount","isDirectiveHost","increaseElementDepthCount","wasLastNodeCreated","isDetachedByI18n","appendChild","elementLikeEndShared","currentTNode","isCurrentTNodeParent","setCurrentTNodeAsNotParent","handleUncaughtError","lView","error","injector","INJECTOR","INTERNAL_APPLICATION_ERROR_HANDLER","setAllInputsForProperty","tNode","tView","publicName","value","inputs","hostDirectiveInputs","hasMatch","i","index","def","writeToDirectiveInput","instance","renderComponent","hostLView","componentHostIdx","componentView","getComponentLViewByIndex","componentTView","TVIEW","syncViewWithBlueprint","hostRNode","HOST","HYDRATION","retrieveHydrationInfo","INJECTOR","profiler","renderView","CONTEXT","tView","lView","i","context","enterView","viewQuery","executeViewQueryFn","templateFn","executeTemplate","QUERIES","refreshContentQueries","components","renderChildComponents","error","FLAGS","leaveView","createAndRenderEmbeddedLView","declarationLView","templateTNode","options","prevConsumer","setActiveConsumer","embeddedTView","viewFlags","embeddedLView","createLView","declarationLContainer","DECLARATION_LCONTAINER","declarationViewLQueries","shouldAddViewToDom","tNode","dehydratedView","hasInSkipHydrationBlockFlag","USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT","UseExhaustiveCheckNoChanges","InjectionToken","collectNativeNodes","result","isProjection","lNode","unwrapRNode","isLContainer","collectNativeNodesInLContainer","tNodeType","nextRNode","icuContainerIterate","rNode","nodesInSlot","getProjectionNodes","parentView","getLViewParent","DECLARATION_COMPONENT_VIEW","lContainer","CONTAINER_HEADER_OFFSET","lViewInAContainer","lViewFirstChildTNode","NATIVE","addAfterRenderSequencesForView","AFTER_RENDER_SEQUENCES_TO_ADD","sequence","freeConsumers","getOrBorrowReactiveLViewConsumer","REACTIVE_TEMPLATE_CONSUMER","borrowReactiveLViewConsumer","consumer","REACTIVE_LVIEW_CONSUMER_NODE","maybeReturnReactiveLViewConsumer","__spreadProps","__spreadValues","REACTIVE_NODE","node","markAncestorsForTraversal","getOrCreateTemporaryConsumer","TEMPORARY_CONSUMER_NODE","parent","viewShouldHaveReactiveConsumer","markViewForRefresh","runEffectsInView","view","EFFECTS","tryFlushEffects","foundDirtyEffect","effect","FLAGS","MAXIMUM_REFRESH_RERUNS$1","detectChangesInternal","lView","mode","rendererFactory","ENVIRONMENT","checkNoChangesMode","detectChangesInViewWhileDirty","lastIsRefreshingViewsValue","isRefreshingViews","setIsRefreshingViews","detectChangesInView","retries","requiresRefreshOrTraversal","RuntimeError","checkNoChangesInternal","exhaustive","setIsInCheckNoChangesMode","CheckNoChangesMode","refreshView","tView","templateFn","context","isDestroyed","flags","isInCheckNoChangesPass","isInExhaustiveCheckNoChangesPass","enterView","returnConsumerToPool","prevConsumer","currentConsumer","viewShouldHaveReactiveConsumer","getOrBorrowReactiveLViewConsumer","consumerBeforeComputation","getActiveConsumer","getOrCreateTemporaryConsumer","REACTIVE_TEMPLATE_CONSUMER","consumerDestroy","resetPreOrderHookFlags","setBindingIndex","executeTemplate","hooksInitPhaseCompleted","preOrderCheckHooks","executeCheckHooks","preOrderHooks","executeInitAndCheckHooks","incrementInitPhaseFlags","markTransplantedViewsForRefresh","detectChangesInEmbeddedViews","refreshContentQueries","contentCheckHooks","contentHooks","processHostBindingOpCodes","components","detectChangesInChildComponents","viewQuery","executeViewQueryFn","viewCheckHooks","viewHooks","EFFECTS_TO_SCHEDULE","notifyEffect","addAfterRenderSequencesForView","e","markAncestorsForTraversal","consumerAfterComputation","maybeReturnReactiveLViewConsumer","leaveView","lContainer","getFirstLContainer","getNextLContainer","i","CONTAINER_HEADER_OFFSET","embeddedLView","detectChangesInViewIfAttached","movedViews","MOVED_VIEWS","movedLView","markViewForRefresh","detectChangesInComponent","hostLView","componentHostIdx","profiler","componentView","getComponentLViewByIndex","CONTEXT","viewAttachedToChangeDetector","TVIEW","consumer","shouldRefreshView","consumerPollProducersForChange","setActiveConsumer","hostBindingOpCodes","opCode","setSelectedIndex","directiveIdx","bindingRootIndx","hostBindingFn","setBindingRootForHostBindings","markViewDirty","source","dirtyBitsToUse","parent","getLViewParent","isRootView","createLContainer","hostNative","currentView","native","tNode","addLViewToLContainer","lContainer","lView","index","addToDOM","tView","TVIEW","insertView","beforeNode","getBeforeNodeForView","renderer","RENDERER","parentRNode","NATIVE","addViewToDOM","T_HOST","hydrationInfo","HYDRATION","removeLViewFromLContainer","detachView","destroyLView","removeIndex","CONTAINER_HEADER_OFFSET","indexInContainer","viewToDetach","declarationLContainer","DECLARATION_LCONTAINER","detachMovedView","NEXT","removedLView","removeFromArray","removeViewFromDOM","lQueries","QUERIES","PARENT","FLAGS","containerLength","addToArray","trackMovedView","updateAncestorTraversalFlagsOnAttach","declarationContainer","movedViews","MOVED_VIEWS","parent","isLView","insertedComponentLView","DECLARATION_COMPONENT_VIEW","ViewRef","collectNativeNodes","_lView","_cdRefInjectingView","CONTEXT","value","isDestroyed","isLContainer","viewRefs","VIEW_REFS","callback","storeLViewOnDestroy","markViewDirty","detectChangesInternal","INJECTOR","UseExhaustiveCheckNoChanges","USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT","RuntimeError","isRoot","isRootView","detachViewFromDOM","appRef","TemplateRef","injectTemplateRef","_declarationLView","_declarationTContainer","elementRef","context","injector","dehydratedView","embeddedLView","createAndRenderEmbeddedLView","ViewRef","createTemplateRef","getCurrentTNode","getLView","hostTNode","hostLView","createElementRef","getOrCreateTNode","tView","index","type","name","attrs","tNode","createTNodeAtIndex","isInI18nBlock","parent","getCurrentParentTNode","setCurrentTNode","currentTNode","getCurrentTNodePlaceholderOk","isParent","isCurrentTNodeParent","createTNode","linkTNodeInTView","tParent","value","injectorIndex","flags","isInSkipHydrationBlock","REF_EXTRACTOR_REGEXP","REFERENCE_NODE_BODY","REFERENCE_NODE_HOST","decompressNodeLocation","path","matches","REF_EXTRACTOR_REGEXP","_","refNodeId","refNodeName","rest","ref","steps","step","count","repeat","isFirstElementInNgContainer","tNode","getNoOffsetIndex","HEADER_OFFSET","locateI18nRNodeByIndex","hydrationInfo","noOffsetIndex","i18nNodes","locateNextRNode","hydrationInfo","tView","lView","tNode","noOffsetIndex","getNoOffsetIndex","native","locateI18nRNodeByIndex","nodes","NODES","locateRNodeByPath","previousTNodeParent","previousTNode","isFirstElementInNgContainer","noOffsetParentIndex","getSegmentHead","previousRElement","getNativeByTNode","noOffsetPrevSiblingIndex","segmentHead","nodesToSkip","calcSerializedContainerSize","siblingAfter","skip","from","currentNode","i","navigateToNode","from","instructions","node","i","step","repeat","r","NODE_NAVIGATION_STEP_FIRST_CHILD","NODE_NAVIGATION_STEP_NEXT_SIBLING","locateRNodeByPath","path","lView","referenceNode","navigationInstructions","decompressNodeLocation","ref","REFERENCE_NODE_HOST","DECLARATION_COMPONENT_VIEW","HOST","REFERENCE_NODE_BODY","ɵɵresolveBody","parentElementId","unwrapRNode","HEADER_OFFSET","_isI18nHydrationSupportEnabled","setIsI18nHydrationSupportEnabled","enabled","_isI18nHydrationSupportEnabled","cleanupI18nHydrationData","lView","hydrationInfo","HYDRATION","i18nNodes","dehydratedIcuDataMap","renderer","RENDERER","dehydratedIcuData","cleanupDehydratedIcuData","node","rNode","HEADER_OFFSET","nativeRemoveNode","removeDehydratedViews","lContainer","views","DEHYDRATED_VIEWS","PARENT","retainedViews","view","DEFER_BLOCK_ID","removeDehydratedView","removeDehydratedViewList","deferBlock","dehydratedViews","dehydratedView","nodesRemoved","currentRNode","numNodes","NUM_ROOT_NODES","nextSibling","cleanupLContainer","hostLView","HOST","isLView","cleanupLView","i","CONTAINER_HEADER_OFFSET","tView","TVIEW","isLContainer","cleanupDehydratedViews","appRef","viewRefs","viewRef","lNode","getLNodeForHydration","cleanupHydratedDeferBlocks","hydratedBlocks","registry","locateDehydratedViewsInContainer","serializedViews","serializedView","MULTIPLIER","siblingAfter","_findMatchingDehydratedViewImpl","_findAndReconcileMatchingDehydratedViewsImpl","enableFindMatchingDehydratedViewImpl","findMatchingDehydratedViewImpl","findAndReconcileMatchingDehydratedViewsImpl","template","hasMatchingDehydratedView","findMatchingDehydratedView","templateTNode","removeStaleDehydratedBranch","removeStaleDehydratedBranch","hostLView","tNode","currentTNode","cleanupMatchingDehydratedViews","hasMatchingDehydratedView","lContainer","template","views","DEHYDRATED_VIEWS","TEMPLATE_ID","ssrId","container","isLContainer","removeDehydratedViews","ComponentRef$1","ComponentFactory$1","_NullComponentFactoryResolver","component","RuntimeError","ComponentFactoryResolver$1","RendererFactory2","Renderer2","injectRenderer2","lView","getLView","getCurrentTNode","nodeAtIndex","getComponentLViewByIndex","isLView","RENDERER","Sanitizer","ɵɵdefineInjectable","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ChainedInjector","injector","parentInjector","token","notFoundValue","options","value","computeStaticStyling","tNode","attrs","writeToHost","styles","classes","mode","i","concatStringsWithSpace","style","styleValue","ɵɵdirectiveInject","flags","lView","getLView","ɵɵinject","getCurrentTNode","getOrCreateInjectable","resolveForwardRef","ɵɵinvalidFactory","msg","resolveDirectives","tView","localRefs","directiveMatcher","exportsMap","matchedDirectiveDefs","directiveDefs","hostDirectiveDefs","hostDirectiveRanges","def","initializeDirectives","cacheMatchingLocalNames","localNames","index","RuntimeError","markAsComponentHost","hostTNode","componentOffset","directives","directivesLength","hasSeenComponent","isComponentDef","diPublicInInjector","getOrCreateNodeInjectorForNode","initTNodeFlags","preOrderHooksFound","preOrderCheckHooksFound","directiveIdx","allocExpando","mergeHostAttrs","configureViewWithDirective","saveNameToExportMap","start","end","lifeCycleHooks","initializeInputAndOutputAliases","directiveDef","setupSelectorMatchedInputsOrOutputs","setupInitialInputs","hostDirectiveDef","setupHostDirectiveInputsOrOutputs","directiveIndex","aliasMap","publicName","bindings","setShadowStylingInputFlags","config","initialName","isHostDirective","inputs","hostDirectiveInputs","isInlineTemplate","inputsToStore","attrName","inputConfig","j","directiveFactory","getFactoryDef","nodeInjectorFactory","NodeInjectorFactory","registerHostBindingOpCodes","NO_CHANGE","directiveVarsIdx","hostBindings","hostBindingOpCodes","elementIndx","lastSelectedElementIdx","numberOfDirectives","directiveHostFirstCreatePass","index","lView","type","name","directiveMatcher","bindingsEnabled","attrsIndex","localRefsIndex","tView","TVIEW","tViewConsts","attrs","getConstant","tNode","getOrCreateTNode","resolveDirectives","mergeHostAttrs","computeStaticStyling","directiveHostEndFirstCreatePass","registerPostOrderHooks","isContentQueryHost","isListLikeIterable","obj","isJsObject","iterateListLike","obj","fn","i","iterator","item","isJsObject","o","bindingUpdated","lView","bindingIndex","value","NO_CHANGE","oldValue","wrapListener","tNode","lView","listenerFn","wrapListenerIn_markDirtyAndPreventDefault","event","startView","isComponentHost","getComponentLViewByIndex","markViewDirty","context","CONTEXT","result","executeListenerWithErrorHandling","nextListenerFn","e","prevConsumer","setActiveConsumer","profiler","error","handleUncaughtError","listenToDomEvent","tView","eventTargetResolver","renderer","eventName","originalListener","wrappedListener","isTNodeDirectiveHost","isDirectiveHost","hasCoalesced","existingListener","findExistingListener","lastListenerFn","native","getNativeByTNode","target","stashEventListenerImpl","cleanupFn","idxOrTargetGetter","_lView","unwrapRNode","storeListenerCleanup","tNodeIndex","tCleanup","cleanupEventName","lCleanup","CLEANUP","listenerIdxInLCleanup","indexOrTargetGetter","cleanup","isOutput","getOrCreateTViewCleanup","getOrCreateLViewCleanup","index","listenToOutput","tNode","lView","directiveIndex","lookupName","eventName","listenerFn","instance","tView","TVIEW","propertyName","subscription","storeListenerCleanup","BINDING","ComponentFactoryResolver","ComponentFactoryResolver$1","ngModule","component","componentDef","getComponentDef","ComponentFactory","toInputRefArray","map","name","propName","flags","transform","inputData","InputFlags","toOutputRefArray","createRootViewInjector","componentDef","environmentInjector","injector","realEnvironmentInjector","EnvironmentInjector","ChainedInjector","createRootLViewEnvironment","rootLViewInjector","rendererFactory","RendererFactory2","RuntimeError","sanitizer","Sanitizer","changeDetectionScheduler","ChangeDetectionScheduler","createHostElement","render","tagName","createElementNode","SVG_NAMESPACE","MATH_ML_NAMESPACE","ComponentFactory","ComponentFactory$1","toInputRefArray","toOutputRefArray","ngModule","stringifyCSSSelectorList","projectableNodes","rootSelectorOrNode","directives","componentBindings","profiler","prevConsumer","setActiveConsumer","cmpDef","rootTView","createRootTView","rootViewInjector","environment","hostRenderer","hostElement","locateHostElement","hasInputBindings","isInputBinding","d","rootLView","createLView","getInitialLViewFlagsFromDef","retrieveHydrationInfo","HEADER_OFFSET","enterView","componentView","hostTNode","directiveHostFirstCreatePass","setupStaticAttributes","attachPatchData","createDirectivesInstances","executeContentQueries","directiveHostEndFirstCreatePass","projectNodes","getComponentLViewByIndex","CONTEXT","renderView","e","unregisterLView","leaveView","ComponentRef","tAttributes","extractAttrsAndClassesFromSelector","creationBindings","updateBindings","varsToAllocate","binding","BINDING","i","directive","targetDirectiveIdx","directivesToApply","directiveType","directiveDef","getDirectiveDef","createTView","getRootTViewTemplate","flags","kind","ComponentRef$1","componentType","_rootLView","_hasInputBindings","getTNode","TVIEW","createElementRef","ViewRef","name","value","tNode","lView","hasSetInput","setAllInputsForProperty","childComponentLView","markViewDirty","NodeInjector","callback","ngContentSelectors","projection","nodesforSlot","ViewContainerRef","injectViewContainerRef","previousTNode","getCurrentTNode","createContainerRef","getLView","VE_ViewContainerRef","R3ViewContainerRef","_lContainer","_hostTNode","_hostLView","parentLocation","getParentInjectorLocation","hasParentInjector","parentView","getParentInjectorView","injectorIndex","getParentInjectorIndex","parentTNode","index","viewRefs","getViewRefs","CONTAINER_HEADER_OFFSET","templateRef","context","indexOrOptions","dehydratedView","findMatchingDehydratedView","viewRef","shouldAddViewToDom","componentFactoryOrType","bindings","isComponentFactory","isType","options","componentFactory","getComponentDef","contextInjector","result","rNode","componentRef","addToDOM","viewAttachedToContainer","prevIdx","prevLContainer","PARENT","prevVCRef","T_HOST","adjustedIdx","lContainer","addLViewToLContainer","addToArray","getOrCreateViewRefs","newIndex","viewRefsArr","detachedView","detachView","removeFromArray","destroyLView","view","shift","VIEW_REFS","hostLView","slotValue","isLContainer","createLContainer","addToEndOfViewTree","_locateOrCreateAnchorNode","insertAnchorNode","renderer","RENDERER","commentNode","hostNative","getNativeByTNode","parentOfHostNative","nativeInsertBefore","createAnchorNode","_populateDehydratedViewsInLContainer","populateDehydratedViewsInLContainer","NATIVE","unwrapRNode","populateDehydratedViewsInLContainerImpl","DEHYDRATED_VIEWS","hydrationInfo","HYDRATION","noOffsetIndex","isInSkipHydrationBlock","isDisconnectedNode$1","currentRNode","getSegmentHead","serializedViews","CONTAINERS","dehydratedViews","locateDehydratedViewsInContainer","locateOrCreateAnchorNode","enableLocateOrCreateContainerRefImpl","markedFeatures","performanceMarkFeature","feature","NgModuleRef$1","NgModuleFactory$1","NgModuleRef","NgModuleRef$1","ComponentFactoryResolver","ngModuleType","_parent","additionalProviders","runInjectorInitializers","ngModuleDef","getNgModuleDef","maybeUnwrapFn","createInjectorWithoutInjectorInstances","ComponentFactoryResolver$1","stringify","injector","fn","callback","NgModuleFactory","NgModuleFactory$1","moduleType","parentInjector","EnvironmentNgModuleRefAdapter","NgModuleRef$1","ComponentFactoryResolver","config","injector","R3Injector","ComponentFactoryResolver$1","getNullInjector","callback","createEnvironmentInjector","providers","parent","debugName","StandaloneService","_injector","componentDef","internalImportProvidersFrom","standaloneInjector","ɵɵdefineInjectable","ɵɵinject","EnvironmentInjector","ɵɵdefineComponent","componentDefinition","noSideEffects","baseDef","getNgDirectiveDef","def","__spreadProps","__spreadValues","ChangeDetectionStrategy","parentInjector","ViewEncapsulation","EMPTY_ARRAY","performanceMarkFeature","initFeatures","dependencies","extractDefListOrFactory","extractDirectiveDef","getPipeDef","getComponentId","type","getComponentDef","getDirectiveDef","ɵɵdefineNgModule","parseAndConvertInputsForDefinition","obj","declaredInputs","EMPTY_OBJ","newLookup","minifiedKey","value","publicName","declaredName","inputFlags","transform","InputFlags","parseAndConvertOutputsForDefinition","ɵɵdefineDirective","directiveDefinition","getNgDirectiveDef","directiveDefinition","declaredInputs","EMPTY_OBJ","EMPTY_ARRAY","parseAndConvertInputsForDefinition","parseAndConvertOutputsForDefinition","initFeatures","definition","fn","extractDefListOrFactory","dependencies","defExtractor","resolvedDependencies","result","dep","getComponentId","componentDef","hash","componentDefConsts","hashSelectors","char","getSuperType","type","ɵɵInheritDefinitionFeature","definition","superType","shouldInheritFields","inheritanceChain","superDef","isComponentDef","RuntimeError","writeableDef","maybeUnwrapEmpty","superHostBindings","inheritHostBindings","superViewQuery","superContentQueries","inheritViewQuery","inheritContentQueries","mergeInputsWithTransforms","fillProperties","defData","features","i","feature","mergeHostAttrsAcrossInheritance","target","source","key","value","hostVars","hostAttrs","def","mergeHostAttrs","EMPTY_OBJ","EMPTY_ARRAY","prevViewQuery","rf","ctx","prevContentQueries","directiveIndex","prevHostBindings","templateCreate","tNode","declarationLView","declarationTView","index","templateFn","decls","vars","flags","mergeHostAttrs","embeddedTView","createTView","setCurrentTNode","comment","_locateOrCreateContainerAnchor","wasLastNodeCreated","appendChild","attachPatchData","lContainer","createLContainer","HEADER_OFFSET","addToEndOfViewTree","populateDehydratedViewsInLContainer","declareDirectiveHostTemplate","tagName","attrs","localRefsIndex","localRefExtractor","adjustedIndex","getOrCreateTNode","getBindingsEnabled","resolveDirectives","getConstant","findDirectiveDefMatches","registerPostOrderHooks","isDirectiveHost","createDirectivesInstances","saveResolvedLocalsInData","ɵɵtemplate","index","templateFn","decls","vars","tagName","attrsIndex","localRefsIndex","localRefExtractor","lView","getLView","tView","getTView","attrs","getConstant","declareDirectiveHostTemplate","_locateOrCreateContainerAnchor","createContainerAnchorImpl","tView","lView","tNode","index","lastNodeWasCreated","RENDERER","locateOrCreateContainerAnchorImpl","isNodeCreationMode","canHydrateNode","ssrId","HYDRATION","TEMPLATES","hydrationInfo","currentRNode","locateNextRNode","setSegmentHead","viewContainerSize","calcSerializedContainerSize","siblingAfter","enableLocateOrCreateContainerAnchorImpl","DeferDependenciesLoadingState","MINIMUM_SLOT","LOADING_AFTER_SLOT","DeferBlockState","NEXT_DEFER_BLOCK_STATE","DEFER_BLOCK_STATE","TRIGGER_CLEANUP_FNS","PREFETCH_TRIGGER_CLEANUP_FNS","SSR_BLOCK_STATE","ON_COMPLETE_FNS","HYDRATE_TRIGGER_CLEANUP_FNS","DeferBlockBehavior","invokeTriggerCleanupFns","type","lDetails","key","getCleanupFnKeyByType","cleanupFns","cleanupFn","invokeAllTriggerCleanupFns","TRIGGER_CLEANUP_FNS","PREFETCH_TRIGGER_CLEANUP_FNS","HYDRATE_TRIGGER_CLEANUP_FNS","TracingAction","TracingService","InjectionToken","SCHEDULE_IN_ROOT_ZONE_DEFAULT","EventEmitter_","Subject","isAsync","isInInjectionContext","inject","DestroyRef","PendingTasksInternal","value","prevConsumer","setActiveConsumer","observerOrNext","error","complete","nextFn","errorFn","completeFn","observer","sink","Subscription","fn","taskId","EventEmitter","scheduleCallbackWithRafRace","callback","timeoutId","animationFrameId","cleanup","noop","scheduleCallbackWithMicrotask","isAngularZoneProperty","angularZoneInstanceIdProperty","ngZoneInstanceId","NgZone","_NgZone","EventEmitter","options","enableLongStackTrace","shouldCoalesceEventChangeDetection","shouldCoalesceRunChangeDetection","scheduleInRootZone","SCHEDULE_IN_ROOT_ZONE_DEFAULT","RuntimeError","self","forkInnerZoneWithAngularBehavior","fn","applyThis","applyArgs","name","zone","task","EMPTY_PAYLOAD","noop","checkStable","delayChangeDetectionForEvents","scheduleCheckStable","scheduleCallbackWithRafRace","updateMicroTaskStatus","delayChangeDetectionForEventsDelegate","instanceId","delegate","current","target","shouldBeIgnoredByZone","onEnter","onLeave","callback","source","isSchedulerTick","hasTaskState","error","NoopNgZone","hasApplyArgsData","key","AfterRenderManager","ɵɵdefineInjectable","AFTER_RENDER_PHASES","AfterRenderImpl","inject","NgZone","ChangeDetectionScheduler","ErrorHandler","TracingService","hasSequencesToExecute","profiler","phase","sequence","hookFn","err","view","AFTER_RENDER_SEQUENCES_TO_ADD","markAncestorsForTraversal","FLAGS","fn","snapshot","TracingAction","AfterRenderSequence","impl","hooks","once","destroyRef","scheduled","s","afterNextRender","callbackOrSpec","options","injector","inject","Injector","performanceMarkFeature","afterEveryRenderImpl","getHooks","once","manager","AfterRenderManager","AfterRenderImpl","tracing","TracingService","destroyRef","DestroyRef","viewContext","ViewContext","sequence","AfterRenderSequence","getDeferBlockDataIndex","deferBlockIndex","getLDeferBlockDetails","lView","tNode","tView","TVIEW","slotIndex","getTDeferBlockDetails","tView","tNode","slotIndex","getDeferBlockDataIndex","getTemplateIndexForState","newState","hostLView","tNode","tView","TVIEW","tDetails","getTDeferBlockDetails","DeferBlockState","getMinimumDurationForState","currentState","MINIMUM_SLOT","getLoadingBlockAfter","LOADING_AFTER_SLOT","addDepsToRegistry","currentDeps","newDeps","currentDepSet","dep","getPrimaryBlockTNode","adjustedIndex","HEADER_OFFSET","getTNode","CachedInjectorService","key","parentInjector","providers","debugName","injector","createEnvironmentInjector","ɵɵdefineInjectable","DEFER_BLOCK_CONFIG","InjectionToken","getOrCreateEnvironmentInjector","parentInjector","tDetails","providers","CachedInjectorService","createDeferBlockInjector","ChainedInjector","origInjector","parentEnvInjector","envInjector","EnvironmentInjector","renderDeferBlockState","newState","tNode","lContainer","skipTimerScheduling","hostLView","PARENT","hostTView","TVIEW","isDestroyed","lDetails","getLDeferBlockDetails","currentState","DEFER_BLOCK_STATE","ssrState","SSR_BLOCK_STATE","isValidStateChange","NEXT_DEFER_BLOCK_STATE","getTDeferBlockDetails","applyStateFn","getLoadingBlockAfter","getMinimumDurationForState","DeferBlockState","applyDeferBlockStateWithSchedulingImpl","applyDeferBlockState","error","handleUncaughtError","findMatchingDehydratedViewForDeferBlock","dehydratedViewIx","DEHYDRATED_VIEWS","view","DEFER_BLOCK_STATE$1","profiler","stateTmplIndex","getTemplateIndexForState","adjustedIndex","HEADER_OFFSET","activeBlockTNode","getTNode","viewIndex","removeLViewFromLContainer","injector","INJECTOR","dehydratedView","embeddedLView","createAndRenderEmbeddedLView","addLViewToLContainer","shouldAddViewToDom","markViewDirty","ON_COMPLETE_FNS","callback","isValidStateChange","currentState","newState","renderDeferStateAfterResourceLoading","tDetails","tNode","lContainer","DeferDependenciesLoadingState","renderDeferBlockState","DeferBlockState","applyDeferBlockStateWithSchedulingImpl","Console","message","__ngFactoryType__","ɵɵdefineInjectable","TESTABILITY","InjectionToken","isPromise","obj","isSubscribable","APP_INITIALIZER","InjectionToken","provideAppInitializer","initializerFn","makeEnvironmentProviders","ApplicationInitStatus","res","rej","inject","Injector","asyncInitPromises","appInits","initResult","runInInjectionContext","observableAsPromise","resolve","reject","complete","e","__ngFactoryType__","ɵɵdefineInjectable","APP_BOOTSTRAP_LISTENER","publishSignalConfiguration","setThrowInvalidWriteToSignalError","errorMessage","RuntimeError","isBoundToModule","cf","MAXIMUM_REFRESH_RERUNS","ApplicationRef","inject","INTERNAL_APPLICATION_ERROR_HANDLER","AfterRenderManager","ZONELESS_ENABLED","EffectScheduler","Subject","PendingTasksInternal","map","pending","TracingService","subscription","resolve","stable","EnvironmentInjector","componentOrFactory","rootSelectorOrNode","injector","Injector","NgZone","profiler","isComponentFactory","ComponentFactory$1","ApplicationInitStatus","errorMessage","RuntimeError","componentFactory","ComponentFactoryResolver$1","ngModule","isBoundToModule","NgModuleRef$1","selectorOrNode","compRef","nativeElement","testability","TESTABILITY","remove","TracingAction","prevConsumer","setActiveConsumer","RendererFactory2","runs","MAXIMUM_REFRESH_RERUNS","ranDetectChanges","useGlobalCheck","_lView","requiresRefreshOrTraversal","mode","detectChangesInternal","viewRef","view","componentRef","e","APP_BOOTSTRAP_LISTENER","listener","callback","__ngFactoryType__","ɵɵdefineInjectable","remove","list","el","index","triggerResourceLoading","tDetails","lView","tNode","injector","INJECTOR","tView","TVIEW","DeferDependenciesLoadingState","lDetails","getLDeferBlockDetails","primaryBlockTNode","getPrimaryBlockTNode","invokeTriggerCleanupFns","dependenciesFn","removeTask","PendingTasks","results","failed","directiveDefs","pipeDefs","result","dependency","directiveDef","getComponentDef","getDirectiveDef","pipeDef","getPipeDef","templateLocation","error","RuntimeError","handleUncaughtError","primaryBlockTView","addDepsToRegistry","directiveTypes","def","providers","internalImportProvidersFrom","shouldTriggerDeferBlock","triggerType","DEFER_BLOCK_CONFIG","DeferBlockBehavior","triggerDeferBlock","lContainer","getTDeferBlockDetails","invokeAllTriggerCleanupFns","renderDeferBlockState","DeferBlockState","renderDeferStateAfterResourceLoading","triggerHydrationFromBlockName","blockName","replayQueuedEventsFn","dehydratedBlockRegistry","DEHYDRATED_BLOCK_REGISTRY","parentBlockPromise","hydrationQueue","getParentBlockHydrationQueue","populateHydratingStateForQueue","topmostParentBlock","triggerHydrationForBlockQueue","blocksBeingHydrated","pendingTasks","PendingTasksInternal","taskId","blockQueueIdx","dehydratedBlockId","dehydratedDeferBlock","triggerResourceLoadingForHydration","nextRender","deferBlockHasErrored","removeDehydratedViewList","cleanupRemainingHydrationQueue","cleanupParentContainer","lastBlockName","cleanupHydratedDeferBlocks","ApplicationRef","deferBlock","DEFER_BLOCK_STATE","currentBlockIdx","parentDeferBlockIdx","parentDeferBlock","cleanupLContainer","registry","queue","blockId","resolveFn","afterNextRender","dehydratedBlock","resolve","onDeferBlockCompletion","callback","ON_COMPLETE_FNS","ɵɵattribute","name","value","sanitizer","namespace","lView","getLView","bindingIndex","nextBindingIndex","bindingUpdated","tView","getTView","tNode","getSelectedTNode","elementAttributeInternal","ɵɵproperty","propName","value","sanitizer","lView","getLView","bindingIndex","nextBindingIndex","bindingUpdated","tView","getTView","tNode","getSelectedTNode","setPropertyAndInputs","RENDERER","setDirectiveInputsWhichShadowsStyling","isClassBased","setAllInputsForProperty","ɵɵelementStart","index","name","attrsIndex","localRefsIndex","TVIEW","adjustedIndex","HEADER_OFFSET","directiveHostFirstCreatePass","findDirectiveDefMatches","getBindingsEnabled","elementLikeStartShared","_locateOrCreateElementNode","isDirectiveHost","createDirectivesInstances","executeContentQueries","saveResolvedLocalsInData","ɵɵelementEnd","initialTNode","getCurrentTNode","currentTNode","elementLikeEndShared","directiveHostEndFirstCreatePass","isSkipHydrationRootTNode","leaveSkipHydrationBlock","decreaseElementDepthCount","hasClassInput","hasStyleInput","ɵɵelement","_locateOrCreateElementNode","tView","lView","tNode","name","index","lastNodeWasCreated","createElementNode","RENDERER","getNamespace","locateOrCreateElementNodeImpl","isNodeCreationMode","canHydrateNode","hydrationInfo","HYDRATION","native","locateNextRNode","getSerializedContainerViews","setSegmentHead","hasSkipHydrationAttrOnTNode","hasSkipHydrationAttrOnRElement","isComponentHost","enterSkipHydrationBlock","clearElementContents","enableLocateOrCreateElementNodeImpl","_locateOrCreateElementContainerNode","tView","lView","tNode","commentText","index","lastNodeWasCreated","createCommentNode","RENDERER","locateOrCreateElementContainerNode","comment","isNodeCreationMode","canHydrateNode","hydrationInfo","HYDRATION","currentRNode","locateNextRNode","ngContainerSize","getNgContainerSize","setSegmentHead","siblingAfter","enableLocateOrCreateElementContainerNodeImpl","ɵɵgetCurrentView","getLView","DEFAULT_LOCALE_ID","LOCALE_ID$1","DEFAULT_LOCALE_ID","setLocaleId","localeId","ɵɵlistener","eventName","listenerFn","eventTargetResolver","lView","getLView","tView","getTView","tNode","getCurrentTNode","listenerInternal","RENDERER","listenerInternal","tView","lView","renderer","tNode","eventName","listenerFn","eventTargetResolver","processOutputs","wrappedListener","wrapListener","listenToDomEvent","outputConfig","hostDirectiveOutputConfig","i","index","lookupName","listenToOutput","ɵɵnextContext","level","nextContextImpl","ɵɵreference","index","contextLView","getContextLView","load","HEADER_OFFSET","toTStylingRange","prev","next","getTStylingRangePrev","tStylingRange","getTStylingRangePrevDuplicate","setTStylingRangePrev","previous","setTStylingRangePrevDuplicate","getTStylingRangeNext","setTStylingRangeNext","getTStylingRangeNextDuplicate","setTStylingRangeNextDuplicate","insertTStylingBinding","tData","tNode","tStylingKeyWithStatic","isHostBinding","isClassBinding","tBindings","tmplHead","tmplTail","isKeyDuplicateOfStatic","tStylingKey","staticKeyValueArray","keyValueArrayIndexOf","previousNode","markDuplicates","markDuplicateOfResidualStyling","residual","isPrevDir","tStylingAtIndex","isMap","cursor","foundDuplicate","tStylingValueAtCursor","tStyleRangeAtCursor","isStylingMatch","tStylingKeyCursor","ɵɵclassProp","className","value","checkStylingProperty","checkStylingProperty","prop","value","suffix","isClassBased","lView","getLView","tView","getTView","bindingIndex","incrementBindingIndex","stylingFirstUpdatePass","NO_CHANGE","bindingUpdated","tNode","getSelectedIndex","updateStyling","RENDERER","normalizeSuffix","isInHostBindings","tView","bindingIndex","stylingFirstUpdatePass","tStylingKey","isClassBased","tData","tNode","getSelectedIndex","isHostBindings","hasStylingInputShadow","wrapInStaticStylingKey","insertTStylingBinding","stylingKey","hostDirectiveDef","getCurrentDirectiveDef","residual","collectStylingFromDirectives","collectStylingFromTAttrs","directiveStylingLast","templateStylingKey","getTemplateHeadTStylingKey","setTemplateHeadTStylingKey","collectResidual","bindings","getTStylingRangeNext","getTStylingRangePrev","directiveEnd","attrs","currentDirective","desiredMarker","currentMarker","item","keyValueArraySet","updateStyling","tView","tNode","lView","renderer","prop","value","isClassBased","bindingIndex","tData","tRange","higherPriorityValue","getTStylingRangeNextDuplicate","findStylingValue","getTStylingRangeNext","isStylingValuePresent","getTStylingRangePrevDuplicate","rNode","getNativeByIndex","getSelectedIndex","applyStyling","index","isPrevDirection","rawKey","containsStatics","key","isStylingMap","valueAtLViewIndex","NO_CHANGE","EMPTY_ARRAY","currentValue","keyValueArrayGet","getTStylingRangePrev","residual","normalizeSuffix","suffix","stringify","unwrapSafeValue","hasStylingInputShadow","ɵɵtext","getLView","getTView","adjustedIndex","HEADER_OFFSET","getOrCreateTNode","textNative","_locateOrCreateTextNode","wasLastNodeCreated","appendChild","setCurrentTNode","lastNodeWasCreated","createTextNode","RENDERER","locateOrCreateTextNodeImpl","isNodeCreationMode","canHydrateNode","hydrationInfo","HYDRATION","locateNextRNode","enableLocateOrCreateTextNodeImpl","interpolation1","lView","prefix","v0","suffix","bindingUpdated","nextBindingIndex","renderStringify","NO_CHANGE","ɵɵtextInterpolate","v0","ɵɵtextInterpolate1","prefix","suffix","lView","getLView","interpolated","interpolation1","NO_CHANGE","textBindingInternal","getSelectedIndex","textBindingInternal","lView","index","value","element","getNativeByIndex","updateTextNode","RENDERER","providersResolver","def","providers","viewProviders","tView","getTView","isComponent","isComponentDef","resolveProvider","provider","tInjectables","lInjectablesBlueprint","isViewProvider","resolveForwardRef","lView","getLView","tNode","getCurrentTNode","token","isTypeProvider","providerFactory","providerToFactory","beginIndex","endIndex","cptViewProvidersCount","factory","NodeInjectorFactory","ɵɵdirectiveInject","existingFactoryIndex","indexOf","diPublicInInjector","getOrCreateNodeInjectorForNode","registerDestroyHooksIfSupported","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","indexInFactory","multiFactoryAdd","contextIndex","providerIsTypeProvider","providerIsClassProvider","isClassProvider","ngOnDestroy","hooks","existingCallbacksIndex","isComponentProvider","item","arr","begin","end","i","_","flags","tData","lData","multiResolve","_flags","_tData","factories","result","componentCount","multiProviders","getNodeInjectable","TVIEW","factoryFn","index","f","ɵɵProvidersFeature","providers","viewProviders","definition","def","processProvidersFn","providersResolver","ɵɵtemplateRefExtractor","tNode","lView","createTemplateRef","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","moduleType","NgModuleFactory","moduleDef","getNgModuleDef","maybeUnwrapFn","factories","declaration","componentDef","getComponentDef","ComponentFactory","type","__ngFactoryType__","ɵɵdefineInjectable","NgZoneChangeDetectionScheduler","inject","NgZone","ChangeDetectionScheduler","ApplicationRef","INTERNAL_APPLICATION_ERROR_HANDLER","e","__ngFactoryType__","ɵɵdefineInjectable","internalProvideZoneChangeDetection","ngZoneFactory","ignoreChangesOutsideZone","scheduleInRootZone","NgZone","__spreadProps","__spreadValues","getNgZoneOptions","ENVIRONMENT_INITIALIZER","ngZoneChangeDetectionScheduler","inject","NgZoneChangeDetectionScheduler","service","ZoneStablePendingTask","ZONELESS_SCHEDULER_DISABLED","SCHEDULE_IN_ROOT_ZONE","SCHEDULE_IN_ROOT_ZONE_DEFAULT","INTERNAL_APPLICATION_ERROR_HANDLER","zone","injector","EnvironmentInjector","userErrorHandler","e","ErrorHandler","getNgZoneOptions","options","ZoneStablePendingTask","Subscription","inject","NgZone","PendingTasksInternal","task","__ngFactoryType__","ɵɵdefineInjectable","ChangeDetectionSchedulerImpl","inject","INTERNAL_APPLICATION_ERROR_HANDLER","ApplicationRef","PendingTasksInternal","NgZone","ZONELESS_ENABLED","TracingService","ZONELESS_SCHEDULER_DISABLED","Subscription","angularZoneInstanceIdProperty","SCHEDULE_IN_ROOT_ZONE","NoopNgZone","source","force","scheduleCallback","scheduleCallbackWithMicrotask","scheduleCallbackWithRafRace","task","e","taskId","__ngFactoryType__","ɵɵdefineInjectable","provideZonelessChangeDetection","performanceMarkFeature","makeEnvironmentProviders","ChangeDetectionScheduler","getGlobalLocale","DEFAULT_LOCALE_ID","LOCALE_ID","InjectionToken","untracked","nonReactiveReadsFn","computed","computation","options","createComputed","EffectRefImpl","SIGNAL","node","Property","parseCache","get","element","set","element","actionMap","Property","getParsed","text","parseCache","setParsed","parsed","EventType","MOUSE_SPECIAL_EVENT_TYPES","BUBBLE_EVENT_TYPES","CAPTURE_EVENT_TYPES","isCaptureEventType","eventType","getBrowserEventType","eventType","EventType","addEventListener","element","handler","passive","capture","isCaptureEventType","options","removeEventListener","info","preventDefault","isMac","isMiddleClick","isModifiedClickEvent","isMouseSpecialEvent","type","related","createMouseSpecialEvent","target","copy","property","key","value","isIos","EventContractContainer","getHandler","i","Char","getEventType","eventInfo","setEventType","getEvent","setEvent","event","getTargetElement","setTargetElement","targetElement","getContainer","setContainer","container","getTimestamp","setTimestamp","timestamp","getAction","setAction","actionName","actionElement","unsetAction","getActionElement","actionInfo","getIsReplay","setIsReplay","replay","getResolved","setResolved","resolved","cloneEventInfo","createEventInfoFromParameters","action","isReplay","a11yClickKey","EventInfoWrapper","_EventInfoWrapper","EMPTY_ACTION_MAP","REGEXP_SEMICOLON","DEFAULT_EVENT_TYPE","ActionResolver","syntheticMouseEventSupport","clickModSupport","parentNode","currentTarget","copiedEvent","owner","Property","actionMap","get","jsactionAttribute","Attribute","set","getParsed","values","idx","colon","hasColon","setParsed","updateEventInfoForA11yClick","preventDefaultForA11yClick","populateClickOnlyAction","Restriction","Dispatcher","dispatchDelegate","actionResolver","eventReplayer","eventInfoWrapper","shouldPreventDefaultBeforeDispatching","PROPAGATION_STOPPED_SYMBOL","EventPhase","PREVENT_DEFAULT_ERROR_MESSAGE","COMPOSED_PATH_ERROR_MESSAGE","EventDispatcher","dispatchDelegate","clickModSupport","ActionResolver","Dispatcher","eventInfoWrapper","eventInfo","prepareEventForReplay","prepareEventForBubbling","prepareEventForDispatch","isCaptureEventType","propagationStopped","event","originalStopPropagation","stopPropagation","PROPAGATION_STOPPED_SYMBOL","patchEventInstance","target","originalPreventDefault","EventPhase","PREVENT_DEFAULT_ERROR_MESSAGE","currentTarget","property","value","configurable","registerDispatcher$1","eventContract","dispatcher","Restriction","getQueuedEventInfos","earlyJsactionData","removeAllEventListeners","earlyJsactionData","removeEventListeners","container","eventTypes","earlyEventHandler","capture","i","MOUSE_SPECIAL_SUPPORT","EventContract","containerManager","eventType","event","eventInfo","createEventInfoFromParameters","setIsReplay","prefixedEventType","passive","MOUSE_SPECIAL_EVENT_TYPES","eventHandler","browserEventType","getBrowserEventType","element","earlyEventInfos","earlyEventInfo","j","cloneEventInfo","setEventType","dispatcher","restriction","getAppScopedQueuedEventInfos","appId","dataContainer","getQueuedEventInfos","clearAppScopedEarlyEventContract","appId","dataContainer","REQUIRED_UNSET_VALUE","INPUT_SIGNAL_NODE","__spreadProps","__spreadValues","SIGNAL_NODE","node","value","signalSetFn","createInputSignal","initialValue","options","node","INPUT_SIGNAL_NODE","inputValueFn","producerAccessed","REQUIRED_UNSET_VALUE","message","RuntimeError","SIGNAL","HostAttributeToken","attributeName","ɵɵinjectAttribute","HOST_TAG_NAME","InjectionToken","flags","tNode","getCurrentTNode","RuntimeError","inputFunction","initialValue","opts","createInputSignal","inputRequiredFunction","REQUIRED_UNSET_VALUE","input","PLATFORM_DESTROY_LISTENERS","InjectionToken","ENABLE_ROOT_COMPONENT_BOOTSTRAP","isApplicationBootstrapConfig","config","bootstrap","envInjector","ngZone","NgZone","exceptionHandler","INTERNAL_APPLICATION_ERROR_HANDLER","onErrorSubscription","destroyListener","onPlatformDestroyListeners","remove","_callAndReportToErrorHandler","pendingTasks","PendingTasksInternal","taskId","initStatus","ApplicationInitStatus","localeId","LOCALE_ID","DEFAULT_LOCALE_ID","setLocaleId","ApplicationRef","appRef","moduleBootstrapImpl","_callAndReportToErrorHandler","errorHandler","ngZone","callback","result","isPromise","e","_platformInjector","createPlatformInjector","providers","name","Injector","INJECTOR_SCOPE","PLATFORM_DESTROY_LISTENERS","_platformInjector","createOrReusePlatformInjector","providers","_platformInjector","injector","createPlatformInjector","publishSignalConfiguration","runPlatformInitializers","runPlatformInitializers","injector","inits","PLATFORM_INITIALIZER","runInInjectionContext","init","ChangeDetectorRef","injectChangeDetectorRef","flags","createViewRef","getCurrentTNode","getLView","tNode","lView","isPipe","isComponentHost","componentView","getComponentLViewByIndex","ViewRef","hostComponentView","DECLARATION_COMPONENT_VIEW","DefaultIterableDifferFactory","obj","isListLikeIterable","trackByFn","DefaultIterableDiffer","trackByIdentity","index","item","fn","record","nextIt","nextRemove","addRemoveOffset","moveOffsets","getPreviousIndex","adjPreviousIndex","currentIndex","localMovePreviousIndex","localCurrentIndex","i","offset","previousIndex","collection","RuntimeError","mayBeDirty","itemTrackBy","iterateListLike","previousRecord","IterableChangeRecord_","reinsertRecord","nextRecord","prevRecord","prev","next","_DuplicateMap","toIndex","trackById","_DuplicateItemRecordList","atOrAfterIndex","key","duplicates","recordList","moveOffset","defaultIterableDiffersFactory","IterableDiffers","DefaultIterableDifferFactory","ɵɵdefineInjectable","factories","parent","copied","SkipSelf","Optional","iterable","factory","f","RuntimeError","internalCreateApplication","config","profiler","rootComponent","appProviders","platformProviders","platformInjector","createOrReusePlatformInjector","allAppProviders","internalProvideZoneChangeDetection","ChangeDetectionScheduler","ChangeDetectionSchedulerImpl","errorHandlerEnvironmentInitializer","adapter","EnvironmentNgModuleRefAdapter","bootstrap","e","appsWithEventReplay","EAGER_CONTENT_LISTENERS_KEY","blockEventQueue","shouldEnableEventReplay","injector","IS_EVENT_REPLAY_ENABLED","EVENT_REPLAY_ENABLED_DEFAULT","withEventReplay","providers","isEnabled","appId","inject","APP_ID","performanceMarkFeature","ENVIRONMENT_INITIALIZER","appRef","ApplicationRef","jsActionMap","JSACTION_BLOCK_ELEMENT_MAP","enableStashEventListenerImpl","clearStashFn","setStashFn","rEl","eventName","listenerFn","sharedStashFunction","sharedMapFunction","APP_BOOTSTRAP_LISTENER","clearAppScopedEarlyEventContract","eventContractDetails","JSACTION_EVENT_CONTRACT","initEventReplay","removeListeners","eventContract","isIncrementalHydrationEnabled","eventDelegation","earlyJsactionData","EventContract","EventContractContainer","et","eventInfos","getAppScopedQueuedEventInfos","dispatcher","EventDispatcher","event","invokeRegisteredReplayListeners","registerDispatcher$1","invokeRegisteredReplayListeners","injector","event","currentTarget","blockName","DEFER_BLOCK_SSR_ID_ATTRIBUTE","hydrateAndInvokeBlockListeners","EventPhase","invokeListeners","blockEventQueue","triggerHydrationFromBlockName","replayQueuedBlockEvents","hydratedBlocks","queue","hydrated","isHydrationSupportEnabled","enableHydrationRuntimeSupport","isHydrationSupportEnabled","enableRetrieveHydrationInfoImpl","enableLocateOrCreateElementNodeImpl","enableLocateOrCreateTextNodeImpl","enableLocateOrCreateElementContainerNodeImpl","enableLocateOrCreateContainerAnchorImpl","enableLocateOrCreateContainerRefImpl","enableFindMatchingDehydratedViewImpl","enableApplyRootElementTransformImpl","whenStableWithTimeout","appRef","withDomHydration","providers","IS_HYDRATION_DOM_REUSE_ENABLED","isEnabled","inject","TransferState","NGH_DATA_KEY","performanceMarkFeature","ENVIRONMENT_INITIALIZER","setIsI18nHydrationSupportEnabled","verifySsrContentsIntegrity","getDocument","enableHydrationRuntimeSupport","PRESERVE_HOST_CONTENT","APP_BOOTSTRAP_LISTENER","appRef","ApplicationRef","whenStableWithTimeout","cleanupDehydratedViews","makeEnvironmentProviders","booleanAttribute","value","reflectComponentType","component","componentDef","getComponentDef","factory","ComponentFactory","_DOM","getDOM","setRootDomAdapter","adapter","DomAdapter","PlatformLocation","relativePosition","__ngFactoryType__","ɵɵdefineInjectable","inject","BrowserPlatformLocation","LOCATION_INITIALIZED","InjectionToken","DOCUMENT","fn","window","newPath","state","title","url","joinWithSlash","start","end","stripTrailingSlash","pathEndIdx","normalizeQueryParams","params","LocationStrategy","PathLocationStrategy","APP_BASE_HREF","_platformLocation","href","internal","includeHash","pathname","hash","queryParams","externalUrl","ɵɵinject","Location","Subject","locationStrategy","baseHref","_stripOrigin","_stripIndexHtml","ev","path","query","_stripBasePath","v","fnIndex","onNext","onThrow","onReturn","createLocation","basePath","strippedUrl","HashLocationStrategy","LocationStrategy","_platformLocation","_baseHref","fn","includeHash","path","internal","url","joinWithSlash","state","title","queryParams","normalizeQueryParams","relativePosition","__ngFactoryType__","ɵɵinject","PlatformLocation","APP_BASE_HREF","ɵɵdefineInjectable","NgForOfContext","$implicit","ngForOf","index","count","NgForOf","fn","_viewContainer","_template","_differs","value","changes","viewContainer","item","adjustedPreviousIndex","currentIndex","view","applyViewChange","i","ilen","context","record","viewRef","dir","ctx","__ngFactoryType__","ɵɵdirectiveInject","ViewContainerRef","TemplateRef","IterableDiffers","ɵɵdefineDirective","NgIf","NgIfContext","_viewContainer","templateRef","condition","assertTemplate","dir","ctx","__ngFactoryType__","ɵɵdirectiveInject","ViewContainerRef","TemplateRef","ɵɵdefineDirective","property","RuntimeError","parseCookieValue","cookieStr","name","cookie","eqIndex","cookieName","cookieValue","XhrFactory","PLATFORM_BROWSER_ID","ViewportScroller","ɵɵdefineInjectable","BrowserViewportScroller","inject","DOCUMENT","document","window","offset","position","options","__spreadProps","__spreadValues","target","elSelected","findAnchorFromDocument","scrollRestoration","formatRuntimeError","el","rect","left","top","documentResult","treeWalker","currentNode","shadowRoot","result","EVENT_MANAGER_PLUGINS","InjectionToken","EventManager","plugins","_zone","plugin","element","eventName","handler","options","RuntimeError","__ngFactoryType__","ɵɵinject","NgZone","ɵɵdefineInjectable","EventManagerPlugin","_doc","APP_ID_ATTRIBUTE_NAME","removeElements","elements","createStyleElement","style","doc","styleElement","addServerStyles","appId","inline","external","createLinkElement","url","linkElement","SharedStylesHost","nonce","platformId","styles","urls","value","usages","creator","record","host","hostNode","DOCUMENT","APP_ID","CSP_NONCE","PLATFORM_ID","NAMESPACE_URIS","COMPONENT_REGEX","COMPONENT_VARIABLE","HOST_ATTR","CONTENT_ATTR","REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT","REMOVE_STYLES_ON_COMPONENT_DESTROY","InjectionToken","shimContentAttribute","componentShortId","COMPONENT_REGEX","shimHostAttribute","shimStylesContent","compId","styles","s","DomRendererFactory2","eventManager","sharedStylesHost","appId","removeStylesOnCompDestroy","doc","platformId","ngZone","nonce","tracingService","DefaultDomRenderer2","element","type","renderer","EmulatedEncapsulationDomRenderer2","NoneEncapsulationDomRenderer","rendererByCompId","platformIsServer","ViewEncapsulation","ShadowDomRenderer","componentId","__ngFactoryType__","ɵɵinject","EventManager","SharedStylesHost","APP_ID","REMOVE_STYLES_ON_COMPONENT_DESTROY","DOCUMENT","PLATFORM_ID","NgZone","CSP_NONCE","TracingService","ɵɵdefineInjectable","name","namespace","NAMESPACE_URIS","value","parent","newChild","isTemplateNode","refChild","_parent","oldChild","selectorOrNode","preserveContent","el","RuntimeError","node","namespaceUri","style","flags","RendererStyleFlags2","target","event","callback","options","getDOM","wrappedCallback","eventHandler","isTemplateNode","node","ShadowDomRenderer","DefaultDomRenderer2","eventManager","sharedStylesHost","hostEl","component","doc","ngZone","nonce","platformIsServer","tracingService","styles","shimStylesContent","style","styleEl","styleUrls","styleUrl","linkEl","createLinkElement","parent","newChild","refChild","_parent","oldChild","NoneEncapsulationDomRenderer","removeStylesOnCompDestroy","compId","EmulatedEncapsulationDomRenderer2","appId","shimContentAttribute","shimHostAttribute","element","name","el","BrowserDomAdapter","_BrowserDomAdapter","DomAdapter","setRootDomAdapter","el","evt","listener","options","node","tagName","doc","target","href","getBaseElementHref","relativePath","baseElement","name","parseCookieValue","url","BrowserXhr","__ngFactoryType__","ɵɵdefineInjectable","DomEventsPlugin","EventManagerPlugin","doc","eventName","element","handler","options","target","callback","ɵɵinject","DOCUMENT","MODIFIER_KEYS","_keyMap","MODIFIER_KEY_GETTERS","event","KeyEventsPlugin","parsedEvent","outsideHandler","getDOM","parts","domEventName","key","fullKey","codeIX","modifierName","index","result","fullKeyCode","keycode","modifierGetter","zone","keyName","bootstrapApplication","rootComponent","config","__spreadValues","createProvidersConfig","internalCreateApplication","createProvidersConfig","options","BROWSER_MODULE_PROVIDERS","INTERNAL_BROWSER_PLATFORM_PROVIDERS","initDomAdapter","BrowserDomAdapter","errorHandler","ErrorHandler","_document","setDocument","INTERNAL_BROWSER_PLATFORM_PROVIDERS","PLATFORM_ID","PLATFORM_BROWSER_ID","PLATFORM_INITIALIZER","DOCUMENT","BROWSER_MODULE_PROVIDERS","INJECTOR_SCOPE","ErrorHandler","errorHandler","EVENT_MANAGER_PLUGINS","DomEventsPlugin","DOCUMENT","KeyEventsPlugin","DomRendererFactory2","SharedStylesHost","EventManager","RendererFactory2","XhrFactory","BrowserXhr","HttpHandler","HttpBackend","HttpHeaders","_HttpHeaders","headers","line","index","name","value","values","lcName","update","other","key","clone","base","toDelete","existing","headerValues","fn","HttpUrlEncodingCodec","key","standardEncoding","value","paramParser","rawParams","codec","map","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","s","t","valueToString","HttpParams","_HttpParams","options","RuntimeError","values","res","params","updates","_value","eKey","update","clone","base","idx","HttpContext","token","value","mightHaveBody","method","isArrayBuffer","isBlob","isFormData","isUrlSearchParams","CONTENT_TYPE_HEADER","ACCEPT_HEADER","X_REQUEST_URL_HEADER","TEXT_CONTENT_TYPE","JSON_CONTENT_TYPE","ACCEPT_HEADER_VALUE","HttpRequest","_HttpRequest","url","third","fourth","options","HttpHeaders","HttpParams","params","qIdx","sep","update","responseType","keepalive","priority","cache","mode","redirect","credentials","transferCache","timeout","body","withCredentials","reportProgress","headers","context","name","param","HttpEventType","HttpResponseBase","init","defaultStatus","defaultStatusText","HttpHeaderResponse","_HttpHeaderResponse","HttpResponse","_HttpResponse","HttpErrorResponse","HTTP_STATUS_CODE_OK","HTTP_STATUS_CODE_NO_CONTENT","addBody","options","body","HttpClient","handler","first","url","req","HttpRequest","headers","HttpHeaders","params","HttpParams","events$","of","concatMap","res$","filter","event","HttpResponse","map","res","RuntimeError","callbackParam","__ngFactoryType__","ɵɵinject","HttpHandler","ɵɵdefineInjectable","XSSI_PREFIX$1","getResponseUrl$1","response","xRequestUrl","X_REQUEST_URL_HEADER","FETCH_BACKEND","InjectionToken","FetchBackend","inject","FetchFactory","args","NgZone","DestroyRef","request","Observable","observer","aborter","noop","error","HttpErrorResponse","timeoutId","signal","init","fetchPromise","__spreadValues","silenceSuperfluousUnhandledPromiseRejection","HttpEventType","statusText","status","HttpHeaderResponse","contentLength","chunks","reader","receivedLength","decoder","partialText","reqZone","canceled","done","value","reportProgress","chunksAll","contentType","CONTENT_TYPE_HEADER","HTTP_STATUS_CODE_OK","binContent","text","e","credentials","name","values","ACCEPT_HEADER","ACCEPT_HEADER_VALUE","detectedType","totalLength","position","chunk","silenceSuperfluousUnhandledPromiseRejection","promise","noop","interceptorChainEndFn","req","finalHandlerFn","chainedInterceptorFn","chainTailFn","interceptorFn","injector","initialRequest","finalHandlerFn","runInInjectionContext","downstreamRequest","HTTP_INTERCEPTOR_FNS","InjectionToken","HTTP_ROOT_INTERCEPTOR_FNS","REQUESTS_CONTRIBUTE_TO_STABILITY","HttpInterceptorHandler","HttpHandler","inject","PendingTasks","REQUESTS_CONTRIBUTE_TO_STABILITY","backend","injector","initialRequest","dedupedInterceptorFns","HTTP_INTERCEPTOR_FNS","HTTP_ROOT_INTERCEPTOR_FNS","nextSequencedFn","interceptorFn","chainedInterceptorFn","interceptorChainEndFn","removeTask","downstreamRequest","finalize","__ngFactoryType__","ɵɵinject","HttpBackend","EnvironmentInjector","ɵɵdefineInjectable","XSSI_PREFIX","X_REQUEST_URL_REGEXP","X_REQUEST_URL_HEADER","getResponseUrl","xhr","HttpXhrBackend","xhrFactory","req","RuntimeError","of","switchMap","Observable","observer","xhr","name","values","ACCEPT_HEADER","ACCEPT_HEADER_VALUE","CONTENT_TYPE_HEADER","detectedType","responseType","reqBody","headerResponse","partialFromXhr","statusText","headers","HttpHeaders","url","getResponseUrl","HttpHeaderResponse","onLoad","status","body","HTTP_STATUS_CODE_NO_CONTENT","HTTP_STATUS_CODE_OK","ok","originalBody","XSSI_PREFIX","error","HttpResponse","HttpErrorResponse","onError","res","onTimeout","_","sentHeaders","onDownProgress","event","progressEvent","HttpEventType","onUpProgress","progress","__ngFactoryType__","ɵɵinject","XhrFactory","ɵɵdefineInjectable","XSRF_ENABLED","InjectionToken","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","cookieName","cookieString","parseCookieValue","DOCUMENT","xsrfInterceptorFn","next","lcUrl","inject","token","headerName","HttpFeatureKind","makeHttpFeature","kind","providers","provideHttpClient","features","HttpClient","HttpXhrBackend","HttpInterceptorHandler","HttpHandler","HttpBackend","inject","FETCH_BACKEND","HTTP_INTERCEPTOR_FNS","xsrfInterceptorFn","XSRF_ENABLED","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","feature","makeEnvironmentProviders","withFetch","makeHttpFeature","HttpFeatureKind","FetchBackend","FETCH_BACKEND","HttpBackend","HTTP_TRANSFER_CACHE_ORIGIN_MAP","InjectionToken","BODY","HEADERS","STATUS","STATUS_TEXT","REQ_URL","RESPONSE_TYPE","CACHE_OPTIONS","ALLOWED_METHODS","transferCacheInterceptorFn","req","next","_a","inject","isCacheActive","globalOptions","__objRest","requestOptions","requestMethod","hasAuthHeaders","transferState","TransferState","RuntimeError","requestUrl","storeKey","makeCacheKey","response","headersToInclude","undecodedBody","responseType","httpHeaders","status","statusText","url","body","headers","HttpHeaders","of","HttpResponse","sortAndConcatParams","params","k","makeCacheKey","request","mappedRequestUrl","method","responseType","encodedParams","serializedBody","key","hash","generateHash","value","char","withHttpTransferCache","cacheOptions","CACHE_OPTIONS","performanceMarkFeature","__spreadValues","HTTP_ROOT_INTERCEPTOR_FNS","transferCacheInterceptorFn","APP_BOOTSTRAP_LISTENER","appRef","inject","ApplicationRef","cacheState","Title","_doc","newTitle","__ngFactoryType__","ɵɵinject","DOCUMENT","ɵɵdefineInjectable","HydrationFeatureKind","hydrationFeature","ɵkind","ɵproviders","ɵoptions","withEventReplay","hydrationFeature","HydrationFeatureKind","provideClientHydration","features","providers","featuresKind","ɵproviders","ɵkind","hasHttpTransferCacheOptions","HydrationFeatureKind","makeEnvironmentProviders","withDomHydration","withHttpTransferCache","PRIMARY_OUTLET","RouteTitleKey","ParamsAsMap","params","name","v","convertToParamMap","defaultUrlMatcher","segments","segmentGroup","route","parts","posParams","index","part","segment","shallowEqualArrays","a","b","i","shallowEqual","k1","getDataKeys","k2","key","equalArraysOrString","obj","aSorted","bSorted","val","last","wrapIntoObservable","value","isObservable","isPromise","from","of","pathCompareMap","equalSegmentGroups","containsSegmentGroup","paramCompareMap","equalParams","containsParams","containsTree","container","containee","options","matrixParams","equalPath","matrixParamsMatch","c","containsSegmentGroupHelper","containeePaths","current","next","containerPaths","containeeSegment","UrlTree","root","UrlSegmentGroup","queryParams","fragment","DEFAULT_SERIALIZER","children","serializePaths","UrlSegment","path","parameters","serializePath","equalSegments","as","bs","mapChildrenIntoArray","fn","res","childOutlet","child","UrlSerializer","__ngFactoryType__","ɵɵdefineInjectable","DefaultUrlSerializer","url","p","UrlParser","tree","serializeSegment","query","serializeQueryParams","encodeUriFragment","primary","k","encodeUriString","s","encodeUriQuery","encodeUriSegment","decode","decodeQuery","serializeMatrixParams","strParams","SEGMENT_RE","matchSegments","str","match","MATRIX_PARAM_SEGMENT_RE","matchMatrixKeySegments","QUERY_PARAM_RE","matchQueryParams","QUERY_PARAM_VALUE_RE","matchUrlQueryParamValue","RuntimeError","valueMatch","decodedKey","decodedVal","currentVal","allowPrimary","outletName","createRoot","rootCandidate","squashSegmentGroup","newChildren","childCandidate","grandChildOutlet","grandChild","mergeTrivialChildren","isUrlTree","createUrlTreeFromSnapshot","relativeTo","commands","relativeToUrlSegmentGroup","createSegmentGroupFromRoute","createUrlTreeFromSegmentGroup","targetGroup","createSegmentGroupFromRouteRecursive","currentRoute","childOutlets","childSnapshot","rootSegmentGroup","nav","computeNavigation","position","findStartingPositionForTargetGroup","newSegmentGroup","updateSegmentGroupChildren","updateSegmentGroup","isMatrixParams","command","isCommandWithOutlets","oldRoot","oldSegmentGroup","qp","replaceSegment","newRoot","oldSegment","newSegment","Navigation","isAbsolute","numberOfDoubleDots","cmdWithOutlet","cmd","cmdIdx","outlets","urlPart","partIndex","Position","processChildren","target","modifier","createPositionApplyingDoubleDots","group","g","ci","dd","getOutlets","startIndex","m","prefixedWith","slicedCommands","createNewSegmentGroup","o","childrenOfEmptyChild","outlet","currentCommandIndex","currentPathIndex","noMatch","curr","compare","paths","createNewSegmentChildren","stringify","IMPERATIVE_NAVIGATION","EventType","RouterEvent","id","NavigationStart","navigationTrigger","restoredState","NavigationEnd","urlAfterRedirects","NavigationCancellationCode","NavigationSkippedCode","NavigationCancel","reason","code","NavigationSkipped","NavigationError","error","RoutesRecognized","state","GuardsCheckStart","GuardsCheckEnd","shouldActivate","ResolveStart","ResolveEnd","RouteConfigLoadStart","RouteConfigLoadEnd","ChildActivationStart","snapshot","ChildActivationEnd","ActivationStart","ActivationEnd","Scroll","routerEvent","anchor","pos","BeforeActivateRoutes","RedirectRequest","navigationBehaviorOptions","isPublicRouterEvent","getOrCreateRouteInjectorIfNeeded","route","currentInjector","createEnvironmentInjector","getOutlet","route","PRIMARY_OUTLET","sortByMatchingOutlets","routes","outletName","sortedConfig","getClosestRouteInjector","snapshot","s","OutletContext","rootInjector","ChildrenOutletContexts","childName","outlet","context","contexts","__ngFactoryType__","ɵɵinject","EnvironmentInjector","ɵɵdefineInjectable","Tree","root","p","findNode","t","findPath","c","cc","value","node","child","path","TreeNode","children","nodeChildrenAsMap","map","RouterState","setRouterState","createEmptyState","rootComponent","createEmptyStateSnapshot","emptyUrl","BehaviorSubject","UrlSegment","emptyParams","emptyData","emptyQueryParams","fragment","activated","ActivatedRoute","ActivatedRouteSnapshot","RouterStateSnapshot","urlSubject","paramsSubject","queryParamsSubject","fragmentSubject","dataSubject","component","futureSnapshot","d","RouteTitleKey","of","convertToParamMap","getInherited","parent","paramsInheritanceStrategy","inherited","routeConfig","__spreadValues","hasStaticTitle","url","params","queryParams","data","resolve","segment","matched","serializeNode","state","advanceActivatedRoute","currentSnapshot","nextSnapshot","shallowEqual","shallowEqualArrays","equalParamsAndUrlSegments","a","b","equalUrlParams","equalSegments","parentsMismatch","config","ROUTER_OUTLET_DATA","InjectionToken","RouterOutlet","EventEmitter","input","inject","ViewContainerRef","ChangeDetectorRef","INPUT_BINDER","changes","firstChange","previousValue","RuntimeError","cmp","ref","activatedRoute","environmentInjector","location","childContexts","injector","OutletInjector","ɵɵdefineDirective","ɵɵNgOnChangesFeature","outletData","token","notFoundValue","RoutedComponentInputBinder","dataSubscription","combineLatest","switchMap","index","mirror","reflectComponentType","templateName","ɵEmptyOutletComponent","ɵɵdefineComponent","rf","ctx","ɵɵelement","standardizeConfig","r","__spreadProps","createRouterState","routeReuseStrategy","curr","prevState","createNode","createOrReuseChildren","detachedRouteHandle","tree","createActivatedRoute","RedirectCommand","redirectTo","navigationBehaviorOptions","NAVIGATION_CANCELING_ERROR","redirectingNavigationError","urlSerializer","redirect","isUrlTree","error","navigationCancelingError","NavigationCancellationCode","message","code","isRedirectingNavigationCancelingError","isNavigationCancelingError","activateRoutes","rootContexts","routeReuseStrategy","forwardEvent","inputBindingEnabled","map","t","ActivateRoutes","futureState","currState","parentContexts","futureRoot","currRoot","advanceActivatedRoute","futureNode","currNode","contexts","children","nodeChildrenAsMap","futureChild","childOutletName","v","parentContext","future","curr","context","route","treeNode","componentRef","c","ActivationEnd","ChildActivationEnd","stored","CanActivate","path","CanDeactivate","component","getAllRouteGuards","getChildRouteGuards","getCanActivateChild","p","canActivateChild","getTokenOrFunctionIdentity","tokenOrFunction","injector","NOT_FOUND","result","isInjectable","futurePath","checks","prevChildren","getRouteGuards","k","deactivateRouteAndItsChildren","shouldRun","shouldRunGuardsAndResolvers","mode","equalPath","shallowEqual","equalParamsAndUrlSegments","r","childName","node","isFunction","isBoolean","isCanLoad","guard","isCanActivate","isCanActivateChild","isCanDeactivate","isCanMatch","isEmptyError","EmptyError","INITIAL_VALUE","prioritizedGuardValue","switchMap","obs","combineLatest","o","take","startWith","results","isRedirect","filter","item","val","isUrlTree","RedirectCommand","checkGuards","mergeMap","targetSnapshot","currentSnapshot","canActivateChecks","canDeactivateChecks","of","__spreadProps","__spreadValues","runCanDeactivateChecks","canDeactivate","runCanActivateChecks","guardsResult","futureRSS","currRSS","from","check","runCanDeactivate","first","futureSnapshot","concatMap","concat","fireChildActivationStart","fireActivationStart","runCanActivateChild","runCanActivate","snapshot","ActivationStart","ChildActivationStart","futureARS","canActivate","canActivateObservables","defer","closestInjector","getClosestRouteInjector","guardVal","runInInjectionContext","wrapIntoObservable","canActivateChildGuardsMapped","_","d","guardsMapped","currARS","canDeactivateObservables","runCanLoadGuards","segments","urlSerializer","canLoad","canLoadObservables","injectionToken","redirectIfUrlTree","pipe","tap","redirectingNavigationError","runCanMatchGuards","canMatch","canMatchObservables","NoMatch","segmentGroup","AbsoluteRedirect","urlTree","noMatch$1","throwError","namedOutletsRedirect","redirectTo","RuntimeError","canLoadFails","navigationCancelingError","NavigationCancellationCode","ApplyRedirects","res","PRIMARY_OUTLET","posParams","getRedirectResult","redirect","UrlTree","newTree","newRoot","redirectToParams","actualParams","sourceName","group","updatedSegments","name","child","UrlSegmentGroup","redirectToSegments","actualSegments","s","redirectToUrlSegment","pos","idx","redirectToFn","queryParams","fragment","routeConfig","url","outlet","params","data","title","noMatch","matchWithChecks","match","getOrCreateRouteInjectorIfNeeded","createWildcardMatchResult","defaultUrlMatcher","parameters","last","split","consumedSegments","slicedSegments","config","containsEmptyPathMatchesWithNamedOutlets","createChildrenForEmptyPaths","containsEmptyPathMatches","addEmptyPathsToChildrenIfNeeded","routes","emptyPathMatch","getOutlet","primarySegment","noLeftoversInUrl","NoLeftoversInUrl","recognize$1","configLoader","rootComponentType","paramsInheritanceStrategy","Recognizer","MAX_ALLOWED_REDIRECTS","e","rootSegmentGroup","rootSnapshot","rootNode","TreeNode","routeState","RouterStateSnapshot","tree","createUrlTreeFromSnapshot","ActivatedRouteSnapshot","catchError","parentRoute","childOutlets","childOutlet","sortedConfig","sortByMatchingOutlets","scan","outletChildren","defaultIfEmpty","mergedChildren","mergeEmptyPathMatches","sortActivatedRouteSnapshots","allowRedirects","x","rawSegment","matched","positionalParamSegments","remainingSegments","getData","getResolve","inherited","getInherited","newSegments","matchResult","childConfig","childInjector","matchedOnOutlet","shouldLoadResult","cfg","nodes","a","b","hasEmptyPathConfig","mergedNodes","duplicateEmptyPathNode","resultNode","mergedNode","n","getData","route","getResolve","recognize","injector","configLoader","rootComponentType","config","serializer","paramsInheritanceStrategy","mergeMap","t","recognize$1","map","targetSnapshot","urlAfterRedirects","__spreadProps","__spreadValues","resolveData","canActivateChecks","of","routesWithResolversToRun","check","routesNeedingDataUpdates","newRoute","flattenRouteTree","routesProcessed","from","concatMap","runResolve","getInherited","tap","takeLast","_","EMPTY","descendants","child","futureARS","futureRSS","resolve","hasStaticTitle","RouteTitleKey","defer","resolveNode","resolvedData","keys","getDataKeys","data","key","getResolver","first","value","RedirectCommand","redirectingNavigationError","DefaultUrlSerializer","catchError","e","isEmptyError","throwError","injectionToken","closestInjector","getClosestRouteInjector","resolver","getTokenOrFunctionIdentity","resolverValue","runInInjectionContext","wrapIntoObservable","switchTap","next","switchMap","v","nextResult","TitleStrategy","snapshot","pageTitle","PRIMARY_OUTLET","__ngFactoryType__","ɵɵdefineInjectable","inject","DefaultTitleStrategy","title","ɵɵinject","Title","ROUTER_CONFIGURATION","InjectionToken","ROUTES","RouterConfigLoader","Compiler","loadRunner","maybeUnwrapDefaultExport","component","finalize","loader","ConnectableObservable","Subject","refCount","parentInjector","loadChildren","compiler","onLoadEndListener","NgModuleFactory$1","factoryOrRoutes","rawRoutes","requireStandaloneComponents","standardizeConfig","isWrappedDefaultExport","input","UrlHandlingStrategy","DefaultUrlHandlingStrategy","url","newUrlPart","wholeUrl","CREATE_VIEW_TRANSITION","VIEW_TRANSITION_OPTIONS","createViewTransition","to","transitionOptions","document","DOCUMENT","resolveViewTransitionStarted","viewTransitionStarted","transition","createRenderPromise","error","onViewTransitionCreated","afterNextRender","NAVIGATION_ERROR_HANDLER","NavigationTransitions","EnvironmentInjector","DestroyRef","UrlSerializer","ChildrenOutletContexts","Location","INPUT_BINDER","onLoadStart","r","RouteConfigLoadStart","onLoadEnd","RouteConfigLoadEnd","request","id","router","BehaviorSubject","filter","overallTransitionState","completedOrAborted","NavigationCancellationCode","urlTransition","onSameUrlNavigation","reason","NavigationSkipped","NavigationSkippedCode","NavigationStart","routesRecognized","RoutesRecognized","extractedUrl","source","restoredState","extras","navStart","createEmptyState","guardsStart","GuardsCheckStart","getAllRouteGuards","checkGuards","evt","guardsEnd","GuardsCheckEnd","resolveStart","ResolveStart","dataResolved","resolveEnd","ResolveEnd","loadComponents","loaders","loadedComponent","combineLatest","defaultIfEmpty","take","currentSnapshot","targetRouterState","createRouterState","BeforeActivateRoutes","activateRoutes","takeUntil","Observable","subscriber","abortSignal","handler","NavigationEnd","err","isNavigationCancelingError","NavigationCancel","isRedirectingNavigationCancelingError","RedirectRequest","navigationError","NavigationError","navigationErrorHandlerResult","message","cancellationCode","ee","code","navCancel","currentBrowserUrl","targetBrowserUrl","isBrowserTriggeredNavigation","IMPERATIVE_NAVIGATION","RouteReuseStrategy","DefaultRouteReuseStrategy","BaseRouteReuseStrategy","detachedTree","future","curr","ɵDefaultRouteReuseStrategy_BaseFactory","ɵɵgetInheritedFactory","StateManager","UrlTree","finalUrl","initialUrl","rawUrl","HistoryStateManager","listener","event","currentTransition","path","replaceUrl","state","currentBrowserPageId","newState","navigation","restoringFromCaughtError","targetPagePosition","navigationId","routerPageId","ɵHistoryStateManager_BaseFactory","afterNextNavigation","action","result","exactMatchOptions","subsetMatchOptions","Router","Console","PendingTasksInternal","Subscription","subscription","currentNavigation","opts","mergedTree","isPublicRouterEvent","stateCopy","urlTree","INTERNAL_APPLICATION_ERROR_HANDLER","commands","navigationExtras","relativeTo","queryParams","fragment","queryParamsHandling","preserveFragment","f","q","relativeToUrlSegmentGroup","relativeToSnapshot","createSegmentGroupFromRoute","createUrlTreeFromSegmentGroup","isUrlTree","validateCommands","matchOptions","options","containsTree","params","priorPromise","reject","promise","res","rej","taskId","i","RuntimeError","RouterLink","signal","untracked","value","Subject","inject","INTERNAL_APPLICATION_ERROR_HANDLER","ROUTER_CONFIGURATION","router","route","tabIndexAttribute","renderer","el","locationStrategy","HostAttributeToken","tagName","createSubcription","dependsOnRouterState","handling","s","NavigationEnd","newTabIndex","changes","commandsOrUrlTree","isUrlTree","button","ctrlKey","shiftKey","altKey","metaKey","urlTree","extras","e","attrName","attrValue","nativeElement","__ngFactoryType__","ɵɵdirectiveInject","Router","ActivatedRoute","ɵɵinjectAttribute","Renderer2","ElementRef","LocationStrategy","ɵɵdefineDirective","rf","ctx","ɵɵlistener","$event","ɵɵattribute","ɵɵsanitizeUrlOrResourceUrl","booleanAttribute","ɵɵNgOnChangesFeature","PreloadingStrategy","RouterPreloader","router","injector","preloadingStrategy","loader","filter","e","NavigationEnd","concatMap","routes","res","route","createEnvironmentInjector","injectorForCurrentRoute","injectorForChildren","from","mergeAll","loadedChildren$","of","recursiveLoadChildren$","mergeMap","config","loadComponent$","__ngFactoryType__","ɵɵinject","Router","EnvironmentInjector","PreloadingStrategy","RouterConfigLoader","ɵɵdefineInjectable","ROUTER_SCROLLER","InjectionToken","RouterScroller","IMPERATIVE_NAVIGATION","urlSerializer","transitions","viewportScroller","zone","options","NavigationStart","NavigationSkipped","NavigationSkippedCode","Scroll","routerEvent","anchor","resolve","ɵɵinvalidFactory","provideRouter","features","makeEnvironmentProviders","ROUTES","ActivatedRoute","rootRoute","APP_BOOTSTRAP_LISTENER","getBootstrapListener","feature","routerFeature","kind","providers","getBootstrapListener","injector","inject","Injector","bootstrappedComponentRef","ref","ApplicationRef","router","Router","bootstrapDone","BOOTSTRAP_DONE","INITIAL_NAVIGATION","ROUTER_PRELOADER","ROUTER_SCROLLER","InjectionToken","Subject","withEnabledBlockingInitialNavigation","providers","provideAppInitializer","LOCATION_INITIALIZED","resolve","afterNextNavigation","NavigationTransitions","of","routerFeature","withDisabledInitialNavigation","ROUTER_PRELOADER","InjectionToken","withPreloading","preloadingStrategy","routerFeature","RouterPreloader","PreloadingStrategy","withComponentInputBinding","routerFeature","RoutedComponentInputBinder","INPUT_BINDER","withViewTransitions","options","performanceMarkFeature","providers","CREATE_VIEW_TRANSITION","createViewTransition","VIEW_TRANSITION_OPTIONS","__spreadValues","ROUTER_PROVIDERS","Location","UrlSerializer","DefaultUrlSerializer","Router","ChildrenOutletContexts","ActivatedRoute","rootRoute","RouterConfigLoader","RouterModule","routes","config","ROUTES","NAVIGATION_ERROR_HANDLER","ROUTER_CONFIGURATION","provideHashLocationStrategy","providePathLocationStrategy","provideRouterScroller","withPreloading","provideInitialNavigation","withComponentInputBinding","withViewTransitions","provideRouterInitializer","__ngFactoryType__","ɵɵdefineNgModule","ɵɵdefineInjector","ROUTER_SCROLLER","viewportScroller","inject","ViewportScroller","zone","NgZone","transitions","NavigationTransitions","urlSerializer","RouterScroller","LocationStrategy","HashLocationStrategy","PathLocationStrategy","provideInitialNavigation","config","withDisabledInitialNavigation","withEnabledBlockingInitialNavigation","ROUTER_INITIALIZER","InjectionToken","provideRouterInitializer","getBootstrapListener","APP_BOOTSTRAP_LISTENER","ApiService","http","baseUrl","constructor","postCommit","body","apiUrl","post","postRestore","ɵɵinject","HttpClient","factory","ɵfac","providedIn","BaseControlValueAccessor","_","_renderer","_elementRef","key","value","fn","isDisabled","__ngFactoryType__","ɵɵdirectiveInject","Renderer2","ElementRef","ɵɵdefineDirective","BuiltInControlValueAccessor","ɵBuiltInControlValueAccessor_BaseFactory","ɵɵgetInheritedFactory","ɵɵInheritDefinitionFeature","NG_VALUE_ACCESSOR","InjectionToken","DEFAULT_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","DefaultValueAccessor","_isAndroid","userAgent","getDOM","COMPOSITION_BUFFER_MODE","InjectionToken","BaseControlValueAccessor","renderer","elementRef","_compositionMode","value","normalizedValue","__ngFactoryType__","ɵɵdirectiveInject","Renderer2","ElementRef","ɵɵdefineDirective","rf","ctx","ɵɵlistener","$event","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","isEmptyInputValue","lengthOrSize","NG_VALIDATORS","NG_ASYNC_VALIDATORS","requiredValidator","control","isEmptyInputValue","nullValidator","control","isPresent","o","toObservable","value","isPromise","from","mergeErrors","arrayOfErrors","res","errors","__spreadValues","executeValidators","validators","validator","isValidatorFn","normalizeValidators","c","compose","presentValidators","composeValidators","composeAsync","observables","forkJoin","map","composeAsyncValidators","mergeValidators","controlValidators","dirValidator","getControlValidators","getControlAsyncValidators","makeValidatorsArray","hasValidator","addValidators","currentValidators","current","v","removeValidators","AbstractControlDirective","fn","errorCode","path","ControlContainer","NgControl","AbstractControlStatus","cd","ngControlStatusHost","ngGroupStatusHost","__spreadProps","NgControlStatus","__ngFactoryType__","ɵɵdirectiveInject","ɵɵdefineDirective","rf","ctx","ɵɵclassProp","ɵɵInheritDefinitionFeature","NgControlStatusGroup","VALID","INVALID","PENDING","DISABLED","ControlEvent","ValueChangeEvent","value","source","PristineChangeEvent","pristine","TouchedChangeEvent","touched","StatusChangeEvent","status","FormSubmittedEvent","FormResetEvent","pickValidators","validatorOrOpts","isOptionsObj","coerceToValidator","validator","composeValidators","pickAsyncValidators","asyncValidator","coerceToAsyncValidator","composeAsyncValidators","assertControlPresent","parent","isGroup","key","controls","RuntimeError","assertAllValuesPresent","control","_","AbstractControl","validators","asyncValidators","validatorFn","asyncValidatorFn","untracked","v","computed","signal","Subject","addValidators","removeValidators","hasValidator","opts","changed","sourceControl","__spreadProps","__spreadValues","skipPristineCheck","changeFn","shouldHaveEmitted","ctrl","emitEvent","obs","toObservable","errors","path","currPath","name","errorCode","x","changedControl","EventEmitter","newPristine","fn","onlySelf","parentDirty","FormGroup","options","controlName","acc","subtreeUpdated","updated","child","cb","condition","initValue","res","CALL_SET_DISABLED_STATE","InjectionToken","setDisabledStateDefault","controlPath","name","parent","setUpControl","control","dir","callSetDisabledState","setUpValidators","setUpViewChangePipeline","setUpModelChangePipeline","setUpBlurPipeline","setUpDisabledChangeHandler","registerOnValidatorChange","validators","onChange","validator","setUpDisabledChangeHandler","control","dir","onDisabledChange","isDisabled","setUpValidators","getControlValidators","mergeValidators","asyncValidators","getControlAsyncValidators","onValidatorChange","setUpViewChangePipeline","control","dir","newValue","updateControl","setUpBlurPipeline","setUpModelChangePipeline","onChange","emitModelEvent","setUpFormContainer","setUpValidators","isPropertyUpdated","changes","viewModel","change","isBuiltInAccessor","valueAccessor","BuiltInControlValueAccessor","syncPendingControls","form","directives","dir","control","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","v","DefaultValueAccessor","formDirectiveProvider$1","ControlContainer","forwardRef","NgForm","resolvedPromise$1","untracked","computed","signal","EventEmitter","validators","asyncValidators","callSetDisabledState","FormGroup","composeValidators","composeAsyncValidators","dir","container","setUpControl","group","setUpFormContainer","value","$event","syncPendingControls","FormSubmittedEvent","FormResetEvent","path","__ngFactoryType__","ɵɵdirectiveInject","NG_VALIDATORS","NG_ASYNC_VALIDATORS","CALL_SET_DISABLED_STATE","ɵɵdefineDirective","rf","ctx","ɵɵlistener","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","removeListItem","list","el","index","isFormControlState","formState","FormControl","AbstractControl","validatorOrOpts","asyncValidator","pickValidators","pickAsyncValidators","isOptionsObj","options","changeFn","condition","fn","cb","formControlBinding$1","NgControl","forwardRef","NgModel","resolvedPromise","FormControl","EventEmitter","parent","validators","asyncValidators","valueAccessors","_changeDetectorRef","callSetDisabledState","selectValueAccessor","changes","oldName","isPropertyUpdated","newValue","setUpControl","value","disabledValue","isDisabled","booleanAttribute","controlName","controlPath","__ngFactoryType__","ɵɵdirectiveInject","ControlContainer","NG_VALIDATORS","NG_ASYNC_VALIDATORS","NG_VALUE_ACCESSOR","ChangeDetectorRef","CALL_SET_DISABLED_STATE","ɵɵdefineDirective","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ɵNgNoValidate","__ngFactoryType__","ɵɵdefineDirective","AbstractValidatorDirective","nullValidator","changes","input","control","fn","__ngFactoryType__","ɵɵdefineDirective","ɵɵNgOnChangesFeature","REQUIRED_VALIDATOR","NG_VALIDATORS","forwardRef","RequiredValidator","RequiredValidator","AbstractValidatorDirective","booleanAttribute","input","requiredValidator","ɵRequiredValidator_BaseFactory","__ngFactoryType__","ɵɵgetInheritedFactory","ɵɵdefineDirective","rf","ctx","ɵɵattribute","ɵɵProvidersFeature","REQUIRED_VALIDATOR","ɵɵInheritDefinitionFeature","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","CommitComponent","apiService","router","constructor","submit","form","valid","path","value","directoryPath","postCommit","subscribe","response","navigate","state","data","error","status","ɵɵdirectiveInject","ApiService","Router","selectors","standalone","decls","vars","consts","template","rf","ctx","ɵɵlistener","ɵɵrestoreView","_r1","form_r2","ɵɵreference","ɵɵresetView","ɵɵelement","ɵɵtemplate","CommitComponent_div_8_Template","ɵɵadvance","ɵɵproperty","submitted","directoryPath_r3","invalid","HomepageComponent","apiService","router","constructor","inject","Router","callCommit","navigateByUrl","callRestore","ɵɵdirectiveInject","ApiService","selectors","standalone","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵlistener","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","result_r1","ɵɵtemplate","ResultsSuccessComponent_ul_2_li_1_Template","ɵɵproperty","ctx_r1","responseData","results","ResultsSuccessComponent","router","constructor","ngOnInit","history","state","data","ɵɵdirectiveInject","Router","selectors","standalone","decls","vars","consts","template","rf","ctx","ResultsSuccessComponent_ul_2_Template","ResultsSuccessComponent_ng_template_5_Template","ɵɵtemplateRefExtractor","length","noData_r3","ɵɵtextInterpolate1","message","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","result_r1","ɵɵtemplate","ResultsErrorComponent_ul_4_li_1_Template","ɵɵproperty","ctx_r1","responseData","results","ResultsErrorComponent","router","constructor","ngOnInit","history","state","data","ɵɵdirectiveInject","Router","selectors","standalone","decls","vars","consts","template","rf","ctx","ResultsErrorComponent_ul_4_Template","ResultsErrorComponent_ng_template_7_Template","ɵɵtemplateRefExtractor","ɵɵtextInterpolate1","status","length","noData_r3","message","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","RestoreComponent","apiService","router","constructor","submit","form","valid","vcPath","value","destinationPath","paths","postRestore","subscribe","response","navigate","state","data","error","status","ɵɵdirectiveInject","ApiService","Router","selectors","standalone","decls","vars","consts","template","rf","ctx","ɵɵlistener","ɵɵrestoreView","_r1","form_r2","ɵɵreference","ɵɵresetView","ɵɵelement","ɵɵtemplate","RestoreComponent_div_8_Template","RestoreComponent_div_14_Template","ɵɵadvance","ɵɵproperty","submitted","vcPath_r3","invalid","destinationPath_r4","routes","path","component","HomepageComponent","CommitComponent","RestoreComponent","ResultsSuccessComponent","ResultsErrorComponent","redirectTo","appConfig","providers","provideBrowserGlobalErrorListeners","provideZonelessChangeDetection","provideRouter","routes","provideClientHydration","withEventReplay","provideHttpClient","withFetch","App","title","signal","selectors","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","RouterModule","RouterOutlet","RouterLink","encapsulation","bootstrapApplication","App","appConfig","catch","err","console","error"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100]}